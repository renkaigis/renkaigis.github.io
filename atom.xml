<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秋月春风等闲度</title>
  <subtitle>要有最朴素的生活，与最遥远的梦想。即使明日天寒地冻，路远马亡。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-09T07:55:45.252Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>RenKai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb 之 OGNL 表达式、Struts2 值栈与OGNL 特殊符号</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-08-05-JavaWeb-Struts203.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-08-05-JavaWeb-Struts203.html</id>
    <published>2018-08-05T01:32:15.000Z</published>
    <updated>2018-08-09T07:55:45.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/struts20300.png"></div>

<p id="div-border-left-blue">OGNL 表达式  &amp;  Struts2 值栈  &amp;  OGNL 特殊符号<br></p>

<a id="more"></a>
<hr>
<h1 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h1><hr>
<h2 id="OGNL表达式概述（了解）"><a href="#OGNL表达式概述（了解）" class="headerlink" title="OGNL表达式概述（了解）"></a>OGNL表达式概述（了解）</h2><ul>
<li><p>OGNL 是 <code>Object Graphic Navigation Language</code>（对象图导航语言）的缩写</p>
<blockquote>
<p>所谓对象图，即以任意一个对象为根，通过 OGNL 可以访问与这个对象关联的其它对象</p>
<p>通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。</p>
</blockquote>
</li>
<li><p>Struts2 框架使用 <code>OGNL</code> 作为默认的表达式语言</p>
<blockquote>
<p><code>OGNL</code> 是一种比 <code>EL</code> 强大很多倍的语言<br><code>xwork</code> 提供 <code>OGNL</code> 表达式<br><code>ognl-3.0.5.jar</code></p>
</blockquote>
</li>
<li><p>OGNL 提供五大类功能</p>
<blockquote>
<p>支持对象方法调用<br>支持类静态的方法调用和值访问<br>访问 OGNL 上下文（OGNLcontext）和 ActionContext<br>支持赋值操作和表达式串联<br>操作集合对象</p>
</blockquote>
</li>
<li><p>测试的代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 访问对象的方法</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException</span>&#123;</div><div class="line">    OgnlContext context = <span class="keyword">new</span> OgnlContext();</div><div class="line">    <span class="comment">// 获取对象的方法</span></div><div class="line">    Object obj = Ognl.getValue(<span class="string">"'helloworld'.length()"</span>, context, context.getRoot());</div><div class="line">    System.out.println(obj);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取OGNL上下文件的对象</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run3</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException</span>&#123;</div><div class="line">    OgnlContext context = <span class="keyword">new</span> OgnlContext();</div><div class="line">    context.put(<span class="string">"name"</span>, <span class="string">"美美"</span>);</div><div class="line">    <span class="comment">// 获取对象的方法</span></div><div class="line">    Object obj = Ognl.getValue(<span class="string">"#name"</span>, context, context.getRoot());</div><div class="line">    System.out.println(obj);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 从root栈获取值</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException</span>&#123;</div><div class="line">    OgnlContext context = <span class="keyword">new</span> OgnlContext();</div><div class="line">    Customer c = <span class="keyword">new</span> Customer();</div><div class="line">    c.setCust_name(<span class="string">"haha"</span>);</div><div class="line">    context.setRoot(c);</div><div class="line">    String name = (String) Ognl.getValue(<span class="string">"cust_name"</span>, context, context.getRoot());</div><div class="line">    System.out.println(name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自己测试的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.renkaigis;</div><div class="line"></div><div class="line"><span class="keyword">import</span> ognl.Ognl;</div><div class="line"><span class="keyword">import</span> ognl.OgnlContext;</div><div class="line"><span class="keyword">import</span> ognl.OgnlException;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 演示 OGNL 表达式</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException </span>&#123;</div><div class="line">        <span class="comment">// 上下文对象</span></div><div class="line">        OgnlContext context = <span class="keyword">new</span> OgnlContext();</div><div class="line">        <span class="comment">// 获取到根对象</span></div><div class="line">        Object root = context.getRoot();</div><div class="line">        <span class="comment">// 存储数据</span></div><div class="line">        context.put(<span class="string">"name"</span>, <span class="string">"美美"</span>);</div><div class="line">        <span class="comment">// 获取值，注意表达式写法</span></div><div class="line">        Object value = Ognl.getValue(<span class="string">"#name"</span>, context, root);</div><div class="line">        <span class="comment">// 调用方法</span></div><div class="line">        <span class="comment">//Object value = Ognl.getValue("'haha'.length()", context, root);</span></div><div class="line">        System.out.println(value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在-Struts2-框架中使用-OGNL-表达式"><a href="#在-Struts2-框架中使用-OGNL-表达式" class="headerlink" title="在 Struts2 框架中使用 OGNL 表达式"></a>在 Struts2 框架中使用 OGNL 表达式</h2><p>1）. Struts2 引入了 <code>OGNL</code> 表达式，主要是在 <code>JSP</code> 页面中获取值栈中的值</p>
<p>2）. 具体在 Struts2 中怎么使用呢？如下步骤</p>
<blockquote>
<p>需要先在 JSP 页面中引入 <code>Struts2</code> 的标签库</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用 <code>Struts2</code> 提供的标签中的标签</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"OGNL表达式"</span>/&gt;</div></pre></td></tr></table></figure>
<p>3）. 在 JSP 页面使用 <code>OGNL</code> 表达式</p>
<blockquote>
<p>访问对象方法</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"'hello'.length()"</span>/&gt;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Struts2-框架的值栈"><a href="#Struts2-框架的值栈" class="headerlink" title="Struts2 框架的值栈"></a>Struts2 框架的值栈</h1><hr>
<h2 id="值栈的概述"><a href="#值栈的概述" class="headerlink" title="值栈的概述"></a>值栈的概述</h2><ul>
<li><p>值栈就相当于 <code>Struts2</code> 框架的数据的中转站，向值栈存入一些数据。从值栈中获取到数据。</p>
</li>
<li><p><code>ValueStack</code> 是 struts2 提供一个接口，实现类 <code>OgnlValueStack</code> —- 值栈对象 （<code>OGNL</code> 是从值栈中获取数据的 ）</p>
</li>
<li><p><code>Action</code> 是多例的，有一个请求，创建 <code>Action</code> 实例，创建一个 <code>ActionContext</code> 对象，代表的是 <code>Action</code> 的上下文对象，还会创建一个 <code>ValueStack</code> 对象。</p>
</li>
<li><p>每个 <code>Action</code> 实例都有一个 <code>ValueStack</code> 对象 （一个请求对应一个 <code>ValueStack</code> 对象 ）</p>
</li>
<li><p>在其中保存当前 <code>Action</code> 对象和其他相关对象</p>
</li>
<li><p>Struts 框架把 <code>ValueStack</code> 对象保存在名为 <code>“struts.valueStack”</code> 的请求属性中，<code>request</code> 中 （值栈对象是 <code>request</code> 一个属性）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不常用</span></div><div class="line">ValueStack vs = (ValueStack)request.getAttribute(<span class="string">"struts.valueStack"</span>);</div></pre></td></tr></table></figure>
<h2 id="值栈的内部结构"><a href="#值栈的内部结构" class="headerlink" title="值栈的内部结构"></a>值栈的内部结构</h2><h3 id="值栈由两部分组成"><a href="#值栈由两部分组成" class="headerlink" title="值栈由两部分组成"></a>值栈由两部分组成</h3><ul>
<li><p>值栈由以下两部分组成：</p>
<blockquote>
<p><strong>root</strong>  ———— Struts 把动作和相关对象压入 <code>ObjectStack</code> 中–<code>List</code><br><strong>context</strong>  ———— Struts 把各种各样的映射关系(一些 <code>Map</code> 类型的对象) 压入 <code>ContextMap</code> 中</p>
</blockquote>
</li>
<li><p>Struts 会默认把下面这些映射压入 <code>ContextMap</code>（context）中</p>
</li>
<li><p>注意：<code>request</code> 代表的是 <code>Map</code> 集合的 <code>key</code> 值，<code>value</code> 的值其实也是一个 <code>Map</code> 集合。</p>
<blockquote>
<p><strong>parameters</strong>：该 Map 中包含当前请求的请求参数  ?name=xxx&amp;password=123<br><strong>request</strong>：该 Map 中包含当前 <code>request</code> 对象中的所有属性<br><strong>session</strong>：该 Map 中包含当前 <code>session</code> 对象中的所有属性<br><strong>application</strong>：该 Map 中包含当前 <code>application</code>  对象中的所有属性<br><strong>attr</strong>：该 Map 按如下顺序来检索某个属性: <code>request</code>, <code>session</code>, <code>application</code></p>
</blockquote>
</li>
<li><p>ValueStack 中存在 <code>root</code> 属性 (CompoundRoot) 、 <code>context</code> 属性 （OgnlContext ）</p>
<blockquote>
<p><code>CompoundRoot</code> 就是 <code>ArrayList</code><br><code>OgnlContext</code> 就是 <code>Map</code></p>
</blockquote>
</li>
<li><p>context 对应 Map 引入 root 对象 </p>
<blockquote>
<p>context 中还存在 request、 session、application、 attr、 parameters 对象引用 </p>
</blockquote>
</li>
</ul>
<p><strong><em>操作值栈默认指操作 root 元素</em></strong></p>
<h3 id="OGNL-获取值"><a href="#OGNL-获取值" class="headerlink" title="OGNL 获取值"></a>OGNL 获取值</h3><p>如果从 <code>root</code> 栈中获取值，OGNL 表达式默认情况下不能写 <code>#</code> 号：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"表达式"</span>/&gt;</div></pre></td></tr></table></figure>
<p>如果从 <code>context</code> 栈中获取值，OGNL 表达式默认需要加 <code>#</code> 号（访问 request、 session、application、 attr、 parameters 对象数据必须写）：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"#表达式"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="值栈的创建和-ActionContext-对象的关系"><a href="#值栈的创建和-ActionContext-对象的关系" class="headerlink" title="值栈的创建和 ActionContext 对象的关系"></a>值栈的创建和 ActionContext 对象的关系</h2><ul>
<li><p>值栈对象是 <code>请求时创建</code> 的</p>
</li>
<li><p><code>ActionContext</code> 是绑定到当前的线程上，那么在每个拦截器或者 <code>Action</code> 中获取到的 <code>ActionContext</code> 是同一个。</p>
</li>
<li><p><code>ActionContext</code> 中存在一个 <code>Map</code> 集合，该 <code>Map</code> 集合和 <code>ValueStack</code> 的 <code>context</code> 是同一个地址。</p>
</li>
<li><p><code>ActionContext</code> 中可以获取到 <code>ValueStack</code> 的引用，以后再开发，使用 <code>ActionContext</code> 来获取到值栈对象</p>
</li>
</ul>
<h2 id="获取值栈对象"><a href="#获取值栈对象" class="headerlink" title="获取值栈对象"></a>获取值栈对象</h2><ul>
<li>获得值栈对象，有三种方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ValueStack vs1 = (ValueStack) ServletActionContext.getRequest().getAttribute(<span class="string">"struts.valueStack"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ValueStack vs2 = (ValueStack) ServletActionContext.getRequest().getAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY);</div></pre></td></tr></table></figure>
<p><strong>★重要</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取值栈对象，首先要获取 ActionContext 对象</span></div><div class="line">ValueStack vs3 = ActionContext.getContext().getValueStack();</div></pre></td></tr></table></figure>
<h2 id="向值栈中保存数据"><a href="#向值栈中保存数据" class="headerlink" title="向值栈中保存数据"></a>向值栈中保存数据</h2><p>向值栈保存数据 （主要针对 <code>root</code> 栈）</p>
<h3 id="push-方法"><a href="#push-方法" class="headerlink" title="push 方法"></a>push 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 向栈顶压入对象</span></div><div class="line">valueStack.push(Object obj);</div></pre></td></tr></table></figure>
<ul>
<li><code>push</code> 方法的底层调用 <code>root</code> 对象的 <code>push</code> 方法（把元素添加到 0 位置）</li>
</ul>
<h3 id="set-方法"><a href="#set-方法" class="headerlink" title="set 方法"></a>set 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 向栈顶压入 map 集合，把 key 和 obj 存入到 map 集合中</span></div><div class="line">valueStack.set(String key, Object obj);</div></pre></td></tr></table></figure>
<ul>
<li>源码获取 <code>map</code> 集合（<code>map</code> 有可能是已经存在的，有可能是新创建的），把 <code>map</code> 集合压入到栈顶，再把数据存入到 <code>map</code> 集合中。</li>
</ul>
<blockquote>
<p>在 jsp 中，通过 <code>&lt;s:debug/&gt;</code> 查看值栈的内容</p>
</blockquote>
<h2 id="从值栈中获取值"><a href="#从值栈中获取值" class="headerlink" title="从值栈中获取值"></a>从值栈中获取值</h2><h3 id="一些小细节"><a href="#一些小细节" class="headerlink" title="一些小细节"></a>一些小细节</h3><blockquote>
<p>访问 <code>root</code> 中的数据不需要 <code>#</code><br>访问 <code>context</code> 中的对象数据，要加 <code>#</code><br>如果向 <code>root</code> 中存入对象的话，优先使用 <code>push</code> 方法。<br>如果向 <code>root</code> 中存入集合的话，优先要使用 <code>set</code> 方法。</p>
</blockquote>
<h3 id="在-OgnlContext-中获取数据"><a href="#在-OgnlContext-中获取数据" class="headerlink" title="在 OgnlContext 中获取数据"></a>在 OgnlContext 中获取数据</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">request:&lt;s:property value=<span class="string">"#request.username"</span>/&gt;</div><div class="line">session:&lt;s:property value=<span class="string">"#session.username"</span>/&gt;</div><div class="line">application:&lt;s:property value=<span class="string">"#application.username"</span>/&gt;</div><div class="line">attr:&lt;s:property value=<span class="string">"#attr.username"</span>/&gt;</div><div class="line">parameters:&lt;s:property value=<span class="string">"#parameters.cid"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>前提 <code>struts.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--压栈和取值--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"save"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.ValueStack1Action"</span> <span class="attr">method</span>=<span class="string">"save"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo2/vs.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<p><em>注意：</em>jsp 中首先要引入标签库 <code>&lt;%@taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt;</code>，在 jsp 中使用 <code>&lt;s:debug&gt;&lt;/s:debug&gt;</code> 可以查看值栈的内容。</p>
<p>以下代码演示 <code>压栈和取值</code>：</p>
<h4 id="push-字符串"><a href="#push-字符串" class="headerlink" title="push 字符串"></a>push 字符串</h4><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取值栈</span></div><div class="line">ValueStack vs = ActionContext.getContext().getValueStack();</div><div class="line"><span class="comment">// 压栈</span></div><div class="line">vs.push(<span class="string">"小灰"</span>);</div><div class="line"><span class="keyword">return</span> SUCCESS;</div></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%--获取栈顶的值--%&gt;</div><div class="line">&lt;s:property value=<span class="string">"[0].top"</span>/&gt;</div></pre></td></tr></table></figure>
<h4 id="set-字符串"><a href="#set-字符串" class="headerlink" title="set 字符串"></a>set 字符串</h4><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vs.set(<span class="string">"msg"</span>, <span class="string">"小瓜"</span>);</div></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%--栈顶是 map 集合，通过 key 来获取值--%&gt;</div><div class="line">&lt;s:property value=<span class="string">"[0].top.msg"</span>/&gt;</div></pre></td></tr></table></figure>
<h4 id="获取对象（push）"><a href="#获取对象（push）" class="headerlink" title="获取对象（push）"></a>获取对象（push）</h4><p>首先需要创建一个 JavaBean：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.renkaigis.demo2;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 User 对象</span></div><div class="line">User user = <span class="keyword">new</span> User(<span class="string">"小雷"</span>, <span class="string">"123"</span>);</div><div class="line"><span class="comment">// 压栈</span></div><div class="line">vs.push(user);</div></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%--栈顶放 user 对象--%&gt;</div><div class="line">&lt;s:property value=<span class="string">"[0].top.username"</span>/&gt;</div><div class="line">&lt;%--[<span class="number">0</span>].top 是可以省略的--%&gt;</div><div class="line">&lt;s:property value=<span class="string">"username"</span>/&gt;</div></pre></td></tr></table></figure>
<h4 id="获取对象（set）"><a href="#获取对象（set）" class="headerlink" title="获取对象（set）"></a>获取对象（set）</h4><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vs.set(<span class="string">"user"</span>, user);</div></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"[0].top.user.username"</span>/&gt;</div><div class="line">&lt;%--省略关键字--%&gt;</div><div class="line">&lt;s:property value=<span class="string">"user.username"</span>/&gt;</div></pre></td></tr></table></figure>
<h4 id="List-集合（push）"><a href="#List-集合（push）" class="headerlink" title="List 集合（push）"></a>List 集合（push）</h4><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;User&gt; ulist = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">ulist.add(<span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="string">"123"</span>));</div><div class="line">ulist.add(<span class="keyword">new</span> User(<span class="string">"李四"</span>, <span class="string">"456"</span>));</div><div class="line">ulist.add(<span class="keyword">new</span> User(<span class="string">"王五"</span>, <span class="string">"789"</span>));</div><div class="line"><span class="comment">// 把 ulist 压栈</span></div><div class="line">vs.push(ulist);</div></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"[0].top[0].username"</span>/&gt;</div><div class="line">&lt;s:property value=<span class="string">"[0].top[1].username"</span>/&gt;</div></pre></td></tr></table></figure>
<h4 id="List-集合（set）"><a href="#List-集合（set）" class="headerlink" title="List 集合（set）"></a>List 集合（set）</h4><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vs.set(<span class="string">"ulist"</span>, ulist);</div></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value="ulist[0].username"/&gt;</div><div class="line"></div><div class="line">&lt;%--迭代的标签</div><div class="line">    属性：</div><div class="line">        vaule   表示要迭代的集合，需要从值栈中获取</div><div class="line">        var     迭代过程中，遍历的对象（可写可不写）</div><div class="line">            * var 编写上，把迭代产生的对象默认压入到 context 栈中，取值要加 #</div><div class="line">            * var 不编写，默认把迭代产生的对象压入到 root 栈中</div><div class="line">--%&gt;</div><div class="line">&lt;s:iterator value="ulist" var="user"&gt;</div><div class="line">    &lt;s:property value="#user.username"/&gt;</div><div class="line">&lt;/s:iterator&gt;</div><div class="line"></div><div class="line">&lt;%--不编写 var--%&gt;</div><div class="line">&lt;s:iterator value="ulist"&gt;</div><div class="line">    &lt;s:property value="username"/&gt;</div><div class="line">&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h4 id="从-context-栈中获取值"><a href="#从-context-栈中获取值" class="headerlink" title="从 context 栈中获取值"></a>从 context 栈中获取值</h4><p>底层已经封装了 request、session 等对象，操作的就是 map 集合</p>
<h5 id="request"><a href="#request" class="headerlink" title="request"></a>request</h5><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HttpServletRequest request = ServletActionContext.getRequest();</div><div class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"小鬼"</span>);</div></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"#request.msg"</span>/&gt;</div></pre></td></tr></table></figure>
<h5 id="session"><a href="#session" class="headerlink" title="session"></a>session</h5><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.getSession().setAttribute(<span class="string">"msg"</span>, <span class="string">"小卡"</span>);</div></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"#session.msg"</span>/&gt;</div></pre></td></tr></table></figure>
<h5 id="parameters"><a href="#parameters" class="headerlink" title="parameters"></a>parameters</h5><p>路径传值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:9090/save.action?id=10</span></div></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"#parameters.id"</span>/&gt;</div></pre></td></tr></table></figure>
<h5 id="attr"><a href="#attr" class="headerlink" title="attr"></a>attr</h5><p>attr 从最小域开始找</p>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"#attr.msg"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="EL-表达式也能获取到值栈中的数据"><a href="#EL-表达式也能获取到值栈中的数据" class="headerlink" title="EL 表达式也能获取到值栈中的数据"></a>EL 表达式也能获取到值栈中的数据</h2><h3 id="EL-获取值栈的值"><a href="#EL-获取值栈的值" class="headerlink" title="EL 获取值栈的值"></a>EL 获取值栈的值</h3><p>获取上面的 ulist：</p>
<ol>
<li><p>首先导包：<code>jstl.jar</code>、<code>standard.jar</code></p>
</li>
<li><p>引标签库：<code>&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%--在 jsp 页面上使用 EL 和 JSTL 标签库来取值--%&gt;</div><div class="line">&lt;c:forEach items=&quot;$&#123;ulist&#125;&quot; var=&quot;user&quot;&gt;</div><div class="line">    $&#123;user.username&#125; -- $&#123;user.password&#125;</div><div class="line">&lt;/c:forEach&gt;</div></pre></td></tr></table></figure>
<h3 id="为什么-EL-也能访问值栈中的数据？"><a href="#为什么-EL-也能访问值栈中的数据？" class="headerlink" title="为什么 EL 也能访问值栈中的数据？"></a>为什么 EL 也能访问值栈中的数据？</h3><p>因为 Struts2 底层使用了装饰者模式，对 <code>getAttribute()</code> 方法进行了增强。</p>
<p><code>StrutsPreparedAndExecuteFilter</code> 的 <code>doFilter</code> 代码中 <code>request = prepare.wrapRequest(request);</code></p>
<blockquote>
<p>对 <code>Request</code>对象进行了包装<br><code>StrutsRequestWrapper</code> 增强了 <code>request</code> 的 <code>getAttribute()</code> 方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Object attribute = <span class="keyword">super</span>.getAttribute(s);</div><div class="line"><span class="keyword">if</span> (attribute == <span class="keyword">null</span>) &#123;</div><div class="line">	attribute = stack.findValue(s);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>访问 <code>request</code> 范围的数据时，如果数据找不到，会去值栈中找<br><code>request</code> 对象具备访问值栈数据的能力（查找 <code>root</code> 的数据）</p>
</blockquote>
<hr>
<h1 id="OGNL-表达式的特殊符号"><a href="#OGNL-表达式的特殊符号" class="headerlink" title="OGNL 表达式的特殊符号"></a>OGNL 表达式的特殊符号</h1><hr>
<h2 id="符号的用法-★"><a href="#符号的用法-★" class="headerlink" title="# 符号的用法 ★"></a># 符号的用法 ★</h2><h3 id="获得-contextMap-中的数据"><a href="#获得-contextMap-中的数据" class="headerlink" title="获得 contextMap 中的数据"></a>获得 contextMap 中的数据</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"#request.name"</span>/&gt;</div><div class="line">&lt;s:property value=<span class="string">"#session.name"</span>/&gt;</div><div class="line">&lt;s:property value=<span class="string">"#application.name"</span>/&gt;</div><div class="line">&lt;s:property value=<span class="string">"#attr.name"</span>/&gt;</div><div class="line">&lt;s:property value=<span class="string">"#parameters.id"</span>/&gt;</div><div class="line">&lt;s:property value=<span class="string">"#parameters.name"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="可以构建一个-map-集合"><a href="#可以构建一个-map-集合" class="headerlink" title="# 可以构建一个 map 集合"></a># 可以构建一个 map 集合</h3><p>以构建表单为例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;h3&gt;编写表单&lt;/h3&gt;</div><div class="line">&lt;form action="" method="post"&gt;</div><div class="line">    性别：&lt;input type="radio" name="sex"/&gt;男&lt;input type="radio" name="sex"/&gt;女</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;h3&gt;使用 Struts2 UI 标签方式&lt;/h3&gt;</div><div class="line">&lt;s:form action="" method="post"&gt;</div><div class="line">    性别：&lt;s:radio name="sex" list="&#123;'男','女'&#125;"/&gt;</div><div class="line">&lt;/s:form&gt;</div></pre></td></tr></table></figure>
<p>使用 <code>#</code> 构建 map 集合：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;h3&gt;编写表单&lt;/h3&gt;</div><div class="line">&lt;form action="" method="post"&gt;</div><div class="line">    性别：&lt;input type="radio" name="sex" value="1"/&gt;男&lt;input type="radio" name="sex" value="2"/&gt;女</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;h3&gt;使用 Struts2 UI 标签方式&lt;/h3&gt;</div><div class="line">&lt;s:form action="" method="post"&gt;</div><div class="line">    性别：&lt;s:radio name="sex" list="#&#123;'1':'男','2:':'女'&#125;"/&gt;</div><div class="line">&lt;/s:form&gt;</div></pre></td></tr></table></figure>
<h2 id="符号的用法"><a href="#符号的用法" class="headerlink" title="% 符号的用法"></a>% 符号的用法</h2><h3 id="强制字符串解析成-OGNL-表达式"><a href="#强制字符串解析成-OGNL-表达式" class="headerlink" title="强制字符串解析成 OGNL 表达式"></a>强制字符串解析成 OGNL 表达式</h3><blockquote>
<p>例如：在 <code>request</code> 域中存入值，然后在文本框（<code>&lt;s:textfield&gt;</code>）中取值，现在到 <code>value</code> 上。</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:textfield value=<span class="string">"%&#123;#request.msg&#125;"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="中的值用-‘’-引起来，此时不再是-ognl-表达式，而是普通的字符串"><a href="#中的值用-‘’-引起来，此时不再是-ognl-表达式，而是普通的字符串" class="headerlink" title="{ } 中的值用 ‘’ 引起来，此时不再是 ognl 表达式，而是普通的字符串"></a>{ } 中的值用 ‘’ 引起来，此时不再是 ognl 表达式，而是普通的字符串</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"%&#123;'#request.msg'&#125;"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="符号的用法-1"><a href="#符号的用法-1" class="headerlink" title="$ 符号的用法"></a>$ 符号的用法</h2><ul>
<li>在配置文件中可以使用 OGNL 表达式，例如：文件下载的配置文件。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"download1"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.DownloadAction"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"stream"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>$&#123;contentType&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentDisposition"</span>&gt;</span>attachment;filename=$&#123;downFilename&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/struts20300.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;OGNL 表达式  &amp;amp;  Struts2 值栈  &amp;amp;  OGNL 特殊符号&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Struts2" scheme="http://yoursite.com/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Struts2 中的 Servlet API、封装数据、拦截器</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-07-22-JavaWeb-Struts202.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-07-22-JavaWeb-Struts202.html</id>
    <published>2018-07-22T09:56:43.000Z</published>
    <updated>2018-08-06T06:34:20.299Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/struts20200.png"></div>

<p id="div-border-left-blue">Servlet API、封装数据、拦截器。</p>

<a id="more"></a>
<hr>
<h1 id="Struts2-框架中-Servlet-API-的使用"><a href="#Struts2-框架中-Servlet-API-的使用" class="headerlink" title="Struts2 框架中 Servlet API 的使用"></a>Struts2 框架中 Servlet API 的使用</h1><hr>
<h2 id="Servlet-的-API"><a href="#Servlet-的-API" class="headerlink" title="Servlet 的 API"></a>Servlet 的 API</h2><p>在 <code>Action</code> 类中也可以获取到 <code>Servlet</code> 一些常用的 <code>API</code></p>
<ul>
<li>案例需求：提供 <code>JSP</code> 的表单页面的数据，在 <code>Action</code> 中使用 <code>Servlet</code> 的 <code>API</code> 接收到，然后保存到三个域对象中，最后再显示到 <code>JSP</code> 的页面上。</li>
</ul>
<p>提供 JSP 注册的页面：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123; pageContext.request.contextPath &#125;/xxx.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">	姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">	密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="完全解耦合的方式"><a href="#完全解耦合的方式" class="headerlink" title="完全解耦合的方式"></a>完全解耦合的方式</h3><p>为了避免与 <code>Servlet API</code> 耦合在一起，方便 Action 类做单元测试，Struts2 对 <code>HttpServletRequest</code>、<code>HttpSession</code> 和 <code>ServletContext</code> 进行了封装，构造了三个 Map 对象来替代这三种对象，在 Action 中，直接使用 <code>HttpServletRequest</code>、<code>HttpSession</code>、<code>ServletContext</code> 对应的 Map 对象来保存和读取数据。</p>
<p>要获得这三个Map对象，可以使用 <code>com.opensymphony.xwork2.ActionContext类</code></p>
<p><code>ActionContext</code> ： <code>请求上下文</code></p>
<p>常用的方法如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">static ActionContext getContext()  										-- 获取 ActionContext 对象实例</div><div class="line">java.util.Map&lt;java.lang.String,java.lang.Object&gt; getParameters()  		-- 获取请求参数，相当于 request.getParameterMap();</div><div class="line">java.util.Map&lt;java.lang.String,java.lang.Object&gt; getSession()  			-- 获取的代表 session 域的 Map 集合，就相当于操作 session 域。</div><div class="line">java.util.Map&lt;java.lang.String,java.lang.Object&gt; getApplication() 		-- 获取代表 application 域的 Map 集合</div><div class="line">void put(java.lang.String key, java.lang.Object value)  					-- 注意：向 request 域中存入值。</div></pre></td></tr></table></figure>
<h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><p><strong>Demo1Action.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 完全解耦合的方式，使用 Servlet 的 API</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 完全解耦合的方式</span></div><div class="line">        ActionContext context = ActionContext.getContext();</div><div class="line">        <span class="comment">// 获取到请求的参数，封装所有请求的参数</span></div><div class="line">        Map&lt;String, Object&gt; map = context.getParameters();</div><div class="line">        <span class="comment">// 遍历获取数据</span></div><div class="line">        Set&lt;String&gt; keys = map.keySet();</div><div class="line">        <span class="keyword">for</span> (String key : keys) &#123;</div><div class="line">            <span class="comment">// 通过 Key，来获取到值</span></div><div class="line">            String[] vals = (String[]) map.get(key);</div><div class="line">            System.out.println(key + <span class="string">":"</span> + Arrays.toString(vals));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 向 request 域中存入值</span></div><div class="line">        context.put(<span class="string">"msg"</span>,<span class="string">"小天"</span>);</div><div class="line">        <span class="comment">// 获取其他 map 集合，并存入数据</span></div><div class="line">        context.getSession().put(<span class="string">"msg"</span>,<span class="string">"小明"</span>);</div><div class="line">        context.getApplication().put(<span class="string">"msg"</span>,<span class="string">"小红"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> SUCCESS;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>JSP 输入页面：</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>完全解耦合方式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123; pageContext.request.contextPath &#125;/demo1Action.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>JSP 跳转页面：</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 EL 表达式获取值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">$&#123;requestScope.msg&#125;</div><div class="line">$&#123;sessionScope.msg&#125;</div><div class="line">$&#123;applicationScope.msg&#125;</div></pre></td></tr></table></figure>
<p><code>struts.xml 配置文件：</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo1"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--完全解耦合的方式--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo1Action"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo1.Demo1Action"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="案例结果："><a href="#案例结果：" class="headerlink" title="案例结果："></a>案例结果：</h4><p>输入信息：</p>
<p><img src="http://image.renkaigis.com/images/JavaWeb/struts20201.png"></p>
<p>跳转并取值：</p>
<p><img src="http://image.renkaigis.com/images/JavaWeb/struts20202.png"></p>
<p>控制台输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">password:[12345]</div><div class="line">username:[renkai]</div></pre></td></tr></table></figure>
<h3 id="使用原生-Servlet-的-API-的方式"><a href="#使用原生-Servlet-的-API-的方式" class="headerlink" title="使用原生 Servlet 的 API 的方式"></a>使用原生 Servlet 的 API 的方式</h3><p>直接访问 <code>Servlet API</code> 将使 <code>Action</code> 类与 <code>Servlet API</code> 耦合在一起，<code>Servlet API</code> 对象均由 <code>Servlet</code> 容器来构造，与这些对象绑定在一起，测试过程中就必须有 <code>Servlet</code> 容器，这样不便于 <code>Action</code> 类的测试，但有时候，确实需要访问这些对象，<code>Struts2</code> 同样提供了直接访问 <code>ServletAPI</code> 对象的方式。</p>
<p>要直接获取 <code>Servlet API</code> 对象可以使用 <code>org.apache.struts2.ServletActionContext</code> 类，该类是 <code>ActionContext</code> 类的子类。</p>
<ul>
<li>具体的方法如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HttpServletRequest request=ServletActionContext.getRequest();</div><div class="line">HttpSession session=request.getSession();</div><div class="line">session.setAttribute(<span class="string">"xxx"</span>,xxx);</div><div class="line">HttpServletResponse response=ServletActionContext.getResponse();</div><div class="line">HttpServletContext application=ServletActionContext.getApplication();</div></pre></td></tr></table></figure>
<h4 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h4><p><strong>Demo2Action.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 原生 Servlet API</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 获取到 request 对象</span></div><div class="line">        HttpServletRequest request = ServletActionContext.getRequest();</div><div class="line">        request.setAttribute(<span class="string">"msg"</span>, <span class="string">"天天"</span>);</div><div class="line">        request.getSession().setAttribute(<span class="string">"msg"</span>, <span class="string">"美美"</span>);</div><div class="line">        ServletActionContext.getServletContext().setAttribute(<span class="string">"msg"</span>, <span class="string">"园园"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 获取 response 对象，可以使用输出流，输出内容</span></div><div class="line">        HttpServletResponse response = ServletActionContext.getResponse();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> SUCCESS;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>JSP 输入页面：</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>ServletCActionContext 类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123; pageContext.request.contextPath &#125;/demo2Action.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>JSP 跳转页面：</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 EL 表达式获取值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">$&#123;requestScope.msg&#125;</div><div class="line">$&#123;sessionScope.msg&#125;</div><div class="line">$&#123;applicationScope.msg&#125;</div></pre></td></tr></table></figure>
<p><code>struts.xml 配置文件：</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--原生 Servlet API 方式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo2Action"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo1.Demo2Action"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="案例结果：-1"><a href="#案例结果：-1" class="headerlink" title="案例结果："></a>案例结果：</h4><p>输入信息：</p>
<p><img src="http://image.renkaigis.com/images/JavaWeb/struts20203.png"></p>
<p>跳转并取值：</p>
<p><img src="http://image.renkaigis.com/images/JavaWeb/struts20204.png"></p>
<hr>
<h1 id="结果类型的跳转"><a href="#结果类型的跳转" class="headerlink" title="结果类型的跳转"></a>结果类型的跳转</h1><hr>
<p>结果页面存在两种方式</p>
<h2 id="全局结果页面"><a href="#全局结果页面" class="headerlink" title="全局结果页面"></a>全局结果页面</h2><p>条件：如果 <code>&lt;package&gt;</code> 包中的一些 <code>action</code> 都返回 <code>success</code>，并且返回的页面都是同一个 <code>JSP</code> 页面，这样就可以配置全局的结果页面。</p>
<p>全局结果页面针对的 <code>当前包</code> 中的所有的 <code>Action</code>，但是如果局部还有结果页面，会 <code>优先局部</code> 的。使用的标签是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo1"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--配置全局的结果页面--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">global-results</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="局部结果页面"><a href="#局部结果页面" class="headerlink" title="局部结果页面"></a>局部结果页面</h2><p>也就是之前一直所使用的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="结果页面的类型"><a href="#结果页面的类型" class="headerlink" title="结果页面的类型"></a>结果页面的类型</h2><ul>
<li>结果页面使用 <code>&lt;result&gt;</code> 标签进行配置，包含两个属性</li>
</ul>
<blockquote>
<p><code>name</code>    – 逻辑视图的名称</p>
<p><code>type</code>    – 跳转的类型，需要掌握一些常用的类型。常见的结果类型去 <code>struts-default.xml</code> 中查找。</p>
</blockquote>
<ul>
<li><code>dispatcher</code>        – 转发，<code>type的默认值</code>。<code>Action---&gt;JSP</code></li>
<li><code>redirect</code>            – 重定向。    <code>Action---&gt;JSP</code></li>
<li><code>chain</code>                – 多个action之间跳转，从一个Action转发到另一个Action。    <code>Action---Action</code></li>
<li><code>redirectAction</code>    – 多个action之间跳转，从一个Action重定向到另一个Action。    <code>Action---Action</code></li>
<li><code>stream</code>            – 文件下载时候使用的</li>
</ul>
<hr>
<h1 id="Struts2-框架的数据封装"><a href="#Struts2-框架的数据封装" class="headerlink" title="Struts2 框架的数据封装"></a>Struts2 框架的数据封装</h1><hr>
<h2 id="数据的封装"><a href="#数据的封装" class="headerlink" title="数据的封装"></a>数据的封装</h2><ul>
<li>作为 <code>MVC</code> 框架，必须要负责解析 <code>HTTP</code> 请求参数，并将其封装到 <code>Model</code> 对象中</li>
<li>封装数据为开发提供了很多方便</li>
<li>Struts2 框架提供了很强大的数据封装的功能，<code>不再需要使用 Servlet 的 API 完成手动封装了</code>！</li>
</ul>
<p>Struts2 中提供了两类数据封装的方式：</p>
<h3 id="第一种方式：属性驱动"><a href="#第一种方式：属性驱动" class="headerlink" title="第一种方式：属性驱动"></a>第一种方式：属性驱动</h3><h4 id="提供对应属性的-set-方法进行数据的封装。"><a href="#提供对应属性的-set-方法进行数据的封装。" class="headerlink" title="提供对应属性的 set 方法进行数据的封装。"></a>提供对应属性的 <code>set</code> 方法进行数据的封装。</h4><ul>
<li><p>表单的哪些属性需要封装数据，那么在对应的 <code>Action</code> 类中提供该属性的 <code>set</code> 方法即可。</p>
</li>
<li><p>表单中的数据提交，最终找到 <code>Action</code> 类中的 <code>setXxx</code> 的方法，最后赋值给全局变量。</p>
</li>
<li><p>注意0：<code>Struts2</code> 的框架采用拦截器完成数据的封装。</p>
</li>
<li><p>注意1：这种方式不是特别好：因为属性特别多，提供特别多的set方法，而且还需要手动将数据存入到对象中。</p>
</li>
<li><p>注意2：这种情况下，<code>Action</code> 类就相当于一个 <code>JavaBean</code>，就没有体现出 <code>MVC</code> 的思想，<code>Action</code> 类又封装数据，又接收请求处理，耦合性较高。</p>
</li>
</ul>
<p><strong>Action:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> String username;</div><div class="line"><span class="keyword">private</span> String password;</div><div class="line"><span class="keyword">private</span> Integer age;</div><div class="line"><span class="comment">// 只需要提供 set 方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.username = username;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.password = password;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>struts.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--属性驱动的方式--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist1"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Regist1Action"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>jsp页面</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;h3&gt;属性驱动的方式&lt;/h3&gt;</div><div class="line">&lt;form action="$&#123; pageContext.request.contextPath &#125;/regist1.action" method="post"&gt;</div><div class="line">    姓名:&lt;input type="text" name="username" /&gt;&lt;br/&gt;</div><div class="line">    密码:&lt;input type="password" name="password" /&gt;&lt;br/&gt;</div><div class="line">    年龄:&lt;input type="text" name="age" /&gt;&lt;br/&gt;</div><div class="line">    &lt;input type="submit" value="注册" /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">renkai 12 25</div></pre></td></tr></table></figure>
<h4 id="属性驱动：把数据封装到-JavaBean-对象中"><a href="#属性驱动：把数据封装到-JavaBean-对象中" class="headerlink" title="属性驱动：把数据封装到 JavaBean 对象中"></a>属性驱动：把数据封装到 JavaBean 对象中</h4><blockquote>
<p>在页面上，使用 <code>OGNL</code> 表达式进行数据封装。</p>
</blockquote>
<ul>
<li><p>在页面中使用 <code>OGNL</code> 表达式进行数据的封装，就可以直接把属性封装到某一个 <code>JavaBean</code> 的对象中。</p>
</li>
<li><p>在页面中定义一个 <code>JavaBean</code>，并且提供 <code>set</code> 方法：例如：<code>private User user;</code></p>
</li>
<li><p>页面中的编写发生了变化，需要使用 <code>OGNL</code> 的方式，表单中的写法：<code>&lt;input type=&quot;text&quot; name=&quot;user.username&quot;&gt;</code></p>
</li>
<li><p>注意：只提供一个 <code>set</code> 方法还不够，必须还需要提供 <code>user</code> 属性的 <code>get</code> 和 <code>set</code> 方法！！！</p>
</li>
</ul>
<p><strong>原理：</strong> 先调用 <code>get</code> 方法，判断一下是否有 <code>user</code> 对象的实例对象，如果没有，调用 <code>set</code> 方法把拦截器创建的对象注入进来。</p>
<p><strong>Action:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 需要提供 get 和 set 方法</span></div><div class="line"><span class="keyword">private</span> User user;</div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> user;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.user = user;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>struts.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--属性驱动的方式，把数据封装到 JavaBean 的对象中--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist2"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Regist2Action"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>jsp页面</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;h3&gt;属性驱动的方式（把数据封装到 JavaBean 的对象中）&lt;/h3&gt;</div><div class="line">&lt;%--页面的编写发生了变化，使用的是 OGNL 表达式的写法--%&gt;</div><div class="line">&lt;form action="$&#123; pageContext.request.contextPath &#125;/regist2.action" method="post"&gt;</div><div class="line">    姓名:&lt;input type="text" name="user.username" /&gt;&lt;br/&gt;</div><div class="line">    密码:&lt;input type="password" name="user.password" /&gt;&lt;br/&gt;</div><div class="line">    年龄:&lt;input type="text" name="user.age" /&gt;&lt;br/&gt;</div><div class="line">    &lt;input type="submit" value="注册" /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">User&#123;username=&apos;renkai&apos;, password=&apos;12&apos;, age=25&#125;</div></pre></td></tr></table></figure>
<h3 id="第二种方式：模型驱动"><a href="#第二种方式：模型驱动" class="headerlink" title="第二种方式：模型驱动"></a>第二种方式：模型驱动</h3><blockquote>
<p>使用模型驱动的方式，也可以把表单中的数据直接封装到一个 <code>JavaBean</code> 的对象中，并且表单的写法和之前的写法没有区别！</p>
<p>编写的页面不需要任何变化，正常编写 <code>name</code> 属性的值</p>
<p>模型驱动的编写步骤：</p>
</blockquote>
<ul>
<li><p>手动实例化 <code>JavaBean</code>，即：<code>private User user = new User();</code></p>
</li>
<li><p>必须实现 <code>ModelDriven&lt;T&gt;</code> 接口，实现 <code>getModel()</code> 的方法，在 <code>getModel()</code> 方法中返回 <code>user</code> 即可！！</p>
</li>
</ul>
<p><strong>Action:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 模型驱动的方式</div><div class="line"> * 需要实现 ModelDriven 接口</div><div class="line"> * 必须要手动实例化对象（需要自己new好）</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regist3Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">// 必须要手动实例化</span></div><div class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</div><div class="line">    <span class="comment">// 获取模型对象</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(user);</div><div class="line">        <span class="keyword">return</span> NONE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>struts.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--模型驱动的方式--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist3"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Regist3Action"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>jsp页面</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;h3&gt;模型驱动的方式&lt;/h3&gt;</div><div class="line">&lt;form action="$&#123; pageContext.request.contextPath &#125;/regist3.action" method="post"&gt;</div><div class="line">    姓名:&lt;input type="text" name="username" /&gt;&lt;br/&gt;</div><div class="line">    密码:&lt;input type="password" name="password" /&gt;&lt;br/&gt;</div><div class="line">    年龄:&lt;input type="text" name="age" /&gt;&lt;br/&gt;</div><div class="line">    &lt;input type="submit" value="注册" /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">User&#123;username=&apos;renkai&apos;, password=&apos;12&apos;, age=25&#125;</div></pre></td></tr></table></figure>
<h3 id="Struts2-把数据封装到集合中"><a href="#Struts2-把数据封装到集合中" class="headerlink" title="Struts2 把数据封装到集合中"></a>Struts2 把数据封装到集合中</h3><p>（默认采用的是属性驱动的方式）</p>
<h4 id="把数据封装到-List-集合中"><a href="#把数据封装到-List-集合中" class="headerlink" title="把数据封装到 List 集合中"></a>把数据封装到 List 集合中</h4><ul>
<li>因为 <code>Collection</code> 接口都会有下标值，所有页面的写法会有一些区别，注意：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"products[0].name"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在 <code>Action</code> 中的写法，需要提供 <code>user</code> 的集合，并且提供 <code>get</code> 和 <code>set</code> 方法。</li>
</ul>
<p><strong>Action:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 属性驱动的方式，把数据封装到List集合中</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regist4Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;User&gt; list;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;User&gt; list)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">for</span> (User user : list) &#123;</div><div class="line">            System.out.println(user);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> NONE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>struts.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--把数据封装到List集合中--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist4"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Regist4Action"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>jsp页面</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;h3&gt;向List集合封装数据（默认情况下，采用的是属性驱动的方式）&lt;/h3&gt;</div><div class="line">&lt;form action="$&#123; pageContext.request.contextPath &#125;/regist4.action" method="post"&gt;</div><div class="line">    姓名:&lt;input type="text" name="list[0].username" /&gt;&lt;br/&gt;</div><div class="line">    密码:&lt;input type="password" name="list[0].password" /&gt;&lt;br/&gt;</div><div class="line">    年龄:&lt;input type="text" name="list[0].age" /&gt;&lt;br/&gt;</div><div class="line"></div><div class="line">    姓名:&lt;input type="text" name="list[1].username" /&gt;&lt;br/&gt;</div><div class="line">    密码:&lt;input type="password" name="list[1].password" /&gt;&lt;br/&gt;</div><div class="line">    年龄:&lt;input type="text" name="list[1].age" /&gt;&lt;br/&gt;</div><div class="line">    &lt;input type="submit" value="注册" /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">User&#123;username=&apos;renkai&apos;, password=&apos;12&apos;, age=25&#125;</div><div class="line">User&#123;username=&apos;xiaomei&apos;, password=&apos;34&apos;, age=22&#125;</div></pre></td></tr></table></figure>
<h4 id="把数据封装到-Ma-中"><a href="#把数据封装到-Ma-中" class="headerlink" title="把数据封装到 Ma 中"></a>把数据封装到 Ma 中</h4><ul>
<li><code>Map</code> 集合是键值对的形式，页面的写法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['one'].name"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong>里面的 <code>key</code> 值可以自定义。</p>
<ul>
<li>Action中提供 <code>map</code> 集合，并且提供 <code>get</code> 和 <code>set</code> 方法</li>
</ul>
<p><strong>Action:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 属性驱动的方式，把数据封装到map集合中</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regist5Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; map;</div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, User&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, User&gt; map)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.map = map;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(map);</div><div class="line">        <span class="keyword">return</span> NONE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>struts.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--把数据封装到map集合中--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist5"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Regist5Action"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>jsp页面</strong>：这里的 <code>key</code> 值自定义。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;h3&gt;向map集合封装数据（默认情况下，采用的是属性驱动的方式）&lt;/h3&gt;</div><div class="line">&lt;form action="$&#123; pageContext.request.contextPath &#125;/regist5.action" method="post"&gt;</div><div class="line">    姓名:&lt;input type="text" name="map['one'].username" /&gt;&lt;br/&gt;</div><div class="line">    密码:&lt;input type="password" name="map['one'].password" /&gt;&lt;br/&gt;</div><div class="line">    年龄:&lt;input type="text" name="map['one'].age" /&gt;&lt;br/&gt;</div><div class="line"></div><div class="line">    姓名:&lt;input type="text" name="map['two'].username" /&gt;&lt;br/&gt;</div><div class="line">    密码:&lt;input type="password" name="map['two'].password" /&gt;&lt;br/&gt;</div><div class="line">    年龄:&lt;input type="text" name="map['two'].age" /&gt;&lt;br/&gt;</div><div class="line">    &lt;input type="submit" value="注册" /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;one=User&#123;username=&apos;renkai&apos;, password=&apos;12&apos;, age=25&#125;, two=User&#123;username=&apos;xiaomei&apos;, password=&apos;34&apos;, age=22&#125;&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Struts2-的拦截器技术"><a href="#Struts2-的拦截器技术" class="headerlink" title="Struts2 的拦截器技术"></a>Struts2 的拦截器技术</h1><hr>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="拦截器概述"><a href="#拦截器概述" class="headerlink" title="拦截器概述"></a>拦截器概述</h3><ul>
<li><p>拦截器就是 <code>AOP</code>（Aspect-Oriented Programming，面向切面编程）的一种实现。（AOP是指用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。）</p>
</li>
<li><p>过滤器：过滤从客服端发送到服务器端请求的。</p>
</li>
<li><p>拦截器：对目标 <code>Action</code> 中的某些方法进行拦截。</p>
</li>
</ul>
<blockquote>
<p>拦截器不能拦截JSP</p>
<p>拦截 <code>Action</code> 中某些方法</p>
</blockquote>
<h3 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h3><p>1）拦截器是基于 <code>JAVA反射机制</code> 的，而过滤器是基于 <code>函数回调</code> 的<br>2）过滤器依赖于Servlet容器，而拦截器不依赖于Servlet容器<br>3）拦截器 <code>只能对Action请求</code> 起作用（Action中的方法），而过滤器可以对 <code>几乎所有的请求</code> 起作用（CSS JSP JS）。</p>
<ul>
<li>拦截器 采用 <code>责任链</code> 模式</li>
</ul>
<blockquote>
<p>在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链</p>
<p>责任链每一个节点，都可以继续调用下一个节点，也可以阻止流程继续执行</p>
</blockquote>
<ul>
<li>在 struts2 中可以定义很多个拦截器，将多个拦截器按照特定顺序组成拦截器栈（顺序调用栈中的每一个拦截器 ）</li>
</ul>
<p><strong>Struts2 框架的核心是拦截器</strong></p>
<h2 id="自定义拦截器和配置"><a href="#自定义拦截器和配置" class="headerlink" title="自定义拦截器和配置"></a>自定义拦截器和配置</h2><h3 id="编写拦截器"><a href="#编写拦截器" class="headerlink" title="编写拦截器"></a>编写拦截器</h3><p>需要实现 <code>Interceptor</code> 接口，实现接口中的三个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// 获取session对象</span></div><div class="line">    User user = (User) ServletActionContext.getRequest().getSession().getAttribute(<span class="string">"existUser"</span>);</div><div class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="comment">// 说明，没有登录，后面就不会执行了</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> invocation.invoke(); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p><strong>注意：</strong> <em>只要引用了自己的拦截器，Struts2 框架默认栈的拦截器就不执行了，必须要手动引入默认栈。</em></p>
<p>需要在 <code>struts.xml</code> 中进行拦截器的配置，配置一共有两种方式</p>
<h4 id="第一种方式：直接引入"><a href="#第一种方式：直接引入" class="headerlink" title="第一种方式：直接引入"></a>第一种方式：直接引入</h4><ul>
<li>在 <code>&lt;package&gt;</code> 包中定义拦截器，出现在 <code>&lt;package&gt;</code> 包的上方</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"DemoInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.interceptor.DemoInterceptor"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在某个 <code>action</code> 中引入拦截器：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo3.UserAction"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 只要是引用自己的拦截器，默认栈的拦截器就不执行了，必须要手动引入默认栈 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"DemoInterceptor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="第二种方式：定义拦截器栈"><a href="#第二种方式：定义拦截器栈" class="headerlink" title="第二种方式：定义拦截器栈"></a>第二种方式：定义拦截器栈</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"DemoInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.interceptor.DemoInterceptor"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 定义拦截器栈 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"DemoInterceptor"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo3.UserAction"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 只要是引用自己的拦截器，默认栈的拦截器就不执行了，必须要手动引入默认栈 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"DemoInterceptor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/struts20200.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;Servlet API、封装数据、拦截器。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Struts2" scheme="http://yoursite.com/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Struts2 快速入门</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-06-27-JavaWeb-Struts201.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-06-27-JavaWeb-Struts201.html</id>
    <published>2018-06-27T13:39:05.000Z</published>
    <updated>2018-06-28T08:57:06.564Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/struts20100.png"></div>

<p id="div-border-left-blue">Struts2 快速入门。</p>

<a id="more"></a>
<hr>
<h1 id="Struts2-框架的概述"><a href="#Struts2-框架的概述" class="headerlink" title="Struts2 框架的概述"></a>Struts2 框架的概述</h1><hr>
<h2 id="Struts2-框架由来"><a href="#Struts2-框架由来" class="headerlink" title="Struts2 框架由来"></a>Struts2 框架由来</h2><ul>
<li><p><code>Struts2</code> 是 <code>Struts1</code> 的下一代产品，是在 <code>struts1</code> 和 <code>WebWork</code> 的技术基础上进行了合并的全新的 <code>Struts2</code> 框架。</p>
</li>
<li><p>其全新的 <code>Struts2</code> 的体系结构与 <code>Struts1</code> 的体系结构差别巨大。</p>
</li>
<li><p><code>Struts2</code> 以 <code>WebWork</code> 为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与 <code>ServletAPI</code> 完全脱离开，所以 <code>Struts2</code> 可以理解为 <code>WebWork</code> 的更新产品。</p>
</li>
<li><p>虽然从 <code>Struts1</code> 到 <code>Struts2</code> 有着太大的变化，但是相对于 <code>WebWork</code> ，<code>Struts2</code> 的变化很小。</p>
</li>
</ul>
<h2 id="Struts2-设计模型"><a href="#Struts2-设计模型" class="headerlink" title="Struts2 设计模型"></a>Struts2 设计模型</h2><p><strong>Struts2 是一个基于 MVC 设计模式的 Web 层框架</strong></p>
<ul>
<li><p><code>MVC</code> 和 JavaEE 的三层结构</p>
</li>
<li><p><code>MVC</code> 设计模式：是由一些网站的开发人员提出来的（<code>Model View Controller</code>）</p>
</li>
<li><p>JavaEE 三层结构：SUN 公司为 EE 开发划分的结构</p>
</li>
</ul>
<h2 id="常见的Web层的框架"><a href="#常见的Web层的框架" class="headerlink" title="常见的Web层的框架"></a>常见的Web层的框架</h2><ul>
<li><p>Struts1</p>
</li>
<li><p>Struts2 <strong>★</strong></p>
</li>
<li><p>Webwork</p>
</li>
<li><p>SpringMVC <strong>★</strong></p>
</li>
</ul>
<h2 id="Web层框架的特点"><a href="#Web层框架的特点" class="headerlink" title="Web层框架的特点"></a>Web层框架的特点</h2><ul>
<li><p>都是一个特点，<code>前端控制器模式</code></p>
</li>
<li><p>记住：<code>前端控制器（核心的控制器）</code></p>
</li>
<li><p><code>Struts2</code> 框架前端的控制器就是 <code>过滤器</code></p>
</li>
</ul>
<hr>
<h1 id="Struts2-快速入门"><a href="#Struts2-快速入门" class="headerlink" title="Struts2 快速入门"></a>Struts2 快速入门</h1><hr>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="创建-WEB-项目"><a href="#创建-WEB-项目" class="headerlink" title="创建 WEB 项目"></a>创建 <code>WEB</code> 项目</h3><p>编写 <code>JSP</code> 的页面，编写超链接，点击超链接发送请求，请求服务器，让服务器的方法去执行！！</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Struts2的入门程序<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123; pageContext.request.contextPath &#125;/hello.action"</span>&gt;</span>Struts2入门程序<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="下载-Struts2-的开发包"><a href="#下载-Struts2-的开发包" class="headerlink" title="下载 Struts2 的开发包"></a>下载 Struts2 的开发包</h3><ul>
<li><a href="https://struts.apache.org/" target="_blank" rel="external">https://struts.apache.org/</a>        – 官网地址</li>
</ul>
<h3 id="解压struts-2-3-24-all-zip包"><a href="#解压struts-2-3-24-all-zip包" class="headerlink" title="解压struts-2.3.24-all.zip包"></a>解压struts-2.3.24-all.zip包</h3><ul>
<li>解压后会看到有包和一些文件，大家需要掌握包相关的信息</li>
</ul>
<blockquote>
<p><code>apps</code>    – Struts2 框架提供了一些应用<br><code>libs</code>    – Struts2 框架开发的 jar 包<br><code>docs</code>    – Struts2 框架开发文档<br><code>src</code>    – Struts2 框架源码</p>
</blockquote>
<h3 id="引入需要开发的-jar-包"><a href="#引入需要开发的-jar-包" class="headerlink" title="引入需要开发的 jar 包"></a>引入需要开发的 jar 包</h3><ul>
<li><code>Struts2</code> 框架的开发 <code>jar</code> 包非常多，但是不是所有都是必须要引入的，有一些必须要导入的 <code>jar</code> 包，这些 <code>jar</code> 包可以从 <code>Struts2</code> 框架提供的<code>应用</code>中找到。</li>
<li>可以打开 <code>apps</code> 目录，然后找到 <code>struts2-blank.war</code> 应用。<code>war 包和</code>zip` 包的压缩格式是一样的，所以可以修改后缀名，解压。</li>
<li>找到解压后的应用，打开 <code>WEB-INF/lib</code> 目录下所以的 <code>jar</code> 包。复制到工程中，就可以了。</li>
</ul>
<h3 id="配置-Struts2-的前端控制器"><a href="#配置-Struts2-的前端控制器" class="headerlink" title="配置 Struts2 的前端控制器"></a>配置 Struts2 的前端控制器</h3><p>注意：这一步是必须要做的操作，这是 <code>Struts2</code> 核心的控制器。</p>
<ul>
<li><code>Struts2</code> 的前端控制器就是一个过滤器，那么过滤器相关知识咱们都学习过，需要在 <code>web.xml</code> 中进行配置。</li>
<li>前端控制器的类的路径和名称：<code>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</code></li>
<li>具体配置如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="编写-Action-类"><a href="#编写-Action-类" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h2><p><code>Action</code> 类是动作类，是 <code>Struts2</code> <code>处理请求</code>，<code>封装数据</code>，<code>响应页面</code>的<code>核心控制器</code>。需要自己编写。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Struts2 框架都是用 Action 类处理用户的请求</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Action 类中的方法签名是有要求的，必须这么做</div><div class="line">     * public 共有的</div><div class="line">     * 必须有返回值，必须 String 类型</div><div class="line">     * 方法名称可以是任意的，但是不能有参数列表</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello Struts2!"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="编写-Struts-的配置文件"><a href="#编写-Struts-的配置文件" class="headerlink" title="编写 Struts 的配置文件"></a>编写 Struts 的配置文件</h2><ol>
<li><p>配置文件名称是 <code>struts.xml</code>（名称必须是 <code>struts.xml</code>）</p>
</li>
<li><p>在 <code>src</code> 下引入 <code>struts.xml</code> 配置文件（配置文件的路径必须是在 <code>src</code> 的目录下）</p>
</li>
<li><p>配置如下</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></div><div class="line">        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</div><div class="line">        "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--配置 Action--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action.HelloAction"</span> <span class="attr">method</span>=<span class="string">"sayHello"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="编写跳转"><a href="#编写跳转" class="headerlink" title="编写跳转"></a>编写跳转</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action.HelloAction"</span> <span class="attr">method</span>=<span class="string">"sayHello"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--配置跳转的页面，路径的写法。在 Struts2 框架中，不管是转发还是重定向，都不用写项目名--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"OK"</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="总结-Struts2-执行流程"><a href="#总结-Struts2-执行流程" class="headerlink" title="总结 Struts2 执行流程"></a>总结 Struts2 执行流程</h2><h3 id="执行的流程"><a href="#执行的流程" class="headerlink" title="执行的流程"></a>执行的流程</h3><ul>
<li><p>编写的页面，点击超链接，请求提交到服务器端。</p>
</li>
<li><p>请求会先经过 <code>Struts2</code> 的核心过滤器（<code>StrutsPrepareAndExecuteFilter</code>）</p>
</li>
</ul>
<blockquote>
<p>过滤器的功能是完成了一部分代码功能<br>就是一系列的拦截器执行了，进行一些处理工作。<br>可以在 <code>struts-default.xml</code> 配置文件中看到有很多的拦截器。</p>
</blockquote>
<ul>
<li>拦截器执行完后，会根据 <code>struts.xml</code> 的配置文件找到请求路径，找到具体的类，通过<code>反射</code>的方式让方法执行。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>JSP页面 –&gt; <code>StrutsPrepereAndExecuteFilter</code>过滤器 –&gt; 执行一系列拦截器（完成了部分代码） –&gt; 执行到目标 <code>Action</code> –&gt; 返回字符串 –&gt; 结果页面（<code>result</code>） –&gt; 页面跳转</li>
</ul>
<hr>
<h2 id="Struts2-框架配置文件加载的顺序"><a href="#Struts2-框架配置文件加载的顺序" class="headerlink" title="Struts2 框架配置文件加载的顺序"></a>Struts2 框架配置文件加载的顺序</h2><h3 id="Struts2-框架的核心是-StrutsPrepareAndExecuteFilter-过滤器"><a href="#Struts2-框架的核心是-StrutsPrepareAndExecuteFilter-过滤器" class="headerlink" title="Struts2 框架的核心是 StrutsPrepareAndExecuteFilter 过滤器"></a>Struts2 框架的核心是 <code>StrutsPrepareAndExecuteFilter</code> 过滤器</h3><h4 id="该过滤器有两个功能"><a href="#该过滤器有两个功能" class="headerlink" title="该过滤器有两个功能"></a>该过滤器有两个功能</h4><ul>
<li>Prepare        – 预处理，加载核心的配置文件</li>
<li>Execute        – 执行，让部分拦截器执行</li>
</ul>
<h4 id="StrutsPrepareAndExecuteFilter-过滤器会加载哪些配置文件呢？"><a href="#StrutsPrepareAndExecuteFilter-过滤器会加载哪些配置文件呢？" class="headerlink" title="StrutsPrepareAndExecuteFilter  过滤器会加载哪些配置文件呢？"></a><code>StrutsPrepareAndExecuteFilter</code>  过滤器会加载哪些配置文件呢？</h4><p>通过源代码可以看到具体加载的配置文件和加载配置文件的顺序</p>
<ul>
<li>init_DefaultProperties();                 – 加载 <code>org/apache/struts2/default.properties</code></li>
<li>init_TraditionalXmlConfigurations();        – 加载 <code>struts-default.xml</code>,<code>struts-plugin.xml</code>,<code>struts.xml</code></li>
<li>init_LegacyStrutsProperties();            – 加载自定义的 <code>struts.properties</code></li>
<li>init_CustomConfigurationProviders();        – 加载用户自定义配置提供者</li>
<li>init_FilterInitParameters() ;                – 加载 <code>web.xml</code></li>
</ul>
<h4 id="重点了解的配置文件"><a href="#重点了解的配置文件" class="headerlink" title="重点了解的配置文件"></a>重点了解的配置文件</h4><ul>
<li>default.properties        – 在 <code>org/apache/struts2/</code> 目录下，代表的是配置的是 <code>Struts2</code> 的常量的值</li>
<li>struts-default.xml        – 在 <code>Struts2</code> 的核心包下，代表的是 <code>Struts2</code> 核心功能的配置（Bean、拦截器、结果类型等）</li>
<li>struts.xml                – 重点中的重点配置，代表 <code>WEB</code> 应用的默认配置，在工作中，基本就配置它就可以了！！（可以配置常量）</li>
<li>web.xml                    – 配置前端控制器（可以配置常量）</li>
</ul>
<p>注意：</p>
<ul>
<li><p>前 3 个配置文件是 <code>struts2</code> 框架的默认配置文件，基本不用修改。</p>
</li>
<li><p>后 3 个配置文件可以允许自己修改 <code>struts2</code> 的常量。但是有一个特点：后加载的配置文件修改的常量的值，会覆盖掉前面修改的常量的值。</p>
</li>
</ul>
<h4 id="总结（重点掌握的配置文件）"><a href="#总结（重点掌握的配置文件）" class="headerlink" title="总结（重点掌握的配置文件）"></a>总结（重点掌握的配置文件）</h4><ul>
<li>先加载 <code>default.properties</code> 文件，在 <code>org/apache/struts2/default.properties</code> 文件，都是常量。</li>
<li>又加载 <code>struts-default.xml</code> 配置文件，在核心的 <code>jar</code> 包最下方，<code>struts2</code> 框架的核心功能都是在该配置文件中配置的。</li>
<li>再加载 <code>struts.xml</code> 的配置文件，在 <code>src</code> 的目录下，代表用户自己配置的配置文件</li>
<li><p>最后加载 <code>web.xml</code> 的配置文件</p>
</li>
<li><p>后加载的配置文件会覆盖掉之前加载的配置文件（在这些配置文件中可以配置常量）</p>
</li>
</ul>
<h4 id="注意一个问题"><a href="#注意一个问题" class="headerlink" title="注意一个问题"></a>注意一个问题</h4><p>哪些配置文件中可以配置常量？</p>
<ul>
<li>default.properties        – 默认值，是不能修改的！！</li>
<li>struts.xml                – 可以配置，开发中基本上都在该配置文件中配置常量</li>
<li>struts.properties            – 可以配置，基本不会在该配置文件中配置</li>
<li><p>web.xml                    – 可以配置，基本不会在该配置文件中配置</p>
</li>
<li><p>后加载的配置文件会覆盖掉之前加载的配置！！</p>
</li>
</ul>
<hr>
<h1 id="struts-xml-配置文件"><a href="#struts-xml-配置文件" class="headerlink" title="struts.xml 配置文件"></a>struts.xml 配置文件</h1><hr>
<h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><h3 id="lt-package-gt-标签"><a href="#lt-package-gt-标签" class="headerlink" title="&lt;package&gt; 标签"></a><code>&lt;package&gt;</code> 标签</h3><p>如果要配置 <code>&lt;Action&gt;</code> 的标签，那么必须要先配置 <code>&lt;package&gt;</code> 标签，代表的包的概念</p>
<p>包含的属性:</p>
<ul>
<li>name                    – 包的名称，要求是唯一的，管理 <code>action</code>配置</li>
<li>extends                – 继承，可以继承其他的包，只要继承了，那么该包就包含了其他包的功能，一般都是继承 <code>struts-default</code></li>
<li>namespace                – 名称空间，一般与 <code>&lt;action&gt;</code> 标签中的 <code>name</code> 属性共同决定访问路径（通俗话：怎么来访问 <code>action</code>），常见的配置如下<blockquote>
<p>namespace=”/“        – 根名称空间<br>namespace=”/aaa”    – 带有名称的名称空间</p>
</blockquote>
</li>
<li>abstract                – 抽象的。这个属性基本很少使用，值如果是 <code>true</code>，那么编写的包是被继承的</li>
</ul>
<h3 id="lt-action-gt-标签"><a href="#lt-action-gt-标签" class="headerlink" title="&lt;action&gt; 标签"></a><code>&lt;action&gt;</code> 标签</h3><p>代表配置 <code>action</code> 类，包含的属性</p>
<ul>
<li>name            – 和 <code>&lt;package&gt;</code> 标签的 <code>namespace</code> 属性一起来决定访问路径的</li>
<li>class            – 配置 <code>Action</code> 类的全路径（默认值是 <code>ActionSupport</code> 类）</li>
<li>method        – <code>Action</code> 类中执行的方法，如果不指定，默认值是 <code>execute</code></li>
</ul>
<h3 id="lt-result-gt-标签"><a href="#lt-result-gt-标签" class="headerlink" title="&lt;result&gt; 标签"></a><code>&lt;result&gt;</code> 标签</h3><p><code>action</code>类中方法执行，返回的结果跳转的页面</p>
<ul>
<li>name        – 结果页面逻辑视图名称</li>
<li>type        – 结果类型（默认值是转发，也可以设置其他的值）</li>
</ul>
<h2 id="Struts2-配置常量"><a href="#Struts2-配置常量" class="headerlink" title="Struts2 配置常量"></a>Struts2 配置常量</h2><h3 id="Struts2-框架中的哪些配置文件中配置常量？"><a href="#Struts2-框架中的哪些配置文件中配置常量？" class="headerlink" title="Struts2 框架中的哪些配置文件中配置常量？"></a>Struts2 框架中的哪些配置文件中配置常量？</h3><p>struts.xml（必须要掌握，开发中基本上就在该配置文件中编写常量）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></div></pre></td></tr></table></figure>
<p>web.xml</p>
<ul>
<li><p>在 <code>StrutsPrepareAndExecuteFilter</code> 配置文件中配置初始化参数</p>
</li>
<li><p>注意：后加载的配置的文件的常量会覆盖之前加载的常量！！</p>
</li>
</ul>
<h3 id="需要了解的常量"><a href="#需要了解的常量" class="headerlink" title="需要了解的常量"></a>需要了解的常量</h3><ul>
<li>struts.i18n.encoding=UTF-8            – 指定默认编码集，作用于 HttpServletRequest 的 setCharacterEncoding 方法 </li>
<li>struts.action.extension=action,,        – 该属性指定需要 Struts 2 处理的请求后缀，该属性的默认值是 action，即所有匹配 <code>*.action</code> 的请求都由 Struts2 处理。如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（,）隔开</li>
<li>struts.serve.static.browserCache=true        – 设置浏览器是否缓存静态内容,默认值为 <code>true</code> (生产环境下使用)，开发阶段最好关闭 </li>
<li>struts.configuration.xml.reload=false        – 当 struts 的配置文件修改后，系统是否自动重新加载该文件，默认值为 <code>false</code>(生产环境下使用) </li>
<li>struts.devMode = false                    – 开发模式下使用，这样可以打印出更详细的错误信息 </li>
</ul>
<h2 id="指定多个struts的配置文件（了解）"><a href="#指定多个struts的配置文件（了解）" class="headerlink" title="指定多个struts的配置文件（了解）"></a>指定多个struts的配置文件（了解）</h2><ol>
<li>在大部分应用里，随着应用规模的增加，系统中 <code>Action</code> 的数量也会大量增加，导致 <code>struts.xml</code> 配置文件变得非常臃肿。</li>
</ol>
<p>为了避免 <code>struts.xml</code> 文件过于庞大、臃肿，提高 <code>struts.xml</code> 文件的可读性，我们可以将一个 <code>struts.xml</code> 配置文件分解成多个配置文件，然后在 <code>struts.xml</code> 文件中包含其他配置文件。</p>
<ol>
<li>可以在 <code>&lt;package&gt;</code> 标签中，使用 <code>&lt;include&gt;</code> 标签来引入其他的 <code>struts_xx.xml</code> 的配置文件。例如：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"struts-part1.xml"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"struts-part2.xml"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>注意注意注意（重要的事情说三遍）：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"com/renkaigis/demo2/struts-part1.xml"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Action-类的三种写法"><a href="#Action-类的三种写法" class="headerlink" title="Action 类的三种写法"></a>Action 类的三种写法</h2><h3 id="Action类就是一个POJO类"><a href="#Action类就是一个POJO类" class="headerlink" title="Action类就是一个POJO类"></a>Action类就是一个POJO类</h3><ul>
<li>什么是 POJO 类，<code>POJO（Plain Ordinary Java Object）</code>简单的 Java 对象，简单记：没有继承某个类，没有实现接口，就是 POJO 的类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 是 POJO 类：没有任何继承和实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * execute 是默认方法</div><div class="line">     * return null; 不会进行跳转</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Demo1Action 是一个 POJO 类…"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--POJO 类的方式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo1Action"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action1.Demo1Action"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Action-类可以实现-Action-接口"><a href="#Action-类可以实现-Action-接口" class="headerlink" title="Action 类可以实现 Action 接口"></a>Action 类可以实现 Action 接口</h3><p>Action 接口中定义了 5 个常量，5 个常量的值对应的是 5 个逻辑视图跳转页面（跳转的页面还是需要自己来配置），还定义了一个方法，<code>execute</code> 方法。</p>
<p>需要掌握5个逻辑视图的常量</p>
<ul>
<li>SUCCESS        – 成功</li>
<li>INPUT            – 用于数据表单校验.如果校验失败,跳转 INPUT 视图</li>
<li>LOGIN            – 登录</li>
<li>ERROR            – 错误</li>
<li>NONE            – 页面不转向</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 实现 Action 接口，Action 是框架提供的接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Demo2Action 实现了 Action 的接口…"</span>);</div><div class="line">        <span class="keyword">return</span> SUCCESS;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--实现 Action 接口的方式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo2Action"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action1.Demo2Action"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Action-类可以去继承-ActionSupport-类"><a href="#Action-类可以去继承-ActionSupport-类" class="headerlink" title="Action 类可以去继承 ActionSupport 类"></a>Action 类可以去继承 ActionSupport 类</h3><p>（开发中这种方式使用最多）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 编写 Action 类继承 ActionSupport 类，ActionSupport 类已经实现了 Action 和一些其他的接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Demo3Action 继承了 ActionSupport 类…"</span>);</div><div class="line">        <span class="keyword">return</span> NONE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--继承 ActionSupport 类的方式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo3Action"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action1.Demo3Action"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Action-的访问"><a href="#Action-的访问" class="headerlink" title="Action 的访问"></a>Action 的访问</h2><h3 id="传统的配置方式"><a href="#传统的配置方式" class="headerlink" title="传统的配置方式"></a>传统的配置方式</h3><p>通过 <code>&lt;action&gt;</code> 标签中的 <code>method</code> 属性，访问到 Action 中的具体的方法。</p>
<ul>
<li>传统的配置方式，配置更清晰更好理解！但是扩展需要修改配置文件等！</li>
</ul>
<h4 id="具体的实例如下："><a href="#具体的实例如下：" class="headerlink" title="具体的实例如下："></a>具体的实例如下：</h4><ul>
<li>页面代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">H3</span>&gt;</span>传统的配置文件的方式<span class="tag">&lt;/<span class="name">H3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/saveCust.action"</span>&gt;</span>保存客户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/updCust.action"</span>&gt;</span>修改客户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置文件的代码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--传统方式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"saveCust"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action2.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"save"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"updCust"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action2.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"update"</span>/&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>Action 的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 编写客户的 Action 类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"保存客户…"</span>);</div><div class="line">        <span class="keyword">return</span> NONE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"修改用户…"</span>);</div><div class="line">        <span class="keyword">return</span> NONE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通配符的访问方式"><a href="#通配符的访问方式" class="headerlink" title="通配符的访问方式"></a>通配符的访问方式</h3><p>（访问的路径和方法的名称必须要有某种联系）</p>
<p>通配符就是 <code>*</code> 代表任意的字符</p>
<ul>
<li>使用通配符的方式可以简化配置文件的代码编写，而且扩展和维护比较容易。</li>
</ul>
<h4 id="具体实例如下："><a href="#具体实例如下：" class="headerlink" title="具体实例如下："></a>具体实例如下：</h4><ul>
<li>页面代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">H3</span>&gt;</span>通配符配置文件的方式<span class="tag">&lt;/<span class="name">H3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/linkman_save.action"</span>&gt;</span>保存联系人<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/linkman_update.action"</span>&gt;</span>修改联系人<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置文件代码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--通配符的方式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"linkman_*"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action2.LinkmanAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"saveOK"</span>&gt;</span>/demo2/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>Action 的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用联系人来测试通配符</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkmanAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"保存联系人…"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"saveOK"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"修改联系人…"</span>);</div><div class="line">        <span class="keyword">return</span> NONE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>具体理解：在 JSP 页面发送请求，<code>http://localhost:9090/demo2/linkman_save.action</code>，配置文件中的 <code>linkman_*</code> 可以匹配该请求，<code>*</code> 就相当于变成了 <code>add</code>，<code>method</code> 属性的值使用 <code>{1}</code> 来代替，<code>{1}</code> 就表示的是第一个 <code>*</code> 号的位置！！所以 <code>method</code> 的值就等于了 <code>add</code>，那么就找到 <code>Action</code> 类中的 <code>add</code> 方法，那么 <code>add</code> 方法就执行了！</li>
</ul>
<h3 id="动态方法访问的方式"><a href="#动态方法访问的方式" class="headerlink" title="动态方法访问的方式"></a>动态方法访问的方式</h3><p>（有的开发中也会使用这种方式）</p>
<ul>
<li><p>如果想完成动态方法访问的方式，需要开启一个常量，<code>struts.enable.DynamicMethodInvocation = false</code>，把值设置成 <code>true</code>。</p>
</li>
<li><p>注意：不同的 <code>Struts2</code> 框架的版本，该常量的值不一定是 <code>true</code> 或者 <code>false</code>，需要自己来看一下。如果是 <code>false</code>，需要自己开启。</p>
</li>
<li><p>在 <code>struts.xml</code> 中开启该常量。</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启动态方法访问 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="具体实例如下：-1"><a href="#具体实例如下：-1" class="headerlink" title="具体实例如下："></a>具体实例如下：</h4><ul>
<li>页面的代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">H3</span>&gt;</span>动态方法访问的方式<span class="tag">&lt;/<span class="name">H3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/user!save.action"</span>&gt;</span>保存用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/user!update.action"</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置文件代码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--配置动态方法访问--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action2.UserAction"</span>/&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>Action的类的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"保存用户…"</span>);</div><div class="line">        <span class="keyword">return</span> NONE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"修改用户…"</span>);</div><div class="line">        <span class="keyword">return</span> NONE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>Struts2 框架主要以下几个步骤：</p>
<h3 id="编写-web-xml-前端控制器"><a href="#编写-web-xml-前端控制器" class="headerlink" title="编写 web.xml 前端控制器"></a>编写 <code>web.xml</code> 前端控制器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="编写-struts-xml-配置文件"><a href="#编写-struts-xml-配置文件" class="headerlink" title="编写 struts.xml 配置文件"></a>编写 <code>struts.xml</code> 配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action2.LinkmanAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"saveOK"</span>&gt;</span>/demo2/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="编写-Action-类-1"><a href="#编写-Action-类-1" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h3><ul>
<li><p>一般继承 <code>ActionSupport</code> 类</p>
</li>
<li><p><code>&lt;action&gt;</code> 访问配置一般使用 <code>通配符</code> 的方式：</p>
</li>
</ul>
<p><code>name=&quot;user_*&quot; method=&quot;{1}&quot;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/struts20100.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;Struts2 快速入门。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Struts2" scheme="http://yoursite.com/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>世间安得双全法，不负如来不负卿</title>
    <link href="http://yoursite.com/posts/Mine/2018-06-18-novel-nverqing.html"/>
    <id>http://yoursite.com/posts/Mine/2018-06-18-novel-nverqing.html</id>
    <published>2018-06-18T12:05:27.000Z</published>
    <updated>2018-08-09T13:12:56.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/novel/nverqing01.jpg"></div>

<div align="center">图源微博：<a href="https://weibo.com/234435451" target="_blank" rel="external">青暮从山</a></div>

<a id="more"></a>
<hr>

<h1 id="世间安得双全法，不负如来不负卿。"><a href="#世间安得双全法，不负如来不负卿。" class="headerlink" title="世间安得双全法，不负如来不负卿。"></a>世间安得双全法，不负如来不负卿。</h1><h2 id="（一）缘起"><a href="#（一）缘起" class="headerlink" title="（一）缘起"></a>（一）缘起</h2><p>小船悠悠，师徒四人不知不觉就来到了西梁女国了。</p>
<p>唐玄奘虽也是见过大风大浪的人，可还是第一次来到一个只有女子的国度。</p>
<p>走在大街上，周围投射来新奇又热烈的目光，玄奘只觉得浑身不自在。</p>
<p>心中默念“阿弥陀佛”，一心只想着赶快换了通关文牒，离开这个是非之地。</p>
<p>女王听闻唐朝高僧觐见，闪凤目，簇蛾眉，仔细观看，果然一表非凡。</p>
<p>丰姿英伟，相貌轩昂。齿白如银砌，唇红口四方。顶平额阔天仓满，目秀眉清地阁长。两耳有轮真杰士，一身不俗是才郎。好个妙龄聪俊风流子，堪配西梁窈窕娘。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="《西游记》第五十四回-法性西来逢女国，心猿定计脱烟花：女王闪凤目，簇蛾眉，仔细观看，果然一表非凡，你看他丰姿英伟，相貌轩昂。齿白如银砌，唇红口四方。顶平额阔天仓满，目秀眉清地阁长。两耳有轮真杰士，一身不俗是才郎。好个妙龄聪俊风流子，堪配西梁窈窕娘。">[1]</span></a></sup></p>
<p>玄奘见到女王陛下，双手合十，恭敬的行礼：“贫僧唐三藏参见女王陛下”。</p>
<p>却见没有声响。</p>
<p>连忙继续“贫僧唐三藏参见女王陛下”。还是没有回应。</p>
<p>无奈只得再拜“贫僧唐三藏参见女王陛下”。玄奘却不知，这女王正细细端详着他的面庞出神，哪听得到他在说什么。</p>
<p>玄奘本想着通关文牒上加盖宝印是很简单的事，却没料想女王陛下让他与徒儿先到馆驿休息。</p>
<h2 id="（二）梦"><a href="#（二）梦" class="headerlink" title="（二）梦"></a>（二）梦</h2><blockquote>
<p>此部分对话皆来自<code>央视 86 版《西游记》第十六集《趣经女儿国》台词。</code><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="央视 86 版《西游记》第十六集《趣经女儿国》台词。">[2]</span></a></sup></p>
</blockquote>
<p>夜里，檀香缭绕，女王独坐窗前，画笔下轻轻勾勒着，画上的人可不就是今天来的大唐高僧吗。</p>
<p>闻得太师唤她，女王连忙用绢布将画遮起来。</p>
<p>女王禁不住心下欣喜，同太师说道：“想我西梁女国，从未有过男子，今日有幸，天赐唐王御弟下降。我想这是千载难逢的机缘，愿以一国之富，招他为王，我为王后。”</p>
<p>深夜，女王倚着软塌，望着唐三藏的画像，渐渐陷入了沉睡。</p>
<p>这夜，她做了一个梦。</p>
<p>梦里，他为王，她为后。</p>
<p>梦里，他们策马驰骋。</p>
<p>梦里，他们相互依偎，同游御花园…</p>
<p>梦醒，却是一阵阵失落。</p>
<p>翌日，依着梦境，女王邀玄奘同游御花园。</p>
<p>女王莲步轻移，谈天说地，玄奘却一直恭恭敬敬，时刻与女王保持着距离。</p>
<p>“你看那戏水鸳鸯，如胶似漆，多么欢快，你说是吗？”</p>
<p>玄奘拱手道：“陛下看的真切，贫僧不曾留意。”</p>
<p>“御弟哥哥，为什么天地间的鸟呀、蝶呀，都要成对成双的呢？”</p>
<p>“这事自有天地以来便是如此。”</p>
<p>“御弟……哥哥……”</p>
<p>“陛下……”</p>
<p>女王眸中泛着微光，带着哭腔央求道：“不去取经行不行？”</p>
<p>“这……哎……”玄奘轻叹一声，不知如何回应。</p>
<p>只听女王叹道：“为什么世间还有像我们这样的孤男寡女，不能成双成对？”</p>
<p>玄奘连忙说，“陛下，贫僧许身佛门，正是为了解救芸芸众生，使世上不再有杀伐纷争，使人间不再有怨女旷夫。”</p>
<p>“既然御弟哥哥有如此情怀，那么眼前就有需要你解救的芸芸众生！”</p>
<p>女王无奈，你只知解救芸芸众生，却不救救我？</p>
<p>“哎……陛下，贫僧取经心切，还望陛下早日发放通关牒文。”</p>
<p>“今日且莫谈取经之事，御弟哥哥，你看这御花园中春光明媚，景色怡人，我再陪哥哥流连观赏一番，好吗？”</p>
<p>且看湖中鸳鸯戏水，桥上人成双成对。</p>
<p>女王看着玄奘，眸中柔情似水。</p>
<div align="center"><img src="http://image.renkaigis.com/novel/nverqing06.jpg"></div>

<h2 id="（三）情动"><a href="#（三）情动" class="headerlink" title="（三）情动"></a>（三）情动</h2><blockquote>
<p>此部分对话皆来自<code>央视 86 版《西游记》第十六集《趣经女儿国》台词。</code><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="央视 86 版《西游记》第十六集《趣经女儿国》台词。">[2]</span></a></sup></p>
</blockquote>
<p>是夜，女王以“夜赏国宝”为由将玄奘请至自己的寝殿。</p>
<p>玄奘来到之后才恍然过来，急忙给女王解释道：“太师领贫僧夜赏国宝，不知为何闯到陛下寝宫？”</p>
<p>只闻帘后人温柔至极，“御弟哥哥，那就请观赏国宝吧！”</p>
<p>床帘徐徐展开，只见床上人斜倚塌前，薄纱缚身，丹唇轻启，头戴高簪珠翠，一副雍容华贵之姿。</p>
<p>玄奘闻言，又看到这一幕，耳红面赤，羞答答不敢抬头。</p>
<p>“难道在御弟哥哥眼里，我还算不得国宝吗？”</p>
<p>说着，女王捧起一盏烛火向玄奘走来。</p>
<p>玄奘早已慌得不知如何是好，不敢正面看她，却忍不住偷偷看她的背影。</p>
<p>“哥哥你看，这烛光也知人情，欲照今日之喜。”</p>
<p>“不知陛下喜从何来？”</p>
<p>“我身为女王，饱享荣华富贵，可是，从未享受过人间欢乐。今日哥哥到此，真乃天赐良缘。来日哥哥登上宝座，我为王后，从此双宿双飞，这不是万千之喜吗？”</p>
<p>玄奘目光移向别处，使自己快速镇静下来。“佛心四大皆空，贫僧尘念已绝，无缘消受人间富贵。阿弥陀佛…”</p>
<p>说完，紧闭双眼，不敢再多看一眼。</p>
<p>女王依旧巧笑嫣然，如若月里嫦娥到此一般，美得不可方物。</p>
<p>“你说四大皆空，却紧闭双眼。要是你睁开眼睛看看我，我不相信你两眼空空。”</p>
<p>玄奘眯着眼看了看，但又很快紧闭双眼，嘴中不停念叨着阿弥陀佛。</p>
<p>“不敢睁眼看我，还说什么四大皆空呢？”女王看着他颤抖的唇和额头的汗珠，笑意盈盈的反驳他。</p>
<p>玄奘无奈，睁开眼看向女王。</p>
<p>只见眼前人，眉如翠羽，肌似羊脂。脸衬桃花瓣，鬟堆金凤丝。秋波湛湛妖娆态，春笋纤纤妖媚姿。斜红绡飘彩艳，高簪珠翠显光辉。<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="《西游记》第五十四回-法性西来逢女国，心猿定计脱烟花：猪八戒在旁，掬着嘴，饧眼观看那女王，却也袅娜，真个眉如翠羽，肌似羊脂。脸衬桃花瓣，鬟堆金凤丝。秋波湛湛妖娆态，春笋纤纤妖媚姿。斜红绡飘彩艳，高簪珠翠显光辉。说什么昭君美貌，果然是赛过西施。柳腰微展鸣金珮，莲步轻移动玉肢。月里嫦娥难到此，九天仙子怎如斯。宫妆巧样非凡类，诚然王母降瑶池。">[3]</span></a></sup></p>
<p>这一眼看得他额头又一次布满了细密的汗珠，这一眼看的他呆了很久很久。</p>
<p>玄奘连忙回过神来，眼睛移向别处，赶忙用袖子擦拭额头的汗，又念了句“阿弥陀佛”。</p>
<p>“哥哥，别闭上，睁开眼睛吧。”</p>
<p>“你就睁开眼睛吧。”</p>
<p>玄奘摇头，“我就是睁眼看你，又能怎样？”</p>
<p>“哥哥……”</p>
<p>说着，女王趴在玄奘肩上，拽着他的袈裟袖子，无限暧昧。</p>
<p>玄奘慌了，连忙起身将袖子从她手中拽出。却不想拉扯之间，对方突然放手，自己躺倒在了女王的床上。</p>
<p>玄奘欲起身，却见女王口中不停唤着“哥哥…哥哥…”，将他又一次推倒在床上。</p>
<p>玄奘想反抗，却手忙脚乱不知如何是好，时刻把持着尺度。</p>
<p>女王幽怨的看着他，“哥哥，你难道真的不喜欢我吗？”</p>
<p>玄奘犹豫了，他心里似云海翻涌，不知道怎么作答。只得偏过头去，不让女王看见自己的表情。</p>
<p>女王看着他的样子，更加贴近他，温言软语：“今夜良宵难得，你就答应了我吧”</p>
<p>玄奘长呼一口气，镇静如初，“女王陛下，贫僧已许身佛门，与大唐天子有诺在先，还望女王陛下放了贫僧西去。”</p>
<p>说着，顿了顿，玄奘缓缓转过头来，看着她的背影说道：“来世若有缘分……”</p>
<p>后面的话犹豫了很久说不出口，玄奘也许真的动了心吧。今世无缘，只能来世再续。</p>
<p>女王听闻，心中一喜，若论来世，谁又说的准呢。“我只想今生，不想来世。今生今世，我们俩是有缘分的。”</p>
<p>说着，头倚在玄奘肩上。</p>
<p>良辰美景，灯光烛影之间，两人你侬我侬，玄奘欲拒还迎，虽故作镇静，但凡心已动，怎奈终究摆脱不了女王。</p>
<h2 id="（四）不负如来"><a href="#（四）不负如来" class="headerlink" title="（四）不负如来"></a>（四）不负如来</h2><p>却说唐玄奘被那蝎子精掳走，这妖精山洞中灯红酒绿，一副洞房的装扮。</p>
<p>同样是绝世美人儿，玄奘却对那蝎子精提不起一点兴趣。</p>
<p>即使她不是妖怪，即使她再怎么美艳动人，在玄奘眼中只有嫌弃。</p>
<p>玄奘一个出家人自然不懂自己心里的变化。</p>
<p>脑海里依旧浮现着女王的一颦一笑，极尽温柔，极尽欢乐。</p>
<p>玄奘不知道自己动没动情。</p>
<p>他自己不知道，他也不想知道。</p>
<p>面对一个『情』字，七情六欲皆无的玄奘居然选择了逃避。</p>
<p>他怕的是什么？什么王权富贵，什么戒律清规？</p>
<p>他怕的是，如果动情了，就负了如来；如果不动情，就辜负了“她”。</p>
<h2 id="（五）相见难，别亦难"><a href="#（五）相见难，别亦难" class="headerlink" title="（五）相见难，别亦难"></a>（五）相见难，别亦难</h2><p>待到临行女儿国之际，女王依依不舍的在通关文牒上盖上印章。</p>
<p>女王哀怨的看着玄奘，舍不得与他分离。身为女王，却留不住这个凡人。</p>
<p>那天，她一直送他到城外。</p>
<p>这一路上，两人没有说过一句话。</p>
<p>这段路，是女王走过的最长的路，也是女王最不想走完的一段路。</p>
<p>这段路，是玄奘走的最不舒服的一段路，虽有佳人在侧，却如鲠在喉。</p>
<p>直到城外，玄奘打破了沉默，“陛下，请留步！”。</p>
<p>女王看着她，欲语还休，怎诉这胸中蜜语万千。只怨今生无缘，道不尽声声珍重，默默地祝君一路平安。</p>
<p>女王唇齿轻咬，似乎是做了很大的一个决定，将关文递给眼前人。</p>
<p>玄奘接过关文，对女王拱手道：“多谢陛下。”</p>
<p>这里，玄奘行的是俗家礼，只因尘缘未了，只有等到来世…</p>
<p>奈何戒律清规，奈何天子之诺，奈何芸芸众生，玄奘纵有万般不舍，也只得策马扬鞭，西行而去。</p>
<p>她在城头似哭似笑，当着百官的面对着他的背影大喊：“御弟哥哥……”千言万语梗在胸中，无法诉说。</p>
<p>夕阳下，玄奘勒马回头，只看了一眼。遂又毅然决然扬鞭而去…</p>
<p>只留女王一人，孑然一人，孤立城头。</p>
<p>“唐玄奘，下辈子娶我可好？”</p>
<p>风沙漫天，看不见他的表情，也看不见她脸上的泪痕。</p>
<p>僧人不语，只余风声喧嚣。</p>
<div align="center"><img src="http://image.renkaigis.com/novel/nverqing02.jpg"></div>

<h2 id="（六）圆寂"><a href="#（六）圆寂" class="headerlink" title="（六）圆寂"></a>（六）圆寂</h2><p>玄奘走后的日子，女王日日思君不见君。从来不相信一见钟情的女王，居然败给了一个和尚。</p>
<p>佛门无尘缘。你许我来生，可你既已成佛，又何来来世？</p>
<p>女王只得在闭塞的女儿国内，努力打探着外界的消息，尤其是关于他的一点一滴。</p>
<p>听闻他取得真经，听闻他受万人朝拜。女王为他高兴，也为自己难过。</p>
<p>数十年的等待，如今女王已人老珠黄。若玄奘你回来，还会认得这个人吗。</p>
<p>女王不过是凡人，有七情六欲，也有生老病死。若说来生，谁还记得谁？</p>
<p>这天，有属下来报，白马寺玄奘法师圆寂。</p>
<p>如晴天霹雳般，女王瘫倒在塌，泪流满面。</p>
<p>颤颤巍巍的她来到御花园，看着湖中鸳鸯戏水，想起和御弟哥哥的那一幕幕。</p>
<p>宫中议论纷纷，隐约可以听到有宫女说道：</p>
<p>『 听说那唐朝和尚圆寂的时候，千佛诵经，万众朝宗，他走的时候只笑着留下一句：“好！” 』</p>
<div align="center"><img src="http://image.renkaigis.com/novel/nverqing05.jpg"></div>

<p><br></p>
<p>犹记得两人分别时，女王对着他的背影大喊：</p>
<p>“唐玄奘，下辈子娶我可好？”</p>
<h2 id="（七）成佛"><a href="#（七）成佛" class="headerlink" title="（七）成佛"></a>（七）成佛</h2><p>玄奘取得真经，回到白马寺，受万人敬仰。每日吃斋念佛，诵经以普度众生。</p>
<p>两耳不闻窗外事，但是他真的忘了那段情劫吗？</p>
<p>玄奘本乃金蝉子转世，圆寂后成佛，世称“旃檀功德佛”。</p>
<div align="center"><img src="http://image.renkaigis.com/novel/nverqing04.jpg"></div>

<p><br></p>
<p>前世的许诺玄奘还记得，但既身已成佛，心亦要剔除七情六欲。</p>
<p>佛不比前世的唐朝和尚，那时尚可动情，现在心止如死水。</p>
<p>佛曰：人生有八苦：生，老，病，死，爱别离，怨长久，求不得，放不下。</p>
<p>佛又曰：一切有为法，如梦幻泡影。如露亦如电，应作如是观。</p>
<h2 id="（八）今生"><a href="#（八）今生" class="headerlink" title="（八）今生"></a>（八）今生</h2><p>2004 年《艺术人生》，西游记剧组再聚首。</p>
<p>女儿国王扮演者朱琳，上场后深情凝视着徐少华：“自女儿国一别，至今已经二十载…御弟哥哥，别来无恙。”</p>
<p>岁月的车轮驶过，美丽的女王脸上已现皱纹，但仍姿色不减当年。</p>
<p>虽然看似说的很随意，但语气明显颤抖着，极力压抑着。</p>
<p>徐少华闻言，也当场红了眼眶。</p>
<p>也许有情，奈何缘浅。</p>
<hr>

<h1 id="女王"><a href="#女王" class="headerlink" title="女王"></a>女王</h1><blockquote class="blockquote-center">我做了一个梦，<br>你蓄起了长发，<br>我们一起慢慢变老。</blockquote>

<p>我不后悔遇见你。</p>
<p>我也不后悔遇见你之后爱上你。</p>
<p>我更不后悔守着你许诺的来世等了你数多载。</p>
<p>我身为一国之主，却留不住你这个凡人。</p>
<p>何以缘起，何以缘灭。若是没遇见，错过便是错过。</p>
<p>可是一旦遇见了，一旦动了情，又怎叫人放得下。</p>
<p>你心中只有众生和戒律清规，可是我心中却只有你。</p>
<p>一个人孤寂的等了你那么多年，最后等来了你圆寂的消息。</p>
<p>至此，我也就断了这世间的一切念想了。</p>
<p>这世间没了你，我还怎么活？</p>
<hr>

<h1 id="玄奘"><a href="#玄奘" class="headerlink" title="玄奘"></a>玄奘</h1><blockquote class="blockquote-center">世间安得双全法，不负如来不负卿。</blockquote>

<p>如果动情了，就负了如来；如果不动情，就辜负了“她”。</p>
<div align="center"><img src="http://image.renkaigis.com/novel/nverqing03.jpg"></div>

<p><br></p>
<p>我本是如来二弟子金蝉子，只因不听佛祖说法，轻漫佛法，转世为大唐高僧。奉观世音菩萨之命前往西天大雷音寺求取大乘佛法，普度众生。</p>
<p>直到我来到西梁女国，见到了那位花颜月貌的女王。</p>
<p>我觉得我难逃此劫了……</p>
<p>不知道为什么，我不敢看她的眼睛，我也不敢和她多说话。</p>
<p>但是看到她明媚的笑我又会很欢喜，虽然极力控制着自己。</p>
<p>是否我这个出家人真的动了情？</p>
<p>我一直都在躲避这个问题，让自己不要去想，我以为不去想就会忘掉这一切。</p>
<p>那一夜，烛火摇曳，我差点就万劫不复。</p>
<p>多亏了蝎子精横插一脚，我想这便是佛祖派蝎子精来警告我的。</p>
<p>想起自己身负拯救苍生的使命，纵使千世万世无欲无情也在所不惜。</p>
<p>『 曾虑多情损梵行，入山又恐别倾城。世间安得双全法，不负如来不负卿。 』</p>
<p>终究没有负了如来，却负了你。</p>
<p>今世的你是什么身份，今世的你又在哪里。</p>
<hr>

<h1 id="悟空"><a href="#悟空" class="headerlink" title="悟空"></a>悟空</h1><p>多年后，身为斗战胜佛的我还会想起曾经西天取经所经历的每一道劫难。这是一个漫长的过程，这也是我的成佛之路。</p>
<p>这一路上，记不得杀死了多少妖怪，也记不得被那和尚赶走过多少次。</p>
<p>原本心性顽劣的齐天大圣，也渐渐磨去棱角，成了佛。</p>
<p>要说取经路上，遇到再怎么强大的妖怪我都不怕。</p>
<p>可是，我最怕的是，那和尚没了取经的念头。</p>
<p>记得那是在西梁女国，和尚居然动了凡心，差点就……</p>
<p>离开女儿国后，经常看到和尚一个人坐着发呆。</p>
<p>夜里隐约能听到和尚说梦话的声音。</p>
<p>我本是一石猴，不懂什么情情爱爱的。但我能感受到和尚经过女儿国一劫后确实变了。</p>
<p>之后的他意志更为坚定，一步一个脚印誓要求取真经。无论遇到什么样的美女妖怪。</p>
<p>女儿国或许是和尚最难过的一关吧！</p>
<hr>

<h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><p><a href="https://www.bilibili.com/video/av5973539" target="_blank" rel="external">B站 - 【西游记女儿国国王】之 浮生相思梦</a></p>
<p>文中所用图源于微博：<a href="https://weibo.com/234435451" target="_blank" rel="external">青暮从山</a></p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">《西游记》第五十四回-法性西来逢女国，心猿定计脱烟花：女王闪凤目，簇蛾眉，仔细观看，果然一表非凡，你看他丰姿英伟，相貌轩昂。齿白如银砌，唇红口四方。顶平额阔天仓满，目秀眉清地阁长。两耳有轮真杰士，一身不俗是才郎。好个妙龄聪俊风流子，堪配西梁窈窕娘。<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">央视 86 版《西游记》第十六集《趣经女儿国》台词。<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">《西游记》第五十四回-法性西来逢女国，心猿定计脱烟花：猪八戒在旁，掬着嘴，饧眼观看那女王，却也袅娜，真个眉如翠羽，肌似羊脂。脸衬桃花瓣，鬟堆金凤丝。秋波湛湛妖娆态，春笋纤纤妖媚姿。斜红绡飘彩艳，高簪珠翠显光辉。说什么昭君美貌，果然是赛过西施。柳腰微展鸣金珮，莲步轻移动玉肢。月里嫦娥难到此，九天仙子怎如斯。宫妆巧样非凡类，诚然王母降瑶池。<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/novel/nverqing01.jpg&quot;&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;图源微博：&lt;a href=&quot;https://weibo.com/234435451&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;青暮从山&lt;/a&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Mine" scheme="http://yoursite.com/categories/Mine/"/>
    
    
      <category term="Novel" scheme="http://yoursite.com/tags/Novel/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Hibernate 查询方式与策略优化</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-06-05-JavaWeb-Hibernate05.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-06-05-JavaWeb-Hibernate05.html</id>
    <published>2018-06-05T07:21:45.000Z</published>
    <updated>2018-06-11T02:52:57.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/hibernate0500.png"></div>

<p id="div-border-left-green">Hibernate 查询方式与策略优化</p>

<a id="more"></a>
<hr>
<h1 id="Hibernate-框架的查询方式"><a href="#Hibernate-框架的查询方式" class="headerlink" title="Hibernate 框架的查询方式"></a>Hibernate 框架的查询方式</h1><hr>
<ul>
<li>唯一标识 OID 的检索方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">session.get(对象.class,OID);</div><div class="line"><span class="comment">// 例如：</span></div><div class="line">Customer customer = session.get(Customer.class, <span class="number">1L</span>);</div></pre></td></tr></table></figure>
<ul>
<li>对象的导航的方式</li>
</ul>
<p>比如，查询客户下的联系人：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Customer.getLinkmans();</div></pre></td></tr></table></figure>
<ul>
<li>HQL 的检索方式</li>
</ul>
<p>（Hibernate Query Language）        – Hibernate 的查询语言</p>
<ul>
<li>QBC 的检索方式</li>
</ul>
<p>（Query By Criteria）        – 条件查询</p>
<ul>
<li>SQL 检索方式（了解）</li>
</ul>
<p>本地的SQL检索</p>
<h2 id="HQL-查询"><a href="#HQL-查询" class="headerlink" title="HQL 查询"></a>HQL 查询</h2><h3 id="HQL-概述"><a href="#HQL-概述" class="headerlink" title="HQL 概述**"></a>HQL 概述**</h3><h4 id="HQL-的介绍"><a href="#HQL-的介绍" class="headerlink" title="HQL 的介绍"></a>HQL 的介绍</h4><ul>
<li><code>HQL</code> (Hibernate Query Language) 是面向对象的查询语言, 它和 SQL 查询语言有些相似。</li>
<li>在 Hibernate 提供的各种检索方式中, HQL 是使用最广的一种检索方式</li>
</ul>
<h4 id="HQL-与-SQL-的关系"><a href="#HQL-与-SQL-的关系" class="headerlink" title="HQL 与 SQL 的关系"></a>HQL 与 SQL 的关系</h4><ul>
<li>HQL 查询语句是面向对象的，Hibernate 负责解析 HQL 查询语句，然后根据对象-关系映射文件中的映射信息，把 HQL 查询语句翻译成相应的 SQL 语句。</li>
<li>HQL 查询语句中的主体是域模型中的类及类的属性；</li>
<li>SQL 查询语句是与关系数据库绑定在一起的。SQL 查询语句中的主体是数据库表及表的字段。</li>
</ul>
<h3 id="HQL-的基本查询"><a href="#HQL-的基本查询" class="headerlink" title="HQL 的基本查询"></a>HQL 的基本查询</h3><h4 id="HQL-基本的查询格式"><a href="#HQL-基本的查询格式" class="headerlink" title="HQL 基本的查询格式"></a>HQL 基本的查询格式</h4><ul>
<li><p>支持 <code>方法链</code> 的编程，即直接调用 <code>list()</code> 方法</p>
</li>
<li><p>简单的代码如下</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">session.createQuery(<span class="string">"from Customer"</span>).list();</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 基本查询的演示</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</div><div class="line">    Session session = HibernateUtils.getCurrentSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">    Query query = session.createQuery(<span class="string">"from Customer"</span>);</div><div class="line">    List&lt;Customer&gt; list = query.list();</div><div class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</div><div class="line">        System.out.println(customer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用别名的方式"><a href="#使用别名的方式" class="headerlink" title="使用别名的方式"></a>使用别名的方式</h4><ul>
<li>可以使用别名的方式</li>
</ul>
<p>不能出现 <code>*</code>，即不能 <code>select * from Customer c</code> <strong>✖</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">session.createQuery(<span class="string">"from Customer c"</span>).list();</div><div class="line">session.createQuery(<span class="string">"select c from Customer c"</span>).list();</div></pre></td></tr></table></figure>
<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>排序查询和 SQL 语句中的排序的语法是一样的：</p>
<ul>
<li>升序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">session.createQuery(<span class="string">"from Customer order by cust_id"</span>).list();</div></pre></td></tr></table></figure>
<ul>
<li>降序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">session.createQuery(<span class="string">"from Customer order by cust_id desc"</span>).list();</div></pre></td></tr></table></figure>
<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>不论使用的是 MySQL 还是 Oracle，都可以使用 Hibernate 框架提供的分页方法。</p>
<ul>
<li>两个方法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setFirstResult(a);        <span class="comment">// 从哪条记录开始，如果查询是从第一条开始，值是 0</span></div><div class="line">setMaxResults(b);     <span class="comment">// 每页查询的记录条数</span></div></pre></td></tr></table></figure>
<ul>
<li>演示代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;LinkMan&gt; list = session.createQuery(<span class="string">"from LinkMan"</span>).setFirstResult(<span class="number">0</span>).setMaxResults().list();</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 分页查询</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</div><div class="line">    Session session = HibernateUtils.getCurrentSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line">    <span class="comment">// 查询联系人</span></div><div class="line">    Query query = session.createQuery(<span class="string">"from Linkman l order by l.lkm_id"</span>);</div><div class="line">    <span class="comment">// 分页查询，调用方法，查询第一页的数据 1-3 条</span></div><div class="line">    query.setFirstResult(<span class="number">0</span>);</div><div class="line">    query.setMaxResults(<span class="number">3</span>);</div><div class="line"></div><div class="line">    List&lt;Linkman&gt; list = query.list();</div><div class="line">    <span class="keyword">for</span>(Linkman linkman:list)&#123;</div><div class="line">        System.out.println(linkman);</div><div class="line">    &#125;</div><div class="line">    tr.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul>
<li><p><code>setParameter(&quot;?号的位置，默认从0开始&quot;,&quot;参数的值&quot;);</code> 不用考虑参数的具体类型</p>
</li>
<li><p>按位置绑定参数的条件查询（指定下标值，默认从 0 开始）</p>
</li>
<li><p>按名称绑定参数的条件查询（HQL语句中的 ? 号换成 :名称 的方式）</p>
</li>
</ul>
<p>例如代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 按条件查询</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run3</span><span class="params">()</span> </span>&#123;</div><div class="line">    Session session = HibernateUtils.getCurrentSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line">    <span class="comment">// 查询联系人</span></div><div class="line">    Query query = session.createQuery(<span class="string">"from Linkman l where l.lkm_gender = ?"</span>);</div><div class="line">    <span class="comment">// 传入值</span></div><div class="line">    <span class="comment">// query.setString(0, "男");</span></div><div class="line"></div><div class="line">    <span class="comment">// Query query = session.createQuery("from Linkman l where l.lkm_id &gt; 2");</span></div><div class="line">    <span class="comment">// query.setLong(0, 2L);</span></div><div class="line"></div><div class="line">    <span class="comment">// 通用的方法，不用判断具体的类型</span></div><div class="line">    query.setParameter(<span class="number">0</span>, <span class="string">"男"</span>);</div><div class="line">    List&lt;Linkman&gt; list = query.list();</div><div class="line">    <span class="keyword">for</span> (Linkman linkman : list) &#123;</div><div class="line">        System.out.println(linkman);</div><div class="line">    &#125;</div><div class="line">    tr.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="HQL-的投影查询"><a href="#HQL-的投影查询" class="headerlink" title="HQL 的投影查询"></a>HQL 的投影查询</h3><p>投影查询就是想查询某一字段的值或者某几个字段的值。</p>
<p>投影查询的案例：</p>
<ul>
<li>如果查询多个字段，例如下面这种方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Object[]&gt; list = session.createQuery(<span class="string">"select c.cust_name,c.cust_level from Customer c"</span>).list();</div><div class="line"><span class="keyword">for</span> (Object[] objects : list) &#123;</div><div class="line">    System.out.println(Arrays.toString(objects));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果查询两个字段，也可以把这两个字段封装到对象中</li>
</ul>
<blockquote>
<p>先在持久化类中 <code>提供对应字段的构造方法</code>（不要忘了空的构造方法）<br>语句也要像下面一样发生改变</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">"select new Customer(c.cust_name,c.cust_level) from Customer c"</span>).list();</div><div class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</div><div class="line">    System.out.println(customer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="聚合函数查询"><a href="#聚合函数查询" class="headerlink" title="聚合函数查询"></a>聚合函数查询</h3><p><code>count()</code>、<code>sum()</code>、<code>avg()</code>、<code>max()</code>、<code>min()</code>等。</p>
<h4 id="获取总的记录数"><a href="#获取总的记录数" class="headerlink" title="获取总的记录数"></a>获取总的记录数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Session session = HibernateUtils.getCurrentSession();</div><div class="line">Transaction tr = session.beginTransaction();</div><div class="line"><span class="comment">// 也可以是 select count(*) from Customer</span></div><div class="line">List&lt;Number&gt; list = session.createQuery(<span class="string">"select count(c) from Customer c"</span>).list();</div><div class="line"><span class="comment">// 通过下标取值</span></div><div class="line">Long count = list.get(<span class="number">0</span>).longValue();</div><div class="line">System.out.println(count);</div><div class="line">tr.commit();</div></pre></td></tr></table></figure>
<h4 id="获取某一列数据的和"><a href="#获取某一列数据的和" class="headerlink" title="获取某一列数据的和"></a>获取某一列数据的和</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Session session = HibernateUtils.getCurrentSession();</div><div class="line">Transaction tr = session.beginTransaction();</div><div class="line">List&lt;Number&gt; list = session.createQuery(<span class="string">"select sum(c.cust_id) from Customer c"</span>).list();</div><div class="line">Long count = list.get(<span class="number">0</span>).longValue();</div><div class="line">System.out.println(count);</div><div class="line">tr.commit();</div></pre></td></tr></table></figure>
<h3 id="HQL-多表查询"><a href="#HQL-多表查询" class="headerlink" title="HQL 多表查询"></a>HQL 多表查询</h3><h4 id="多表的查询"><a href="#多表的查询" class="headerlink" title="多表的查询"></a>多表的查询</h4><p>HQL 语句和 SQL 语句的查询语法比较类似。</p>
<h5 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h5><ul>
<li>显示内连接</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers c <span class="keyword">inner</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> c.cid = o.cno;</div></pre></td></tr></table></figure>
<ul>
<li>隐式内连接</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers c,orders o <span class="keyword">where</span> c.cid = o.cno;</div></pre></td></tr></table></figure>
<h5 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h5><ul>
<li>左外连接</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers c <span class="keyword">left</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> c.cid = o.cno;</div></pre></td></tr></table></figure>
<ul>
<li>右外连接</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers c <span class="keyword">right</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> c.cid = o.cno;</div></pre></td></tr></table></figure>
<h4 id="迫切和非迫切"><a href="#迫切和非迫切" class="headerlink" title="迫切和非迫切"></a>迫切和非迫切</h4><ul>
<li><p>非迫切返回结果是 <code>Object[]</code></p>
</li>
<li><p>迫切连接返回的结果是对象，把客户的信息封装到客户的对象中，把订单的信息封装到客户的 <code>Set</code> 集合中。</p>
</li>
</ul>
<h4 id="内连接查询-1"><a href="#内连接查询-1" class="headerlink" title="内连接查询"></a>内连接查询</h4><ul>
<li>内连接使用 <code>inner join</code> ，默认返回的是 <code>Object</code> 数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 内连接，数据默认返回的是数组</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</div><div class="line">	Session session = HibernateUtils.getCurrentSession();</div><div class="line">	Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">	<span class="comment">// 默认返回数组</span></div><div class="line">	Query query = session.createQuery(<span class="string">"from Customer c inner join c.linkmans"</span>);</div><div class="line">	List&lt;Object[]&gt; list = query.list();</div><div class="line">	<span class="keyword">for</span> (Object[] objects : list) &#123;</div><div class="line">		System.out.println(Arrays.toString(objects));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	tr.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>迫切内连接: <code>inner join fetch</code> ，返回的是实体对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 内连接，数据默认返回的是数组</div><div class="line"> * 把数据封装到对象中</div><div class="line"> * 使用关键字：fetch 迫切连接，这样就会把数据封装到对象中</div><div class="line"> * 此时数据会重复</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</div><div class="line">	Session session = HibernateUtils.getCurrentSession();</div><div class="line">	Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">	<span class="comment">// 使用 fetch 迫切连接，封装数据</span></div><div class="line">	Query query = session.createQuery(<span class="string">"from Customer c inner join fetch c.linkmans"</span>);</div><div class="line">	List&lt;Customer&gt; list = query.list();</div><div class="line">	<span class="keyword">for</span> (Customer customer : list) &#123;</div><div class="line">		System.out.println(customer);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	tr.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决数据重复：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 解决数据的重复问题</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</div><div class="line">	Session session = HibernateUtils.getCurrentSession();</div><div class="line">	Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">	Query query = session.createQuery(<span class="string">"from Customer c inner join fetch c.linkmans"</span>);</div><div class="line">	List&lt;Customer&gt; list = query.list();</div><div class="line">	<span class="comment">// 手动解决数据重复问题，编程中都使用这种方式来解决重复的问题</span></div><div class="line">	Set&lt;Customer&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;(list);</div><div class="line">	<span class="keyword">for</span> (Customer customer : set) &#123;</div><div class="line">		System.out.println(customer);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	tr.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="左外连接查询"><a href="#左外连接查询" class="headerlink" title="左外连接查询"></a>左外连接查询</h4><ul>
<li><p>左外连接:    封装成 <code>List&lt;Object[]&gt;</code></p>
</li>
<li><p>迫切左外连接</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Session session = HibernateUtils.getCurrentSession();</div><div class="line">Transaction tr = session.beginTransaction();</div><div class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">"from Customer c left join fetch c.linkmans"</span>).list();</div><div class="line">Set&lt;Customer&gt; set = <span class="keyword">new</span> HashSet&lt;Customer&gt;(list);</div><div class="line"><span class="keyword">for</span> (Customer customer : set) &#123;</div><div class="line">	System.out.println(customer);</div><div class="line">&#125;</div><div class="line">tr.commit();</div></pre></td></tr></table></figure>
<h2 id="QBC-查询"><a href="#QBC-查询" class="headerlink" title="QBC 查询"></a>QBC 查询</h2><p>QBC：<code>Query By Criteria</code>，按条件进行查询。</p>
<ul>
<li><p><code>Criteria</code>：代表一次查询；</p>
</li>
<li><p><code>Criterion</code>：代表一个查询条件；</p>
</li>
<li><p><code>Restrictions</code>：产生查询条件的工具类。</p>
</li>
</ul>
<h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><p>使用的是 <code>Criteria</code> 接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Customer&gt; list = session.createCriteria(Customer.class).list();</div><div class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</div><div class="line">    System.out.println(customer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="排序查询-1"><a href="#排序查询-1" class="headerlink" title="排序查询"></a>排序查询</h3><ul>
<li><p>需要使用 <code>addOrder()</code> 的方法来设置参数，参数使用 <code>org.hibernate.criterion.Order</code> 对象。</p>
</li>
<li><p>具体代码如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Session session = HibernateUtils.getCurrentSession();</div><div class="line">Transaction tr = session.beginTransaction();</div><div class="line">Criteria criteria = session.createCriteria(Linkman.class);</div><div class="line"><span class="comment">// 设置排序</span></div><div class="line"><span class="comment">// criteria.addOrder(Order.asc("lkm_id"));</span></div><div class="line">criteria.addOrder(Order.desc(<span class="string">"lkm_id"</span>));</div><div class="line">List&lt;Linkman&gt; list = criteria.list();</div><div class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</div><div class="line">    System.out.println(linkman);</div><div class="line">&#125;</div><div class="line">tr.commit();</div></pre></td></tr></table></figure>
<h3 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h3><p><code>QBC</code> 的分页查询也是使用两个方法:</p>
<ul>
<li>setFirstResult();</li>
<li><p>setMaxResults();</p>
</li>
<li><p>代码如下;</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Session session = HibernateUtils.getCurrentSession();</div><div class="line">Transaction tr = session.beginTransaction();</div><div class="line">Criteria criteria = session.createCriteria(Linkman.class);</div><div class="line"><span class="comment">// 设置排序</span></div><div class="line">criteria.addOrder(Order.desc(<span class="string">"lkm_id"</span>));</div><div class="line">criteria.setFirstResult(<span class="number">0</span>);</div><div class="line">criteria.setMaxResults(<span class="number">3</span>);</div><div class="line">List&lt;Linkman&gt; list = criteria.list();</div><div class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</div><div class="line">    System.out.println(linkman);</div><div class="line">&#125;</div><div class="line">tr.commit();</div></pre></td></tr></table></figure>
<h3 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h3><p><code>Criterion</code> 是查询条件的接口，<code>Restrictions</code> 类是 Hibernate 框架提供的工具类，使用该工具类来设置查询条件。</p>
<ul>
<li><p>条件查询使用 Criteria 接口的 <code>add</code> 方法，用来传入条件。</p>
</li>
<li><p>使用 <code>Restrictions</code> 的添加条件的方法，来添加条件，例如：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Restrictions.eq</td>
<td style="text-align:center">相等</td>
</tr>
<tr>
<td>Restrictions.gt</td>
<td style="text-align:center">大于号</td>
</tr>
<tr>
<td>Restrictions.ge</td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td>Restrictions.lt</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td>Restrictions.le</td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td>Restrictions.between</td>
<td style="text-align:center">在之间</td>
</tr>
<tr>
<td>Restrictions.like</td>
<td style="text-align:center">模糊查询</td>
</tr>
<tr>
<td>Restrictions.in</td>
<td style="text-align:center">范围</td>
</tr>
<tr>
<td>Restrictions.and</td>
<td style="text-align:center">并且</td>
</tr>
<tr>
<td>Restrictions.or</td>
<td style="text-align:center">或者</td>
</tr>
<tr>
<td>Restrictions.isNull</td>
<td style="text-align:center">查询某属性为空的值</td>
</tr>
</tbody>
</table>
<ul>
<li>测试代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Session session = HibernateUtils.getCurrentSession();</div><div class="line">Transaction tr = session.beginTransaction();</div><div class="line">Criteria criteria = session.createCriteria(Linkman.class);</div><div class="line"><span class="comment">// 设置排序</span></div><div class="line">criteria.addOrder(Order.desc(<span class="string">"lkm_id"</span>));</div><div class="line"><span class="comment">// 设置查询条件</span></div><div class="line"><span class="comment">// Restrictions 提供静态的方法，拼接查询的条件</span></div><div class="line">criteria.add(Restrictions.or(Restrictions.eq(<span class="string">"lkm_gender"</span>, <span class="string">"男"</span>), Restrictions.gt(<span class="string">"lkm_id"</span>, <span class="number">3L</span>)));</div><div class="line">List&lt;Linkman&gt; list = criteria.list();</div><div class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</div><div class="line">    System.out.println(linkman);</div><div class="line">&#125;</div><div class="line">tr.commit();</div></pre></td></tr></table></figure>
<h3 id="聚合函数查询-1"><a href="#聚合函数查询-1" class="headerlink" title="聚合函数查询"></a>聚合函数查询</h3><p><code>Projection</code> 的聚合函数的接口，而 <code>Projections</code> 是 Hibernate 提供的工具类，使用该工具类设置聚合函数查询。</p>
<ul>
<li><p>使用 QBC 的聚合函数查询，需要使用 <code>criteria.setProjection()</code> 方法</p>
</li>
<li><p>具体的代码如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Session session = HibernateUtils.getCurrentSession();</div><div class="line">Transaction tr = session.beginTransaction();</div><div class="line">Criteria criteria = session.createCriteria(Linkman.class);</div><div class="line">criteria.setProjection(Projections.rowCount());</div><div class="line">List&lt;Number&gt; list = criteria.list();</div><div class="line">Long count = list.get(<span class="number">0</span>).longValue();</div><div class="line">System.out.println(count);</div><div class="line">tr.commit();</div></pre></td></tr></table></figure>
<h3 id="离线条件查询"><a href="#离线条件查询" class="headerlink" title="离线条件查询"></a>离线条件查询</h3><p><strong>脱离 session，可以不使用 session 来创建。而是在 web 层创建对象。</strong></p>
<p>离线条件查询使用的是 <code>DetachedCriteria</code> 接口进行查询，离线条件查询对象在创建的时候，不需要使用 <code>Session</code> 对象，只是在查询的时候使用 <code>Session</code> 对象即可。</p>
<ul>
<li>创建离线条件查询对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DetachedCriteria criteria = DetachedCriteria.forClass(Linkman.class);</div></pre></td></tr></table></figure>
<ul>
<li>具体的代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Session session = HibernateUtils.getCurrentSession();</div><div class="line">Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">DetachedCriteria criteria = DetachedCriteria.forClass(Linkman.class);</div><div class="line"><span class="comment">// 设置查询条件</span></div><div class="line">criteria.add(Restrictions.eq(<span class="string">"lkm_gender"</span>, <span class="string">"男"</span>));</div><div class="line"><span class="comment">// 查询数据</span></div><div class="line">List&lt;Linkman&gt; list = criteria.getExecutableCriteria(session).list();</div><div class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</div><div class="line">    System.out.println(linkman);</div><div class="line">&#125;</div><div class="line">tr.commit();</div></pre></td></tr></table></figure>
<h2 id="SQL-查询方式（了解）"><a href="#SQL-查询方式（了解）" class="headerlink" title="SQL 查询方式（了解）"></a>SQL 查询方式（了解）</h2><p>使用 Hibernate 框架一般不会使用 SQL 查询。</p>
<p>基本语法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Session session = HibernateUtils.getCurrentSession();</div><div class="line">Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">SQLQuery sqlQuery = session.createSQLQuery(<span class="string">"select * from cst_linkman where lkm_gender = ?"</span>);</div><div class="line">sqlQuery.setParameter(<span class="number">0</span>,<span class="string">"男"</span>);</div><div class="line"><span class="comment">// 通过方法设置，封装数据</span></div><div class="line">sqlQuery.addEntity(Linkman.class);</div><div class="line">List&lt;Linkman&gt; list = sqlQuery.list();</div><div class="line">System.out.println(list);</div><div class="line">tr.commit();</div></pre></td></tr></table></figure>
<hr>
<h1 id="查询功能优化"><a href="#查询功能优化" class="headerlink" title="查询功能优化"></a>查询功能优化</h1><hr>
<p>没有好与坏之分，只有适合不适合，可根据需求自行优化。但一般都会使用默认的，除非有特殊需求。</p>
<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><p>延迟加载先获取到代理对象，当真正使用到该对象中的属性的时候，才会发送 SQL 语句，是 Hibernate 框架提升性能的方式。</p>
<h3 id="类级别的延迟加载"><a href="#类级别的延迟加载" class="headerlink" title="类级别的延迟加载"></a>类级别的延迟加载</h3><ul>
<li><p>Session 对象的 <code>get</code> 方法是没有延迟加载；</p>
</li>
<li><p>Session 对象的 <code>load</code> 方法默认就是 <code>延迟加载</code>；</p>
</li>
<li><p><code>Customer c1 = session.load(Customer.class, 1L);</code> 没有发送 SQL 语句，当使用该对象的属性时，才发送 SQL 语句。</p>
</li>
</ul>
<p>使类级别的延迟加载失效：</p>
<ul>
<li>在 <code>&lt;class&gt;</code> 标签上配置 <code>lazy=&quot;false&quot;</code></li>
</ul>
<p>或者：</p>
<ul>
<li><code>Hibernate.initialize(Object proxy);</code> 把对象先初始化一下。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hibernate.initialize(c1);</div></pre></td></tr></table></figure>
<h3 id="关联级别的延迟加载"><a href="#关联级别的延迟加载" class="headerlink" title="关联级别的延迟加载"></a>关联级别的延迟加载</h3><p>（查询某个客户，当查看该客户下的所有联系人是否是延迟加载）</p>
<ul>
<li>默认是延迟加载</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Session session = HibernateUtils.getCurrentSession();</div><div class="line">Transaction tr = session.beginTransaction();</div><div class="line">Customer c = session.get(Customer.class, <span class="number">1L</span>);</div><div class="line">System.out.println(<span class="string">"============="</span>);</div><div class="line">System.out.println(c.getLinkmans().size()); <span class="comment">// 当查询客户下的联系人的时候才发送语句进行查询</span></div><div class="line">tr.commit();</div></pre></td></tr></table></figure>
<h3 id="关联级别延迟加载的策略"><a href="#关联级别延迟加载的策略" class="headerlink" title="关联级别延迟加载的策略"></a>关联级别延迟加载的策略</h3><p>查询策略：使用 Hibernate 查询一个对象的时候，查询其关联对象，应该如何查询，是 Hibernate 的一种优化手段！！</p>
<p>Hibernate 框架的检索策略解决的问题</p>
<h4 id="查询的时机"><a href="#查询的时机" class="headerlink" title="查询的时机"></a>查询的时机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Customer c1 = (Customer) session.get(Customer.class, <span class="number">1</span>);</div><div class="line">System.out.println(c1.getLinkmans().size());</div></pre></td></tr></table></figure>
<ul>
<li><code>lazy</code> 属性解决查询的时机的问题，需要配置 <code>是否采用延迟加载</code>！！</li>
</ul>
<h4 id="查询的语句格式"><a href="#查询的语句格式" class="headerlink" title="查询的语句格式"></a>查询的语句格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">"from Customer"</span>).list();</div><div class="line"><span class="keyword">for</span>(Customer c : list)&#123;</div><div class="line">	System.out.println(c.getLinkmans());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>fetch</code> 属性就可以解决 <code>查询语句的格式</code> 的问题！！</li>
</ul>
<h4 id="set-标签配置策略"><a href="#set-标签配置策略" class="headerlink" title="set 标签配置策略"></a>set 标签配置策略</h4><p>在 <code>&lt;set&gt;</code> 标签上使用 <code>fetch</code> 和 <code>lazy</code> 属性：</p>
<ul>
<li><code>fetch</code> 的取值                – 控制 SQL 语句生成的格式</li>
</ul>
<blockquote>
<p><code>select</code>                – 默认值。发送查询语句</p>
<p><code>join</code>                    – 连接查询。发送的是一条迫切左外连接！配置了 join，lazy 就失效了</p>
<p><code>subselect</code>                – 子查询。发送一条子查询查询其关联对象。（需要使用 <code>list()</code> 方法进行测试）</p>
</blockquote>
<ul>
<li><code>lazy</code> 的取值                – 查找关联对象的时候是否采用延迟!</li>
</ul>
<blockquote>
<p><code>true</code>                    – 默认。延迟</p>
<p><code>false</code>                    – 不延迟</p>
<p><code>extra</code>                    – 及其懒惰</p>
</blockquote>
<p><code>set</code> 标签上的默认值是 <code>fetch=&quot;select&quot;</code> 和 <code>lazy=&quot;true&quot;</code></p>
<p><strong>总结：</strong>Hibernate 框架都采用了默认值，开发中基本上使用的都是默认值。特殊情况再进行设置。</p>
<h4 id="many-to-one-标签配置策略"><a href="#many-to-one-标签配置策略" class="headerlink" title="many-to-one 标签配置策略"></a>many-to-one 标签配置策略</h4><p>在 <code>&lt;many-to-one&gt;</code> 标签上使用 <code>fetch</code> 和 <code>lazy</code> 属性</p>
<ul>
<li>fetch的取值        – 控制SQL的格式.</li>
</ul>
<blockquote>
<p>select        – 默认。发送基本select语句查询</p>
<p>join            – 发送迫切左外连接查询</p>
</blockquote>
<ul>
<li>lazy的取值        – 控制加载关联对象是否采用延迟</li>
</ul>
<blockquote>
<p>false            – 不采用延迟加载。</p>
<p>proxy            – 默认值。代理。现在是否采用延迟</p>
</blockquote>
<ul>
<li><p>由另一端的 <code>&lt;class&gt;</code> 上的 <code>lazy</code> 确定.如果这端的 <code>class</code> 上的 <code>lazy=&quot;true&quot;</code>。<code>proxy</code> 的值就是 <code>true</code>(延迟加载)。</p>
</li>
<li><p>如果 <code>class</code> 上 <code>lazy=&quot;false&quot;</code> ，<code>proxy</code> 的值就是 <code>false</code>(不采用延迟)</p>
</li>
</ul>
<p>在 <code>&lt;many-to-one&gt;</code> 标签上的默认值是 <code>fetch=&quot;select&quot;</code> 和 <code>proxy</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/hibernate0500.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-green&quot;&gt;Hibernate 查询方式与策略优化&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Hibernate 关联关系映射</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-06-01-JavaWeb-Hibernate04.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-06-01-JavaWeb-Hibernate04.html</id>
    <published>2018-06-01T10:45:37.000Z</published>
    <updated>2018-06-11T02:50:56.199Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/hibernate0400.png"></div>

<p id="div-border-left-green">Hibernate 关联关系映射</p>

<a id="more"></a>
<h1 id="Hibernate-一对多映射"><a href="#Hibernate-一对多映射" class="headerlink" title="Hibernate 一对多映射"></a>Hibernate 一对多映射</h1><p>以 <code>客户关系管理系统（CRM）</code> 为例：</p>
<h2 id="Java-WEB中一对多的设计及其建表原则"><a href="#Java-WEB中一对多的设计及其建表原则" class="headerlink" title="Java WEB中一对多的设计及其建表原则"></a>Java WEB中一对多的设计及其建表原则</h2><p>多方表建一个字段作为外键，指向一方表的主键。</p>
<h2 id="先导入SQL的建表语句"><a href="#先导入SQL的建表语句" class="headerlink" title="先导入SQL的建表语句"></a>先导入SQL的建表语句</h2><ul>
<li><p>创建数据库：<code>create database hibernate_03;</code></p>
</li>
<li><p>执行 SQL 语句进行建表：</p>
</li>
</ul>
<p>客户表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer`</span> (</div><div class="line">  <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'客户编号(主键)'</span>,</div><div class="line">  <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户名称(公司名称)'</span>,</div><div class="line">  <span class="string">`cust_user_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'负责人id'</span>,</div><div class="line">  <span class="string">`cust_create_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建人id'</span>,</div><div class="line">  <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户信息来源'</span>,</div><div class="line">  <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户所属行业'</span>,</div><div class="line">  <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户级别'</span>,</div><div class="line">  <span class="string">`cust_linkman`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人'</span>,</div><div class="line">  <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'固定电话'</span>,</div><div class="line">  <span class="string">`cust_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'移动电话'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<p>联系人表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_linkman`</span> (</div><div class="line">  <span class="string">`lkm_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'联系人编号(主键)'</span>,</div><div class="line">  <span class="string">`lkm_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人姓名'</span>,</div><div class="line">  <span class="string">`lkm_cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户id'</span>,</div><div class="line">  <span class="string">`lkm_gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人性别'</span>,</div><div class="line">  <span class="string">`lkm_phone`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人办公电话'</span>,</div><div class="line">  <span class="string">`lkm_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人手机'</span>,</div><div class="line">  <span class="string">`lkm_email`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人邮箱'</span>,</div><div class="line">  <span class="string">`lkm_qq`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人qq'</span>,</div><div class="line">  <span class="string">`lkm_position`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人职位'</span>,</div><div class="line">  <span class="string">`lkm_memo`</span> <span class="built_in">varchar</span>(<span class="number">512</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人备注'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`lkm_id`</span>),</div><div class="line">  <span class="keyword">KEY</span> <span class="string">`FK_cst_linkman_lkm_cust_id`</span> (<span class="string">`lkm_cust_id`</span>),</div><div class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_cst_linkman_lkm_cust_id`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`lkm_cust_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`cst_customer`</span> (<span class="string">`cust_id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<h2 id="编写客户和联系人的-JavaBean-程序"><a href="#编写客户和联系人的-JavaBean-程序" class="headerlink" title="编写客户和联系人的 JavaBean 程序"></a>编写客户和联系人的 JavaBean 程序</h2><p>（注意一对多的编写规则）</p>
<p><strong>一方 Set 集合，必须自己初始化；多方编写一个对象，不要自己 new ！</strong></p>
<ul>
<li>客户的 JavaBean 如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Long cust_id;</div><div class="line">    <span class="keyword">private</span> String cust_name;</div><div class="line">    <span class="keyword">private</span> Long cust_user_id;</div><div class="line">    <span class="keyword">private</span> Long cust_create_id;</div><div class="line">    <span class="keyword">private</span> String cust_source;</div><div class="line">    <span class="keyword">private</span> String cust_industry;</div><div class="line">    <span class="keyword">private</span> String cust_level;</div><div class="line">    <span class="keyword">private</span> String cust_linkman;</div><div class="line">    <span class="keyword">private</span> String cust_phone;</div><div class="line">    <span class="keyword">private</span> String cust_mobile;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Set&lt;Linkman&gt; linkmans = <span class="keyword">new</span> HashSet&lt;Linkman&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>联系人的 JavaBean 如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Linkman</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Long lkm_id;</div><div class="line">    <span class="keyword">private</span> String lkm_name;</div><div class="line">    <span class="keyword">private</span> String lkm_gender;</div><div class="line">    <span class="keyword">private</span> String lkm_phone;</div><div class="line">    <span class="keyword">private</span> String lkm_mobile;</div><div class="line">    <span class="keyword">private</span> String lkm_email;</div><div class="line">    <span class="keyword">private</span> String lkm_qq;</div><div class="line">    <span class="keyword">private</span> String lkm_position;</div><div class="line">    <span class="keyword">private</span> String lkm_memo;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Customer customer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="编写客户和联系人的映射配置文件"><a href="#编写客户和联系人的映射配置文件" class="headerlink" title="编写客户和联系人的映射配置文件"></a>编写客户和联系人的映射配置文件</h2><p>注意一对多的配置编写：</p>
<ul>
<li>多方：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Customer"</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>其中：</p>
<blockquote>
<p><code>name</code>：当前 JavaBean 中的属性<br><code>class</code>：属性的全路径<br><code>column</code>：外键的字段</p>
</blockquote>
<ul>
<li>一方：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--配置一方--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkmans"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--需要出现两个子标签--&gt;</span></div><div class="line">    <span class="comment">&lt;!--外键的字段--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Linkman"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="客户的映射配置文件"><a href="#客户的映射配置文件" class="headerlink" title="客户的映射配置文件"></a>客户的映射配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"cust_id"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_name"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_user_id"</span> <span class="attr">column</span>=<span class="string">"cust_user_id"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_create_id"</span> <span class="attr">column</span>=<span class="string">"cust_create_id"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_source"</span> <span class="attr">column</span>=<span class="string">"cust_source"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_industry"</span> <span class="attr">column</span>=<span class="string">"cust_industry"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_level"</span> <span class="attr">column</span>=<span class="string">"cust_level"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_linkman"</span> <span class="attr">column</span>=<span class="string">"cust_linkman"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_phone"</span> <span class="attr">column</span>=<span class="string">"cust_phone"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_mobile"</span> <span class="attr">column</span>=<span class="string">"cust_mobile"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkmans"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Linkman"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="联系人的映射配置文件"><a href="#联系人的映射配置文件" class="headerlink" title="联系人的映射配置文件"></a>联系人的映射配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.Linkman"</span> <span class="attr">table</span>=<span class="string">"cst_linkman"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"lkm_id"</span> <span class="attr">column</span>=<span class="string">"lkm_id"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_name"</span> <span class="attr">column</span>=<span class="string">"lkm_name"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_gender"</span> <span class="attr">column</span>=<span class="string">"lkm_gender"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_phone"</span> <span class="attr">column</span>=<span class="string">"lkm_phone"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_mobile"</span> <span class="attr">column</span>=<span class="string">"lkm_mobile"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_email"</span> <span class="attr">column</span>=<span class="string">"lkm_email"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_qq"</span> <span class="attr">column</span>=<span class="string">"lkm_qq"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_position"</span> <span class="attr">column</span>=<span class="string">"lkm_position"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_memo"</span> <span class="attr">column</span>=<span class="string">"lkm_memo"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Customer"</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="保存客户和联系人的数据"><a href="#保存客户和联系人的数据" class="headerlink" title="保存客户和联系人的数据"></a>保存客户和联系人的数据</h2><h3 id="双向关联数据保存（麻烦）"><a href="#双向关联数据保存（麻烦）" class="headerlink" title="双向关联数据保存（麻烦）"></a>双向关联数据保存（麻烦）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试双向关联</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</div><div class="line">	Session session = HibernateUtils.getCurrentSession();</div><div class="line">	Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">	Customer c1 = <span class="keyword">new</span> Customer();</div><div class="line">	c1.setCust_name(<span class="string">"小虞"</span>);</div><div class="line">	Linkman l1 = <span class="keyword">new</span> Linkman();</div><div class="line">	l1.setLkm_name(<span class="string">"小项"</span>);</div><div class="line">	Linkman l2 = <span class="keyword">new</span> Linkman();</div><div class="line">	l2.setLkm_name(<span class="string">"小羽"</span>);</div><div class="line"></div><div class="line">	<span class="comment">// 双向关联</span></div><div class="line">	c1.getLinkmans().add(l1);</div><div class="line">	c1.getLinkmans().add(l2);</div><div class="line"></div><div class="line">	l1.setCustome1r(c1);</div><div class="line">	l2.setCustomer(c1);</div><div class="line"></div><div class="line">	<span class="comment">// 保存</span></div><div class="line">	session.save(c1);</div><div class="line">	session.save(l1);</div><div class="line">	session.save(l2);</div><div class="line"></div><div class="line">	tr.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="级联保存"><a href="#级联保存" class="headerlink" title="级联保存"></a>级联保存</h3><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>如果现在代码只插入其中的一方的数据</p>
<ul>
<li><p>如果只保存其中的一方的数据，那么程序会抛出异常。</p>
</li>
<li><p>如果想完成只保存一方的数据，并且把相关联的数据都保存到数据库中，那么需要配置级联！！</p>
</li>
<li><p>级联保存是方向性</p>
</li>
</ul>
<h4 id="级联保存效果"><a href="#级联保存效果" class="headerlink" title="级联保存效果"></a>级联保存效果</h4><ul>
<li><p>级联保存：保存一方同时可以把关联的对象也保存到数据库中！！</p>
</li>
<li><p>使用 <code>cascade=&quot;save-update&quot;</code></p>
</li>
</ul>
<p>注意：<strong>级联保存有方向性</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--客户级联联系人--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkmans"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Linkman"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试级联关联</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</div><div class="line">	Session session = HibernateUtils.getCurrentSession();</div><div class="line">	Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">	Customer c1 = <span class="keyword">new</span> Customer();</div><div class="line">	c1.setCust_name(<span class="string">"小虞"</span>);</div><div class="line">	Linkman l1 = <span class="keyword">new</span> Linkman();</div><div class="line">	l1.setLkm_name(<span class="string">"小项"</span>);</div><div class="line">	Linkman l2 = <span class="keyword">new</span> Linkman();</div><div class="line">	l2.setLkm_name(<span class="string">"小羽"</span>);</div><div class="line"></div><div class="line">	<span class="comment">// 双向关联</span></div><div class="line">	c1.getLinkmans().add(l1);</div><div class="line">	c1.getLinkmans().add(l2);</div><div class="line"></div><div class="line">	<span class="comment">// 保存客户级联保存联系人</span></div><div class="line">	session.save(c1);</div><div class="line"></div><div class="line">	tr.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>相反的，要使用联系人去关联客户，那么需要在联系人的映射里面配置 <code>cascade=&quot;save_update&quot;</code>，这是只要保存了联系人，与其对应的客户也会保存或更新。</li>
</ul>
<h3 id="级联删除"><a href="#级联删除" class="headerlink" title="级联删除"></a>级联删除</h3><ul>
<li><p>1.数据库中删除含有外键的客户时，SQL 语句会报出错误的：<code>delete from customers where cid = 1;</code></p>
</li>
<li><p>2.如果使用 Hibernate 框架直接删除客户的时候，测试发现是可以删除的；</p>
</li>
<li><ul>
<li>Hibernate 框架删除有外键的信息是，会将外键先查出来置为 null，然后执行删除操作；</li>
</ul>
</li>
<li><p>3.上述的删除是普通的删除，那么也可以使用级联删除，注意：级联删除也是有方向性的！！（轻易不要使用）</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">cascade</span>=<span class="string">"delete"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="级联的取值（cascade的取值）"><a href="#级联的取值（cascade的取值）" class="headerlink" title="级联的取值（cascade的取值）"></a>级联的取值（cascade的取值）</h3><ul>
<li><code>none</code>                        – 不使用级联</li>
<li><code>save-update</code>                – 级联保存或更新</li>
<li><code>delete</code>                    – 级联删除</li>
<li><code>delete-orphan</code>                – 孤儿删除(注意：只能应用在一对多关系)</li>
<li><code>all</code>                        – 除了 delete-orphan 的所有情况（包含save-update delete）</li>
<li><code>all-delete-orphan</code>            – 包含了 delete-orphan 的所有情况（包含save-update delete delete-orphan）</li>
</ul>
<h3 id="孤儿删除（孤子删除）"><a href="#孤儿删除（孤子删除）" class="headerlink" title="孤儿删除（孤子删除）"></a>孤儿删除（孤子删除）</h3><p>只有在一对多的环境下才有孤儿删除</p>
<ul>
<li>在一对多的关系中，可以将一的一方认为是父方。将多的一方认为是子方。孤儿删除：在解除了父子关系的时候，将子方记录就直接删除。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">cascade</span>=<span class="string">"delete-orphan"</span> /&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试孤儿删除</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run3</span><span class="params">()</span> </span>&#123;</div><div class="line">	Session session = HibernateUtils.getCurrentSession();</div><div class="line">	Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">	Customer c1 = session.get(Customer.class, <span class="number">1L</span>);</div><div class="line">	Linkman l1 = session.get(Linkman.class, <span class="number">1L</span>);</div><div class="line"></div><div class="line">	<span class="comment">// 解除关系</span></div><div class="line">	c1.getLinkmans().remove(l1);</div><div class="line"></div><div class="line">	tr.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="放弃外键的维护"><a href="#放弃外键的维护" class="headerlink" title="放弃外键的维护"></a>放弃外键的维护</h2><h3 id="双方都维护外键的时候，会产生多余的-SQL-语句"><a href="#双方都维护外键的时候，会产生多余的-SQL-语句" class="headerlink" title="双方都维护外键的时候，会产生多余的 SQL 语句"></a>双方都维护外键的时候，会产生多余的 SQL 语句</h3><ul>
<li><p>想修改客户和联系人的关系，进行双向关联，双方都会维护外键，会产生多余的 SQL 语句。</p>
</li>
<li><p>产生的原因：session 的一级缓存中的快照机制，会让双方都更新数据库，产生了多余的 SQL 语句。</p>
</li>
</ul>
<h3 id="放弃外键维护"><a href="#放弃外键维护" class="headerlink" title="放弃外键维护"></a>放弃外键维护</h3><p>如果不想产生多余的 SQL 语句，那么需要一方来放弃外键的维护！</p>
<p>只有 <code>一方</code> 可以放弃，<code>多方</code> 没有哪个属性</p>
<ul>
<li>在 <code>&lt;set&gt;</code> 标签上配置一个 <code>inverse=&quot;true&quot;</code>，true：放弃，false：不放弃，默认值是false</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 放弃外键的维护 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkmans"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Linkman"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="cascade-和-inverse-的区别"><a href="#cascade-和-inverse-的区别" class="headerlink" title="cascade 和 inverse 的区别"></a>cascade 和 inverse 的区别</h3><ul>
<li><p><code>cascade</code> 用来级联操作（保存、修改和删除）;</p>
</li>
<li><p><code>inverse</code> 用来维护外键的。</p>
</li>
</ul>
<blockquote>
<p>一般情况下，在 <code>一方</code> 配置 <code>inverse</code> 放弃外键维护，在 <code>多方</code> 配置 <code>cascade</code> 来进行级联保存操作。</p>
</blockquote>
<hr>
<h1 id="Hibernate-多对多映射"><a href="#Hibernate-多对多映射" class="headerlink" title="Hibernate 多对多映射"></a>Hibernate 多对多映射</h1><hr>
<h2 id="多对多的建表原则"><a href="#多对多的建表原则" class="headerlink" title="多对多的建表原则"></a>多对多的建表原则</h2><ul>
<li><p>需要创建一个中间表，至少需要包含两个字段，作为这个表外键，分别指向两张表的主键。</p>
</li>
<li><p>两个外键一起叫联合主键。</p>
</li>
<li><p>使用 Hibernate 框架，只要编写两个 JavaBean，编写两个映射的配置文件，中间表会自动生成。</p>
</li>
</ul>
<h2 id="多对多-JavaBean-的编写"><a href="#多对多-JavaBean-的编写" class="headerlink" title="多对多 JavaBean 的编写"></a>多对多 JavaBean 的编写</h2><p>以用户和角色为例，一个用户可以有多个角色，一个角色可以被多个用户扮演。</p>
<h3 id="编写用户和角色的-JavaBean"><a href="#编写用户和角色的-JavaBean" class="headerlink" title="编写用户和角色的 JavaBean"></a>编写用户和角色的 JavaBean</h3><p>多对多都要用 <code>Set</code> 集合：</p>
<ul>
<li>用户的 JavaBean 代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Long user_id;</div><div class="line">	<span class="keyword">private</span> String user_code;</div><div class="line">	<span class="keyword">private</span> String user_name;</div><div class="line">	<span class="keyword">private</span> String user_password;</div><div class="line">	<span class="keyword">private</span> String user_state;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;Role&gt;();</div><div class="line">	<span class="comment">// 省略 get / set</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>角色的 JavaBean 代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Long role_id;</div><div class="line">	<span class="keyword">private</span> String role_name;</div><div class="line">	<span class="keyword">private</span> String role_memo;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet&lt;User&gt;();</div><div class="line">	<span class="comment">// 省略 get / set</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="用户和角色的映射配置"><a href="#用户和角色的映射配置" class="headerlink" title="用户和角色的映射配置"></a>用户和角色的映射配置</h3><ul>
<li>用户的映射配置文件如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.User"</span> <span class="attr">table</span>=<span class="string">"sys_user"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"user_id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_code"</span> <span class="attr">column</span>=<span class="string">"user_code"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_name"</span> <span class="attr">column</span>=<span class="string">"user_name"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_password"</span> <span class="attr">column</span>=<span class="string">"user_password"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_state"</span> <span class="attr">column</span>=<span class="string">"user_state"</span>/&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置多对多</span></div><div class="line">		name	集合的名称</div><div class="line">		table	中间表的名称	</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"roles"</span> <span class="attr">table</span>=<span class="string">"sys_user_role"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 当前对象在中间表的外键名称 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></div><div class="line">		<span class="comment">&lt;!-- </span></div><div class="line">			class	集合中存入对象，对象的全路径</div><div class="line">			column	集合中对象在中间表的外键的名称</div><div class="line">		 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Role"</span> <span class="attr">column</span>=<span class="string">"role_id"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>角色的映射配置文件如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.Role"</span> <span class="attr">table</span>=<span class="string">"sys_role"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"role_id"</span> <span class="attr">column</span>=<span class="string">"role_id"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"role_name"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"role_memo"</span> <span class="attr">column</span>=<span class="string">"role_memo"</span>/&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"users"</span> <span class="attr">table</span>=<span class="string">"sys_user_role"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"role_id"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.User"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>多对多进行双向关联的时候：<strong>必须有一方去放弃外键维护权</strong>。</p>
<p>否则会发生异常！</p>
<h3 id="级联保存-1"><a href="#级联保存-1" class="headerlink" title="级联保存"></a>级联保存</h3><h4 id="级联保存-2"><a href="#级联保存-2" class="headerlink" title="级联保存"></a>级联保存</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="级联删除-1"><a href="#级联删除-1" class="headerlink" title="级联删除"></a>级联删除</h4><p>（在多对多中是很少使用的）</p>
<p><strong>开发中不用！</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">cascade</span>=<span class="string">"delete"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="操作中间表"><a href="#操作中间表" class="headerlink" title="操作中间表"></a>操作中间表</h3><p>操作集合，就是操作中间表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 假设：张三用户，有2个角色，演员和导演，让张三没有演员这个角色</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.getCurrentSession();</div><div class="line">	Transaction tr = session.beginTransaction();</div><div class="line">	<span class="comment">// 获取用户和角色</span></div><div class="line">	User u1 = session.get(User.class, <span class="number">1L</span>);</div><div class="line">	Role r2 = session.get(Role.class, <span class="number">2L</span>);</div><div class="line">	<span class="comment">// 移除用户的某一个角色，那么中间表就会修改了</span></div><div class="line">	u1.getRoles().remove(r2);	</div><div class="line">	tr.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/hibernate0400.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-green&quot;&gt;Hibernate 关联关系映射&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Hibernate 持久化类、缓存与事务</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-05-30-JavaWeb-Hibernate03.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-05-30-JavaWeb-Hibernate03.html</id>
    <published>2018-05-30T08:43:19.000Z</published>
    <updated>2018-05-30T09:02:05.060Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/hibernate0300.png"></div>

<p id="div-border-left-green">Hibernate 持久化类、缓存与事务。</p>

<a id="more"></a>
<hr>
<h1 id="Hibernate-的持久化类"><a href="#Hibernate-的持久化类" class="headerlink" title="Hibernate 的持久化类"></a>Hibernate 的持久化类</h1><hr>
<h2 id="什么是持久化类"><a href="#什么是持久化类" class="headerlink" title="什么是持久化类"></a>什么是持久化类</h2><p>持久化类：就是一个 Java 类（自己编写的 JavaBean），这个 Java 类与表建立了映射关系就可以称为是持久化类。</p>
<ul>
<li>持久化类 = JavaBean + xxx.hbm.xml</li>
</ul>
<h2 id="持久化类的编写规则"><a href="#持久化类的编写规则" class="headerlink" title="持久化类的编写规则"></a>持久化类的编写规则</h2><ul>
<li>提供一个无参数 public 访问控制符的构造器     – 底层需要进行反射。</li>
<li>提供一个标识属性，映射数据表主键字段       – 唯一标识 OID。数据库中通过主键，Java 对象通过地址确定对象，持久化类通过唯一标识 OID 确定记录。</li>
<li>所有属性提供 public 访问控制符的 set 或者 get 方法</li>
<li>标识属性应尽量使用基本数据类型的包装类型</li>
</ul>
<h2 id="区分自然主键和代理主键"><a href="#区分自然主键和代理主键" class="headerlink" title="区分自然主键和代理主键"></a>区分自然主键和代理主键</h2><p>创建表的时候</p>
<ul>
<li><p>自然主键：对象本身的一个属性。创建一个人员表，每个人都有一个身份证号（唯一的）。使用身份证号作为表的主键，自然主键。（开发中不会使用这种方式）</p>
</li>
<li><p>代理主键：不是对象本身的一个属性。创建一个人员表，为每个人员单独创建一个字段。用这个字段作为主键，代理主键。（开发中推荐使用这种方式）</p>
</li>
</ul>
<ol>
<li>创建表的时候尽量使用代理主键创建表</li>
</ol>
<h2 id="主键的生成策略"><a href="#主键的生成策略" class="headerlink" title="主键的生成策略"></a>主键的生成策略</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--主键的生成策略--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">length</span>=<span class="string">"30"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>重要的是 <code>uuid</code> 和 <code>native</code></p>
<h3 id="increment"><a href="#increment" class="headerlink" title="increment"></a>increment</h3><p>适用于 short，int，long 作为主键。不是使用的数据库自动增长机制。</p>
<ul>
<li>Hibernate中提供的一种增长机制。</li>
<li>先进行查询：<code>select max(id) from user;</code></li>
<li>再进行插入：获得 <code>最大值 + 1</code>作为新的记录的主键。</li>
</ul>
<p>SQL 代码如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Hibernate: </div><div class="line">    <span class="keyword">select</span></div><div class="line">        <span class="keyword">max</span>(<span class="keyword">id</span>) </div><div class="line">    <span class="keyword">from</span></div><div class="line">        t_user</div><div class="line">Hibernate: </div><div class="line">    <span class="keyword">insert</span> </div><div class="line">    <span class="keyword">into</span></div><div class="line">        t_user</div><div class="line">        (<span class="keyword">name</span>, age, <span class="keyword">id</span>) </div><div class="line">    <span class="keyword">values</span></div><div class="line">        (?, ?, ?)</div></pre></td></tr></table></figure>
<p><em>问题：</em> 不能在集群环境下或者有并发访问的情况下使用。</p>
<h3 id="identity"><a href="#identity" class="headerlink" title="identity"></a>identity</h3><p>适用于 short，int，long 作为主键。但是这个必须使用在有自动增长数据库中，采用的是数据库底层的自动增长机制。</p>
<ul>
<li>底层使用的是数据库的自动增长（auto_increment）。像 Oracle 数据库没有自动增长。</li>
</ul>
<h3 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h3><p>适用于 short，int，long 作为主键。底层使用的是序列的增长方式。</p>
<ul>
<li>Oracle 数据库底层没有自动增长，想自动增长需要使用序列。</li>
</ul>
<h3 id="uuid-★"><a href="#uuid-★" class="headerlink" title="uuid ★"></a>uuid <strong>★</strong></h3><p>适用于 char，varchar 类型的作为主键。</p>
<ul>
<li>使用随机的字符串作为主键。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试 uuid 生成主键策略</div><div class="line"> * Person 类有两个属性 String pname 和 String pid</div><div class="line"> * Person.hbm.xml 如下编写：</div><div class="line"> * &lt;id name="pid" column="pid"&gt;</div><div class="line">        &lt;generator class="uuid"/&gt;</div><div class="line">    &lt;/id&gt;</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runUUID</span><span class="params">()</span> </span>&#123;</div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line">    Person p = <span class="keyword">new</span> Person();</div><div class="line">    p.setPname(<span class="string">"老王"</span>);</div><div class="line"></div><div class="line">    session.save(p);</div><div class="line">    tr.commit();</div><div class="line">    session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看生成的 uuid 主键：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from t_person;</div><div class="line">+----------------------------------+--------+</div><div class="line">| pid                              | pname  |</div><div class="line">+----------------------------------+--------+</div><div class="line">| ff80808163ab33ae0163ab33b2370000 | 老王   |</div><div class="line">+----------------------------------+--------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<h3 id="native-★"><a href="#native-★" class="headerlink" title="native ★"></a>native <strong>★</strong></h3><p>本地策略。根据底层的数据库不同，自动选择适用于该种数据库的生成策略。（short，int，long）</p>
<ul>
<li><p>如果底层使用 MySQL 数据库：相当于 identity</p>
</li>
<li><p>如果底层使用 Oracle 数据库：相当于 sequence</p>
</li>
</ul>
<h3 id="assigned"><a href="#assigned" class="headerlink" title="assigned"></a>assigned</h3><p>主键的生成不用 Hibernate 管理了。必须手动设置主键。    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.setPid(<span class="string">"abc"</span>);</div></pre></td></tr></table></figure>
<hr>
<h1 id="Hibernate-持久化对象的状态"><a href="#Hibernate-持久化对象的状态" class="headerlink" title="Hibernate 持久化对象的状态"></a>Hibernate 持久化对象的状态</h1><hr>
<h2 id="持久化对象的状态"><a href="#持久化对象的状态" class="headerlink" title="持久化对象的状态"></a>持久化对象的状态</h2><p>Hibernate 为了管理持久化类：将持久化类分成了三个状态</p>
<ul>
<li>瞬时态：Transient  Object</li>
<li><ul>
<li>没有持久化标识 OID，没有被纳入到 Session 对象的管理。</li>
</ul>
</li>
<li><p>持久态：Persistent Object</p>
</li>
<li><ul>
<li>有持久化标识 OID，已经被纳入到 Session 对象的管理。</li>
</ul>
</li>
<li><p>脱管态：Detached Object</p>
</li>
<li><ul>
<li>有持久化标识 OID，没有被纳入到 Session 对象的管理。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 持久化对象的状态</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run3</span><span class="params">()</span> </span>&#123;</div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">    <span class="comment">// 瞬时态：没有 OID 的值，也没有被 session 管理，此时 user 对象是瞬时态对象</span></div><div class="line">    User user=<span class="keyword">new</span> User();</div><div class="line">    user.setName(<span class="string">"空空"</span>);</div><div class="line">    user.setAge(<span class="number">18</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 此时 user 中已经有 id 值了，默认的情况下，把 user 对象也保存到 session 的缓存中</span></div><div class="line">    session.save(user);</div><div class="line">    System.out.println(user.getId());</div><div class="line">    <span class="comment">// 此时，user 是持久化对象</span></div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">    <span class="comment">// session 销毁，缓存没有了</span></div><div class="line">    session.close();</div><div class="line">    <span class="comment">// 此时 user 对象存在 id 值，但是 session 销毁了，缓存不存在了，session 不管理 user 对象了</span></div><div class="line">    <span class="comment">// user 是托管态对象</span></div><div class="line">    System.out.println(user.getId());</div><div class="line">    System.out.println(user.getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制台输出的结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Hibernate: </div><div class="line">    <span class="function">select</span></div><div class="line">        <span class="title">max</span><span class="params">(id)</span> </div><div class="line">    from</div><div class="line">        t_user</div><div class="line">2           <span class="comment">// 此时的 user 有 id 值，并且被 session 管理，证明 user 是持久态对象</span></div><div class="line">Hibernate: </div><div class="line">    insert </div><div class="line">    into</div><div class="line">        <span class="title">t_user</span></div><div class="line">        <span class="params">(name, age, id)</span> </div><div class="line">    <span class="title">values</span></div><div class="line">        <span class="params">(?, ?, ?)</span></div><div class="line">2           <span class="comment">// 此时 session 已经销毁，但是 user 还有 id 值，证明 user 是托管态对象</span></div><div class="line">空空</div></pre></td></tr></table></figure>
<h2 id="Hibernate-持久化对象状态的转换"><a href="#Hibernate-持久化对象状态的转换" class="headerlink" title="Hibernate 持久化对象状态的转换"></a>Hibernate 持久化对象状态的转换</h2><h3 id="瞬时态"><a href="#瞬时态" class="headerlink" title="瞬时态"></a>瞬时态</h3><ul>
<li>获得瞬时态的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">User user = <span class="keyword">new</span> User()</div></pre></td></tr></table></figure>
<ul>
<li>瞬时态对象转换持久态</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">save();</div><div class="line">或者</div><div class="line">saveOrUpdate();</div></pre></td></tr></table></figure>
<ul>
<li>瞬时态对象转换成脱管态</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user.setId(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<h3 id="持久态"><a href="#持久态" class="headerlink" title="持久态"></a>持久态</h3><ul>
<li>获得持久态的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">get();</div><div class="line">或者</div><div class="line">load();</div></pre></td></tr></table></figure>
<ul>
<li>持久态转换成瞬时态对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete();  <span class="comment">// 比较有争议的，进入特殊的状态（删除态：Hibernate 中不建议使用的）</span></div></pre></td></tr></table></figure>
<ul>
<li>持久态对象转成脱管态对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">session.close()/evict()/clear();</div></pre></td></tr></table></figure>
<h3 id="脱管态"><a href="#脱管态" class="headerlink" title="脱管态"></a>脱管态</h3><ul>
<li>获得托管态对象:不建议直接获得脱管态的对象.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">User user = <span class="keyword">new</span> User();</div><div class="line">user.setId(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<ul>
<li>脱管态对象转换成持久态对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">update();或者</div><div class="line">saveOrUpdate();或者</div><div class="line">lock();</div></pre></td></tr></table></figure>
<ul>
<li>脱管态对象转换成瞬时态对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user.setId(<span class="keyword">null</span>);</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 持久态对象有自动更新数据库的能力！！</p>
<p>持久态对象自动更新数据库：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 持久态对象自动更新数据库</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run4</span><span class="params">()</span> </span>&#123;</div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">    <span class="comment">// user 是持久态对象，有自动更新数据库的能力</span></div><div class="line">    User user = session.get(User.class, <span class="number">1</span>);</div><div class="line">    <span class="comment">// 重新设置名称</span></div><div class="line">    user.setName(<span class="string">"天才"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// session.update(user);</span></div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">    session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码注释掉了 <code>session.update(user);</code> 方法，但是数据库依旧更新了，SQL 语句也正常执行了。</p>
<p>控制台输出结果（没调用 update，但是执行了 update 语句。原因是因为一级缓存的存在。）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Hibernate: </div><div class="line">    <span class="keyword">select</span></div><div class="line">        user0_.id <span class="keyword">as</span> id1_1_0_,</div><div class="line">        user0_.name <span class="keyword">as</span> name2_1_0_,</div><div class="line">        user0_.age <span class="keyword">as</span> age3_1_0_ </div><div class="line">    <span class="keyword">from</span></div><div class="line">        t_user user0_ </div><div class="line">    <span class="keyword">where</span></div><div class="line">        user0_.id=?</div><div class="line">Hibernate: </div><div class="line">    <span class="keyword">update</span></div><div class="line">        t_user </div><div class="line">    <span class="keyword">set</span></div><div class="line">        <span class="keyword">name</span>=?,</div><div class="line">        age=? </div><div class="line">    <span class="keyword">where</span></div><div class="line">        <span class="keyword">id</span>=?</div></pre></td></tr></table></figure>
<hr>
<h1 id="Hibernate-的一级缓存"><a href="#Hibernate-的一级缓存" class="headerlink" title="Hibernate 的一级缓存"></a>Hibernate 的一级缓存</h1><hr>
<h2 id="Session-对象的一级缓存（重点）"><a href="#Session-对象的一级缓存（重点）" class="headerlink" title="Session 对象的一级缓存（重点）"></a>Session 对象的一级缓存（重点）</h2><h3 id="什么是缓存？"><a href="#什么是缓存？" class="headerlink" title="什么是缓存？"></a>什么是缓存？</h3><p>其实就是一块内存空间，将数据源（数据库或者文件）中的数据存放到缓存中。再次获取的时候，直接从缓存中获取。可以提升程序的性能！</p>
<h3 id="Hibernate-框架提供了两种缓存"><a href="#Hibernate-框架提供了两种缓存" class="headerlink" title="Hibernate 框架提供了两种缓存"></a>Hibernate 框架提供了两种缓存</h3><p>一级缓存</p>
<ul>
<li>自带的不可卸载的。一级缓存的生命周期与 session 一致。一级缓存称为 session 级别的缓存。</li>
</ul>
<p>二级缓存（有更好的替代品）</p>
<ul>
<li>默认没有开启，需要手动配置才可以使用的。二级缓存可以在多个 session 中共享数据，二级缓存称为是 sessionFactory 级别的缓存。</li>
</ul>
<h3 id="Session-对象的缓存概述"><a href="#Session-对象的缓存概述" class="headerlink" title="Session 对象的缓存概述"></a>Session 对象的缓存概述</h3><ul>
<li><p>Session 接口中，有一系列的 java 的集合，这些 java 集合构成了 Session 级别的缓存（一级缓存），将对象存入到一级缓存中，session 没有结束生命周期，那么对象在 session 中存放着</p>
</li>
<li><p>内存中包含 Session 实例 –&gt; Session 的缓存（一些集合） –&gt; 集合中包含的是缓存对象！</p>
</li>
</ul>
<h3 id="证明一级缓存的存在，编写查询的代码即可证明"><a href="#证明一级缓存的存在，编写查询的代码即可证明" class="headerlink" title="证明一级缓存的存在，编写查询的代码即可证明"></a>证明一级缓存的存在，编写查询的代码即可证明</h3><ul>
<li>在同一个 Session 对象中两次查询，可以证明使用了缓存。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 证明一级缓存的存在</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run5</span><span class="params">()</span> </span>&#123;</div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">    User user = <span class="keyword">new</span> User();</div><div class="line">    user.setName(<span class="string">"天行健"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 保存用户，user 已经存入到 session 的缓存中</span></div><div class="line">    <span class="comment">// id 是生成的 id</span></div><div class="line">    Serializable id = session.save(user);</div><div class="line">    System.out.println(id);</div><div class="line"></div><div class="line">    <span class="comment">// 获取对象，不会看到 SQL 语句</span></div><div class="line">    User user2 = session.get(User.class, id);</div><div class="line">    System.out.println(user2.getName());</div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">    session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制台输出结果：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Hibernate: </div><div class="line">    <span class="keyword">insert</span> </div><div class="line">    <span class="keyword">into</span></div><div class="line">        t_user</div><div class="line">        (<span class="keyword">name</span>, age) </div><div class="line">    <span class="keyword">values</span></div><div class="line">        (?, ?)</div><div class="line"><span class="number">4</span></div><div class="line">天行健</div></pre></td></tr></table></figure>
<p><strong>分析：</strong> 获取对象的时候没有查询的 SQL 语句执行，说明 session 是从缓存中获取对象的。证明 session 一级缓存的存在。</p>
<h3 id="Hibernate框架是如何做到数据发生变化时进行同步操作的呢？"><a href="#Hibernate框架是如何做到数据发生变化时进行同步操作的呢？" class="headerlink" title="Hibernate框架是如何做到数据发生变化时进行同步操作的呢？"></a>Hibernate框架是如何做到数据发生变化时进行同步操作的呢？</h3><ul>
<li><p>使用 get 方法查询 User 对象</p>
</li>
<li><p>然后设置 User 对象的一个属性，注意：没有做 update 操作。发现，数据库中的记录也改变了。</p>
</li>
<li><p>利用快照机制来完成的（SnapShot）</p>
</li>
</ul>
<h3 id="控制Session的一级缓存（了解）"><a href="#控制Session的一级缓存（了解）" class="headerlink" title="控制Session的一级缓存（了解）"></a>控制Session的一级缓存（了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Session.clear(); <span class="comment">// 清空缓存。</span></div><div class="line">Session.evict(Object entity); <span class="comment">// 从一级缓存中清除指定的实体对象。</span></div><div class="line">Session.flush(); <span class="comment">// 刷出缓存</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="Hibernate中的事务与并发"><a href="#Hibernate中的事务与并发" class="headerlink" title="Hibernate中的事务与并发"></a>Hibernate中的事务与并发</h1><hr>
<h2 id="事务相关的概念"><a href="#事务相关的概念" class="headerlink" title="事务相关的概念**"></a>事务相关的概念**</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><ul>
<li>事务就是逻辑上的一组操作，组成事务的各个执行单元，操作要么全都成功，要么全都失败.</li>
<li>转账的例子：扣钱，加钱。两个操作组成了一个事情！</li>
</ul>
<h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><ul>
<li>原子性    – 事务不可分割。</li>
<li>一致性    – 事务执行的前后数据的完整性保持一致。</li>
<li>隔离性    – 一个事务执行的过程中，不应该受到其他的事务的干扰。</li>
<li>持久性    – 事务一旦提交，数据就永久保持到数据库中。</li>
</ul>
<h3 id="如果不考虑隔离性：引发一些读的问题"><a href="#如果不考虑隔离性：引发一些读的问题" class="headerlink" title="如果不考虑隔离性：引发一些读的问题"></a>如果不考虑隔离性：引发一些读的问题</h3><ul>
<li><p>脏读            – 一个事务读到了另一个事务未提交的数据。</p>
</li>
<li><p>不可重复读            – 一个事务读到了另一个事务已经提交的 update 数据，导致多次查询结果不一致。</p>
</li>
<li><p>虚读            – 一个事务读到了另一个事务已经提交的 insert 数据，导致多次查询结构不一致。</p>
</li>
</ul>
<h3 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h3><p>通过设置数据库的隔离级别来解决上述读的问题</p>
<ul>
<li><p>未提交读：以上的读的问题都有可能发生。</p>
</li>
<li><p>已提交读：避免脏读，但是不可重复读，虚读都有可能发生。</p>
</li>
<li><p>可重复读：避免脏读，不可重复读。但是虚读是有可能发生。</p>
</li>
<li><p>串行化：以上读的情况都可以避免。</p>
</li>
</ul>
<p>如果想在 Hibernate 的框架中来设置隔离级别，需要在 <code>hibernate.cfg.xml</code> 的配置文件中通过标签来配置（默认隔离级别是 4）：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.isolation"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过：<code>hibernate.connection.isolation = 4</code> 来配置，取值如下：</p>
<ul>
<li>1 — Read uncommitted isolation</li>
<li>2 — Read committed isolation</li>
<li>4 — Repeatable read isolation</li>
<li>8 — Serializable isolation</li>
</ul>
<h2 id="丢失更新的问题"><a href="#丢失更新的问题" class="headerlink" title="丢失更新的问题"></a>丢失更新的问题</h2><p>如果不考虑隔离性，也会产生写入数据的问题，这一类的问题叫丢失更新的问题。</p>
<p>例如：两个事务同时对某一条记录做修改，就会引发丢失更新的问题。</p>
<ul>
<li><p>A事务和B事务同时获取到一条数据，同时再做修改</p>
</li>
<li><p>如果A事务修改完成后，提交了事务</p>
</li>
<li><p>B事务修改完成后，不管是提交还是回滚，如果不做处理，都会对数据产生影响</p>
</li>
</ul>
<h3 id="丢失更新问题演示"><a href="#丢失更新问题演示" class="headerlink" title="丢失更新问题演示"></a>丢失更新问题演示</h3><p>更新前的数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from t_user;</div><div class="line">+----+-----------+------+</div><div class="line">| id | name      | age  |</div><div class="line">+----+-----------+------+</div><div class="line">|  1 | 天才      |   18 |</div><div class="line">|  2 | 空空      |   18 |</div><div class="line">+----+-----------+------+</div><div class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</div></pre></td></tr></table></figure>
<p>假设 runA 方法和 runB() 方法同时对 t_user 表进行修改，同时查询到 id = 1 的用户（需加断点），对其进行修改。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 丢失更新1</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runA</span><span class="params">()</span> </span>&#123;</div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">    User user = session.get(User.class, <span class="number">1</span>);</div><div class="line">    <span class="comment">// 修改 id = 1 的用户名为白蛇</span></div><div class="line">    user.setName(<span class="string">"白蛇"</span>);</div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">    session.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 丢失更新2</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runB</span><span class="params">()</span> </span>&#123;</div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">    User user = session.get(User.class, <span class="number">1</span>);</div><div class="line">    <span class="comment">// 修改 id = 1 的用户年龄为 88 </span></div><div class="line">    user.setAge(<span class="number">88</span>);</div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">    session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>分析：假设 runA 方法先提交，那么数据库中的数据为：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from t_user;</div><div class="line">+----+-----------+------+</div><div class="line">| id | name      | age  |</div><div class="line">+----+-----------+------+</div><div class="line">|  1 | 白蛇      |   18 |</div><div class="line">|  2 | 空空      |   18 |</div><div class="line">+----+-----------+------+</div><div class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</div></pre></td></tr></table></figure>
<blockquote>
<p>分析：runA 提交之后，runB 提交，则此时数据库中数据为：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from t_user;</div><div class="line">+----+-----------+------+</div><div class="line">| id | name      | age  |</div><div class="line">+----+-----------+------+</div><div class="line">|  1 | 天才      |   88 |</div><div class="line">|  2 | 空空      |   18 |</div><div class="line">+----+-----------+------+</div><div class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</div></pre></td></tr></table></figure>
<blockquote>
<p>分析：最后数据库中的数据只是 runB 修改的结果，而 runA 修改的结果“丢失了”，这就是丢失更新的问题。</p>
</blockquote>
<h3 id="丢失更新解决方案"><a href="#丢失更新解决方案" class="headerlink" title="丢失更新解决方案"></a>丢失更新解决方案</h3><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>乐观锁采用 <code>版本号</code> 的机制来解决的。会给表结构添加一个字段 version = 0 ，默认值是 0</p>
<ul>
<li><p>当 A 事务在操作完该条记录，提交事务时，会先检查版本号，如果发生版本号的值相同时，才可以提交事务。同时会更新版本号 version = 1 。</p>
</li>
<li><p>当 B 事务操作完该条记录时，提交事务时，会先检查版本号，如果发现版本不同时，程序会出现错误。</p>
</li>
</ul>
<h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>悲观锁采用的是数据库提供的一种锁机制，如果采用做了这种机制，在 SQL 语句的后面添加 for update 子句</p>
<ul>
<li>当 A 事务在操作该条记录时，会把该条记录锁起来，其他事务是不能操作这条记录的。</li>
<li>只有当 A 事务提交后，锁释放了，其他事务才能操作该条记录</li>
</ul>
<h3 id="使用-Hibernate-框架解决丢失更新的问题"><a href="#使用-Hibernate-框架解决丢失更新的问题" class="headerlink" title="使用 Hibernate 框架解决丢失更新的问题"></a>使用 Hibernate 框架解决丢失更新的问题</h3><h4 id="悲观锁-1"><a href="#悲观锁-1" class="headerlink" title="悲观锁"></a>悲观锁</h4><ul>
<li>使用session.get(Customer.class, 1,LockMode.UPGRADE); 方法</li>
</ul>
<h4 id="乐观锁-1"><a href="#乐观锁-1" class="headerlink" title="乐观锁"></a>乐观锁</h4><ul>
<li>在对应的 JavaBean 中添加一个属性，名称可以是任意的。例如：<code>private Integer version</code>; 并提供 <code>get</code> 和 <code>set</code> 方法。</li>
<li>在映射的配置文件中，提供 <code>&lt;version name=&quot;version&quot;/&gt;</code> 标签即可。</li>
<li>注意 version 标签的编写位置。 </li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--乐观锁，使用 version 标签--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">name</span>=<span class="string">"version"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">length</span>=<span class="string">"30"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="绑定本地的Session"><a href="#绑定本地的Session" class="headerlink" title="绑定本地的Session"></a>绑定本地的Session</h2><p>Hibernate 框架中，使用 session 对象开启事务，所以需要来传递 session 对象，框架提供了 ThreadLocal 的方式</p>
<ul>
<li>需要在 <code>hibernate.cfg.xml</code> 的配置文件中提供配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--开启绑定本地的 session--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>重新编写 <code>HibernateUtils</code> 的工具类，使用 SessionFactory 的 getCurrentSession() 方法，获取当前的 Session 对象。并且该 Session 对象不用手动关闭，线程结束了，会自动关闭。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 业务层开事务</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 从 ThreadLocal 类中获取到 session 对象</span></div><div class="line">    <span class="keyword">return</span> FACTORY.getCurrentSession();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 想使用 <code>getCurrentSession()</code> 方法，必须要先配置才能使用。</p>
<h3 id="演示绑定本地-session"><a href="#演示绑定本地-session" class="headerlink" title="演示绑定本地 session"></a>演示绑定本地 session</h3><h4 id="web层"><a href="#web层" class="headerlink" title="web层"></a>web层</h4><p>浏览器端发送请求，同时新增两个用户。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        User u1 = <span class="keyword">new</span> User();</div><div class="line">        u1.setName(<span class="string">"测试1"</span>);</div><div class="line"></div><div class="line">        User u2 = <span class="keyword">new</span> User();</div><div class="line">        u2.setName(<span class="string">"测试2"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> UserService().save(u1, u2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h4><p>业务层获取当前线程的 session，开启事务，调用 dao 保存用户，若发生异常则回滚。</p>
<p>线程结束后 session 自动关闭。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User u1, User u2)</span> </span>&#123;</div><div class="line">        UserDao dao = <span class="keyword">new</span> UserDao();</div><div class="line">        Session session = HibernateUtils.getCurrentSession();</div><div class="line">        Transaction tr = session.beginTransaction();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            dao.save1(u1);</div><div class="line">            <span class="comment">// int a = 10 / 0;</span></div><div class="line">            dao.save2(u2);</div><div class="line">            tr.commit();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// 出现问题，回滚事务</span></div><div class="line">            tr.rollback();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// session.close();</span></div><div class="line">            <span class="comment">// 以前需要自己释放资源</span></div><div class="line">            <span class="comment">// 现在 session 不用关闭，线程结束后 session 自动关闭。</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><p>获取当前 session，与业务层 session 保持一致，进行保存操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save1</span><span class="params">(User u1)</span> </span>&#123;</div><div class="line">        Session session = HibernateUtils.getCurrentSession();</div><div class="line">        session.save(u1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save2</span><span class="params">(User u2)</span> </span>&#123;</div><div class="line">        Session session = HibernateUtils.getCurrentSession();</div><div class="line">        session.save(u2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>访问 Servlet，数据添加完成。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from t_user;</div><div class="line">+----+---------+------+---------+</div><div class="line">| id | name    | age  | version |</div><div class="line">+----+---------+------+---------+</div><div class="line">|  1 | 天才    |   88 |       1 |</div><div class="line">|  2 | 空空    |   18 |       0 |</div><div class="line">|  7 | 测试1   | NULL |       0 |</div><div class="line">|  8 | 测试2   | NULL |       0 |</div><div class="line">+----+---------+------+---------+</div><div class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/hibernate0300.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-green&quot;&gt;Hibernate 持久化类、缓存与事务。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Hibernate 配置及接口</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-05-30-JavaWeb-Hibernate02.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-05-30-JavaWeb-Hibernate02.html</id>
    <published>2018-05-30T08:33:19.000Z</published>
    <updated>2018-05-30T09:02:17.431Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/hibernate0200.png"></div>

<p id="div-border-left-green">Hibernate 配置文件与接口方法。</p>

<a id="more"></a>
<hr>
<h1 id="映射配置文件"><a href="#映射配置文件" class="headerlink" title="映射配置文件"></a>映射配置文件</h1><hr>
<p>映射文件，即类与表的映射配置文件，假设是 <code>Customer.hbm.xml</code></p>
<h2 id="lt-class-gt-标签"><a href="#lt-class-gt-标签" class="headerlink" title="&lt;class&gt;标签"></a><code>&lt;class&gt;标签</code></h2><table>
<thead>
<tr>
<th style="text-align:center">&lt;class&gt; 标签</th>
<th>用来将类与数据库表建立映射关系</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td>类的全路径</td>
</tr>
<tr>
<td style="text-align:center">table</td>
<td>表名.(类名与表名一致,那么table属性也可以省略)</td>
</tr>
<tr>
<td style="text-align:center">catalog</td>
<td>数据库的名称，基本上都会省略不写</td>
</tr>
</tbody>
</table>
<h2 id="lt-id-gt-标签"><a href="#lt-id-gt-标签" class="headerlink" title="&lt;id&gt;标签"></a><code>&lt;id&gt;标签</code></h2><table>
<thead>
<tr>
<th style="text-align:center">&lt;id&gt; 标签</th>
<th>用来将类中的属性与表中的主键建立映射，id 标签就是用来配置主键的</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td>类中属性名</td>
</tr>
<tr>
<td style="text-align:center">column</td>
<td>表中的字段名。（如果类中的属性名与表中的字段名一致,那么 column 可以省略。）</td>
</tr>
<tr>
<td style="text-align:center">length</td>
<td>字段的程度，如果数据库已经创建好了，那么 length 可以不写。如果没有创建好，生成表结构时，length 最好指定。</td>
</tr>
</tbody>
</table>
<h2 id="lt-property-gt-标签"><a href="#lt-property-gt-标签" class="headerlink" title="&lt;property&gt;标签"></a><code>&lt;property&gt;标签</code></h2><table>
<thead>
<tr>
<th style="text-align:center">&lt;property&gt; 标签</th>
<th>用来将类中的普通属性与表中的字段建立映射</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td>类中属性名</td>
</tr>
<tr>
<td style="text-align:center">column</td>
<td>表中的字段名（如果类中的属性名与表中的字段名一致,那么column可以省略。）</td>
</tr>
<tr>
<td style="text-align:center">length</td>
<td>数据长度</td>
</tr>
<tr>
<td style="text-align:center">type</td>
<td>数据类型（一般都不需要编写，如果写需要按着规则来编写）<br>Hibernate 的数据类型    type=”string”<br>Java 的数据类型        type=”java.lang.String”<br> 数据库字段的数据类型    &lt;column name=”name” sql-type=”varchar”/&gt;</td>
</tr>
</tbody>
</table>
<p><strong>注：</strong> 配置不需要那么麻烦，一般默认的就可以了。</p>
<hr>
<h1 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h1><hr>
<h2 id="核心配置文件的两种方式"><a href="#核心配置文件的两种方式" class="headerlink" title="核心配置文件的两种方式"></a>核心配置文件的两种方式</h2><h3 id="属性文件"><a href="#属性文件" class="headerlink" title="属性文件"></a>属性文件</h3><p>第一种方式是属性文件的形式，即 properties 的配置文件</p>
<p><code>hibernate.properties</code> 里面的编写规则如下：（key=value）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hibernate.connection.driver_class=com.mysql.jdbc.Driver</div></pre></td></tr></table></figure>
<p>缺点：不能加载映射的配置文件，需要手动编写代码去加载</p>
<h3 id="xml-文件（★）"><a href="#xml-文件（★）" class="headerlink" title="xml 文件（★）"></a>xml 文件（<strong>★</strong>）</h3><p>第二种方式是 XML 文件的形式，开发基本都会选择这种方式（<strong>★</strong>）</p>
<p><code>hibernate.cfg.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span> &gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>优点</strong></p>
<ul>
<li>格式比较清晰</li>
<li>编写有提示</li>
<li>可以在该配置文件中加载映射的配置文件（最主要的）</li>
</ul>
<h2 id="hibernate-cfg-xml-的配置文件详解"><a href="#hibernate-cfg-xml-的配置文件详解" class="headerlink" title="hibernate.cfg.xml 的配置文件详解"></a><code>hibernate.cfg.xml</code> 的配置文件详解</h2><h3 id="必须有的配置"><a href="#必须有的配置" class="headerlink" title="必须有的配置"></a>必须有的配置</h3><ul>
<li>数据库连接信息:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hibernate.connection.driver_class       -- 连接数据库驱动程序</div><div class="line">hibernate.connection.url        -- 连接数据库 URL</div><div class="line">hibernate.connection.username       -- 数据库用户名</div><div class="line">hibernate.connection.password       -- 数据库密码</div></pre></td></tr></table></figure>
<ul>
<li>方言:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hibernate.dialect       -- 操作数据库方言</div></pre></td></tr></table></figure>
<h3 id="可选的配置"><a href="#可选的配置" class="headerlink" title="可选的配置"></a>可选的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">* hibernate.show_sql        -- 显示 SQL，控制台输出 SQL 语句</div><div class="line">* hibernate.format_sql      -- 格式化控制台输出的 SQL 语句</div><div class="line"></div><div class="line">* hibernate.hbm2ddl.auto        -- 通过映射转成DDL语句</div><div class="line">    * create            -- 每次都会创建一个新的表。 ---测试的时候使用</div><div class="line">    * create-drop       -- 每次都会创建一个新的表，当执行结束之后，将创建的这个表删除。   ---测试的时候使用</div><div class="line">    * update★            -- 如果有表，使用原来的表。没有表，创建一个新的表。同时更新表结构。</div><div class="line">    * validate          -- 如果有表，使用原来的表。同时校验映射文件与表中字段是否一致如果不一致就会报错。</div></pre></td></tr></table></figure>
<h3 id="加载映射"><a href="#加载映射" class="headerlink" title="加载映射"></a>加载映射</h3><ul>
<li>如果是 XML 方式：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/renkaigis/domain/Customer.hbm.xml"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="单表最基本的-Hibernate-配置文件"><a href="#单表最基本的-Hibernate-配置文件" class="headerlink" title="单表最基本的 Hibernate 配置文件"></a>单表最基本的 Hibernate 配置文件</h2><p><code>hibernate.cfg.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--记住：先配置 SessionFactory 标签，一个数据库对应一个 SessionFactory 标签--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--必须配置的参数有 5 个，4 大参数和数据库的方言--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///hibernate_01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--数据库的方言--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--可选配置--&gt;</span></div><div class="line">        <span class="comment">&lt;!--控制台显示 SQL 语句--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--格式化显示的 SQL 语句--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--生成数据库表结构--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--映射配置文件，需要引入映射的配置文件--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/renkaigis/domain/Customer.hbm.xml"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="Hibernate-常用的接口和类"><a href="#Hibernate-常用的接口和类" class="headerlink" title="Hibernate 常用的接口和类"></a>Hibernate 常用的接口和类</h1><hr>
<h2 id="Configuration-类和作用"><a href="#Configuration-类和作用" class="headerlink" title="Configuration 类和作用"></a>Configuration 类和作用</h2><h3 id="Configuration类"><a href="#Configuration类" class="headerlink" title="Configuration类"></a>Configuration类</h3><ul>
<li><p>Configuration 对象用于配置并且启动 Hibernate。</p>
</li>
<li><p>Hibernate 应用通过该对象来获得 <code>对象-关系映射</code> 文件中的元数据，以及动态配置 Hibernate 的属性，然后创建 SessionFactory 对象。</p>
</li>
</ul>
<p>简而言之：加载 Hibernate 的配置文件，可以获取 SessionFactory 对象。</p>
<h3 id="Configuration类的其他应用（了解）"><a href="#Configuration类的其他应用（了解）" class="headerlink" title="Configuration类的其他应用（了解）"></a>Configuration类的其他应用（了解）</h3><p>加载配置文件的种类，Hibernate 支持 xml 和 properties 类型的配置文件，在开发中基本都使用 XML 配置文件的方式。</p>
<ul>
<li>如果采用的是 properties 的配置文件，那么通过下面语句可以加载配置文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Configuration configuration = <span class="keyword">new</span> Configuration();</div></pre></td></tr></table></figure>
<p>但是需要自己手动加载映射文件</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.addResource(<span class="string">"cn/itcast/domain/Student.hbm.xml"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>如果采用的 XML 的配置文件，通过下面语句可直接加载配置文件和映射文件。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Configuration configuration = <span class="keyword">new</span> Configuration().configure();</div></pre></td></tr></table></figure>
<h2 id="SessionFactory-类-★"><a href="#SessionFactory-类-★" class="headerlink" title="SessionFactory 类 ★"></a>SessionFactory 类 ★</h2><p>SessionFactory 是工厂类，负责初始化 Hibernate，充当数据存储源，并负责创建 Session 对象。</p>
<h3 id="SessionFactory-类的特点"><a href="#SessionFactory-类的特点" class="headerlink" title="SessionFactory 类的特点"></a>SessionFactory 类的特点</h3><ul>
<li><p>由Configuration 通过加载配置文件创建该对象。</p>
</li>
<li><p>SessionFactory 对象中保存了当前的数据库配置信息和所有映射关系以及预定义的 SQL 语句。同时，SessionFactory 还负责维护 Hibernate 的二级缓存。</p>
</li>
<li><ul>
<li>预定义 SQL 语句</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>使用 Configuration 类创建了 SessionFactory 对象时，已经在 SessionFacotry 对象中缓存了一些 SQL 语句；</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>常见的SQL语句是增删改查（通过主键来查询）；</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>这样做的目的是效率更高。</li>
</ul>
</li>
</ul>
</li>
<li><p>一个 SessionFactory 实例对应一个数据库，应用从该对象中获得 Session 实例。</p>
</li>
<li>SessionFactory 是 <code>线程安全</code> 的，意味着它的一个实例可以被应用的多个线程共享。</li>
<li>SessionFactory 是 <code>重量级</code> 的，意味着不能随意创建或销毁它的实例。如果只访问一个数据库，只需要创建一个 SessionFactory 实例，且在应用初始化的时候完成。</li>
<li>SessionFactory 需要一个较大的缓存，用来存放预定义的SQL语句及实体的映射信息。另外可以配置一个缓存插件，这个插件被称之为 Hibernate 的二级缓存，被多线程所共享。</li>
</ul>
<p>总之，一般应用使用一个 SessionFactory，最好是应用启动时就完成初始化。</p>
<h3 id="编写-HibernateUtils-的工具类"><a href="#编写-HibernateUtils-的工具类" class="headerlink" title="编写 HibernateUtils 的工具类"></a>编写 HibernateUtils 的工具类</h3><p>简化获取 Session 的方法，在服务器启动时就完成了初始化，加载了配置文件和映射文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Configuration cfg;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SessionFactory factory;</div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        <span class="comment">// 给常量赋值 </span></div><div class="line">        <span class="comment">// 加载配置文件</span></div><div class="line">        cfg = <span class="keyword">new</span> Configuration().configure();</div><div class="line">        <span class="comment">// 生成factory对象</span></div><div class="line">        factory = cfg.buildSessionFactory();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 获取Session对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> factory.openSession();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试工具类</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave2</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 通过工具类获取 session 对象</span></div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line">    Customer c=<span class="keyword">new</span> Customer();</div><div class="line">    c.setCust_name(<span class="string">"小明"</span>);</div><div class="line">    session.save(c);</div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">    session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Session-接口"><a href="#Session-接口" class="headerlink" title="Session 接口"></a>Session 接口</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>Session 是在 Hibernate 中使用最频繁的接口。也被称之为 <code>持久化管理器</code>。它提供了和持久化有关的操作，比如添加、修改、删除、加载和查询实体对象；</li>
<li>Session 是应用程序与数据库之间交互操作的一个单线程对象，是 Hibernate 运作的中心；</li>
<li>Session 是线程不安全的；</li>
<li>所有持久化对象必须在 session 的管理下才可以进行持久化操作；</li>
<li>Session 对象有一个一级缓存，显式执行 flush 之前，所有的持久化操作的数据都缓存在 session 对象处；</li>
<li>持久化类与 Session 关联起来后就具有了持久化的能力。</li>
</ul>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li><code>不是线程安全</code> 的。应避免多个线程使用同一个 Session 实例；</li>
<li>Session 是 <code>轻量级</code> 的，它的创建和销毁不会消耗太多的资源。应为每次客户请求分配独立的 Session 实例；</li>
<li>Session 有一个缓存，被称之为 Hibernate 的一级缓存。每个 Session 实例都有自己的缓存。</li>
</ul>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><ul>
<li>save(obj)</li>
<li>delete(obj)</li>
<li>get(Class,id)</li>
<li>update(obj)</li>
<li>saveOrUpdate(obj)                    – 保存或者修改（如果没有数据，保存数据。如果有，修改数据）</li>
<li>createQuery()                     – HQL语句的查询的方式</li>
</ul>
<h4 id="get-Class-id"><a href="#get-Class-id" class="headerlink" title="get(Class,id)"></a>get(Class,id)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试 get() 方法，获取查询，通过主键来查询一条记录</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 通过工具类获取 session 对象</span></div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">    <span class="comment">// 两个参数：JavaBean 的 class 对象，主键的值</span></div><div class="line">    Customer c = session.get(Customer.class, <span class="number">94L</span>);</div><div class="line">    System.out.println(c);</div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">    session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Customer&#123;cust_id=94, cust_name=&apos;测试&apos;, cust_user_id=null, cust_create_id=null, cust_source=&apos;null&apos;, cust_industry=&apos;null&apos;, cust_level=&apos;2&apos;, cust_linkman=&apos;null&apos;, cust_phone=&apos;110&apos;, cust_mobile=&apos;null&apos;&#125;</div></pre></td></tr></table></figure>
<h4 id="delete-obj"><a href="#delete-obj" class="headerlink" title="delete(obj)"></a>delete(obj)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试 delete() 方法</div><div class="line"> * 注意：删除或者修改，都要先查询在删除或者修改</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDel</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 通过工具类获取 session 对象</span></div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">    Customer c = session.get(Customer.class, <span class="number">94L</span>);</div><div class="line">    <span class="comment">// 删除客户</span></div><div class="line">    session.delete(c);</div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">    session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出 SQL 语句：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Hibernate: </div><div class="line">    <span class="keyword">select</span></div><div class="line">        customer0_.cust_id <span class="keyword">as</span> cust_id1_0_0_,</div><div class="line">        customer0_.cust_name <span class="keyword">as</span> cust_nam2_0_0_,</div><div class="line">        customer0_.cust_user_id <span class="keyword">as</span> cust_use3_0_0_,</div><div class="line">        customer0_.cust_create_id <span class="keyword">as</span> cust_cre4_0_0_,</div><div class="line">        customer0_.cust_source <span class="keyword">as</span> cust_sou5_0_0_,</div><div class="line">        customer0_.cust_industry <span class="keyword">as</span> cust_ind6_0_0_,</div><div class="line">        customer0_.cust_level <span class="keyword">as</span> cust_lev7_0_0_,</div><div class="line">        customer0_.cust_linkman <span class="keyword">as</span> cust_lin8_0_0_,</div><div class="line">        customer0_.cust_phone <span class="keyword">as</span> cust_pho9_0_0_,</div><div class="line">        customer0_.cust_mobile <span class="keyword">as</span> cust_mo10_0_0_ </div><div class="line">    <span class="keyword">from</span></div><div class="line">        cst_customer customer0_ </div><div class="line">    <span class="keyword">where</span></div><div class="line">        customer0_.cust_id=?</div><div class="line">Hibernate: </div><div class="line">    <span class="keyword">delete</span> </div><div class="line">    <span class="keyword">from</span></div><div class="line">        cst_customer </div><div class="line">    <span class="keyword">where</span></div><div class="line">        cust_id=?</div></pre></td></tr></table></figure>
<h4 id="update-obj"><a href="#update-obj" class="headerlink" title="update(obj)"></a>update(obj)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试 update() 方法</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 通过工具类获取 session 对象</span></div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line">    <span class="comment">// 查询客户</span></div><div class="line">    Customer c = session.get(Customer.class, <span class="number">1L</span>);</div><div class="line">    <span class="comment">// 设置客户信息</span></div><div class="line">    c.setCust_level(<span class="string">"中级"</span>);</div><div class="line">    c.setCust_name(<span class="string">"小徐"</span>);</div><div class="line">    <span class="comment">// 修改</span></div><div class="line">    session.update(c);</div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">    session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="saveOrUpdate-obj"><a href="#saveOrUpdate-obj" class="headerlink" title="saveOrUpdate(obj)"></a>saveOrUpdate(obj)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试 SaveOrUpdate() 方法</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveOrUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 通过工具类获取 session 对象</span></div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line">    <span class="comment">// 查询客户</span></div><div class="line">    Customer c = session.get(Customer.class, <span class="number">1L</span>);</div><div class="line">    <span class="comment">// 设置客户信息</span></div><div class="line">    <span class="comment">// c.setCust_id(7L); // 千万不能修改 id 值</span></div><div class="line">    c.setCust_name(<span class="string">"小天"</span>);</div><div class="line">    <span class="comment">// 修改</span></div><div class="line">    session.saveOrUpdate(c);</div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">    session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="createQuery"><a href="#createQuery" class="headerlink" title="createQuery()"></a>createQuery()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试 creatQuery() 方法</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSel</span><span class="params">()</span> </span>&#123;</div><div class="line">    Session session = HibernateUtils.getSession();</div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line">    <span class="comment">// 创建查询的接口</span></div><div class="line">    Query query = session.createQuery(<span class="string">"from Customer"</span>);</div><div class="line">    <span class="comment">// 查询所有的数据 select * from 表</span></div><div class="line">    List&lt;Customer&gt; list = query.list();</div><div class="line">    <span class="keyword">for</span> (Customer customer :</div><div class="line">            list) &#123;</div><div class="line">        System.out.println(customer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tr.commit();</div><div class="line">    session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Transaction-接口"><a href="#Transaction-接口" class="headerlink" title="Transaction 接口"></a>Transaction 接口</h2><p>Transaction 是事务的接口。</p>
<h3 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h3><ul>
<li>commit()                – 提交事务</li>
<li>rollback()            – 回滚事务</li>
</ul>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li>Hibernate 框架默认情况下事务不自动提交.需要手动提交事务</li>
<li>如果没有开启事务，那么每个 Session 的操作，都相当于一个独立的事务</li>
</ul>
<h3 id="测试事务"><a href="#测试事务" class="headerlink" title="测试事务"></a>测试事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试事务</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave3</span><span class="params">()</span> </span>&#123;</div><div class="line">    Session session = <span class="keyword">null</span>;</div><div class="line">    Transaction tr = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        session = HibernateUtils.getSession();</div><div class="line">        <span class="comment">// 开启事务</span></div><div class="line">        tr = session.beginTransaction();</div><div class="line">        Customer c = <span class="keyword">new</span> Customer();</div><div class="line">        <span class="comment">// int a=10/0;</span></div><div class="line">        c.setCust_name(<span class="string">"嘿嘿"</span>);</div><div class="line">        session.save(c);</div><div class="line">        tr.commit();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="comment">// 回滚事务</span></div><div class="line">        tr.rollback();</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="comment">// 释放资源</span></div><div class="line">        session.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/hibernate0200.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-green&quot;&gt;Hibernate 配置文件与接口方法。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Hibernate 快速入门</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-05-30-JavaWeb-Hibernate01.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-05-30-JavaWeb-Hibernate01.html</id>
    <published>2018-05-30T08:23:19.000Z</published>
    <updated>2018-05-30T09:02:24.518Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/hibernate0100.png"></div>

<p id="div-border-left-green">Hibernate 快速入门。</p>

<a id="more"></a>
<hr>
<h1 id="Hibernate框架的概述"><a href="#Hibernate框架的概述" class="headerlink" title="Hibernate框架的概述"></a>Hibernate框架的概述</h1><hr>
<ul>
<li><p>Hibernate 是一个开放源代码的对象关系映射（ORM）框架，它对 JDBC 进行了非常轻量级的对象封装，使得 Java 程序员可以随心所欲的使用对象编程思维来操纵数据库。 </p>
</li>
<li><p>Hibernate 可以应用在任何使用 JDBC 的场合，既可以在 Java 的客户端程序使用，也可以在 Servlet/JSP 的 Web 应用中使用。</p>
</li>
<li><p>Hibernate  是轻量级 JavaEE 应用的持久层解决方案，是一个关系数据库 ORM 框架。</p>
</li>
</ul>
<p><strong>Hibernate是一个持久层的ORM框架！！！</strong></p>
<h2 id="ORM（对象关系映射）"><a href="#ORM（对象关系映射）" class="headerlink" title="ORM（对象关系映射）"></a>ORM（对象关系映射）</h2><p>ORM 映射：Object Relational Mapping</p>
<ul>
<li>O：面向对象领域的 Object （<code>JavaBean 对象</code>）</li>
<li>R：关系数据库领域的 Relational （<code>表的结构</code>）</li>
<li>M：映射 Mapping （<code>XML 的配置文件</code>）</li>
</ul>
<p>简而言之：Hibernate 使程序员通过操作对象的方式来操作数据库表记录。</p>
<h2 id="Hibernate-优点"><a href="#Hibernate-优点" class="headerlink" title="Hibernate 优点"></a>Hibernate 优点</h2><ul>
<li><p>Hibernate 对 JDBC 访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码；</p>
</li>
<li><p>Hibernate是一个基于 JDBC 的主流持久化框架，是一个优秀的 orm 实现，它很大程度的简化了 dao 层编码工作；</p>
</li>
<li><p>Hibernate 的性能非常好，因为它是一个轻量级框架。映射的灵活性很出色。它支持很多关系型数据库，从一对一到多对多的各种复杂关系。</p>
</li>
</ul>
<hr>
<h1 id="Hibernate-框架入门"><a href="#Hibernate-框架入门" class="headerlink" title="Hibernate 框架入门"></a>Hibernate 框架入门</h1><hr>
<h2 id="下载-Hibernate-运行环境"><a href="#下载-Hibernate-运行环境" class="headerlink" title="下载 Hibernate 运行环境"></a>下载 Hibernate 运行环境</h2><h3 id="下载对应的-jar-包"><a href="#下载对应的-jar-包" class="headerlink" title="下载对应的 jar 包"></a>下载对应的 jar 包</h3><p><a href="http://sourceforge.net/projects/hibernate/files/hibernate-orm/5.0.7.Final/hibernate-release-5.0.7.Final.zip/download" target="_blank" rel="external">点击下载 Hibernate 5.0.7</a></p>
<h3 id="Hibernate-目录结构"><a href="#Hibernate-目录结构" class="headerlink" title="Hibernate 目录结构"></a>Hibernate 目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">| --    documents      相关的文档</div><div class="line">| --    lib    jar包</div><div class="line">|       | -- jpa        sun 公司提供的 orm 框架的规范</div><div class="line">|       | -- required       必需要引入的包</div><div class="line">|       | -- optional       可选的包（c3p0 等）</div><div class="line">| --    project     提供的一些小项目（无关紧要）</div><div class="line">|       | -- etc       配置文件</div></pre></td></tr></table></figure>
<h2 id="创建表结构"><a href="#创建表结构" class="headerlink" title="创建表结构"></a>创建表结构</h2><p>建表语句如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Create</span> <span class="keyword">database</span> hibernate_01;</div><div class="line"><span class="keyword">Use</span> hibernate_01;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer`</span> (</div><div class="line">    <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'客户编号(主键)'</span>,</div><div class="line">    <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户名称(公司名称)'</span>,</div><div class="line">    <span class="string">`cust_user_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'负责人id'</span>,</div><div class="line">    <span class="string">`cust_create_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建人id'</span>,</div><div class="line">    <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户信息来源'</span>,</div><div class="line">    <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户所属行业'</span>,</div><div class="line">    <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户级别'</span>,</div><div class="line">    <span class="string">`cust_linkman`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人'</span>,</div><div class="line">    <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'固定电话'</span>,</div><div class="line">    <span class="string">`cust_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'移动电话'</span>,</div><div class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">94</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<h2 id="搭建-Hibernate-的开发环境"><a href="#搭建-Hibernate-的开发环境" class="headerlink" title="搭建 Hibernate 的开发环境"></a>搭建 Hibernate 的开发环境</h2><p>创建WEB工程，引入 Hibernate 开发所需要的 jar 包</p>
<ul>
<li>MySQL 的驱动 jar 包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- mysql-connector-java-5.1.7-bin.jar</div></pre></td></tr></table></figure>
<ul>
<li><p>Hibernate 开发需要的 jar 包（<code>../hibernate-release-5.0.7.Final/lib/required/所有jar包</code>）</p>
</li>
<li><p>日志 jar 包</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- log4j-1.2.16.jar      // log for java，具体的日志实现</div><div class="line">- slf4j-api-1.6.1.jar   // log4j 规范，接口</div><div class="line">- slf4j-log4j12-1.7.2.jar // 整合的</div></pre></td></tr></table></figure>
<hr>
<h2 id="编写-JavaBean-实体类"><a href="#编写-JavaBean-实体类" class="headerlink" title="编写 JavaBean 实体类"></a>编写 JavaBean 实体类</h2><p><code>Customer</code> 类的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 客户的JavaBean</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Long cust_id;</div><div class="line">    <span class="keyword">private</span> String cust_name;</div><div class="line">    <span class="keyword">private</span> Long cust_user_id;</div><div class="line">    <span class="keyword">private</span> Long cust_create_id;</div><div class="line">    <span class="keyword">private</span> String cust_source;</div><div class="line">    <span class="keyword">private</span> String cust_industry;</div><div class="line">    <span class="keyword">private</span> String cust_level;</div><div class="line">    <span class="keyword">private</span> String cust_linkman;</div><div class="line">    <span class="keyword">private</span> String cust_phone;</div><div class="line">    <span class="keyword">private</span> String cust_mobile;</div><div class="line">    <span class="comment">// 省略get和set方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建类与表结构的映射"><a href="#创建类与表结构的映射" class="headerlink" title="创建类与表结构的映射"></a>创建类与表结构的映射</h2><h3 id="在JavaBean所在的包下创建映射的配置文件"><a href="#在JavaBean所在的包下创建映射的配置文件" class="headerlink" title="在JavaBean所在的包下创建映射的配置文件"></a>在JavaBean所在的包下创建映射的配置文件</h3><ul>
<li><p>默认的命名规则为：<code>实体类名.hbm.xml</code></p>
</li>
<li><p>在 xml 配置文件中引入约束（引入的是 <code>hibernate3.0 的 dtd 约束</code>，不要引入 4 的约束）</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</div></pre></td></tr></table></figure>
<h3 id="如果不能上网，编写配置文件是没有提示的，需要自己来配置"><a href="#如果不能上网，编写配置文件是没有提示的，需要自己来配置" class="headerlink" title="如果不能上网，编写配置文件是没有提示的，需要自己来配置"></a>如果不能上网，编写配置文件是没有提示的，需要自己来配置</h3><h4 id="Eclipse："><a href="#Eclipse：" class="headerlink" title="Eclipse："></a>Eclipse：</h4><ul>
<li>先复制 <a href="http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd" target="_blank" rel="external">http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd</a> –&gt; Window –&gt; preferences –&gt; 搜索xml –&gt; 选择xml catalog –&gt; 点击add –&gt; 选择 URI –&gt; 粘贴复制的地址 –&gt; 选择location，选择本地的 dtd 的路径</li>
</ul>
<h4 id="Idea：貌似不存在这样的问题"><a href="#Idea：貌似不存在这样的问题" class="headerlink" title="Idea：貌似不存在这样的问题"></a>Idea：貌似不存在这样的问题</h4><p>idea 很智能，能自己找到 jar 包下的 dtd 文件。</p>
<h3 id="编写映射的配置文件"><a href="#编写映射的配置文件" class="headerlink" title="编写映射的配置文件"></a>编写映射的配置文件</h3><p><strong>Customer.hbm.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span> </div><div class="line">    <span class="comment">&lt;!--配置类和表结构的映射--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">class</span>  <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></div><div class="line">         </div><div class="line">         <span class="comment">&lt;!--配置 id</span></div><div class="line">            见到 name 属性，JavaBean 的属性</div><div class="line">            见到 column 属性，表结构的属性</div><div class="line">         --&gt;</div><div class="line">         <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"cust_id"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></div><div class="line">             <span class="comment">&lt;!--主键的生成策略--&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">         </div><div class="line">         <span class="comment">&lt;!--配置其他属性--&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_name"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_user_id"</span> <span class="attr">column</span>=<span class="string">"cust_user_id"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_create_id"</span> <span class="attr">column</span>=<span class="string">"cust_create_id"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_source"</span> <span class="attr">column</span>=<span class="string">"cust_source"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_industry"</span> <span class="attr">column</span>=<span class="string">"cust_industry"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_level"</span> <span class="attr">column</span>=<span class="string">"cust_level"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_linkman"</span> <span class="attr">column</span>=<span class="string">"cust_linkman"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_phone"</span> <span class="attr">column</span>=<span class="string">"cust_phone"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_mobile"</span> <span class="attr">column</span>=<span class="string">"cust_mobile"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="编写-Hibernate-核心的配置文件"><a href="#编写-Hibernate-核心的配置文件" class="headerlink" title="编写 Hibernate 核心的配置文件**"></a>编写 Hibernate 核心的配置文件**</h2><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>在 src 目录下，创建名称为 hibernate.cfg.xml 的配置文件</p>
<h3 id="在XML中引入DTD约束"><a href="#在XML中引入DTD约束" class="headerlink" title="在XML中引入DTD约束"></a>在XML中引入DTD约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</div></pre></td></tr></table></figure>
<h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><p>打开：<code>../hibernate-release-5.0.7.Final/project/etc/hibernate.properties</code>，可以查看具体的配置信息</p>
<h4 id="必须配置的4大参数"><a href="#必须配置的4大参数" class="headerlink" title="必须配置的4大参数"></a>必须配置的4大参数</h4><p><strong>注：</strong> 前面的是属性的 name，后面是属性的 value 值</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#hibernate.connection.driver_class com.mysql.jdbc.Driver</div><div class="line">#hibernate.connection.url jdbc:mysql:///hibernate_01</div><div class="line">#hibernate.connection.username root</div><div class="line">#hibernate.connection.password 123456</div></pre></td></tr></table></figure>
<h4 id="数据库的方言（必须配置的）"><a href="#数据库的方言（必须配置的）" class="headerlink" title="数据库的方言（必须配置的）"></a>数据库的方言（必须配置的）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#hibernate.dialect org.hibernate.dialect.MySQLDialect</div></pre></td></tr></table></figure>
<h4 id="可选的配置"><a href="#可选的配置" class="headerlink" title="可选的配置"></a>可选的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#hibernate.show_sql true</div><div class="line">#hibernate.format_sql true</div><div class="line">#hibernate.hbm2ddl.auto update</div></pre></td></tr></table></figure>
<h4 id="引入映射配置文件"><a href="#引入映射配置文件" class="headerlink" title="引入映射配置文件"></a>引入映射配置文件</h4><p>（必须要引入映射文件，框架需要加载映射文件）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/itheima/domain/Customer.hbm.xml"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><p><strong>hibernate.cfg.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--记住：先配置 SessionFactory 标签，一个数据库对应一个 SessionFactory 标签--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--必须配置的参数有 5 个，4 大参数和数据库的方言--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///hibernate_01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--数据库的方言--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--可选配置--&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--映射配置文件，需要引入映射的配置文件--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"com/renkaigis/domain/Customer.hbm.xml"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="编写-Hibernate-入门代码"><a href="#编写-Hibernate-入门代码" class="headerlink" title="编写 Hibernate 入门代码"></a>编写 Hibernate 入门代码</h2><ul>
<li><ol>
<li>先加载配置文件</li>
</ol>
</li>
<li><ol>
<li>创建 SessionFactory 对象，生成 Session 对象</li>
</ol>
</li>
<li><ol>
<li>创建 Session 对象</li>
</ol>
</li>
<li><ol>
<li>开启事务</li>
</ol>
</li>
<li><ol>
<li>编写保存的代码</li>
</ol>
</li>
<li><ol>
<li>提交事物</li>
</ol>
</li>
<li><ol>
<li>释放资源</li>
</ol>
</li>
</ul>
<p>具体的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 测试保存客户</div><div class="line">*/</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 1. 先加载配置文件</span></div><div class="line">    Configuration config = <span class="keyword">new</span> Configuration();</div><div class="line">    <span class="comment">// 默认加载 src 目录下的 hibernate.cfg.xml 文件</span></div><div class="line">    config.configure();</div><div class="line"></div><div class="line">    <span class="comment">// 2. 创建 SessionFactory 对象</span></div><div class="line">    SessionFactory factory = config.buildSessionFactory();</div><div class="line">    <span class="comment">// 3. 创建 Session 对象</span></div><div class="line">    Session session = factory.openSession();</div><div class="line">    <span class="comment">// 4. 开启事务</span></div><div class="line">    Transaction tr = session.beginTransaction();</div><div class="line"></div><div class="line">    <span class="comment">// 5. 编写保存代码</span></div><div class="line">    Customer c=<span class="keyword">new</span> Customer();</div><div class="line">    c.setCust_name(<span class="string">"测试"</span>);</div><div class="line">    c.setCust_level(<span class="string">"2"</span>);</div><div class="line">    c.setCust_phone(<span class="string">"110"</span>);</div><div class="line">    <span class="comment">// 保存数据，操作对象就相当于操作数据库的表结构</span></div><div class="line">    session.save(c);</div><div class="line"></div><div class="line">    <span class="comment">// 6. 提交事务</span></div><div class="line">    tr.commit();</div><div class="line">    <span class="comment">// 7. 释放资源</span></div><div class="line">    session.close();</div><div class="line">    factory.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li><p>1）. 下载 Hibernate 框架的开发包；</p>
</li>
<li><p>2）. 编写数据库和表结构；</p>
</li>
<li><p>3）. 创建 WEB 的项目，导入了开发的 jar 包；</p>
<ul>
<li>MySQL 驱动包、Hibernate 开发的必须要有的 jar 包、日志的 jar 包</li>
</ul>
</li>
</ul>
<ul>
<li><p>4）. 编写 JavaBean ，不要使用基本数据类型，使用包装类；</p>
</li>
<li><p>5）. 编写映射的配置文件（核心），先导入开发的约束，里面正常配置标签；</p>
</li>
<li><p>6）. 编写 hibernate 的核心的配置文件，里面的内容是固定的；</p>
</li>
<li><p>7）. 编写代码。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/hibernate0100.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-green&quot;&gt;Hibernate 快速入门。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 idea 新建部署 JavaWeb 项目</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-05-28-JavaWeb-idea-new-web-project.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-05-28-JavaWeb-idea-new-web-project.html</id>
    <published>2018-05-28T14:08:32.000Z</published>
    <updated>2018-08-09T08:18:51.070Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/idea.png" width="200px"></div>


<p id="div-border-left-purple">习惯了 Eclipse ，想用用逼格高点的 idea 发现处处碰壁，终于搞好了，记录一下！</p>

<a id="more"></a>
<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>新建项目 –&gt; Java EE –&gt; Web Application(<code>勾选 Create web.xml</code>)，点击 next，输入项目名和路径。</p>
<div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/ideanewweb-01.png" title=""></div>

<h2 id="建-classes-和-lib-文件夹"><a href="#建-classes-和-lib-文件夹" class="headerlink" title="建 classes 和 lib 文件夹"></a>建 classes 和 lib 文件夹</h2><p>在 WEB-INF 目录下创建两个文件夹 <code>classes</code>、<code>lib</code>：</p>
<ul>
<li><p>classes：用来存放编译后输出的 <code>class</code> 文件</p>
</li>
<li><p>lib：用来存放项目所需的 <code>jar</code> 包</p>
</li>
</ul>
<h2 id="配置路径和-jar-包"><a href="#配置路径和-jar-包" class="headerlink" title="配置路径和 jar 包"></a>配置路径和 jar 包</h2><p>配置路径，File –&gt; Project Structure –&gt; Modules –&gt; Paths，选择 “Use module compile output path” -&gt; 将 Output path 和 Test output path 都选择刚刚创建的 classes 文件夹。</p>
<div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/ideanewweb-02.png" title=""></div>

<p>接着选择 Dependencies –&gt;  将 Module SDK 选择为自己电脑上的 jdk –&gt; 点击右边的“+”号  –&gt; 选择 “1 Jars or Directories” –&gt; 选择刚刚创建的 lib 文件夹 –&gt; 选择 jar directory，OK 就可以了。</p>
<div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/ideanewweb-05.png" title=""></div>

<div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/ideanewweb-03.png" title=""></div>

<div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/ideanewweb-04.png" title=""></div>

<h2 id="配置-Tomcat-服务器"><a href="#配置-Tomcat-服务器" class="headerlink" title="配置 Tomcat 服务器"></a>配置 Tomcat 服务器</h2><p>菜单 Run –&gt; Edit Configurations… –&gt; 点击 “+” 号 –&gt; 选择 “Tomcat Server” –&gt; 选择 “Local”，在如下界面输入自己的服务器名。</p>
<div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/ideanewweb-06.png" title=""></div>

<div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/ideanewweb-08.png" title=""></div>

<p>点击 “Application server” 后面的 “Configure…”，弹出 Application Servers 窗口，选择本地安装的 Tomcat 目录 –&gt; OK；</p>
<div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/ideanewweb-07.png" title=""></div>

<p><code>HTTP port</code> 默认端口号是 8080，可以自己修改，也可以使用默认的。例如，我设为 <code>9090</code>，那么项目的访问路径就为：<code>http://localhost:9090</code></p>
<p>左下角显示警告，是因为没有部署项目，点击右边的 <code>Fix</code> ，弹出下图，部署自己的项目，点击 ➕ 号，选择自己的 web 项目。右边可以输入项目的访问路径，可以默认，也可以自己定义。</p>
<div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/ideanewweb-09.png" title=""></div>

<ul>
<li><p>若默认，则项目访问路径为：<code>http://localhost:9090</code>(我的9090端口)</p>
</li>
<li><p>若自己定义名称 <code>test</code>，则项目访问路径为：<code>http://localhost:9090/test</code>(我的9090端口)</p>
</li>
</ul>
<h2 id="部署并运行项目"><a href="#部署并运行项目" class="headerlink" title="部署并运行项目"></a>部署并运行项目</h2><p>点击主界面上的 run 按钮，就可以启动服务器并运行自己的项目了。默认打开的是项目路径下的 <code>index.jsp</code>，可对他进行自定义编辑，看看自己的成果吧。</p>
<div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/ideanewweb-10.png" title=""></div>

<div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/ideanewweb-11.png" title=""></div>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/idea.png&quot; width=&quot;200px&quot;&gt;&lt;/div&gt;


&lt;p id=&quot;div-border-left-purple&quot;&gt;习惯了 Eclipse ，想用用逼格高点的 idea 发现处处碰壁，终于搞好了，记录一下！&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="idea" scheme="http://yoursite.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 重新启动出错：MySQL is not running, but lock file (/var/lock/subsys/mysql) exists.</title>
    <link href="http://yoursite.com/posts/uncategorized/2018-05-16-mysqlerror00.html"/>
    <id>http://yoursite.com/posts/uncategorized/2018-05-16-mysqlerror00.html</id>
    <published>2018-05-16T02:56:28.000Z</published>
    <updated>2018-05-16T03:06:08.891Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Linux 下：</p>
<p>运行 <code>service mysql status</code> 时出错：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MySQL is not running, but lock file (/var/lock/subsys/mysql) exists</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>解决方案：</strong> <code>rm -f /var/lock/subsys/mysql</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@centos65 /]<span class="comment"># rm -f /var/lock/subsys/mysql</span></div></pre></td></tr></table></figure>
<p>重新检查 mysql 状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@centos65 /]<span class="comment"># service mysql status</span></div></pre></td></tr></table></figure>
<p>若没有启动，可以重新启动 mysql 服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@centos65 /]<span class="comment"># service mysql start</span></div><div class="line">Starting MySQL..</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 下：&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;service mysql status&lt;/code&gt; 时出错：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;MySQL is not running, but lock file (/var/lock/subsys/mysql) exists&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaWeb 学习笔记（三）—— JSP</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-05-01-JavaWeb03-jsp.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-05-01-JavaWeb03-jsp.html</id>
    <published>2018-05-01T14:08:57.000Z</published>
    <updated>2018-05-01T15:18:51.807Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/0300.png" title="JSP"></div>

<a id="more"></a>
<h1 id="JSP-简介"><a href="#JSP-简介" class="headerlink" title="JSP 简介"></a>JSP 简介</h1><h2 id="JSP-概念"><a href="#JSP-概念" class="headerlink" title="JSP 概念"></a>JSP 概念</h2><p><code>JSP</code>（Java Server Pages），java 服务器页面，其根本是一个简化的 Servlet 设计，是一种动态网页技术标准。JSP 是在传统的网页 <code>HTML（标准通用标记语言的子集）文件(*.htm,*.html)</code>中插入 <code>Java 程序段</code>(Scriptlet)和 <code>JSP 标记</code>(tag)，从而形成 JSP 文件，后缀名为(<code>*.jsp</code>)。 用 JSP 开发的 Web 应用是跨平台的，既能在 Linux 下运行，也能在其他操作系统上运行。</p>
<p><code>JSP</code> 运行在服务器端，处理请求，生成动态的内容。对应的 java 和 class 文件在 tomcat 目录下的 work 目录下。</p>
<h2 id="JSP-执行流程"><a href="#JSP-执行流程" class="headerlink" title="JSP 执行流程"></a>JSP 执行流程</h2><ol>
<li>浏览器发送请求，访问 <code>jsp</code> 页面；</li>
<li>服务器接受请求，<code>jspSerlvet</code> 会帮我们查找对应的 <code>jsp</code> 文件；</li>
<li>服务器将 <code>jsp</code> 页面翻译成 <code>java</code> 文件；</li>
<li><code>jvm</code> 会将 <code>java</code> 编译成 <code>.class</code> 文件；</li>
<li>服务器运行 <code>class</code> 文件，生成动态的内容；</li>
<li>将内容发送给服务器；</li>
<li>服务器组成响应信息，发送给浏览器；</li>
<li>浏览器接受数据，解析展示。</li>
</ol>
<h2 id="JSP-脚本"><a href="#JSP-脚本" class="headerlink" title="JSP 脚本"></a>JSP 脚本</h2><ul>
<li><p>&lt;%   %&gt;：java 程序片段，生成在 jsp 的 service 方法中</p>
</li>
<li><p>&lt;%=  %&gt;：输出表达式，生成在 jsp 的 service 方法中，相当于 java 中调用 out.print(..)</p>
</li>
<li><p>&lt;%!  %&gt;：声明成员，翻译成 servlet 内部的内容。</p>
</li>
</ul>
<h2 id="JSP-注释"><a href="#JSP-注释" class="headerlink" title="JSP 注释"></a>JSP 注释</h2><p>JSP 支持三种注释：<code>HTML</code> 注释、<code>Java</code> 注释、<code>JSP</code> 注释:</p>
<h1 id="JSP-指令"><a href="#JSP-指令" class="headerlink" title="JSP 指令"></a>JSP 指令</h1><h1 id="EL-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h1><h1 id="JSP-标注标签库（JSTL）"><a href="#JSP-标注标签库（JSTL）" class="headerlink" title="JSP 标注标签库（JSTL）"></a>JSP 标注标签库（JSTL）</h1>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/0300.png&quot; title=&quot;JSP&quot;&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 学习笔记（二）—— Request 与 Response</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-04-30-JavaWeb02-request-response.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-04-30-JavaWeb02-request-response.html</id>
    <published>2018-04-30T13:24:06.000Z</published>
    <updated>2018-05-01T10:42:20.863Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/0200.png" title="Request & Response"></div>

<a id="more"></a>
<h1 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h1><p><code>响应</code> 的作用是往浏览器写东西。包括响应行、响应头、响应体。</p>
<h2 id="操作-Response-对象"><a href="#操作-Response-对象" class="headerlink" title="操作 Response 对象"></a>操作 Response 对象</h2><h3 id="操作响应行"><a href="#操作响应行" class="headerlink" title="操作响应行"></a>操作响应行</h3><p>响应行的格式：协议/版本  状态码  状态码说明</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1xx</td>
<td>已发送请求</td>
</tr>
<tr>
<td style="text-align:center">2xx</td>
<td>已完成响应<br>200：正常响应</td>
</tr>
<tr>
<td style="text-align:center">3xx</td>
<td>还需浏览器进一步操作<br>302：重定向，配合响应头location<br>304：读缓存</td>
</tr>
<tr>
<td style="text-align:center">4xx</td>
<td>用户操作错误<br>404：用户操作错误<br>访问的方法不存在</td>
</tr>
<tr>
<td style="text-align:center">5xx</td>
<td>服务器错误<br>500：内部异常</td>
</tr>
</tbody>
</table>
<h4 id="设置状态码："><a href="#设置状态码：" class="headerlink" title="设置状态码："></a>设置状态码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//仅针对于上表的 1xx、2xx、3xx</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> 状态码)</span>:Sets the status code <span class="keyword">for</span> <span class="keyword">this</span> response. </span></div><div class="line"></div><div class="line"><span class="comment">//针对于 4xx 和 5xx【了解】</span></div><div class="line"><span class="keyword">void</span> <span class="title">sendError</span><span class="params">(<span class="keyword">int</span> 状态码)</span>:Sends an error response to the client using the specified status code and clearing the buffer.</div></pre></td></tr></table></figure>
<h3 id="操作响应头"><a href="#操作响应头" class="headerlink" title="操作响应头"></a>操作响应头</h3><p>格式：key/value（value 可以是多个值）</p>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setHeader(String key,String value):设置字符串形式的响应头</div><div class="line">【了解】setIntHeader(String key,<span class="keyword">int</span> value):设值整型的响应头</div><div class="line">【了解】setDateHeader(String key,<span class="keyword">long</span> value):设值时间的响应头</div><div class="line"></div><div class="line">addHeader(String key,String value):添加字符串形式的响应头，之前设置过则追加，若没有设置过则设置</div><div class="line">【了解】addIntHeader(String key,<span class="keyword">int</span> value):添加整型的响应头</div><div class="line">【了解】addDateHeader(String key,<span class="keyword">long</span> value):添加时间的响应头</div></pre></td></tr></table></figure>
<h4 id="常用的响应头"><a href="#常用的响应头" class="headerlink" title="常用的响应头"></a>常用的响应头</h4><ul>
<li><p>location：重定向</p>
</li>
<li><p>refresh：定时刷新</p>
</li>
<li><p>content-type：设置文件的 mime 类型，设置响应流的编码及告诉浏览器用什么编码打开</p>
</li>
<li><p>content-disposition：文件下载</p>
</li>
</ul>
<h4 id="重定向与定时刷新"><a href="#重定向与定时刷新" class="headerlink" title="重定向与定时刷新"></a>重定向与定时刷新</h4><h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><ul>
<li>方式1：<strong>★★</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.sendRedirect(<span class="string">"/javaweb/test1"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>方式2：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">response.setStatus(<span class="number">302</span>);</div><div class="line">respooen.setHeader(<span class="string">"location"</span>,<span class="string">"/day10/loc2"</span>);</div></pre></td></tr></table></figure>
<h5 id="定时刷新"><a href="#定时刷新" class="headerlink" title="定时刷新"></a>定时刷新</h5><ul>
<li>方式1：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置头 refresh</span></div><div class="line">response.setHeader(<span class="string">"refresh"</span>,<span class="string">"秒数;url=跳转的路径"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>方式2：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">--!</span> 设置<span class="attr">html</span>的<span class="attr">meta</span>标签 <span class="attr">--</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"3;url=/javaweb/test1.html"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="操作响应体"><a href="#操作响应体" class="headerlink" title="操作响应体"></a>操作响应体</h3><p>响应体即页面上要展示的内容。</p>
<h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">Writer <span class="title">getWriter</span><span class="params">()</span>:字符流</span></div><div class="line">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span>:字节流</div></pre></td></tr></table></figure>
<p><strong>注：</strong>自己写的东西用字符流,其他一概用字节流.</p>
<h4 id="处理响应中文乱码"><a href="#处理响应中文乱码" class="headerlink" title="处理响应中文乱码"></a>处理响应中文乱码</h4><ul>
<li>方式1：<strong>★</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>方式2：理解</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.setHeader(<span class="string">"content-type"</span>, <span class="string">"text/html;charset=utf-8"</span>);</div></pre></td></tr></table></figure>
<p><em>详细的介绍如下：</em></p>
<h5 id="处理字节流"><a href="#处理字节流" class="headerlink" title="处理字节流"></a>处理字节流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置浏览器默认打开编码</span></div><div class="line">response.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line"></div><div class="line"><span class="comment">//中文转成字节数组编码</span></div><div class="line">response.getOutputStream().write(<span class="string">"上山打老虎"</span>.getBytes(<span class="string">"UTF-8"</span>));</div></pre></td></tr></table></figure>
<h5 id="处理字符流"><a href="#处理字符流" class="headerlink" title="处理字符流"></a>处理字符流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置response的缓冲区的编码</span></div><div class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line"><span class="comment">//设置浏览器默认打开的编码.</span></div><div class="line">response.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line"></div><div class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);<span class="comment">//相当于上面两句</span></div></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li>两个流互斥</li>
<li>当响应完成之后，服务器会判断一下流是否已经关闭，若没有关闭，服务器会帮我们关闭。（底层使用的缓冲流）</li>
</ul>
<h2 id="扩展-文件下载"><a href="#扩展-文件下载" class="headerlink" title="扩展-文件下载"></a>扩展-文件下载</h2><h3 id="超链接方式"><a href="#超链接方式" class="headerlink" title="超链接方式"></a>超链接方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/javaweb/download/Notes.txt"</span>&gt;</span>下载 Notes.txt<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>若浏览器能解析该资源的mime类型，则打开；若不能解析，则下载。</p>
<h3 id="手动编码方式"><a href="#手动编码方式" class="headerlink" title="手动编码方式"></a>手动编码方式</h3><p>通过 <code>servlet</code> 完成。</p>
<h4 id="a-设置文件的-mime-类型"><a href="#a-设置文件的-mime-类型" class="headerlink" title="a.设置文件的 mime 类型"></a>a.设置文件的 mime 类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String mimeType=context.getMimeType(文件名);</div><div class="line">response.setContentType(mimeType);</div></pre></td></tr></table></figure>
<h4 id="b-设置下载头信息"><a href="#b-设置下载头信息" class="headerlink" title="b.设置下载头信息"></a>b.设置下载头信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.setHeader(<span class="string">"content-disposition"</span>, <span class="string">"attachment;filename="</span>+文件名称);</div></pre></td></tr></table></figure>
<h4 id="c-提供流"><a href="#c-提供流" class="headerlink" title="c.提供流"></a>c.提供流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.getOutputStream();</div></pre></td></tr></table></figure>
<ul>
<li>扩展-使用commons-io工具类，对拷流：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IOUtils.copy(is,os);</div></pre></td></tr></table></figure>
<h4 id="案例-文件下载"><a href="#案例-文件下载" class="headerlink" title="案例-文件下载"></a>案例-文件下载</h4><h5 id="1-在页面中提供一组下载的链接"><a href="#1-在页面中提供一组下载的链接" class="headerlink" title="1.在页面中提供一组下载的链接"></a>1.在页面中提供一组下载的链接</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">response.getWriter().println(<span class="string">"&lt;h2&gt;手动编码方式下载&lt;/h2&gt;"</span>);</div><div class="line">response.getWriter().println(<span class="string">"&lt;a href='/WEB10/downloadServlet?filename=a.bmp'&gt;a.bmp&lt;/a&gt;&lt;br/&gt;"</span>);</div><div class="line">response.getWriter().println(<span class="string">"&lt;a href='/WEB10/downloadServlet?filename=WEB01.zip'&gt;WEB01.zip&lt;/a&gt;"</span>);</div></pre></td></tr></table></figure>
<h5 id="2-编写-DownloadServlet"><a href="#2-编写-DownloadServlet" class="headerlink" title="2.编写 DownloadServlet"></a>2.编写 <code>DownloadServlet</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取下载文件的名称</span></div><div class="line">String filename = request.getParameter(<span class="string">"name"</span>);</div><div class="line"></div><div class="line"><span class="comment">//注意中文乱码:</span></div><div class="line">filename = <span class="keyword">new</span> String(filename.getBytes(<span class="string">"iso8859-1"</span>), <span class="string">"utf-8"</span>);</div><div class="line"></div><div class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</div><div class="line"><span class="comment">//文件下载</span></div><div class="line"><span class="comment">//1.设置文件的mimeType</span></div><div class="line">String mimeType = context.getMimeType(filename);</div><div class="line">response.setContentType(mimeType);</div><div class="line"></div><div class="line"><span class="comment">//2.设置下载的头信息</span></div><div class="line"><span class="comment">//原始的</span></div><div class="line"><span class="comment">//response.setHeader("content-disposition", "attachment;filename="+filename);</span></div><div class="line"></div><div class="line"><span class="comment">//常见的浏览器将文件名称使用utf-8 不推荐 不兼容火狐</span></div><div class="line"><span class="comment">//response.setHeader("content-disposition", "attachment;filename="+URLEncoder.encode(filename, "utf-8"));</span></div><div class="line"></div><div class="line"><span class="comment">//方式1:通过 DownLoadUtils 工具类编码</span></div><div class="line"><span class="comment">//String _filename=DownLoadUtils.getName(request.getHeader("user-agent"), filename);</span></div><div class="line"><span class="comment">//response.setHeader("content-disposition", "attachment;filename="+_filename);</span></div><div class="line"></div><div class="line"><span class="comment">//方式2:网络上的方式 (8成好使)</span></div><div class="line">response.setHeader(<span class="string">"content-disposition"</span>, <span class="string">"attachment;filename="</span> + <span class="keyword">new</span> String(filename.getBytes(<span class="string">"gbk"</span>), <span class="string">"iso8859-1"</span>));</div><div class="line"></div><div class="line"><span class="comment">//3.对拷流</span></div><div class="line"><span class="comment">//获取输入流</span></div><div class="line">InputStream is = context.getResourceAsStream(<span class="string">"/download/"</span> + filename);</div><div class="line"></div><div class="line"><span class="comment">//获取输出流</span></div><div class="line">ServletOutputStream os = response.getOutputStream();</div><div class="line"></div><div class="line"><span class="comment">/*int len = -1;</span></div><div class="line">byte[] b = new byte[1024];</div><div class="line">while((len = is.read(b))!=-1)&#123;</div><div class="line">    os.write(b, 0, len);</div><div class="line">&#125;</div><div class="line">is.close();*/</div><div class="line"></div><div class="line"><span class="comment">//使用commons-io工具类对拷流</span></div><div class="line">IOUtils.copy(is, os);</div><div class="line"></div><div class="line">os.close();</div><div class="line">is.close();</div></pre></td></tr></table></figure>
<p>其中，<code>DownLoadUtils</code> 如下进行封装：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadUtils</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (agent.contains(<span class="string">"MSIE"</span>)) &#123;</div><div class="line">			<span class="comment">// IE浏览器</span></div><div class="line">			filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</div><div class="line">			filename = filename.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>)) &#123;</div><div class="line">			<span class="comment">// 火狐浏览器</span></div><div class="line">			BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</div><div class="line">			filename = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(<span class="string">"utf-8"</span>)) + <span class="string">"?="</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 其它浏览器</span></div><div class="line">			filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> filename;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="扩展-生成验证码"><a href="#扩展-生成验证码" class="headerlink" title="扩展-生成验证码"></a>扩展-生成验证码</h2><ul>
<li>编写 <code>CodeServlet</code>:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用java图形界面技术绘制一张图片</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> charNum = <span class="number">4</span>;</div><div class="line"><span class="keyword">int</span> width = <span class="number">30</span> * <span class="number">4</span>;</div><div class="line"><span class="keyword">int</span> height = <span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="comment">// 1. 创建一张内存图片</span></div><div class="line">BufferedImage bufferedImage = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</div><div class="line"></div><div class="line"><span class="comment">// 2.获得绘图对象</span></div><div class="line">Graphics graphics = bufferedImage.getGraphics();</div><div class="line"></div><div class="line"><span class="comment">// 3、绘制背景颜色</span></div><div class="line">graphics.setColor(Color.YELLOW);</div><div class="line">graphics.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line"></div><div class="line"><span class="comment">// 4、绘制图片边框</span></div><div class="line">graphics.setColor(Color.BLUE);</div><div class="line">graphics.drawRect(<span class="number">0</span>, <span class="number">0</span>, width - <span class="number">1</span>, height - <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 5、输出验证码内容</span></div><div class="line">graphics.setColor(Color.RED);</div><div class="line">graphics.setFont(<span class="keyword">new</span> Font(<span class="string">"宋体"</span>, Font.BOLD, <span class="number">20</span>));</div><div class="line"></div><div class="line"><span class="comment">// 随机输出4个字符</span></div><div class="line">Graphics2D graphics2d = (Graphics2D) graphics;</div><div class="line">String s = <span class="string">"ABCDEFGHGKLMNPQRSTUVWXYZ23456789"</span>;</div><div class="line">Random random = <span class="keyword">new</span> Random();</div><div class="line"><span class="comment">// session中要用到</span></div><div class="line">String msg = <span class="string">""</span>;</div><div class="line"><span class="keyword">int</span> x = <span class="number">5</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">    <span class="keyword">int</span> index = random.nextInt(<span class="number">32</span>);</div><div class="line">    String content = String.valueOf(s.charAt(index));</div><div class="line">    msg += content;</div><div class="line">    <span class="keyword">double</span> theta = random.nextInt(<span class="number">45</span>) * Math.PI / <span class="number">180</span>;</div><div class="line">    <span class="comment">// 让字体扭曲</span></div><div class="line">    graphics2d.rotate(theta, x, <span class="number">18</span>);</div><div class="line">    graphics2d.drawString(content, x, <span class="number">18</span>);</div><div class="line">    graphics2d.rotate(-theta, x, <span class="number">18</span>);</div><div class="line">    x += <span class="number">30</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 6、绘制干扰线</span></div><div class="line">graphics.setColor(Color.GRAY);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    <span class="keyword">int</span> x1 = random.nextInt(width);</div><div class="line">    <span class="keyword">int</span> x2 = random.nextInt(width);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> y1 = random.nextInt(height);</div><div class="line">    <span class="keyword">int</span> y2 = random.nextInt(height);</div><div class="line">    graphics.drawLine(x1, y1, x2, y2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 释放资源</span></div><div class="line">graphics.dispose();</div><div class="line"></div><div class="line"><span class="comment">// 图片输出 ImageIO</span></div><div class="line">ImageIO.write(bufferedImage, <span class="string">"jpg"</span>, response.getOutputStream());</div></pre></td></tr></table></figure>
<ul>
<li>点击换一张验证码的 <code>js</code> 代码:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeImg</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="comment">//操作src属性</span></div><div class="line">    obj.src=<span class="string">"/day10/code?i="</span>+<span class="built_in">Math</span>.random();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下图：</p>
<p><img src="http://image.renkaigis.com/images/JavaWeb/0201.png"></p>
<h1 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h1><p><code>请求</code> 的作用是获取浏览器发送过来的数据。</p>
<h2 id="操作-Request-对象"><a href="#操作-Request-对象" class="headerlink" title="操作 Request 对象"></a>操作 Request 对象</h2><h3 id="操作请求行"><a href="#操作请求行" class="headerlink" title="操作请求行"></a>操作请求行</h3><p>请求行的格式：请求方式  请求资源  协议/版本</p>
<h4 id="常用方法：HttpServletRequest"><a href="#常用方法：HttpServletRequest" class="headerlink" title="常用方法：HttpServletRequest"></a>常用方法：HttpServletRequest</h4><ul>
<li>【掌握】<strong>★</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">getMethod</span><span class="params">()</span> <span class="comment">//获取请求方式</span></span></div><div class="line">String <span class="title">getRemoteAddr</span><span class="params">()</span> <span class="comment">//获取ip地址</span></div><div class="line">String <span class="title">getContextPath</span><span class="params">()</span> <span class="comment">//在 java 中获取项目名称  (/javaweb)</span></div></pre></td></tr></table></figure>
<ul>
<li>【了解】</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getRequestURI() <span class="comment">//获取的是 从项目名到参数之前的内容  /javaweb/regist</span></div><div class="line">getRequestURL() <span class="comment">//获取的带协议的完整路径   http://localhost/javaweb/regist</span></div><div class="line"><span class="function">String <span class="title">getQueryString</span><span class="params">()</span> <span class="comment">//get请求的所有参数   username=tom&amp;password=123</span></span></div><div class="line">String <span class="title">getProtocol</span><span class="params">()</span> <span class="comment">//获取协议和版本</span></div></pre></td></tr></table></figure>
<ul>
<li>例如：请求行</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET  /day10/row?username=tom&amp;password=<span class="number">123</span>  HTTP/<span class="number">1.1</span></div></pre></td></tr></table></figure>
<h3 id="操作请求头"><a href="#操作请求头" class="headerlink" title="操作请求头"></a>操作请求头</h3><p>格式：key/value（value 可以是多个值）</p>
<h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li>【掌握】<strong>★</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">getHeader</span><span class="params">(String key)</span> <span class="comment">//通过key获取指定的value(一个)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>【了解】</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">Enumeration <span class="title">getHeaders</span><span class="params">(String name)</span> <span class="comment">//通过key获取指定的value(多个)</span></span></div><div class="line">Enumeration <span class="title">getHeaderNames</span><span class="params">()</span> <span class="comment">//获取所有的请求头的名称</span></div><div class="line"><span class="keyword">int</span> <span class="title">getIntHeader</span><span class="params">(String key)</span> <span class="comment">//获取整型的请求头</span></div><div class="line"><span class="keyword">long</span> <span class="title">getDateHeader</span><span class="params">(String key)</span> <span class="comment">//获取时间的请求头</span></div></pre></td></tr></table></figure>
<ul>
<li>重要的请求头:</li>
</ul>
<blockquote>
<p>user-agent：浏览器内核 msie firefox chrome<br>referer：页面从那里来 防盗链</p>
</blockquote>
<h3 id="操作请求参数"><a href="#操作请求参数" class="headerlink" title="操作请求参数"></a>操作请求参数</h3><p>请求参数：username=tom&amp;password=123&amp;hobby=drink&amp;hobby=sleep</p>
<h4 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">getParameter</span><span class="params">(String key)</span> <span class="comment">//获取一个值</span></span></div><div class="line">String[] <span class="title">getParameterValues</span><span class="params">(String key)</span> <span class="comment">//通过一个key获取多个值</span></div><div class="line">Map&lt;String,String[]&gt; <span class="title">getParameterMap</span><span class="params">()</span> <span class="comment">//获取所有的参数名称和值</span></div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//value</span></div><div class="line">username:tom</div><div class="line"></div><div class="line"><span class="comment">//values</span></div><div class="line">hobby:[drink, sleep]</div><div class="line"></div><div class="line"><span class="comment">//map</span></div><div class="line">username::[tom]</div><div class="line">password::[<span class="number">123</span>]</div><div class="line">hobby::[drink, sleep]</div></pre></td></tr></table></figure>
<h3 id="请求的中文乱码"><a href="#请求的中文乱码" class="headerlink" title="请求的中文乱码"></a>请求的中文乱码</h3><ul>
<li><p>对于 <code>get</code> 请求：参数追加到地址栏，会使用 <code>utf-8</code> 编码，服务器（tomcat7）接受到请求之后，使用 <code>iso-8859-1</code> 解码，所以会出现乱码。</p>
</li>
<li><p>对于 <code>post</code> 请求：参数是放在请求体中，服务器获取请求体的时候使用 <code>iso-8859-1</code> 解码，也会出现乱码。</p>
</li>
</ul>
<p>通用的方法：缺点是需要一个一个设置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> String(参数.getBytes(<span class="string">"iso-8859-1"</span>),<span class="string">"utf-8"</span>);</div></pre></td></tr></table></figure>
<p>针对于 <code>post</code> 请求的方法：只需要将请求流的编码设置成 <code>utf-8</code> 即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</div></pre></td></tr></table></figure>
<h2 id="域对象-request"><a href="#域对象-request" class="headerlink" title="域对象 request"></a>域对象 request</h2><table>
<thead>
<tr>
<th style="text-align:center">request 域</th>
<th>生命周期</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td>一次请求来的时候</td>
</tr>
<tr>
<td style="text-align:center">销毁</td>
<td>响应生成的时候</td>
</tr>
<tr>
<td style="text-align:center">作用</td>
<td>存放一次请求里面的数据</td>
</tr>
</tbody>
</table>
<ul>
<li>请求转发（也叫请求链、请求串）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.getRequestDispatcher(<span class="string">"内部路径"</span>).forward(request,response);</div></pre></td></tr></table></figure>
<ul>
<li>作为域对象存取值</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object o)</span></span></div><div class="line"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></div><div class="line">Object <span class="title">getAttribute</span><span class="params">(String name)</span></div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">request.setAttribute(<span class="string">"username"</span>,<span class="string">"tom"</span>);</div><div class="line"></div><div class="line">request.getAttribute(<span class="string">"username"</span>);</div></pre></td></tr></table></figure>
<h2 id="请求转发与重定向"><a href="#请求转发与重定向" class="headerlink" title="请求转发与重定向"></a>请求转发与重定向</h2><ul>
<li>重定向</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.sendRedirect(String path);</div></pre></td></tr></table></figure>
<ul>
<li>请求转发</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.getRequestDispatcher(String path).forward(request,response);</div></pre></td></tr></table></figure>
<blockquote>
<p>重定向发送两次请求，请求转发一次请求</p>
<p>重定向地址栏发生改变，请求转发不变</p>
<p>重定向是从浏览器发送，请求转发是服务器内部</p>
<p>重定向不存在 <code>request</code> 域对象，请求转发可以使用 <code>request</code> 域对象</p>
<p>重定向是 <code>response</code> 的方法，请求转发是 <code>request</code> 的方法</p>
<p>重定向可以请求站外资源，请求转发不可以</p>
</blockquote>
<h2 id="扩展-编码解码"><a href="#扩展-编码解码" class="headerlink" title="扩展-编码解码"></a>扩展-编码解码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">URLEncoder.encode(String s, <span class="string">"utf-8"</span>); <span class="comment">//指定编码</span></div><div class="line">URLDecoder.decode(String s8, <span class="string">"iso8859-1"</span>); <span class="comment">//指定解码</span></div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String s=<span class="string">"天下"</span>;</div><div class="line"></div><div class="line">    <span class="comment">//用 utf-8 进行编码</span></div><div class="line">    String s8=URLEncoder.encode(s, <span class="string">"utf-8"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//System.out.println(s8);</span></div><div class="line">    <span class="comment">//对utf-8的字符串通过iso8859-1进行解码，则会出现乱码</span></div><div class="line">    String so = URLDecoder.decode(s8, <span class="string">"iso8859-1"</span>);</div><div class="line">    System.out.println(so); <span class="comment">//乱码</span></div><div class="line">    </div><div class="line">    <span class="keyword">byte</span>[] b = so.getBytes(<span class="string">"iso-8859-1"</span>);</div><div class="line">    String _s = <span class="keyword">new</span> String(b, <span class="string">"utf-8"</span>);</div><div class="line">    <span class="comment">//上面的两句简写为：String _s=new String(so.getBytes("iso8859-1"),"utf-8");</span></div><div class="line">    System.out.println(_s);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>整理的也许不全面，就这样吧！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/0200.png&quot; title=&quot;Request &amp; Response&quot;&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 学习笔记（一）—— HTTP 与 Servlet</title>
    <link href="http://yoursite.com/posts/JavaWeb/2018-03-27-JavaWeb01-http-servlet.html"/>
    <id>http://yoursite.com/posts/JavaWeb/2018-03-27-JavaWeb01-http-servlet.html</id>
    <published>2018-03-27T13:14:24.000Z</published>
    <updated>2018-05-01T10:46:45.551Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/JavaWeb/0100.jpg" title="Http & Servlet"></div>

<a id="more"></a>
<h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><h2 id="HTTP-协议的概念"><a href="#HTTP-协议的概念" class="headerlink" title="HTTP 协议的概念"></a>HTTP 协议的概念</h2><p><code>超文本传输协议</code>（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。</p>
<p><strong>规定被约束的对象要遵守的规则！</strong></p>
<h2 id="HTTP-协议-1"><a href="#HTTP-协议-1" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><p>HTTP 协议规定：浏览器（客户端）向服务器发送何种格式的数据，服务器会处理数据，向浏览器（客户端）作出响应。（向客户端发送何种格式的数据）</p>
<p>HTTP 协议的特点:</p>
<ul>
<li><p>HTTP 协议遵守一个请求响应模型；</p>
</li>
<li><p>请求和响应必须成对出现；</p>
</li>
<li><p>必须先有请求后有响应；</p>
</li>
<li><p>HTTP 协议默认的端口：80</p>
</li>
</ul>
<h2 id="HTTP-协议的请求部分（Request）"><a href="#HTTP-协议的请求部分（Request）" class="headerlink" title="HTTP 协议的请求部分（Request）"></a>HTTP 协议的请求部分（Request）</h2><p>组成部分：<code>请求行</code>、<code>请求头</code>、<code>请求体</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//get 请求方式的抓包：</div><div class="line">GET /WEB09/demo1/subSucc.html?username=aaa&amp;password=123 HTTP/1.1</div><div class="line">Accept: text/html, application/xhtml+xml, */*</div><div class="line">X-HttpWatch-RID: 63397-10023</div><div class="line">Referer: http://localhost:8080/WEB09/demo1/demo1.html</div><div class="line">Accept-Language: zh-Hans-CN,zh-Hans;q=0.5</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Host: localhost:8080</div><div class="line">Connection: Keep-Alive</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//post 请求方式的抓包：</div><div class="line">POST /WEB09/demo1/subSucc.html HTTP/1.1</div><div class="line">Accept: text/html, application/xhtml+xml, */*</div><div class="line">X-HttpWatch-RID: 63397-10049</div><div class="line">Referer: http://localhost:8080/WEB09/demo1/demo1.html</div><div class="line">Accept-Language: zh-Hans-CN,zh-Hans;q=0.5</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Host: localhost:8080</div><div class="line">Content-Length: 25</div><div class="line">Connection: Keep-Alive</div><div class="line">Cache-Control: no-cache</div><div class="line"></div><div class="line">username=aaa&amp;password=123</div></pre></td></tr></table></figure>
<h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>请求行：请求信息的第一行，包含：<code>请求方式</code>、<code>请求路径</code>、<code>协议版本</code>。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /WEB09/demo1/subSucc.html?username=aaa&amp;password=123 HTTP/1.1</div></pre></td></tr></table></figure>
<p>请求方式：请求方式有很多种，常用的是 <code>GET</code> 和 <code>POST</code>。</p>
<p>GET 和 POST 区别：</p>
<ul>
<li>GET：请求参数会显示到地址栏；GET方式有大小的限制；GET方式没有请求体。</li>
<li>POST：请求参数不会显示到地址栏；在请求体中，POST没有大小限制；POST方式有请求体。</li>
</ul>
<p>只有表单设置为 <code>method=&quot;post&quot;</code> 才是 post 请求，其他的都是 get 请求</p>
<h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>请求头：请求信息的第二行到空行结束。</p>
<p>格式：key：value（value可以是多个值）</p>
<p>常见的请求头:</p>
<table>
<thead>
<tr>
<th>请求头</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept: text/html,image/bmp</td>
<td>支持数据类型<br>text/html text/css text/javascript 大类型/小类型 mime类型</td>
</tr>
<tr>
<td>Accept-Charset: ISO-8859-1</td>
<td>字符集</td>
</tr>
<tr>
<td>Accept-Encoding: gzip</td>
<td>支持压缩</td>
</tr>
<tr>
<td>Accept-Language:zh-cn</td>
<td>语言环境</td>
</tr>
<tr>
<td>Host: www.renkaigis.com:80</td>
<td>访问主机</td>
</tr>
<tr>
<td>★ If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT</td>
<td>缓存文件的最后修改时间，和响应中一个头一起使用，完成本地缓存的查找</td>
</tr>
<tr>
<td>★ Referer: <a href="http://www.renkaigis.com/index.jsp" target="_blank" rel="external">http://www.renkaigis.com/index.jsp</a></td>
<td>来自哪个页面、防盗链</td>
</tr>
<tr>
<td>★ User-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)</td>
<td>获得客户端浏览器的信息。（文件下载：IE：URL编码，火狐：Base64）</td>
</tr>
<tr>
<td>Connection:Keep-Alive</td>
<td>链接状态</td>
</tr>
</tbody>
</table>
<h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><p>请求体：空行以下的内容。</p>
<p>只有post才有请求体，获取请求参数：<a href="http://xxxx?username=tom&amp;password=123" target="_blank" rel="external">http://xxxx?username=tom&amp;password=123</a></p>
<p>格式：username=tom&amp;password=123</p>
<h2 id="HTTP-协议的响应部分（Response）"><a href="#HTTP-协议的响应部分（Response）" class="headerlink" title="HTTP 协议的响应部分（Response）"></a>HTTP 协议的响应部分（Response）</h2><p>组成部分：<code>响应行</code>、<code>响应头</code>、<code>响应体</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: Apache-Coyote/1.1</div><div class="line">Accept-Ranges: bytes</div><div class="line">ETag: W/&quot;147-1455670867735&quot;</div><div class="line">Last-Modified: Wed, 17 Feb 2016 01:01:07 GMT</div><div class="line">Content-Type: text/html</div><div class="line">Content-Length: 147</div><div class="line">Date: Wed, 17 Feb 2016 01:17:06 GMT</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;Java&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;Java学习&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><p>响应行：响应信息的第一行。</p>
<p>格式：协议/版本 状态码 状态码说明</p>
<p>例如：HTTP/1.1 200 OK</p>
<p>状态码：</p>
<ul>
<li>200 正常响应成功</li>
<li>302 重定向</li>
<li>304 读缓存</li>
<li>404 用户操作资源不存在</li>
<li>500 服务器内部异常</li>
</ul>
<h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>响应头：从响应信息的第二行到空行结束。</p>
<p>格式:key：value(value可以是多个值)</p>
<p>常见的响应头：</p>
<table>
<thead>
<tr>
<th>响应头</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>★ Location: <a href="http://www.it315.org/index.jsp" target="_blank" rel="external">http://www.it315.org/index.jsp</a></td>
<td>跳转方向 和302一起使用的</td>
</tr>
<tr>
<td>Server:apache tomcat</td>
<td>服务器型号</td>
</tr>
<tr>
<td>Content-Encoding: gzip</td>
<td>数据压缩</td>
</tr>
<tr>
<td>Content-Length: 80</td>
<td>数据长度</td>
</tr>
<tr>
<td>Content-Language: zh-cn</td>
<td>语言环境</td>
</tr>
<tr>
<td>★ Content-Type: text/html; charset=GB2312</td>
<td>数据类型</td>
</tr>
<tr>
<td>★ Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT</td>
<td>最后的修改文件的事件.与 If-Modified-Since 一起使用</td>
</tr>
<tr>
<td>★ Refresh: 1;url=<a href="http://www.it315.org" target="_blank" rel="external">http://www.it315.org</a></td>
<td>定时刷新</td>
</tr>
<tr>
<td>★ Content-Disposition: attachment; filename=aaa.zip</td>
<td>下载</td>
</tr>
<tr>
<td>★ Set-Cookie:SS=Q0=5Lb_nQ;</td>
<td>path=/search</td>
</tr>
<tr>
<td>Expires: -1</td>
<td>缓存</td>
</tr>
<tr>
<td>Cache-Control: no-cache</td>
<td>缓存</td>
</tr>
<tr>
<td>Pragma: no-cache</td>
<td>缓存</td>
</tr>
<tr>
<td>Connection: Keep-Alive</td>
<td>连接</td>
</tr>
</tbody>
</table>
<h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>响应体：页面上展示的内容。</p>
<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>Servlet</code> 是运行在服务器端的一个 Java 小程序，动态的 web 开发技术，主要功能在于交互式地浏览和修改数据，生成动态 web 内容。</p>
<p><code>Servlet = Service + Applet</code></p>
<h2 id="Servlet-实现过程"><a href="#Servlet-实现过程" class="headerlink" title="Servlet 实现过程"></a>Servlet 实现过程</h2><ul>
<li><p>客户端发送请求至服务器端；</p>
</li>
<li><p>服务器将请求信息发送至 Servlet；</p>
</li>
<li><p>Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；</p>
</li>
<li><p>服务器将响应返回给客户端。</p>
</li>
</ul>
<h2 id="编写一个-Servlet-步骤"><a href="#编写一个-Servlet-步骤" class="headerlink" title="编写一个 Servlet 步骤"></a>编写一个 Servlet 步骤</h2><p>1、编写一个类:</p>
<ul>
<li><p>a. 继承 HttpServlet，</p>
</li>
<li><p>b. 重写 doGet 或者 doPost 方法；</p>
</li>
</ul>
<p>2、编写配置文件（<code>web-inf/web.xml</code>）:</p>
<ul>
<li><p>a. 注册 Servlet;</p>
</li>
<li><p>b. 绑定路径</p>
</li>
</ul>
<p>3、访问：<code>http://主机:端口号/项目名/路径</code></p>
<h3 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h3><p>格式:key=value</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sting value=request.getParameter(<span class="string">"key"</span>)</div></pre></td></tr></table></figure>
<p>例如: <a href="http://localhost/day09/hello?username=tom" target="_blank" rel="external">http://localhost/day09/hello?username=tom</a></p>
<ul>
<li>request.getParameter(“username”) 就可以获取 tom 值</li>
</ul>
<h3 id="回写内容"><a href="#回写内容" class="headerlink" title="回写内容"></a>回写内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.getWriter().print(<span class="string">"success"</span>);</div></pre></td></tr></table></figure>
<p>处理响应数据中文乱码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>); <span class="comment">//建议放在方法中的第一行</span></div></pre></td></tr></table></figure>
<h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p>配置文件路径：<code>web-inf/web.xml</code></p>
<ul>
<li>配置 Servlet 到 WEB 服务器。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置Servlet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- Servlet的名称 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- Servlet的类的全路径 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.demo1.DemoServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置Servlet的映射 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Servlet的名称 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- Servlet的访问路径 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletDemo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>url-pattern的配置: <strong>★</strong></p>
<ul>
<li><p>方式1：完全匹配  必须以<code>&quot;/&quot;</code>开始 例如: <code>/hello /a/b/c</code></p>
</li>
<li><p>方式2：目录匹配  必须<code>&quot;/&quot;</code>开始  以<code>&quot;*&quot;</code>结束   例如: <code>/a/*  /*</code></p>
</li>
<li><p>方式3：后缀名匹配 以<code>&quot;*&quot;</code>开始 以字符结尾 例如: <code>*.jsp  *.do  *.action</code></p>
</li>
</ul>
<p>优先级:</p>
<ul>
<li>完全匹配 &gt; 目录匹配 &gt; 后缀名匹配</li>
</ul>
<p>练习:</p>
<pre><code>有如下的一些映射关系：

    Servlet1 映射到 /abc/* 

    Servlet2 映射到 /*

    Servlet3 映射到 /abc 

    Servlet4 映射到 *.do 

问题:

当请求URL为“/abc/a.html”，“/abc/*”和“/*”都匹配，哪个servlet响应

    Servlet引擎将调用Servlet1。

当请求URL为“/abc”时，“/*”和“/abc”都匹配，哪个servlet响应

    Servlet引擎将调用Servlet3。

当请求URL为“/abc/a.do”时，“/abc/*”和“*.do”都匹配，哪个servlet响应

    Servlet引擎将调用Servlet1。

当请求URL为“/a.do”时，“/*”和“*.do”都匹配，哪个servlet响应

    Servlet引擎将调用Servlet2.

当请求URL为“/xxx/yyy/a.do”时，“/*”和“*.do”都匹配，哪个servlet响应

    Servlet引擎将调用Servlet2。
</code></pre><h3 id="配置-Servlet-的启动时加载"><a href="#配置-Servlet-的启动时加载" class="headerlink" title="配置 Servlet 的启动时加载"></a>配置 Servlet 的启动时加载</h3><p>在 web.xml 中 <code>&lt;servlet&gt;</code> 标签中配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div></pre></td></tr></table></figure>
<p>作用：用来修改 servlet 的初始化时机</p>
<p>取值：正整数，值越大优先级越低</p>
<p>当我们的配置文件里面没有指定配置的话，会查找 tomcat 的 web.xml，若请求我们自己的项目处理不了,tomcat 的默认的 servlet 会帮我们处理信息。</p>
<h3 id="路径的写法"><a href="#路径的写法" class="headerlink" title="路径的写法"></a>路径的写法</h3><p>相对路径：</p>
<ul>
<li><p>当前路径    ./ 或者 什么都不写</p>
</li>
<li><p>上一级路径 ../</p>
</li>
</ul>
<p>绝对路径：(我们使用)</p>
<ul>
<li><p>带主机和协议的绝对路径（访问站外资源）</p>
</li>
<li><p><a href="http://www.itheima.com/xxxx" target="_blank" rel="external">http://www.itheima.com/xxxx</a></p>
</li>
<li><p><a href="http://localhost:80/day09/hello" target="_blank" rel="external">http://localhost:80/day09/hello</a></p>
</li>
<li><p>不带主机和协议的绝对路径</p>
</li>
<li><p>/day09/hello（经常使用）</p>
</li>
</ul>
<h2 id="Servlet-结构与方法"><a href="#Servlet-结构与方法" class="headerlink" title="Servlet 结构与方法"></a>Servlet 结构与方法</h2><h3 id="servlet的体系结构"><a href="#servlet的体系结构" class="headerlink" title="servlet的体系结构:"></a>servlet的体系结构:</h3><pre><code>Servlet:接口
    |
GenericServlet:抽象类
    |
HttpServlet:抽象类
    |
自定义servlet
</code></pre><h3 id="Servlet-常用方法"><a href="#Servlet-常用方法" class="headerlink" title="Servlet 常用方法:"></a>Servlet 常用方法:</h3><ul>
<li><p><code>void init(ServletConfig config)</code>:初始化</p>
</li>
<li><p><code>void service(ServletRequest request,ServletResponse response)</code>:服务 处理业务逻辑</p>
</li>
<li><p><code>void destroy()</code>:销毁</p>
</li>
<li><p><code>ServletConfig getServletConfig()</code>:获取当前 servlet 的配置对象</p>
</li>
</ul>
<h3 id="GenericServlet-常用方法"><a href="#GenericServlet-常用方法" class="headerlink" title="GenericServlet 常用方法:"></a>GenericServlet 常用方法:</h3><p>除了 service 方法没有显示，其他都实现了</p>
<p>空参的 init()，若我们自己想对 servlet 进行初始化操作，重写这个 init() 方法即可</p>
<h3 id="HttpServlet-常用方法："><a href="#HttpServlet-常用方法：" class="headerlink" title="HttpServlet 常用方法："></a>HttpServlet 常用方法：</h3><p>service 做了实现，把参数强转，调用了重载的 service 方法</p>
<p>重载的 service 方法获取请求的方式，根据请求方式的不同调用相应 <code>doXxx()</code> 方法</p>
<p>doGet 和 doPost 方法</p>
<h2 id="Servlet-的生命周期"><a href="#Servlet-的生命周期" class="headerlink" title="Servlet 的生命周期"></a>Servlet 的生命周期</h2><p>生命周期指的是一个对象从创建到销毁的过程。</p>
<p>Servlet 的生命周期，指的是 Servlet 对象从创建到销毁的过程。</p>
<p><code>void init(ServletConfig config)</code>:初始化</p>
<pre><code>* 初始化方法
* 执行者:服务器
* 执行次数:一次
* 执行时机:默认第一次访问的时候
</code></pre><p><code>void service(ServletRequest request,ServletResponse response)</code>:服务 处理业务逻辑</p>
<pre><code>* 服务
* 执行者:服务器
* 执行次数:请求一次执行一次
* 执行时机:请求来的时候
</code></pre><p><code>void destroy()</code>:销毁</p>
<pre><code>* 销毁
* 执行者:服务器
* 执行次数:只执行一次
* 执行时机:当servlet被移除的时候或者服务器正常关闭的时候
</code></pre><p>Serlvet是单实例多线程</p>
<blockquote>
<p>默认客户端第一次访问 Servlet 的时候，服务器创建一个 Servlet 对象，并调用 init 实现初始化操作。并调用一次 service 方法，每当请求来的时候，服务器创建一个线程，调用 service 方法执行自己的业务逻辑。当 Servlet 被移除的时候或者服务器正常关闭的时候，Servlet 对象就会被销毁，服务器调用 Servlet 的 destroy 方法实现销毁操作。</p>
</blockquote>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="常见的响应头——refresh"><a href="#常见的响应头——refresh" class="headerlink" title="常见的响应头——refresh"></a>常见的响应头——refresh</h2><p>refresh（定时刷新）</p>
<p>响应头格式:</p>
<p><code>refresh:秒数;url=跳转的路径</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置响应头：</span></div><div class="line"><span class="comment">//设置字符串形式的响应头</span></div><div class="line">response.setHeader(String key,String value);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//追加响应头，若之前设置过这个头，则追加；若没有设置过，则设置</span></div><div class="line">response.addHeader(String key,String value);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置定时刷新：</span></div><div class="line">response.setHeader(<span class="string">"refresh"</span>,<span class="string">"3;url=/day0901/login.htm"</span>);</div></pre></td></tr></table></figure>
<p><strong>另：</strong> 可以通过html页面中的一个标签设置头信息 <code>&lt;meta&gt;</code> 标签，跳转到指定路径。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Refresh"</span> <span class="attr">content</span>=<span class="string">"5;url=/WEB09/succ.html"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p><code>ServletContext</code> ：全局管理者（上下文），是一个项目的引用，代表了当前项目。</p>
<p>当项目启动的时候，服务器会为每一个 web 项目创建一个 servletContext 对象。</p>
<p>当项目被移除的时候或者服务器关闭的时候 servletContext 销毁。</p>
<p>servletContext 接口是 Servlet 中最大的一个接口，呈现了 web 应用的 Servlet 视图。 ServletContext 实例是通过 getServletContext() 方法获得的，由于 HttpServlet 继承 GenericServlet 的关系，GenericServlet 类和 HttpServlet 类同时具有该方法。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h3><blockquote>
<ol>
<li>获取全局的初始化参数</li>
<li>共享资源(xxxAttribute)</li>
<li>获取文件资源</li>
<li>其他操作</li>
</ol>
</blockquote>
<h3 id="获取-servletcontext"><a href="#获取-servletcontext" class="headerlink" title="获取 servletcontext"></a>获取 servletcontext</h3><p>方式1：了解</p>
<blockquote>
<p>getServletConfig().getServletContext()</p>
</blockquote>
<p>方式2：</p>
<blockquote>
<p>getServletContext()</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol>
<li>了解</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">getInitParameter</span><span class="params">(String key)</span><span class="comment">//通过名称获取指定的参数值</span></span></div><div class="line">Enumeration <span class="title">getInitParameterNames</span><span class="params">()</span><span class="comment">//获取所有的参数名称</span></div></pre></td></tr></table></figure>
<p>在根标签下有一个 <code>context-param</code> 子标签，用来存放初始化参数：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><p>xxxAttribute（set,get）</p>
</li>
<li></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">getRealPath</span><span class="params">(String path)</span><span class="comment">//获取文件部署到tomcat上的真实路径(带tomcat路径)</span></span></div><div class="line"></div><div class="line"><span class="title">getRealPath</span><span class="params">(<span class="string">"/"</span>)</span><span class="comment">//D:\javaTools\apache-tomcat-7.0.52\webapps\day09\</span></div><div class="line"></div><div class="line">InputStream <span class="title">getResourceAsStream</span><span class="params">(String path)</span><span class="comment">//以流的形式返回一个文件</span></div></pre></td></tr></table></figure>
<ol>
<li>获取文件的 mime 类型（大类型/小类型）</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">getMimeType</span><span class="params">(String 文件名称)</span></span></div></pre></td></tr></table></figure>
<h3 id="域对象-★★★"><a href="#域对象-★★★" class="headerlink" title="域对象 ★★★"></a>域对象 ★★★</h3><p>servletcontext 可以被当成map集合。</p>
<p>常用方法:</p>
<blockquote>
<p>xxxAttribute()</p>
</blockquote>
<p>servletcontext 创建和销毁：</p>
<blockquote>
<p>当项目启动的时候服务器为每一个 web 项目创建一个 servletcontext 对象。<br>当项目被移除的时候或者服务器关闭的时候 servletcontext 销毁。</p>
</blockquote>
<p>存放:</p>
<blockquote>
<p>共享的数据</p>
</blockquote>
<h2 id="获取文件的路径"><a href="#获取文件的路径" class="headerlink" title="获取文件的路径"></a>获取文件的路径</h2><p>通过类加载器获取文件：2.txt 放在 classes 目录下无论是 java 项目还是 web 项目都可以。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">类.class.getClassLoader().getResource(<span class="string">"2.txt"</span>).getPath();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/JavaWeb/0100.jpg&quot; title=&quot;Http &amp; Servlet&quot;&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS Engine 空间关系之判断点在面内</title>
    <link href="http://yoursite.com/posts/ArcGIS/2018-03-23-ArcGIS-Engine-PointInPolygon.html"/>
    <id>http://yoursite.com/posts/ArcGIS/2018-03-23-ArcGIS-Engine-PointInPolygon.html</id>
    <published>2018-03-23T02:36:45.000Z</published>
    <updated>2018-03-23T03:07:42.231Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>做项目遇到的问题。寥寥几行代码轻松解决，记录一下。</p>
<a id="more"></a>
<p>几何对象之间的空间关系主要有<code>包含</code>、<code>相等</code>、<code>在内部</code>、<code>相交</code>等。矢量数据的空间关系运算需要用到 <code>IRelationalOperation</code> 接口，通过该接口的不同方法判定两个几何对象之间的关系是否存在。关系运算符用于比较两个几何体，并返回一个布尔类型值来说明某种控件关系是否存在。</p>
<h2 id="空间包含关系（Contains-amp-Within）"><a href="#空间包含关系（Contains-amp-Within）" class="headerlink" title="空间包含关系（Contains &amp; Within）"></a>空间包含关系（Contains &amp; Within）</h2><p>空间包含（Contains）表示当前几何对象包含输入几何对象。在内部（Within）表示当前几何对象在输入几何对象的内部。Contains 和 Within 是相对的关系，即 Contains 的反面就是 Within。</p>
<h2 id="交叉（Crosses）"><a href="#交叉（Crosses）" class="headerlink" title="交叉（Crosses）"></a>交叉（Crosses）</h2><p>交叉（Crosses）表示线和线或者线和面的边界之间有相交。</p>
<h2 id="相离（Disjoint）"><a href="#相离（Disjoint）" class="headerlink" title="相离（Disjoint）"></a>相离（Disjoint）</h2><p>相离（Disjoint）表示两个几何对象之间没有任何公共部分。</p>
<h2 id="重叠（Overlaps）"><a href="#重叠（Overlaps）" class="headerlink" title="重叠（Overlaps）"></a>重叠（Overlaps）</h2><p>重叠（Overlaps）表示两个同一维度的几何对象具有公共部分，并且公共部分和输入集合对象具有相同的维度。</p>
<h2 id="相等（Equals）"><a href="#相等（Equals）" class="headerlink" title="相等（Equals）"></a>相等（Equals）</h2><p>相等（Equals）表示两个几何对象具有相同的几何维度、顶点集合等。对于多边形和线几何类型，如果它们具有相等关系，则 SymmetricDifference 方法返回值为空。</p>
<h2 id="相接（Touches）"><a href="#相接（Touches）" class="headerlink" title="相接（Touches）"></a>相接（Touches）</h2><p>相接（Touches）表示两个几何对象的边界相交。如果两个几何对象相接，那么它们的交集不为空，但是集合对象的内部交集为空。</p>
<p><hr><br>IRelationalOperator的一些关系类型:</p>
<table>
<thead>
<tr>
<th style="text-align:center">关系类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Contains</td>
<td>判断一个图形是否包含另外一个图形</td>
</tr>
<tr>
<td style="text-align:center">Within</td>
<td>判断一个图形是否被另外一个图形所包含。</td>
</tr>
<tr>
<td style="text-align:center">Crosses</td>
<td>判断两个图形是否在维数较少的那个图形的内部相交</td>
</tr>
<tr>
<td style="text-align:center">Disjoint</td>
<td>判断两个图形间是否没有相同点</td>
</tr>
<tr>
<td style="text-align:center">Equals</td>
<td>判断两个图形是否是同一个类型并且在平面上的点是否是相同的位置。如果返回值为真，则它们应该包含（Contains）另外一个图形同时也被另外一个图形所包含(Within)。</td>
</tr>
<tr>
<td style="text-align:center">Overlaps</td>
<td>判断两个图形的交集是否和其中的一个图形拥有相同的维数，并且他们交集不能和其中任何一个图形相等。该方法只使用与两个Polyline 之间或者两个Polygon 之间。</td>
</tr>
<tr>
<td style="text-align:center">Touches</td>
<td>判断两个图形的边界是否相交，如果两个图形的交集不为空，但两个图形内部的交集为空，则返回值为真。</td>
</tr>
</tbody>
</table>
<p><strong>本文主要实现了判断点在面内（空间包含关系）</strong></p>
<p><strong>AE 代码见 Github：</strong><a href="https://github.com/renkaigis/PointInPolygon" target="_blank">PointInPolygon</a> (AE 版本 10.1，VS 版本 2017)</p>
<p>若代码不能运行，请添加如下引用：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.Carto;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.esriSystem;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geodatabase;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geoprocessing;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.AnalysisTools;</div><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> System.ComponentModel;</div><div class="line"><span class="keyword">using</span> System.Data;</div><div class="line"><span class="keyword">using</span> System.Drawing;</div><div class="line"><span class="keyword">using</span> System.Linq;</div><div class="line"><span class="keyword">using</span> System.Text;</div><div class="line"><span class="keyword">using</span> System.Threading.Tasks;</div><div class="line"><span class="keyword">using</span> System.Windows.Forms;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geoprocessor;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geometry;</div></pre></td></tr></table></figure>
<p>我主要实现了 <strong>判断点在面内</strong> 的方法，核心代码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointInPolygonButton_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 获得点图层</span></div><div class="line">    <span class="keyword">int</span> PointId = <span class="number">1</span>;</div><div class="line">    IFeatureLayer PointLayer = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; axMapControl1.LayerCount; i++)</div><div class="line">    &#123;</div><div class="line">        PointLayer = axMapControl1.get_Layer(i) <span class="keyword">as</span> IFeatureLayer;</div><div class="line">        <span class="keyword">if</span> (PointLayer <span class="keyword">is</span> IFeatureLayer &amp;&amp; PointLayer.FeatureClass.ShapeType == esriGeometryType.esriGeometryPoint)</div><div class="line">        &#123;</div><div class="line">            PointId = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (PointId == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        MessageBox.Show(<span class="string">"找不到质点图层，请重新加载"</span>, <span class="string">"提示"</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获得面图层</span></div><div class="line">    <span class="keyword">int</span> PolygonId = <span class="number">-1</span>;</div><div class="line">    IFeatureLayer PolygonLayer = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; axMapControl1.LayerCount; i++)</div><div class="line">    &#123;</div><div class="line">        PolygonLayer = axMapControl1.get_Layer(i) <span class="keyword">as</span> IFeatureLayer;</div><div class="line">        <span class="keyword">if</span> (PolygonLayer <span class="keyword">is</span> IFeatureLayer &amp;&amp; PolygonLayer.FeatureClass.ShapeType == esriGeometryType.esriGeometryPolygon)</div><div class="line">        &#123;</div><div class="line">            PolygonId = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (PolygonId == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        MessageBox.Show(<span class="string">"找不到边界图层，请重新加载"</span>, <span class="string">"提示"</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    PointLayer = axMapControl1.get_Layer(PointId) <span class="keyword">as</span> IFeatureLayer;</div><div class="line">    PolygonLayer = axMapControl1.get_Layer(PolygonId) <span class="keyword">as</span> IFeatureLayer;</div><div class="line"></div><div class="line">    IFeatureCursor PointFeatureCursor = PointLayer.Search(<span class="literal">null</span>, <span class="literal">true</span>);</div><div class="line">    IFeature PointFeature = PointFeatureCursor.NextFeature();</div><div class="line"></div><div class="line">    IFeatureCursor PolygonFeatureCursor = PolygonLayer.Search(<span class="literal">null</span>, <span class="literal">true</span>);</div><div class="line">    IFeature PolygonFeature = PolygonFeatureCursor.NextFeature();</div><div class="line"></div><div class="line">    IRelationalOperator pRelationalOperator = PolygonFeature.Shape <span class="keyword">as</span> IRelationalOperator;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pRelationalOperator.Contains(PointFeature.Shape))</div><div class="line">    &#123;</div><div class="line">        MessageBox.Show(<span class="string">"点在面内！"</span>, <span class="string">"恭喜你！"</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        MessageBox.Show(<span class="string">"点在面外！"</span>, <span class="string">"很遗憾！"</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果：</strong></p>
<p><img src="http://image.renkaigis.com/images/ArcGIS/PointInPolygon1.png"></p>
<p><img src="http://image.renkaigis.com/images/ArcGIS/PointInPolygon2.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做项目遇到的问题。寥寥几行代码轻松解决，记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS" scheme="http://yoursite.com/categories/ArcGIS/"/>
    
    
      <category term="ArcGIS" scheme="http://yoursite.com/tags/ArcGIS/"/>
    
      <category term="AE" scheme="http://yoursite.com/tags/AE/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS Engine 之 GP 工具实现矢量转栅格</title>
    <link href="http://yoursite.com/posts/ArcGIS/2018-03-21-ArcGIS-Engine-PointToRaster.html"/>
    <id>http://yoursite.com/posts/ArcGIS/2018-03-21-ArcGIS-Engine-PointToRaster.html</id>
    <published>2018-03-21T09:02:30.000Z</published>
    <updated>2018-03-23T03:09:53.076Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>做项目遇到需要将矢量数据转换成栅格数据的问题，走了很多弯路，后来发现使用 GP 工具很轻松就解决了，记录一下。</p>
<a id="more"></a>
<p>ArcGIS 软件中 <code>ArcToolbox</code> 中的工具几乎都可以使用 GP 工具来完成。矢量转栅格的工具主要在 <code>ArcToolbox --&gt; Conversion Tools --&gt; To Raster</code> 下，包括 <code>Feature to Raster</code>、<code>Point to Raster</code>、<code>Polygon to Raster</code> 和 <code>Polyline to Raster</code>。其中 <code>Feature to Raster</code> 与其他三种效果相同。</p>
<p>ArcGIS 中 <code>Feature to Raster</code> 方法如下图所示：</p>
<p><img src="http://image.renkaigis.com/images/ArcGIS/PointToRaster1.png"></p>
<p>官方文档给出的工具语法如下：</p>
<ul>
<li>FeatureToRaster_conversion (in_features, field, out_raster, {cell_size})</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Parameter</th>
<th>Explanation</th>
<th style="text-align:center">Data Type</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">in_features</td>
<td>The input feature dataset to be converted to a raster dataset.</td>
<td style="text-align:center">Feature Layer</td>
</tr>
<tr>
<td style="text-align:center">field</td>
<td>The field used to assign values to the output raster.<br>It can be any field of the input feature dataset’s attribute table.<br>If the Shape field of a point or multipoint dataset contains z or m values, then either of these can be used.</td>
<td style="text-align:center">Field</td>
</tr>
<tr>
<td style="text-align:center">out_raster</td>
<td>The output raster dataset to be created.<br>When not saving to a geodatabase, specify .tif for a TIFF file format, .img for an ERDAS IMAGINE file format, or no extension for an Esri Grid raster format.</td>
<td style="text-align:center">Raster Dataset</td>
</tr>
<tr>
<td style="text-align:center">cell_size<br>(Optional)</td>
<td>The cell size for the output raster dataset.<br>The default cell size is the shortest of the width or height of the extent of the input feature dataset, in the output spatial reference, divided by 250.</td>
<td style="text-align:center">Analysis Cell Size</td>
</tr>
</tbody>
</table>
<p><strong>AE 代码见 Github：</strong><a href="https://github.com/renkaigis/PointToRaster" target="_blank">PointToRaster</a> (AE 版本 10.1，VS 版本 2017)</p>
<p>若代码不能运行，请添加如下引用：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.Carto;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.esriSystem;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geodatabase;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geoprocessing;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.AnalysisTools;</div><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> System.ComponentModel;</div><div class="line"><span class="keyword">using</span> System.Data;</div><div class="line"><span class="keyword">using</span> System.Drawing;</div><div class="line"><span class="keyword">using</span> System.Linq;</div><div class="line"><span class="keyword">using</span> System.Text;</div><div class="line"><span class="keyword">using</span> System.Threading.Tasks;</div><div class="line"><span class="keyword">using</span> System.Windows.Forms;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geoprocessor;</div><div class="line"><span class="keyword">using</span> ESRI.ArcGIS.DataSourcesRaster;</div></pre></td></tr></table></figure>
<p>我主要实现了 <strong>点转栅格</strong> 的方法，核心代码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">toRaster_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></div><div class="line">&#123;</div><div class="line">    Geoprocessor gp = <span class="keyword">new</span> Geoprocessor();</div><div class="line">    gp.OverwriteOutput = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> pLayerId = <span class="number">-1</span>;</div><div class="line">    ILayer pLayer = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; axMapControl1.LayerCount; i++)</div><div class="line">    &#123;</div><div class="line">        pLayer = axMapControl1.get_Layer(i);</div><div class="line">        <span class="comment">//if (pLayer is IFeatureLayer &amp;&amp; pLayer.Name == "质点")</span></div><div class="line">        <span class="keyword">if</span> (pLayer <span class="keyword">is</span> IFeatureLayer)</div><div class="line">        &#123;</div><div class="line">            pLayerId = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (pLayerId == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        MessageBox.Show(<span class="string">"找不到点图层，请重新加载"</span>, <span class="string">"提示"</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        ESRI.ArcGIS.ConversionTools.FeatureToRaster ptr = <span class="keyword">new</span> ESRI.ArcGIS.ConversionTools.FeatureToRaster();</div><div class="line"></div><div class="line">        <span class="comment">// 获得点图层</span></div><div class="line">        IFeatureLayer pfeatureLayer = axMapControl1.get_Layer(pLayerId) <span class="keyword">as</span> IFeatureLayer;</div><div class="line">        IFeatureClass feaureClass = pfeatureLayer.FeatureClass;</div><div class="line"></div><div class="line">        ptr.in_features = pfeatureLayer;</div><div class="line">        <span class="keyword">string</span> filepath = <span class="string">@"d:\gis\"</span>;</div><div class="line">        ptr.out_raster = filepath + pfeatureLayer.Name + <span class="string">".tif"</span>; <span class="comment">// 将转换结果保存为tif格式</span></div><div class="line">        ptr.field = <span class="string">"id"</span>; <span class="comment">// 设置根据那个字段进行转换</span></div><div class="line">        ptr.cell_size = <span class="number">64</span>; <span class="comment">// 设置转换后的栅格像元大小</span></div><div class="line">        gp.Execute(ptr, <span class="literal">null</span>); <span class="comment">// 执行 GP 工具</span></div><div class="line"></div><div class="line">        MessageBox.Show(<span class="string">"转换成功！"</span>, <span class="string">"恭喜你！"</span>, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);</div><div class="line"></div><div class="line">        <span class="comment">// 加载栅格</span></div><div class="line">        IWorkspaceFactory pWorkspaceFactory = <span class="keyword">new</span> RasterWorkspaceFactory();</div><div class="line">        IWorkspace pWorkspace = pWorkspaceFactory.OpenFromFile(filepath, <span class="number">0</span>);</div><div class="line">        IRasterWorkspace pRasterWorkspace = pWorkspace <span class="keyword">as</span> IRasterWorkspace;</div><div class="line">        IRasterDataset pRasterDataset = pRasterWorkspace.OpenRasterDataset(pfeatureLayer.Name + <span class="string">".tif"</span>);</div><div class="line">        IRaster pRaster= pRasterDataset.CreateDefaultRaster();</div><div class="line">        IRasterLayer pRasterLayer = <span class="keyword">new</span> RasterLayerClass();</div><div class="line">        pRasterLayer.CreateFromRaster(pRaster);</div><div class="line">        ILayer layer = pRasterLayer <span class="keyword">as</span> ILayer;</div><div class="line">        axMapControl1.AddLayer(layer, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Exception ex)</div><div class="line">    &#123;</div><div class="line">        MessageBox.Show(<span class="string">"转换失败！"</span>, <span class="string">"很遗憾！"</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果：</strong></p>
<p><img src="http://image.renkaigis.com/images/ArcGIS/PointToRaster2.png"></p>
<p><img src="http://image.renkaigis.com/images/ArcGIS/PointToRaster3.png"></p>
<p>经测试，该代码同样适用与 <code>面数据转换栅格</code>：</p>
<p><img src="http://image.renkaigis.com/images/ArcGIS/PointToRaster4.png"></p>
<p><img src="http://image.renkaigis.com/images/ArcGIS/PointToRaster5.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做项目遇到需要将矢量数据转换成栅格数据的问题，走了很多弯路，后来发现使用 GP 工具很轻松就解决了，记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS" scheme="http://yoursite.com/categories/ArcGIS/"/>
    
    
      <category term="ArcGIS" scheme="http://yoursite.com/tags/ArcGIS/"/>
    
      <category term="AE" scheme="http://yoursite.com/tags/AE/"/>
    
  </entry>
  
  <entry>
    <title>2018 要酷酷的</title>
    <link href="http://yoursite.com/posts/Mine/2017-12-31-2017-2018singledogsingledog.html"/>
    <id>http://yoursite.com/posts/Mine/2017-12-31-2017-2018singledogsingledog.html</id>
    <published>2017-12-31T09:37:34.000Z</published>
    <updated>2018-04-15T05:05:02.843Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/images/living/2017end.jpg" width="500" height="500"></div>

<p><span id="inline-red">本想写个年终总结的。</span></p>
<a id="more"></a>
<!-- 今年 11 月份昆明出差的时候，在西西弗书店看到了一本书，名字叫做《单身久了，就会变成狗》。一个书名，就触动了我的心，这是单身 24 年痛的领悟。

每一个单身的人心里都有一个不可能的人，不是不想，而是不可能。

我把问题都归咎于我太胖了，所以我要先努力的减肥，就算减不下去也要保持不要再胖！胖的我，自己都不喜欢，何况别人呢。

本想写个年终总结，却跑题了。

其实单不单的都无所谓，会有更好的等着你的。而前提是你要足够优秀才可以。

看看自己，哪里有优秀的地方。

2017 年中了王者农药的毒，努力的戒却戒不掉，立了很多戒毒的 flag 都不了了之了。我不曾想过我也会沉迷一款游戏，心里知道这是浪费时间浪费精力的，但却就是忍不住去玩。唯有卸载才能管得住自己。

想变得更好，想会更多的语言，想独自写一个项目。于是，2017 年新建了一个 blog，开启了两个计划，这或许是督促我学习的最好方式吧。

一直在南师，眼界狭小，可以对比的只有实验室成员或者班级同学或者往届师兄师姐们，却不知外面的世界有多少机遇和挑战。

一次和武大学霸佳琳聊天，深深的刺激到了我，原来以前我们以为的并不是我们所以为的那样，于是捡起了扔下四个月的扇贝，我们成了“扇贝同桌”，我要追随着学霸的脚步，在学霸的监督下好好学习，提高自己。不仅仅是英语。

仿佛她为我打开了一扇大门，虽然现在看来还很遥远，但我还是抱有一丝幻想的。

***那么，既然总结就该有个总结的样吧：***

# 学习

对于学习，给自己定过很多目标，但有些早已忘却，有些还在坚持。有时候一件很小的事情，只要你坚持坐下去，回头来看，其实蛮骄傲的。我惟独缺乏的就是坚持，学习不能坚持，健身不能坚持，唯一能坚持的就是娱乐。

每天都是晚上的时候悔恨这一天我怎么什么都没做啊，然后暗暗给自己定目标明天要干什么要什么，然后来了实验室之后就打开了视频、微博、音乐…

这样自我抛弃的一个人，我拯救不了！

2017 年，下载的学习视频没有看完，信誓旦旦买的书没看过几页，后悔都没有用了。

2018 年，要找工作了，要写论文了，我看你怎么办！

# 生活

2017 还是蛮乐观的，一直是一个积极向上的小胖子。跑跑步，听听歌，打打游戏，生活的别提有多舒服了。但也难免会有“思考人生”的时候，悲观不是我应该拥有的，要扫除一切负面情绪。

在年底，兴奋的是体重终于开始突破 80 kg，希望继续下降，最差也要保持着吧。

只有瘦下来，我才有追求别人的资格吧。

心里一直放不下一个人，经常会去看她有没有更新动态，她最近在听什么歌。每次想着自己怎么这么贱，她有什么好的，怎么就是放不下。但又反过来想想，幸亏追不到，不然……讲真，这样的女生还是不满意的。

“时间带走了年少轻狂，让我们懂得了人走茶凉，看透了世间冷暖，爱情这东西，谁都拿的起，但未必谁都能放得下。”

确实是放不下，也没有一点可能了。但我心里还是会留一个位置给你，直到我遇到我的女神。我会大胆的去追求。

<hr><hr><hr> -->
<p>年末刷微博的时候，突然看到这幅漫画，瞬间泪奔。</p>
<p>2017 对我很好，他没有亏待我，是我自己不争气，辜负了 2017，浪费了 2017 的大好时光。</p>
<p>2017 再见，抱歉虚度了你，有太多抱怨不解难过与孤独，但都自己一个人撑过来。若是我有做的不好的地方，还请你宽容我，请原谅我这一年的放纵不羁，原谅最后的我没有给你一个满意的答卷。若是 2018 对我不好，我还是会想你的。</p>
<p>对于 2018 我不敢承诺什么，但是我还是要说：</p>
<p><strong>2018，请你对这个傻逼好点！拜托啦！</strong></p>
<div align="center"><br><img src="http://image.renkaigis.com/images/living/2017-2018.jpg"></div>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/images/living/2017end.jpg&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;span id=&quot;inline-red&quot;&gt;本想写个年终总结的。&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Mine" scheme="http://yoursite.com/categories/Mine/"/>
    
    
      <category term="living" scheme="http://yoursite.com/tags/living/"/>
    
  </entry>
  
  <entry>
    <title>Java 泛型：T/K/V/E含义</title>
    <link href="http://yoursite.com/posts/Java/2017-12-02-java-generic-means-TKVE.html"/>
    <id>http://yoursite.com/posts/Java/2017-12-02-java-generic-means-TKVE.html</id>
    <published>2017-12-02T11:54:51.000Z</published>
    <updated>2017-12-02T12:32:05.746Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p id="div-border-left-red">从 Java 5 之后，Java 引入了 “<code>参数化类型（parameterized type）</code>” 的概念，允许程序在创建集合时指定集合元素的类型。例如 <code>List&lt;String&gt;</code> ，这表明该 <code>List</code> 只能保存字符串类型的对象。Java 的参数化类型被称为 <code>泛型（Generic）</code>。</p>

<p>看了很多的泛型，T、K、V、E 的字眼层出不穷，却不知道是什么意思。网上查了一些资料，学习了！</p>
<a id="more"></a>
<h2 id="Java-泛型中的标记符含义："><a href="#Java-泛型中的标记符含义：" class="headerlink" title="Java 泛型中的标记符含义："></a>Java 泛型中的标记符含义：</h2><blockquote>
<p><code>？</code>：表示不确定的 java 类型。</p>
<p><code>T</code>：表示 java 类型。</p>
<p><code>K、V</code>：分别代表 java 键值中的 Key、Value。</p>
<p><code>E</code>：表示 enum 枚举。</p>
<p><code>Object</code>：java 中所有类的父类。</p>
</blockquote>
<p> jdk 中的 K，V，T，E 等泛型名称很多人以为是固定写法，其实这些名称是可以改的，比如改成 zhangsan，lisi 都可以，jdk 为了容易看懂，所以用 K 表示键，V 表示值，T 表示 type 类型，E 表示 enum 枚举，其实<strong>这四个都只是符号，都是表示泛型名称</strong>，T 全部可以换成 E，也可以换成 K，V，zhangsan，都没关系。 </p>
<h2 id="Object-跟这些标记符代表的-java-类型有什么区别呢？"><a href="#Object-跟这些标记符代表的-java-类型有什么区别呢？" class="headerlink" title="Object 跟这些标记符代表的 java 类型有什么区别呢？"></a>Object 跟这些标记符代表的 java 类型有什么区别呢？</h2><p>Object 是所有类的根类，任何类的对象都可以设置给该 Object 引用变量，使用的时候可能需要类型强制转换，但是用使用了泛型 T、E 等这些标识符后，在实际用之前类型就已经确定了，不需要再进行类型强制转换。</p>
<p> <strong>代码摘自网络：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="comment">//T1,T2都是随便定义的东西，注意1:他们不会关联到其他类，只是在本类中通用，只是告诉我们new的时候要加入泛型</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">new</span> Test().getaa());</div><div class="line">        <span class="keyword">new</span> Test&lt;String, String&gt; ().getbb(<span class="string">""</span>);</div><div class="line">        <span class="keyword">new</span> Test().getcc(Test.class);</div><div class="line">        <span class="comment">//注意下6:面这个HashMap的括号里面不能是T,E,T1,T2等不确定的东西,但可以是?</span></div><div class="line">        HashMap&lt;Object, String&gt; map = <span class="keyword">new</span> HashMap&lt;Object, String&gt;();</div><div class="line">        List&lt;?&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">T2 <span class="title">getaa</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="comment">//注意2:T2将自动转型为String,这个不需要去担心</span></div><div class="line">        <span class="keyword">return</span> (T2) <span class="string">"few"</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">getbb</span><span class="params">(T x)</span> </span>&#123;</div><div class="line">        <span class="comment">//注意3:Class&lt;T&gt;前面缺少&lt;T&gt;将编译错误</span></div><div class="line">        System.out.println(x.getClass().getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; Class&lt;?&gt;  getcc(Class&lt;T&gt; a) &#123;</div><div class="line">        <span class="comment">//getcc前面的Class&lt;T&gt;前面缺少&lt;T&gt;将编译错误,注意4:Class&lt;?&gt;里面的问号可以换成T</span></div><div class="line">        System.out.println(a.getClass().getName());    </div><div class="line">        <span class="comment">//注意5:参数里面的Class&lt;T&gt;最大的好处是如果方法里面定义了泛型，可以自动获取类型值，比如如下的List&lt;T&gt;可以自动获取到a的类型，不必强调死</span></div><div class="line">        List&lt;T&gt; aa=<span class="keyword">new</span> ArrayList&lt;T&gt;();</div><div class="line">        System.out.println(aa);</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">few</div><div class="line">java.lang.String</div><div class="line">java.lang.Class</div><div class="line">[]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p id=&quot;div-border-left-red&quot;&gt;从 Java 5 之后，Java 引入了 “&lt;code&gt;参数化类型（parameterized type）&lt;/code&gt;” 的概念，允许程序在创建集合时指定集合元素的类型。例如 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; ，这表明该 &lt;code&gt;List&lt;/code&gt; 只能保存字符串类型的对象。Java 的参数化类型被称为 &lt;code&gt;泛型（Generic）&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;看了很多的泛型，T、K、V、E 的字眼层出不穷，却不知道是什么意思。网上查了一些资料，学习了！&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>滇池实验——昆明之旅</title>
    <link href="http://yoursite.com/posts/Mine/2017-11-20-experiment-in-Kunming-Dianchi.html"/>
    <id>http://yoursite.com/posts/Mine/2017-11-20-experiment-in-Kunming-Dianchi.html</id>
    <published>2017-11-20T02:02:56.000Z</published>
    <updated>2017-11-20T08:51:58.661Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><div align="center"><br>于我而言，对这趟“滇池实验”充满着期待…<br>第一次出差，<br>第一次去云南，<br>第一次坐飞机，<br>第一次冲上云霄，<br>……</div></p>
<p><div align="center"><span id="inline-red">内含多图，流量慎点！</span></div><br><a id="more"></a></p>
<p><div><p id="div-border-left-blue">讲真，从小到大第一次坐飞机，对一切都是陌生又期待的。<br>天生的贪玩属性，出差不仅要做好本职工作，还要好好地玩~</p></div></p>
<h1 id="飞机篇"><a href="#飞机篇" class="headerlink" title="飞机篇"></a>飞机篇</h1><blockquote>
<p>没坐过飞机的人看见什么都是充满新奇的~</p>
</blockquote>
<p><div align="center"><br><img src="http://image.renkaigis.com/images/living/kunming-fly (1).JPG"></div><br><img src="http://image.renkaigis.com/images/living/kunming-fly (2).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-fly (3).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-fly (4).JPG"></p>
<h1 id="工作篇"><a href="#工作篇" class="headerlink" title="工作篇"></a>工作篇</h1><blockquote>
<p>采水样，做实验，实地考察滇池，做汇报。工作先行，游玩次之~</p>
</blockquote>
<p><img src="http://image.renkaigis.com/images/living/kunming-work (1).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-work (2).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-work (3).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-work (4).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-work (5).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-work (6).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-work (8).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-work (9).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-work (10).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-work (11).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-work (12).JPG"></p>
<h1 id="海鸥篇"><a href="#海鸥篇" class="headerlink" title="海鸥篇"></a>海鸥篇</h1><blockquote>
<p>这么铺天盖地的海鸥还是第一次见，抑制不住的兴奋~</p>
</blockquote>
<p><img src="http://image.renkaigis.com/images/living/kunming-seagull (1).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (2).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (3).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (4).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (5).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (6).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (7).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (8).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (9).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (10).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (11).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (12).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (13).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (14).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-seagull (15).JPG"></p>
<h1 id="滇池篇"><a href="#滇池篇" class="headerlink" title="滇池篇"></a>滇池篇</h1><blockquote>
<p>讲真，滇池的水真的脏，真 · 青山绿水</p>
</blockquote>
<p><img src="http://image.renkaigis.com/images/living/kunming-dianchi (1).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-dianchi (2).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-dianchi (3).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-dianchi (4).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-dianchi (5).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-dianchi (6).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-dianchi (7).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-dianchi (8).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-dianchi (9).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-dianchi (10).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-dianchi (11).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-dianchi (12).JPG"></p>
<h1 id="风景篇"><a href="#风景篇" class="headerlink" title="风景篇"></a>风景篇</h1><blockquote>
<p>昆明的天气一直都那么好，随手一拍都是美美的照片</p>
<p>蓝蓝的天，白白的云，太阳直射，暖洋洋</p>
</blockquote>
<p><img src="http://image.renkaigis.com/images/living/kunming-scenery (2).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (4).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (5).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (6).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (7).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (8).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (9).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (10).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (11).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (12).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (13).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (14).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (15).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (16).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (17).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (18).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (19).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (20).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (21).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (22).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (23).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (24).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (25).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (26).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (27).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-scenery (28).JPG"></p>
<h1 id="文艺篇"><a href="#文艺篇" class="headerlink" title="文艺篇"></a>文艺篇</h1><blockquote>
<p>找到了一家西西弗书店，灯光及装饰都给人温暖的感觉</p>
<p>在矢量咖啡点上一杯咖啡，轻柔的音乐响起，无比惬意！</p>
<p>还去了猫的天空之城概念书店、花生书店。这两家店都太小了，远不如西西弗书店大气。尤其是不消费还赶人！！！</p>
</blockquote>
<p><img src="http://image.renkaigis.com/images/living/kunming-literature (1).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (2).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (3).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (4).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (5).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (6).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (7).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (8).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (9).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (10).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (17).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (11).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (12).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (14).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-literature (15).JPG"></p>
<h1 id="美食篇"><a href="#美食篇" class="headerlink" title="美食篇"></a>美食篇</h1><blockquote>
<p>云大附近的园西路，很多好吃的</p>
<p>海埂公园附近的小吃一条街</p>
<p>满足的两个吃货</p>
</blockquote>
<p><div align="center"><br><img src="http://image.renkaigis.com/images/living/kunming-foods (1).JPG"></div><br><img src="http://image.renkaigis.com/images/living/kunming-foods (2).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-foods (3).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-foods (4).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-foods (5).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-foods (6).JPG"></p>
<h1 id="人物篇"><a href="#人物篇" class="headerlink" title="人物篇"></a>人物篇</h1><blockquote>
<p>和师姐同游昆明，帮师姐拍了很多美美的照片</p>
<p>我自己的照片很少，满屏幕都是师姐的照片</p>
<p>哼😒等我瘦下来！</p>
</blockquote>
<p><div align="center"><br><img src="http://image.renkaigis.com/images/living/kunming-figure (1).JPG"></div></p>
<p><div align="center"><br><img src="http://image.renkaigis.com/images/living/kunming-figure (2).JPG"></div></p>
<p><div align="center"><br><img src="http://image.renkaigis.com/images/living/kunming-figure (3).JPG"></div></p>
<p><div align="center"><br><img src="http://image.renkaigis.com/images/living/kunming-figure (4).JPG"></div></p>
<p><div align="center"><br><img src="http://image.renkaigis.com/images/living/kunming-figure (5).JPG"></div><br><img src="http://image.renkaigis.com/images/living/kunming-figure (6).JPG"><br><img src="http://image.renkaigis.com/images/living/kunming-figure (7).JPG"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>昆明之旅很开心，很满足。</p>
<p>最重要的是，看到了和别人的差距，自我感觉别人的 web 平台做的真的很好，而我们的单机版系统不仅从界面还是可视化都感觉很 low。</p>
<p>后面滇池的项目得我接手了，继续学习，继续努力，远离农药，提高代码功底，像师姐学习！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;于我而言，对这趟“滇池实验”充满着期待…&lt;br&gt;第一次出差，&lt;br&gt;第一次去云南，&lt;br&gt;第一次坐飞机，&lt;br&gt;第一次冲上云霄，&lt;br&gt;……&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;span id=&quot;inline-red&quot;&gt;内含多图，流量慎点！&lt;/span&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Mine" scheme="http://yoursite.com/categories/Mine/"/>
    
    
      <category term="living" scheme="http://yoursite.com/tags/living/"/>
    
  </entry>
  
  <entry>
    <title>秦时明月之风林火山集结</title>
    <link href="http://yoursite.com/posts/Mine/2017-08-31-video-qsmoon-flhs.html"/>
    <id>http://yoursite.com/posts/Mine/2017-08-31-video-qsmoon-flhs.html</id>
    <published>2017-08-31T13:02:14.000Z</published>
    <updated>2017-08-31T15:52:14.819Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="http://image.renkaigis.com/images/living/qsmoon-flhs.jpg" title="风 林 火 山"></p>
<a id="more"></a>
<blockquote class="blockquote-center">楚虽三户，<br>亡秦必楚！</blockquote>

<blockquote>
<p>想要成就霸王之业</p>
<p>你需要找到四个重要的人</p>
<p>这四个人就是传承兵道的</p>
<p><strong>风 林 火 山</strong></p>
</blockquote>
<p><br></p>
<div align="center"><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=j0544kg1vvg&auto=0" allowfullscreen="true" quality="high" width="560" height="315" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"></div>

<p><br></p>
<p><b>秦时明月视频纯剪辑</b></p>
<ul>
<li><p>素材：秦时明月之君临天下（第19集-楚之军魂、第68集-一血一脉）</p>
</li>
<li><p>软件：Corel VideoStudio X9</p>
</li>
<li><p>插件：Xvid</p>
</li>
<li><p>分辨率：1920 × 1080</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.renkaigis.com/images/living/qsmoon-flhs.jpg&quot; title=&quot;风 林 火 山&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Mine" scheme="http://yoursite.com/categories/Mine/"/>
    
    
      <category term="Video" scheme="http://yoursite.com/tags/Video/"/>
    
  </entry>
  
</feed>
