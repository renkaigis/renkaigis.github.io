<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秋月春风等闲度</title>
  <subtitle>要有最朴素的生活，与最遥远的梦想。即使明日天寒地冻，路远马亡。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-02T09:43:05.192Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>RenKai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>只要平凡，却不甘平凡</title>
    <link href="http://yoursite.com/view-ordinary-world.html"/>
    <id>http://yoursite.com/view-ordinary-world.html</id>
    <published>2019-12-01T09:35:21.000Z</published>
    <updated>2019-12-02T09:43:05.192Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p id="div-border-left-yellow">一个平平常常的日子，细蒙蒙的雨丝，夹着一星半点的雪花，正纷纷淋淋地向大地飘洒着。时令已快到惊蛰，雪当然再不会存留，往往还没等落地，就已经消失得无踪无影了。黄土高原严寒而漫长的冬天，看来就要过去，但那真正温暖的春天，还远远地没有到来……</p>

<a id="more"></a>
<p>少年时，畅读了《平凡的世界》，一本对我影响非常深远的书。</p>
<p>大学时，一部同名电视剧播出，本以为会毁了原作，不成想改编的恰到好处，故事情节丰富，人物刻画饱满，矛盾更加突出。这本书我不知道反反复复看了多遍，这部剧我也不知道刷了多少遍。</p>
<p>这是一部讲述黄土地上的人们在时代改革的洪流中的苦难、奋斗和爱情故事。对于我这样一个生长在三秦大地上的人来说，这一个个场景、语言、人物、故事都显得尤为亲切。</p>
<p>毕竟是荣获矛盾文学奖的小说，《平凡的世界》在中国现代长篇小说文学史上的地位与水准是非常之高的。</p>
<p>我喜欢一遍一遍的读这本书，我喜欢书中每一个淳朴又善良的人物，仿佛就是隔壁的邻居一样亲切，我仿佛可以切身体会到他们生活的熬煎、不易，我为少平和少安永不遏止的奋斗感到高兴且热血沸腾，我又为这俩兄弟的所遭遇的爱情上的坎坷感到惋惜且羡慕。</p>
<p>我承认电视剧的表达与演绎和小说有很大出入，但文学作品影视化本就有很多局限性，同时为了故事情节发展连贯有序，做适当改编无可厚非。至少故事核心情节还在，故事所要表达的情感和主旋律都没有变。</p>
<p>小说与电视剧存在差异，且分开讨论。</p>
<h1 id="《平凡的世界》小说"><a href="#《平凡的世界》小说" class="headerlink" title="《平凡的世界》小说"></a>《平凡的世界》小说</h1><p>我尚在初中时就听过这本书的名字，《平凡的世界》，啊，多么普通的一本书的名字，“平凡”二字透着简单、快乐，“世界”二字却又给人一种大胸怀、包罗万象的感觉。</p>
<p>那时只喜欢看什么修仙、玄幻和言情小说，对文学作品精读甚少。直到高中毕业，有了充足的时间去审视这本书。于是在网上下载了盗版的txt，我就深陷其中不能自拔了。</p>
<p>全篇故事以少平这个小人物徐徐展开，这是一个普普通通的少年，家境贫寒，在学校里只能吃得起最便宜的黑面馍馍。他虽然穷，但是他有自己的尊严。他会在大家都吃完饭的时候，默默的一个人出来拿走自己那两个难看的“黑疙瘩”。</p>
<p>上高中期间，他认识了地主出身的郝红梅，身体缺陷爱打小报告的侯玉英，还有家境优越的顾养民。当然，最重要的是他认识了田晓霞，她就是少平的冬妮娅，这是一个带他重新认识世界的奇女子，为他打开了新世界的大门，他不甘于只做一个平凡的农民，他要为了自己的理想、为了去看外面广阔的世界而奋斗。</p>
<p>而少安则是一个土生土长的农民，小学文化却深知读书的重要性，就算自己再苦再累都要供弟弟少平和妹妹兰香上学。在感情方面，少安与润叶青梅竹马，彼此互生情愫，奈何家境贫寒，福堂支书等从中干涉，最终遗憾收场。好在他遇见了秀莲，这是多么贤惠多么温柔体贴的女子，她不要彩礼，她不怕这个家穷苦，她深深爱着这个“烂包”的家和自己的男人。有了秀莲“温柔乡”的抚慰，少安开办窑厂，烂包的日子慢慢过得红火起来，成为了村里甚至是县上名声大噪的人物。</p>
<p>润叶与少安青梅竹马，从小在一个被窝里玩到大。他们一起玩耍，一起上学，一起长大。从童真时代一路走来，村里的老人们都说她是少安的“媳妇”。在女大当嫁的年纪，来自家庭的逼迫和少安哥对命运的妥协，她心灰意冷。同时又听闻少安结婚了，和一个山西姑娘一块过光景了。<code>“如果少安没有结婚，不论有多少人进攻，她感情的阵地仍然会固若金汤。想不到，她在前方的战壕里拼命抵挡，但她为之而战的后方却自己烧成了一片火海…”</code> 这年轻时的失恋，爱情的悲剧沉重的打击着她。迫于各方无奈她嫁给了不喜欢的李向前，这又是一次婚姻上的悲剧，她在婚姻里受着水深火热的煎熬，向前的日子也不好过，感情上的失意和妻子的冷漠令他终日酗酒，最后失去了自己的一条腿。润叶这时才发现了深爱自己的人是李向前，在向前出事后她也慢慢生出了感情，虽然这是不完美的爱情或者婚姻，但也算是有了一个美好的结局。</p>
<p>书中不仅仅讲山沟沟里穷苦农民的故事，更涉及国家政策、国家体制变化、土地革命等宏大历史背景。尤其是以田福军为首的改革派，体察民情，以农民吃饱肚子为己任，尽职尽责，永远扑在改革的前列。同时也对官员腐败，思想固化等社会现状进行抨击。</p>
<p>全书最令人惋惜的是晓霞的离去和秀莲的病倒。晓霞属于那个时代追求浪漫追求自由的女性，而秀莲则是更现实更适合踏踏实实过日子的女性。这两个完美的女子在这平凡的世界里显得那么格格不入。</p>
<p>我喜欢秀莲，凡是看过书的人都希望有秀莲这样的女子做自己的媳妇吧。这个女子在孙家最困难的时候，也是在少安决定彻底放弃与润叶的感情的煎熬时刻来到了孙家，她不要彩礼，她悉心照顾奶奶、照顾妹妹兰香，撑起这个烂包的家，给少安内心与肉体上最温暖的呵护。她爱这个男人，也爱这个家，她始终如一的听少安的话。她心疼少安，给少安盛饭捞稠的，把奶奶吃的白面馍给少安吃。少安开办窑厂，有她在背后鼎力支持，在窑厂面临空前大危机的时候，是她从娘家借来钱为少安减轻压力。啊，这是一个多么美好多么贤淑的妻子，孙家的光景越过越好了，可是秀莲却累倒了，她查出了肺癌。这平凡的世界里哪里容得下这么完美的女子啊，这样的女子在当时的时代背景下也许是不存在的吧，或者是极其极其稀少的吧。</p>
<p>原书作者是这样描写的：<code>“我们无比沉痛的获悉，原西县医院对秀莲的诊断结果是：肺癌。”</code>感谢作者到此戛然而止，尽管知道以当时的医疗水平和条件，秀莲活下去的几率很低，但我们还是要对这个世界抱一点美好的幻想。</p>
<p>我也喜欢晓霞，自由、浪漫、敢说、敢做，美丽大方，才华出众。她仿佛不属于那个年代，她应该像一只鸟儿一样，飞向更广阔的天地，拥有属于自己的一片天。是她带着少平养成了看《参考消息》的好习惯，是她唤醒了少平胸中的热血，在她的推动和帮助下，少平渴望通过自己的努力来改变苦难的生活，改变这不公的命运，甚至改变世界。他们两个人从友谊到爱情，是感情上的升华，亦是心与心更近的沟通。正因为她的正直勇敢，敢闯敢拼，尤其是对工作认真对待的态度，身为一个报社记者，在大洪灾袭城时，她有着向广大民众传达灾区最新消息的责任。洪水无情似凶猛野兽，美丽的花朵凋谢了，看到这里我抑制不住的悲伤。我相信，美丽的花朵凋谢了也是美丽的。田晓霞太完美了，完美到作者也觉得她不适合在这个故事里。在网络上看到一句话 <strong>“爱情败给命运总比爱情败给世俗要好”</strong>，也许他们将是下一对少安与润叶，也许作者不忍再看到他们的爱情败给世俗，也许这才是最好的结局吧。</p>
<p>这平凡的世界里，只有平凡的人和事。这两个格格不入的完美女性不属于这个时代，也不属于这个世界。</p>
<p>书中每一个角色都是鲜活的，每个人都有自己的故事。就连双水村的田二都被作者描写的活灵活现。留下深刻印象的角色太多了，且不一一评说了。</p>
<h1 id="《平凡的世界》电视剧"><a href="#《平凡的世界》电视剧" class="headerlink" title="《平凡的世界》电视剧"></a>《平凡的世界》电视剧</h1><p>剧版在保留原著核心的基础上进行二次创作，还原度之高令我惊讶。唯一不满意之处是晓霞死后，少平赴杜梨树下之约时居然出现了外星人，这过度改编让人很不舒服。</p>
<p>剧版似乎淡化了少平的主角，反观少安更像这部剧的主角。也许这与演员的演技和张力有关，王雷的少安深入人心，但袁弘的少平总觉得缺少点什么。</p>
<p>虽然我不是生长在黄土高原上的，但对剧中出现的一些民风民俗还是倍感亲切的。</p>
<p><code>“我们原是自由飞翔的鸟，飞去吧！飞到那乌云背后明媚的山峦，飞到那里，到那蓝色的海角。只有风在欢舞，还有我作伴。”</code> 这是晓霞在铁轨上念给少平的诗歌，是对自由的渴望，对外面世界的追求，更是对少平的爱慕。他们的爱情充满了浪漫和现实主义，他们的交流是心灵与心灵的沟通。她爱他那掏碳的男人，他们相约会在古塔山后的杜梨树下见面，她要他带自己回村子里，以少平未婚妻的名义回去。</p>
<p>然而善良的她为救一个小女孩被洪水卷走了，抗洪指挥部的老父亲田福军一夜白头，只留下一句：<code>“她是我女儿”</code>。晓霞的离去配上凄凉的信天游，连老天都在哭泣，晓霞变成了一个自由飞翔的鸟，飞向了她一直追求的那一方天地。作者何其忍心写死晓霞，我多么希望电视剧对这里进行改编，她其实没有死，她在洪水的下游城市被人救了。</p>
<p>秀莲依旧是那么可爱和贤惠，在穷苦的家里任劳任怨。一心一意爱着这个庄稼汉，她给少安捞稠的饭，给少安拿奶奶吃的白面馍，她苦口婆心央求少安箍个新窑，然后却只得到了少安的回复：“额捶你啊…”看到这里，连弹幕都笑了，这么好的媳妇，天天喊“捶”的。如今不懂得珍惜，待到失去的时候后悔莫及啊。</p>
<p>最感动的是秀莲说，“少安哥，<code>你命短，我给你延上</code>。只要你愿意娶我，我就心甘情愿地跟你走，只要是我秀莲愿意，我不嫌穷，谁也不能说啥，这再说了，这穷怕什么，这穷又扎不下跟，将来我来帮你家过光景”。她包容他，嫁过去的第一天就说过：“<code>你笑，我陪你笑，你流啥泪，我都替你抹</code>”。她用自己的一生，在践行这句话。</p>
<p>感谢电视剧在最后一集留下了一个看似“完美”的结局，全村上下沉浸在临近过年的喜气洋洋的氛围中，以喜衬哀、笑中带泪的表现手法运用的淋漓尽致。最后桥上的那一段秀莲闭上眼后又缓缓苏醒看哭了我个男儿，他们的幸福生活来之不易，他们受了多少苦难和艰辛。时代在缓慢进步，人民生活在逐步变好，正是源于这一批勤劳的劳动人民和像田福军一样的改革先驱者的共同努力。</p>
<p>如尾声时的旁白所言，“双水村沉浸在一片欢腾和喜悦中，天真的孩子们欢快地笑着，有的大人却悄悄抹泪，<code>哭、笑都是因为欢乐，哭的人知道，而笑的人不知道。</code>”</p>
<hr>

<p>至此，掩卷叹息。</p>
<p>我的心灵得以净化，灵魂得以洗涤，我对自己有了更准确的定位。</p>
<p>平凡的世界，正因为它的悲剧，体现了它的平凡，也造就了它的不平凡。</p>
<p>那是一个改革和奋斗的时代。而如今我们身处于一个人才泛滥，经济蓬勃发展，物质生活丰富却又精神迷惘混沌的时代，在这个时代里如何才能更好的体现出自己的价值，这正是我们值得思考的问题。</p>
<p>但我相信，提升自我能力是最正确的选择。<strong>在这平凡的世界里，我们只是一个平凡的普通人，但是一个平凡的人，也可以过得不平凡！</strong></p>
<p>只要平凡，却不甘于平凡。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p id=&quot;div-border-left-yellow&quot;&gt;一个平平常常的日子，细蒙蒙的雨丝，夹着一星半点的雪花，正纷纷淋淋地向大地飘洒着。时令已快到惊蛰，雪当然再不会存留，往往还没等落地，就已经消失得无踪无影了。黄土高原严寒而漫长的冬天，看来就要过去，但那真正温暖的春天，还远远地没有到来……&lt;/p&gt;
    
    </summary>
    
      <category term="Mine" scheme="http://yoursite.com/categories/Mine/"/>
    
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>只要平凡，却不甘平凡</title>
    <link href="http://yoursite.com/view-of-ordinary-world.html"/>
    <id>http://yoursite.com/view-of-ordinary-world.html</id>
    <published>2019-12-01T09:35:21.000Z</published>
    <updated>2019-12-02T09:34:44.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p id="div-border-left-yellow">一个平平常常的日子，细蒙蒙的雨丝，夹着一星半点的雪花，正纷纷淋淋地向大地飘洒着。时令已快到惊蛰，雪当然再不会存留，往往还没等落地，就已经消失得无踪无影了。黄土高原严寒而漫长的冬天，看来就要过去，但那真正温暖的春天，还远远地没有到来……</p>

<a id="more"></a>
<p>少年时，畅读了《平凡的世界》，一本对我影响非常深远的书。</p>
<p>大学时，一部同名电视剧播出，本以为会毁了原作，不成想改编的恰到好处，故事情节丰富，人物刻画饱满，矛盾更加突出。这本书我不知道反反复复看了多遍，这部剧我也不知道刷了多少遍。</p>
<p>这是一部讲述黄土地上的人们在时代改革的洪流中的苦难、奋斗和爱情故事。对于我这样一个生长在三秦大地上的人来说，这一个个场景、语言、人物、故事都显得尤为亲切。</p>
<p>毕竟是荣获矛盾文学奖的小说，《平凡的世界》在中国现代长篇小说文学史上的地位与水准是非常之高的。</p>
<p>我喜欢一遍一遍的读这本书，我喜欢书中每一个淳朴又善良的人物，仿佛就是隔壁的邻居一样亲切，我仿佛可以切身体会到他们生活的熬煎、不易，我为少平和少安永不遏止的奋斗感到高兴且热血沸腾，我又为这俩兄弟的所遭遇的爱情上的坎坷感到惋惜且羡慕。</p>
<p>我承认电视剧的表达与演绎和小说有很大出入，但文学作品影视化本就有很多局限性，同时为了故事情节发展连贯有序，做适当改编无可厚非。至少故事核心情节还在，故事所要表达的情感和主旋律都没有变。</p>
<p>小说与电视剧存在差异，且分开讨论。</p>
<h1 id="《平凡的世界》小说"><a href="#《平凡的世界》小说" class="headerlink" title="《平凡的世界》小说"></a>《平凡的世界》小说</h1><p>我尚在初中时就听过这本书的名字，《平凡的世界》，啊，多么普通的一本书的名字，“平凡”二字透着简单、快乐，“世界”二字却又给人一种大胸怀、包罗万象的感觉。</p>
<p>那时只喜欢看什么修仙、玄幻和言情小说，对文学作品精读甚少。直到高中毕业，有了充足的时间去审视这本书。于是在网上下载了盗版的txt，我就深陷其中不能自拔了。</p>
<p>全篇故事以少平这个小人物徐徐展开，这是一个普普通通的少年，家境贫寒，在学校里只能吃得起最便宜的黑面馍馍。他虽然穷，但是他有自己的尊严。他会在大家都吃完饭的时候，默默的一个人出来拿走自己那两个难看的“黑疙瘩”。</p>
<p>上高中期间，他认识了地主出身的郝红梅，身体缺陷爱打小报告的侯玉英，还有家境优越的顾养民。当然，最重要的是他认识了田晓霞，她就是少平的冬妮娅，这是一个带他重新认识世界的奇女子，为他打开了新世界的大门，他不甘于只做一个平凡的农民，他要为了自己的理想、为了去看外面广阔的世界而奋斗。</p>
<p>而少安则是一个土生土长的农民，小学文化却深知读书的重要性，就算自己再苦再累都要供弟弟少平和妹妹兰香上学。在感情方面，少安与润叶青梅竹马，彼此互生情愫，奈何家境贫寒，福堂支书等从中干涉，最终遗憾收场。好在他遇见了秀莲，这是多么贤惠多么温柔体贴的女子，她不要彩礼，她不怕这个家穷苦，她深深爱着这个“烂包”的家和自己的男人。有了秀莲“温柔乡”的抚慰，少安开办窑厂，烂包的日子慢慢过得红火起来，成为了村里甚至是县上名声大噪的人物。</p>
<p>润叶与少安青梅竹马，从小在一个被窝里玩到大。他们一起玩耍，一起上学，一起长大。从童真时代一路走来，村里的老人们都说她是少安的“媳妇”。在女大当嫁的年纪，来自家庭的逼迫和少安哥对命运的妥协，她心灰意冷。同时又听闻少安结婚了，和一个山西姑娘一块过光景了。“如果少安没有结婚，不论有多少人进攻，她感情的阵地仍然会固若金汤。想不到，她在前方的战壕里拼命抵挡，但她为之而战的后方却自己烧成了一片火海…”这年轻时的失恋，爱情的悲剧沉重的打击着她。迫于各方无奈她嫁给了不喜欢的李向前，这又是一次婚姻上的悲剧，她在婚姻里受着水深火热的煎熬，向前的日子也不好过，感情上的失意和妻子的冷漠令他终日酗酒，最后失去了自己的一条腿。润叶这时才发现了深爱自己的人是李向前，在向前出事后她也慢慢生出了感情，虽然这是不完美的爱情或者婚姻，但也算是有了一个美好的结局。</p>
<p>书中不仅仅讲山沟沟里穷苦农民的故事，更涉及国家政策、国家体制变化、土地革命等宏大历史背景。尤其是以田福军为首的改革派，体察民情，以农民吃饱肚子为己任，尽职尽责，永远扑在改革的前列。同时也对官员腐败，思想固化等社会现状进行抨击。</p>
<p>全书最令人惋惜的是晓霞的离去和秀莲的病倒。晓霞属于那个时代追求浪漫追求自由的女性，而秀莲则是更现实更适合踏踏实实过日子的女性。这两个完美的女子在这平凡的世界里显得那么格格不入。</p>
<p>我喜欢秀莲，凡是看过书的人都希望有秀莲这样的女子做自己的媳妇吧。这个女子在孙家最困难的时候，也是在少安决定彻底放弃与润叶的感情的煎熬时刻来到了孙家，她不要彩礼，她悉心照顾奶奶、照顾妹妹兰香，撑起这个烂包的家，给少安内心与肉体上最温暖的呵护。她爱这个男人，也爱这个家，她始终如一的听少安的话。她心疼少安，给少安盛饭捞稠的，把奶奶吃的白面馍给少安吃。少安开办窑厂，有她在背后鼎力支持，在窑厂面临空前大危机的时候，是她从娘家借来钱为少安减轻压力。啊，这是一个多么美好多么贤淑的妻子，孙家的光景越过越好了，可是秀莲却累倒了，她查出了肺癌。这平凡的世界里哪里容得下这么完美的女子啊，这样的女子在当时的时代背景下也许是不存在的吧，或者是极其极其稀少的吧。</p>
<p>原书作者是这样描写的：“我们无比沉痛的获悉，原西县医院对秀莲的诊断结果是：肺癌。”感谢作者到此戛然而止，尽管知道以当时的医疗水平和条件，秀莲活下去的几率很低，但我们还是要对这个世界抱一点美好的幻想。</p>
<p>我也喜欢晓霞，自由、浪漫、敢说、敢做，美丽大方，才华出众。她仿佛不属于那个年代，她应该像一只鸟儿一样，飞向更广阔的天地，拥有属于自己的一片天。是她带着少平养成了看《参考消息》的好习惯，是她唤醒了少平胸中的热血，在她的推动和帮助下，少平渴望通过自己的努力来改变苦难的生活，改变这不公的命运，甚至改变世界。他们两个人从友谊到爱情，是感情上的升华，亦是心与心更近的沟通。正因为她的正直勇敢，敢闯敢拼，尤其是对工作认真对待的态度，身为一个报社记者，在大洪灾袭城时，她有着向广大民众传达灾区最新消息的责任。洪水无情似凶猛野兽，美丽的花朵凋谢了，看到这里我抑制不住的悲伤。我相信，美丽的花朵凋谢了也是美丽的。田晓霞太完美了，完美到作者也觉得她不适合在这个故事里。在网络上看到一句话 <strong>“爱情败给命运总比爱情败给世俗要好”</strong>，也许他们将是下一对少安与润叶，也许作者不忍再看到他们的爱情败给世俗，也许这才是最好的结局吧。</p>
<p>这平凡的世界里，只有平凡的人和事。这两个格格不入的完美女性不属于这个时代，也不属于这个世界。</p>
<p>书中每一个角色都是鲜活的，每个人都有自己的故事。就连双水村的田二都被作者描写的活灵活现。留下深刻印象的角色太多了，且不一一评说了。</p>
<h1 id="《平凡的世界》电视剧"><a href="#《平凡的世界》电视剧" class="headerlink" title="《平凡的世界》电视剧"></a>《平凡的世界》电视剧</h1><p>剧版在保留原著核心的基础上进行二次创作，还原度之高令我惊讶。唯一不满意之处是晓霞死后，少平赴杜梨树下之约时居然出现了外星人，这过度改编让人很不舒服。</p>
<p>剧版似乎淡化了少平的主角，反观少安更像这部剧的主角。也许这与演员的演技和张力有关，王雷的少安深入人心，但袁弘的少平总觉得缺少点什么。</p>
<p>虽然我不是生长在黄土高原上的，但对剧中出现的一些民风民俗还是倍感亲切的。</p>
<p>“我们原是自由飞翔的鸟，飞去吧！飞到那乌云背后明媚的山峦，飞到那里，到那蓝色的海角。只有风在欢舞，还有我作伴。”这是晓霞在铁轨上念给少平的诗歌，是对自由的渴望，对外面世界的追求，更是对少平的爱慕。他们的爱情充满了浪漫和现实主义，他们的交流是心灵与心灵的沟通。她爱他那掏碳的男人，他们相约会在古塔山后的杜梨树下见面，她要他带自己回村子里，以少平未婚妻的名义回去。</p>
<p>然而善良的她为救一个小女孩被洪水卷走了，抗洪指挥部的老父亲田福军一夜白头，只留下一句：“她是我女儿”。晓霞的离去配上凄凉的信天游，连老天都在哭泣，晓霞变成了一个自由飞翔的鸟，飞向了她一直追求的那一方天地。作者何其忍心写死晓霞，我多么希望电视剧对这里进行改编，她其实没有死，她在洪水的下游城市被人救了。</p>
<p>秀莲依旧是那么可爱和贤惠，在穷苦的家里任劳任怨。一心一意爱着这个庄稼汉，她给少安捞稠的饭，给少安拿奶奶吃的白面馍，她苦口婆心央求少安箍个新窑，然后却只得到了少安的回复：“额捶你啊…”看到这里，连弹幕都笑了，这么好的媳妇，天天喊“捶”的。如今不懂得珍惜，待到失去的时候后悔莫及啊。</p>
<p>最感动的是秀莲说，“少安哥，<code>你命短，我给你延上</code>。只要你愿意娶我，我就心甘情愿地跟你走，只要是我秀莲愿意，我不嫌穷，谁也不能说啥，这再说了，这穷怕什么，这穷又扎不下跟，将来我来帮你家过光景”。她包容他，嫁过去的第一天就说过：“<code>你笑，我陪你笑，你流啥泪，我都替你抹</code>”。她用自己的一生，在践行这句话。</p>
<p>感谢电视剧在最后一集留下了一个看似“完美”的结局，全村上下沉浸在临近过年的喜气洋洋的氛围中，以喜衬哀、笑中带泪的表现手法运用的淋漓尽致。最后桥上的那一段秀莲闭上眼后又缓缓苏醒看哭了我个男儿，他们的幸福生活来之不易，他们受了多少苦难和艰辛。时代在缓慢进步，人民生活在逐步变好，正是源于这一批勤劳的劳动人民和像田福军一样的改革先驱者的共同努力。</p>
<p>如尾声时的旁白所言，“双水村沉浸在一片欢腾和喜悦中，天真的孩子们欢快地笑着，有的大人却悄悄抹泪，<code>哭、笑都是因为欢乐，哭的人知道，而笑的人不知道。</code>”</p>
<hr>

<p>至此，掩卷叹息。</p>
<p>我的心灵得以净化，灵魂得以洗涤，我对自己有了更准确的定位。</p>
<p>平凡的世界，正因为它的悲剧，体现了它的平凡，也造就了它的不平凡。</p>
<p>那是一个改革和奋斗的时代。而如今我们身处于一个人才泛滥，经济蓬勃发展，物质生活丰富却又精神迷惘混沌的时代，在这个时代里如何才能更好的体现出自己的价值，这正是我们值得思考的问题。</p>
<p>但我相信，提升自我能力是最正确的选择。<strong>在这平凡的世界里，我们只是一个平凡的普通人，但是一个平凡的人，也可以过得不平凡！</strong></p>
<p>只要平凡，却不甘于平凡。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p id=&quot;div-border-left-yellow&quot;&gt;一个平平常常的日子，细蒙蒙的雨丝，夹着一星半点的雪花，正纷纷淋淋地向大地飘洒着。时令已快到惊蛰，雪当然再不会存留，往往还没等落地，就已经消失得无踪无影了。黄土高原严寒而漫长的冬天，看来就要过去，但那真正温暖的春天，还远远地没有到来……&lt;/p&gt;
    
    </summary>
    
      <category term="Mine" scheme="http://yoursite.com/categories/Mine/"/>
    
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 整合 Mybatis</title>
    <link href="http://yoursite.com/SpringBoot-Mybatis1.html"/>
    <id>http://yoursite.com/SpringBoot-Mybatis1.html</id>
    <published>2019-09-28T06:32:56.000Z</published>
    <updated>2019-11-21T07:55:21.053Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/springboot/springboot0300.png"></div>

<p id="div-border-left-red">SpringBoot 整合 Mybatis</p>

<a id="more"></a>
<p>在 idea 按步骤新建 SpringBoot 项目。</p>
<p><img src="http://image.renkaigis.com/springboot/springboot0301.png"></p>
<p><img src="http://image.renkaigis.com/springboot/springboot0302.png"></p>
<p><img src="http://image.renkaigis.com/springboot/springboot0303.png"></p>
<p>若只选择了 <code>Web</code> 这个起步依赖，则需要进行 <code>第 1、2 步</code>。若勾选了 <code>Mybatis</code> 依赖和 <code>MySQL Driver</code> 依赖，则从 <code>第 3 步</code> 开始。</p>
<h1 id="1-添加-Mybatis-的起步依赖"><a href="#1-添加-Mybatis-的起步依赖" class="headerlink" title="1. 添加 Mybatis 的起步依赖"></a>1. 添加 Mybatis 的起步依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis 起步依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="2-添加数据库驱动坐标"><a href="#2-添加数据库驱动坐标" class="headerlink" title="2. 添加数据库驱动坐标"></a>2. 添加数据库驱动坐标</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL 连接驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此时的 <code>pom.xml</code> 文件为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot_mybatis<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="3-添加数据库连接信息"><a href="#3-添加数据库连接信息" class="headerlink" title="3. 添加数据库连接信息"></a>3. 添加数据库连接信息</h1><p>在 <code>application.properties</code> 中添加数据库的连接信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#DB Configuration:</span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br></pre></td></tr></table></figure>
<h1 id="4-创建-user-表"><a href="#4-创建-user-表" class="headerlink" title="4. 创建 user 表"></a>4. 创建 user 表</h1><p>在 test 数据库中创建 user 表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `user`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">10</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'zhangsan'</span>, <span class="string">'123'</span>, <span class="string">'张三'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'lisi'</span>, <span class="string">'123'</span>, <span class="string">'李四'</span>);</span><br></pre></td></tr></table></figure>
<p>表如下所示：</p>
<p><img src="http://image.renkaigis.com/springboot/springboot0304.png"></p>
<h1 id="5-创建实体-Bean"><a href="#5-创建实体-Bean" class="headerlink" title="5. 创建实体 Bean"></a>5. 创建实体 Bean</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rk.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="6-编写-Mapper"><a href="#6-编写-Mapper" class="headerlink" title="6. 编写 Mapper"></a>6. 编写 Mapper</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rk.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rk.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：<code>@Mapper</code> 标记该类是一个 <code>mybatis</code> 的 <code>mapper</code> 接口，可以被 <code>spring boot</code> 自动扫描到 spring 上下文中。</p>
<h1 id="7-配置-Mapper-映射文件"><a href="#7-配置-Mapper-映射文件" class="headerlink" title="7. 配置 Mapper 映射文件"></a>7. 配置 Mapper 映射文件</h1><p>在 <code>src\main\resources\mapper</code> 路径下加入 <code>UserMapper.xml</code> 配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.rk.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserList"</span> <span class="attr">resultType</span>=<span class="string">"com.rk.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="8-在-application-properties-中添加-mybatis-配置信息"><a href="#8-在-application-properties-中添加-mybatis-配置信息" class="headerlink" title="8. 在 application.properties 中添加 mybatis 配置信息"></a>8. 在 application.properties 中添加 mybatis 配置信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#spring集成Mybatis环境</span><br><span class="line">#pojo别名扫描包</span><br><span class="line">mybatis.type-aliases-package=com.rk.domain</span><br><span class="line">#加载Mybatis映射文件</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*Mapper.xml</span><br></pre></td></tr></table></figure>
<h1 id="9-编写测试-Controller"><a href="#9-编写测试-Controller" class="headerlink" title="9. 编写测试 Controller"></a>9. 编写测试 Controller</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rk.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rk.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.rk.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="10-测试结果"><a href="#10-测试结果" class="headerlink" title="10. 测试结果"></a>10. 测试结果</h1><p>链接：<a href="http://localhost:8080/queryUser" target="_blank" rel="noopener">http://localhost:8080/queryUser</a></p>
<p>结果：</p>
<p><img src="http://image.renkaigis.com/springboot/springboot0305.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/springboot/springboot0300.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-red&quot;&gt;SpringBoot 整合 Mybatis&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 配置文件</title>
    <link href="http://yoursite.com/SpringBoot-config.html"/>
    <id>http://yoursite.com/SpringBoot-config.html</id>
    <published>2019-08-17T02:56:19.000Z</published>
    <updated>2019-08-28T16:34:02.911Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/springboot/springboot0200.png"></div>

<p id="div-border-left-red">Spring Boot 配置文件</p>

<a id="more"></a>
<hr>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><hr>
<p>SpringBoot 使用一个全局的配置文件，配置文件名是固定的；</p>
<ul>
<li><p>application.properties</p>
</li>
<li><p>application.yml</p>
</li>
</ul>
<p>配置文件的作用：修改 SpringBoot 自动配置的默认值；SpringBoot 在底层都给我们自动配置好；</p>
<p>YAML（YAML Ain’t Markup Language）:</p>
<ul>
<li><p>YAML  A Markup Language：是一个标记语言</p>
</li>
<li><p>YAML  isn’t Markup Language：不是一个标记语言</p>
</li>
</ul>
<p>标记语言：</p>
<ul>
<li>以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong> 文件；</li>
</ul>
<p>​YAML：<strong>以数据为中心</strong>，比 <code>json</code>、<code>xml</code> 等更适合做配置文件；</p>
<p>YAML：配置例子</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>
<p>​XML：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="YAML-语法"><a href="#YAML-语法" class="headerlink" title="YAML 语法"></a>YAML 语法</h1><hr>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><code>k:(空格)v</code>：表示一对键值对（空格必须有）；</p>
<p>以 <strong>空格</strong> 的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>
<p>属性和值也是大小写敏感。</p>
<h2 id="值的写法"><a href="#值的写法" class="headerlink" title="值的写法"></a>值的写法</h2><h3 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h3><p>​- <code>k: v</code>：字面量直接来写；</p>
<p>​- 字符串默认<strong>不用</strong>加上单引号或者双引号；</p>
<ul>
<li>​<code>&quot;&quot;</code>：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​name: &quot;zhangsan \n lisi&quot;</span><br><span class="line">输出：zhangsan</span><br><span class="line">lisi</span><br></pre></td></tr></table></figure>
<ul>
<li><code>&#39;&#39;</code>：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name: ‘zhangsan \n lisi’</span><br><span class="line">输出：</span><br><span class="line">zhangsan \n  lisi</span><br></pre></td></tr></table></figure>
<h3 id="对象、Map（属性和值）（键值对）"><a href="#对象、Map（属性和值）（键值对）" class="headerlink" title="对象、Map（属性和值）（键值对）"></a>对象、Map（属性和值）（键值对）</h3><p><code>k: v</code>：在下一行来写对象的属性和值的关系；注意缩进。</p>
<p>​对象还是 <code>k: v</code> 的方式</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">  lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="数组（List、Set）"><a href="#数组（List、Set）" class="headerlink" title="数组（List、Set）"></a>数组（List、Set）</h3><p>用 <code>-</code> 值表示数组中的一个元素</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>
<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="配置文件值注入"><a href="#配置文件值注入" class="headerlink" title="配置文件值注入"></a>配置文件值注入</h1><hr>
<p>配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">    lastName:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">    boss:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line"><span class="attr">    maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">    lists:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">zhaoliu</span></span><br><span class="line"><span class="attr">    dog:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">小狗</span></span><br><span class="line"><span class="attr">      age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>javaBean：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>
<p>我们可以导入配置文件处理器，以后编写配置就有提示了：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="properties-配置文件在-idea-中默认-utf-8-可能会乱码"><a href="#properties-配置文件在-idea-中默认-utf-8-可能会乱码" class="headerlink" title="properties 配置文件在 idea 中默认 utf-8 可能会乱码"></a>properties 配置文件在 idea 中默认 utf-8 可能会乱码</h2><p>设置：</p>
<div align="center"><img src="http://image.renkaigis.com/springboot/springboot0201.png" title>idea 配置乱码</div>

<h2 id="Value-获取值和-ConfigurationProperties-获取值比较"><a href="#Value-获取值和-ConfigurationProperties-获取值比较" class="headerlink" title="@Value 获取值和 @ConfigurationProperties 获取值比较"></a>@Value 获取值和 @ConfigurationProperties 获取值比较</h2><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<p>配置文件 <code>yml</code> 还是 <code>properties</code> 他们都能获取到值；</p>
<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用 <code>@Value</code>；</p>
<p>如果说，我们专门编写了一个 <code>javaBean</code> 来和配置文件进行映射，我们就直接使用 <code>@ConfigurationProperties</code>。</p>
<h2 id="配置文件注入值数据校验"><a href="#配置文件注入值数据校验" class="headerlink" title="配置文件注入值数据校验"></a>配置文件注入值数据校验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>
<h2 id="PropertySource-amp-ImportResource-amp-Bean"><a href="#PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="@PropertySource &amp; @ImportResource &amp; @Bean"></a>@PropertySource &amp; @ImportResource &amp; @Bean</h2><p>@<strong>PropertySource</strong>：加载指定的配置文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = "person")默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>
<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效。</p>
<p>Spring Boot 里面没有 Spring 的配置文件，我们自己编写的配置文件，也不能自动识别。</p>
<p>想让 Spring 的配置文件生效，将其加载进来；使用 @<strong>ImportResource</strong> 标注在一个配置类上</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line"><span class="comment">// 导入Spring的配置文件让其生效</span></span><br></pre></td></tr></table></figure>
<p>不来编写 Spring 的配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>SpringBoot 推荐给容器中添加组件的方式；推荐使用<strong>全注解</strong>的方式</p>
<p>1、配置类 <strong>@Configuration</strong> ——&gt; Spring 配置文件</p>
<p>2、使用<strong>@Bean</strong>给容器中添加组件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h1><hr>
<h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure>
<h2 id="占位符获取之前配置的值，如果没有可以使用-指定默认值"><a href="#占位符获取之前配置的值，如果没有可以使用-指定默认值" class="headerlink" title="占位符获取之前配置的值，如果没有可以使用 指定默认值"></a>占位符获取之前配置的值，如果没有可以使用 指定默认值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.last-name=张三$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.int&#125;</span><br><span class="line">person.birth=2017/12/15</span><br><span class="line">person.boss=false</span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=14</span><br><span class="line">person.lists=a,b,c</span><br><span class="line">person.dog.name=$&#123;person.hello:hello&#125;_dog</span><br><span class="line">person.dog.age=15</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h1><hr>
<h2 id="多-Profile-文件"><a href="#多-Profile-文件" class="headerlink" title="多 Profile 文件"></a>多 Profile 文件</h2><p>我们在主配置文件编写的时候，文件名可以是 <code>application-{profile}.properties/yml</code></p>
<p>默认使用 <code>application.properties</code> 的配置。</p>
<h2 id="yml-支持多文档块方式"><a href="#yml-支持多文档块方式" class="headerlink" title="yml 支持多文档块方式"></a>yml 支持多文档块方式</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure>
<h2 id="激活指定-profile"><a href="#激活指定-profile" class="headerlink" title="激活指定 profile"></a>激活指定 profile</h2><p>​1、在<code>配置文件</code>中指定  <code>spring.profiles.active=dev</code></p>
<p>​2、<code>命令行</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；</span><br></pre></td></tr></table></figure>
<p>​可以直接在测试的时候，配置传入命令行参数：</p>
<div align="center"><img src="http://image.renkaigis.com/springboot/springboot0202.png" title>配置传入命令行参数</div>

<p>​3、<code>虚拟机</code>参数（JVM）；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active=dev</span><br></pre></td></tr></table></figure>
<div align="center"><img src="http://image.renkaigis.com/springboot/springboot0203.png" title>配置虚拟机参数</div>

<hr>
<h1 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h1><hr>
<p>Spring boot 启动会扫描以下位置的 <code>application.properties</code> 或者 <code>application.yml</code> 文件作为 Spring boot 的默认配置文件。</p>
<ul>
<li><p>file:<code>./config/</code></p>
</li>
<li><p>file:<code>./</code></p>
</li>
<li><p>classpath:<code>/config/</code></p>
</li>
<li><p>classpath:<code>/</code></p>
</li>
</ul>
<p>其中 <code>file</code> 表示当前项目文件路径下（<code>项目/</code>），<code>classpath</code> 表示类路径（<code>项目/src/main/resources</code>）。</p>
<p>优先级 <strong><em>由高到底</em></strong>，高优先级的配置会覆盖低优先级的配置；</p>
<p>Spring Boot 会从这四个位置全部加载主配置文件；<strong>互补配置</strong></p>
<p><em>我们还可以通过 <code>spring.config.location</code> 来改变默认的配置文件位置</em></p>
<p>项目打包好以后，我们可以使用<code>命令行参数</code>的形式，启动项目的时候来<code>指定配置文件的新位置</code>，<code>指定的配置文件</code>和<code>默认加载的这些配置文件</code>共同起作用形成<code>互补配置</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=D:/application.properties</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a>外部配置加载顺序</h1><hr>
<p>Spring Boot 也可以从以下位置加载配置,优先级<code>从高到低</code>；<code>高优先级的配置覆盖低优先级的配置</code>，所有的配置会形成<code>互补配置</code>。</p>
<p>1） <strong>命令行参数</strong></p>
<p>所有的配置都可以在命令行上进行指定：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087  --server.context-path=/abc</span><br></pre></td></tr></table></figure>
<p>多个配置用空格分开； <code>--配置项=值</code></p>
<p>2） 来自 <code>java:comp/env</code> 的 <code>JNDI</code> 属性</p>
<p>3） Java 系统属性（<code>System.getProperties()</code>）</p>
<p>4） 操作系统环境变量</p>
<p>5） <code>RandomValuePropertySource</code> 配置的 <code>random.*</code> 属性值</p>
<p><strong><em>由 jar 包外向 jar 包内进行寻找；</em></strong></p>
<p><strong><em>优先加载带 profile 的配置</em></strong></p>
<p>6） jar 包外部的 <code>application-{profile}.properties</code> 或 <code>application.yml</code> (带 <code>spring.profile</code>) 配置文件 <strong>★</strong></p>
<p>7） jar 包内部的 <code>application-{profile}.properties</code> 或 <code>application.yml</code> (带 <code>spring.profile</code>) 配置文件 <strong>★</strong></p>
<p><strong><em>再来加载不带profile</em></strong></p>
<p>8） jar 包外部的 <code>application.properties</code> 或 <code>application.yml</code> (不带 <code>spring.profile</code>) 配置文件 <strong>★</strong></p>
<p>9） jar 包内部的 <code>application.properties</code> 或 <code>application.yml</code> (不带 <code>spring.profile</code>) 配置文件 <strong>★</strong></p>
<p>10） <code>@Configuration</code> 注解类上的外部配置文件 <code>@PropertySource</code> </p>
<p>11） 通过 <code>SpringApplication.setDefaultProperties</code> 指定的默认属性。</p>
<p>所有支持的配置加载来源参考官方文档：</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p>
<h1 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h1><p>配置文件到底能写什么？怎么写？自动配置原理是什么？</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p>
<h2 id="自动配置原理："><a href="#自动配置原理：" class="headerlink" title="自动配置原理："></a><strong>自动配置原理：</strong></h2><p>1）、SpringBoot 启动的时候加载主配置类，开启了自动配置功能 <strong><em>@EnableAutoConfiguration</em></strong></p>
<p><strong>2）、@EnableAutoConfiguration 作用：</strong></p>
<ul>
<li>利用 <code>EnableAutoConfigurationImportSelector</code> 给容器中导入一些组件？</li>
</ul>
<ul>
<li><p>可以查看 <code>selectImports()</code> 方法的内容；</p>
</li>
<li><p><code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</code> 获取候选的配置。</p>
</li>
<li><p><code>SpringFactoriesLoader.loadFactoryNames()</code>，扫描所有 jar 包类路径下（<code>META-INF/spring.factories</code>），把扫描到的这些文件的内容包装成 <code>properties</code> 对象，从 properties 中获取到 <code>EnableAutoConfiguration.class</code> 类（类名）对应的值，然后把他们添加在容器中.</p>
</li>
</ul>
<p><strong><em>将类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure>
<p>每一个这样的 <code>xxxAutoConfiguration</code> 类都是容器中的一个组件，都加入到容器中；用他们来做自动配置。</p>
<p>3）、每一个自动配置类进行自动配置功能；</p>
<p>4）、以 <strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong> 为例解释自动配置原理；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpEncodingProperties.class)  <span class="comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter.class)  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(CharacterEncodingFilter.class) <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>根据当前不同的条件判断，决定这个配置类是否生效？</p>
<p>一但这个配置类生效，这个配置类就会给容器中添加各种组件，这些组件的属性是从对应的 <code>properties</code> 类中获取的，这些类里面的每一个属性又是和配置文件绑定的。</p>
<p>5）、所有在配置文件中能配置的属性都是在 <code>xxxxProperties</code> 类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http.encoding"</span>)  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>精髓：</strong></p>
<ul>
<li><p>1）、SpringBoot 启动会加载大量的自动配置类</p>
</li>
<li><p>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</p>
</li>
<li><p>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</p>
</li>
<li><p>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</p>
</li>
</ul>
<p><code>xxxxAutoConfigurartion</code>：是做自动配置的类，会给容器中添加组件。</p>
<p><code>xxxxProperties</code>：封装配置文件中相关的属性。</p>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="Conditional-派生注解（Spring-注解版原生的-Conditional-作用）"><a href="#Conditional-派生注解（Spring-注解版原生的-Conditional-作用）" class="headerlink" title="@Conditional 派生注解（Spring 注解版原生的 @Conditional 作用）"></a>@Conditional 派生注解（Spring 注解版原生的 @Conditional 作用）</h3><p>作用：必须是 <code>@Conditional</code> 指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>@Conditional 扩展注解</th>
<th>作用（判断是否满足当前指定条件）</th>
</tr>
</thead>
<tbody>
<tr>
<td>@ConditionalOnJava</td>
<td>系统的 java 版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定 Bean；</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定 Bean；</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足 SpEL 表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的 Bean，或者这个 Bean 是首选 Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是 web 环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是 web 环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI 存在指定项</td>
</tr>
</tbody>
</table>
<p><strong>自动配置类必须在一定的条件下才能生效；</strong></p>
<p>我们怎么知道哪些自动配置类生效；</p>
<p><strong><em>我们可以通过启用 debug=true 属性；来让控制台打印自动配置报告</em></strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>'</span>; <span class="meta">@ConditionalOnMissingClass</span> <span class="function">did not find unwanted <span class="title">class</span> <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">      - @<span class="title">ConditionalOnWebApplication</span> <span class="params">(required)</span> found <span class="title">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class="line"><span class="function">-----------------</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   ActiveMQAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   AopAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' <span class="params">(OnClassCondition)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/springboot/springboot0200.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-red&quot;&gt;Spring Boot 配置文件&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 快速入门</title>
    <link href="http://yoursite.com/SpringBoot-abc.html"/>
    <id>http://yoursite.com/SpringBoot-abc.html</id>
    <published>2019-08-14T10:34:21.000Z</published>
    <updated>2019-08-28T01:46:09.267Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/springboot/springboot0100.png"></div>

<p id="div-border-left-red">Spring Boot 快速入门</p>

<a id="more"></a>
<hr>
<h1 id="SpringBoot-简介"><a href="#SpringBoot-简介" class="headerlink" title="SpringBoot 简介"></a>SpringBoot 简介</h1><hr>
<blockquote>
<p>简化 <code>Spring</code> 应用开发的一个框架；</p>
<p>整个 <code>Spring</code> 技术栈的一个大整合；</p>
<p><code>J2EE</code> 开发的一站式解决方案；</p>
</blockquote>
<p><strong>优点：</strong></p>
<ul>
<li><p>快速创建独立运行的 <code>Spring</code> 项目以及与主流框架集成</p>
</li>
<li><p>使用嵌入式的 <code>Servlet</code> 容器，应用无需打成 <code>war</code> 包</p>
</li>
<li><p><code>starters</code> 自动依赖与版本控制</p>
</li>
<li><p>大量的自动配置，简化开发，也可修改默认值</p>
</li>
<li><p>无需配置 <code>XML</code>，无代码生成，开箱即用</p>
</li>
<li><p>准生产环境的运行时应用监控</p>
</li>
<li><p>与云计算的天然集成</p>
</li>
</ul>
<hr>
<h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><hr>
<p>2014 年，martin fowler 发表了一篇关于微服务的文章。</p>
<p>微服务：是一种架构风格（服务微化）</p>
<p>一个应用应该是一组小型服务；可以通过 <code>HTTP</code> 的方式进行互通；</p>
<p>单体应用：ALL IN ONE</p>
<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元。</p>
<p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">详细参照微服务文档</a></p>
<hr>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><hr>
<h2 id="环境约束："><a href="#环境约束：" class="headerlink" title="环境约束："></a>环境约束：</h2><ul>
<li><p><code>jdk1.8</code>：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_131”</p>
</li>
<li><p><code>maven3.x</code>：maven 3.3以上版本；Apache Maven 3.6.1</p>
</li>
<li><p><code>IntelliJ IDEA 2018</code>：IntelliJ IDEA 2018.3.6 x64</p>
</li>
<li><p><code>SpringBoot 2.1.7.RELEASE</code>：2.1.7；</p>
</li>
</ul>
<h2 id="统一环境；"><a href="#统一环境；" class="headerlink" title="统一环境；"></a>统一环境；</h2><h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给 maven 的 <code>settings.xml</code> 配置文件的 <code>profiles</code> 标签添加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合 <code>maven</code> 进来；</p>
<div align="center"><img src="http://image.renkaigis.com/springboot/springboot0101.png" title>idea 设置</div>

<h1 id="4、Spring-Boot-入门程序（HelloWorld）"><a href="#4、Spring-Boot-入门程序（HelloWorld）" class="headerlink" title="4、Spring Boot 入门程序（HelloWorld）"></a>4、Spring Boot 入门程序（HelloWorld）</h1><p>一个功能：</p>
<p>浏览器发送 <code>hello</code> 请求，服务器接受请求并处理，响应 <code>Hello World</code> 字符串；</p>
<h2 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h2><h2 id="2、导入-spring-boot-相关的依赖"><a href="#2、导入-spring-boot-相关的依赖" class="headerlink" title="2、导入 spring boot 相关的依赖"></a>2、导入 spring boot 相关的依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3、编写一个主程序；启动-Spring-Boot-应用"><a href="#3、编写一个主程序；启动-Spring-Boot-应用" class="headerlink" title="3、编写一个主程序；启动 Spring Boot 应用"></a>3、编写一个主程序；启动 Spring Boot 应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个 Spring Boot 应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、编写相关的-Controller、Service"><a href="#4、编写相关的-Controller、Service" class="headerlink" title="4、编写相关的 Controller、Service"></a>4、编写相关的 Controller、Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h2><h2 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将这个应用打成 <code>jar</code> 包，直接使用 <code>java -jar</code> 的命令进行执行；</p>
<hr>
<h1 id="Hello-World-探究"><a href="#Hello-World-探究" class="headerlink" title="Hello World 探究"></a>Hello World 探究</h1><hr>
<h2 id="POM-文件"><a href="#POM-文件" class="headerlink" title="POM 文件"></a>POM 文件</h2><h3 id="父项目"><a href="#父项目" class="headerlink" title="父项目"></a>父项目</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 他的父项目是 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 他来真正管理 Spring Boot 应用里面的所有依赖版本；--&gt;</span></span><br></pre></td></tr></table></figure>
<p>Spring Boot 的版本仲裁中心；</p>
<p>以后我们导入依赖默认是不需要写版本；（<strong><em>没有在 dependencies 里面管理的依赖自然需要声明版本号</em></strong>）</p>
<h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>spring-boot-starter</strong>-<code>web</code>：</p>
<p><code>spring-boot-starter</code>：spring-boot 场景启动器；帮我们导入了 web 模块正常运行所依赖的组件；</p>
<p>Spring Boot 将所有的功能场景都抽取出来，做成一个个的 <code>starters</code> （启动器），只需要在项目里面引入这些 starter 相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器。</p>
<h2 id="主程序类，主入口类"><a href="#主程序类，主入口类" class="headerlink" title="主程序类，主入口类"></a>主程序类，主入口类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@<strong>SpringBootApplication</strong>: Spring Boot 应用标注在某个类上说明这个类是 Spring Boot 的主配置类，Spring Boot 就应该运行这个类的 <code>main</code> 方法来启动 Spring Boot 应用；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure>
<p>@<strong>SpringBootConfiguration</strong>: Spring Boot 的配置类；</p>
<ul>
<li><p>标注在某个类上，表示这是一个 Spring Boot 的配置类；</p>
</li>
<li><p>@<strong>Configuration</strong>:配置类上来标注这个注解；</p>
</li>
<li><p>配置类 —–  配置文件；配置类也是容器中的一个组件；<code>@Component</code></p>
</li>
</ul>
<p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p>
<p>以前我们需要配置的东西，Spring Boot 会帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉 SpringBoot 开启自动配置功能；这样自动配置才能生效；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure>
<p>​@<strong>AutoConfigurationPackage</strong>：自动配置包</p>
<p>​@<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p>
<p>​Spring 的底层注解 <code>@Import</code>，给容器中导入一个组件；导入的组件由 <code>AutoConfigurationPackages.Registrar.class</code>；</p>
<p><code>将主配置类（@SpringBootApplication 标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；</code></p>
<p>​@<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p>
<p>​给容器中导入组件？</p>
<p>​<strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p>
<p>​将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>
<p>​会给容器中导入非常多的自动配置类（<code>xxxAutoConfiguration</code>）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；</p>
<p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>
<p><code>​SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</code></p>
<p><code>Spring Boot在启动的时候从类路径下的 META-INF/spring.factories 中获取 EnableAutoConfiguration 指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；</code>以前我们需要自己配置的东西，自动配置类都帮我们配置了；</p>
<p><code>J2EE</code> 的整体整合解决方案和自动配置都在 <code>spring-boot-autoconfigure-2.1.7.RELEASE.jar</code>；</p>
<hr>
<h1 id="使用-Spring-Initializer-快速创建Spring-Boot项目"><a href="#使用-Spring-Initializer-快速创建Spring-Boot项目" class="headerlink" title="使用 Spring Initializer 快速创建Spring Boot项目"></a>使用 Spring Initializer 快速创建Spring Boot项目</h1><hr>
<h2 id="IDEA：使用-Spring-Initializer快速创建项目"><a href="#IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="IDEA：使用 Spring Initializer快速创建项目"></a>IDEA：使用 Spring Initializer快速创建项目</h2><p>IDE 都支持使用 Spring 的项目创建向导快速创建一个 Spring Boot 项目；</p>
<p>选择我们需要的模块；向导会联网创建 Spring Boot 项目；</p>
<p>默认生成的 Spring Boot 项目；</p>
<ul>
<li><p>主程序已经生成好了，我们只需要编写自己的业务逻辑就行了</p>
</li>
<li><p>resources 文件夹中目录结构</p>
<ul>
<li><code>static</code>：保存所有的静态资源； <code>js css  images</code>；</li>
<li><code>templates</code>：保存所有的模板页面；（Spring Boot 默认 jar 包使用嵌入式的 Tomcat，默认<code>不支持 JSP 页面</code>）；可以使用模板引擎（<code>freemarker</code>、<code>thymeleaf</code>）；</li>
<li><code>application.properties</code>：Spring Boot 应用的<code>配置文件</code>；可以修改一些默认设置；</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/springboot/springboot0100.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-red&quot;&gt;Spring Boot 快速入门&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到任凯的个人博客~</title>
    <link href="http://yoursite.com/notice.html"/>
    <id>http://yoursite.com/notice.html</id>
    <published>2019-06-01T04:07:46.000Z</published>
    <updated>2019-12-02T02:28:46.498Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div style="text-align:center"><br><span id="inline-red">因求职和写毕业论文，精力不足，停更大半年！</span><br></div>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;div style=&quot;text-align:center&quot;&gt;&lt;br&gt;&lt;span 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebGIS：Tomcat 离线部署 ArcGIS API for JavaScript（v4.9）</title>
    <link href="http://yoursite.com/WebGIS-tomcat-arcgis_js_api49.html"/>
    <id>http://yoursite.com/WebGIS-tomcat-arcgis_js_api49.html</id>
    <published>2018-10-10T08:23:45.000Z</published>
    <updated>2018-10-10T08:42:29.522Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/webgis/0100.png"></div>

<a id="more"></a>
<h1 id="下载-API-和-SDK-文件"><a href="#下载-API-和-SDK-文件" class="headerlink" title="下载 API 和 SDK 文件"></a>下载 API 和 SDK 文件</h1><p>下载地址：<a href="https://developers.arcgis.com/downloads/apis-and-sdks?product=javascript" target="_blank" rel="noopener">https://developers.arcgis.com/downloads/apis-and-sdks?product=javascript</a></p>
<ul>
<li>注：需要登录。</li>
</ul>
<p>选择自己需要的版本下载对应的 API 和 SDK 包。这里以 4.9 版本为例。</p>
<p><img src="http://image.renkaigis.com/webgis/0101.png"></p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="Tomcat-下解压"><a href="#Tomcat-下解压" class="headerlink" title="Tomcat 下解压"></a>Tomcat 下解压</h2><p>Tomcat 服务器 <code>webapps</code> 文件夹下建立一个你的项目文件夹用来放置 api 和 sdk 。</p>
<p>例如我新建一个 <code>api49</code> 文件夹：<code>D:\apache-tomcat-7.0.52\webapps\api49</code></p>
<p>将下载的 api 和 sdk 解压到这个目录下（目录结构如下图）：</p>
<p><img src="http://image.renkaigis.com/webgis/0102.png"></p>
<h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>注：Tomcat 默认端口为：<code>localhost:8080</code></p>
<ol>
<li>找到 <code>D:\apache-tomcat-7.0.52\webapps\api49\arcgis_js_api\library\4.9\init.js</code> 文件，将 <code>[HOSTNAME_AND_PATH_TO_JSAPI]</code> 修改为 <code>/localhost:8080/api49/arcgis_js_api/library/4.9/</code> 。注意把原来的 <code>https</code> 改为 <code>http</code> 。</li>
</ol>
<p>即 <code>init.js</code> 里面变为：<code>baseUrl:&quot;http://localhost:8080/api49/arcgis_js_api/library/4.9/dojo&quot;</code></p>
<ol>
<li>找到 <code>D:\apache-tomcat-7.0.52\webapps\api49\arcgis_js_api\library\4.9\dojo\dojo.js</code> 文件，将 <code>[HOSTNAME_AND_PATH_TO_JSAPI]</code> 修改为 <code>/localhost:8080/api49/arcgis_js_api/library/4.9/</code> 。注意把原来的 <code>https</code> 改为 <code>http</code> 。</li>
</ol>
<p>即 <code>dojo.js</code> 里面变为：<code>baseUrl:&quot;http://localhost:8080/api49/arcgis_js_api/library/4.9/dojo&quot;</code></p>
<h2 id="测试部署"><a href="#测试部署" class="headerlink" title="测试部署"></a>测试部署</h2><p>在 <code>api49</code> 目录下新建一个 <code>test.html</code> :</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1, maximum-scale=1,user-scalable=no"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Map<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://localhost:8080/api49/arcgis_js_api/library/4.9/dijit/themes/claro/claro.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://localhost:8080/api49/arcgis_js_api/library/4.9/esri/css/main.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      html,</span></span><br><span class="line"><span class="undefined">      body,</span></span><br><span class="line"><span class="undefined">      #viewDiv &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/api49/arcgis_js_api/library/4.9/dojo/dojo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> myMap, view;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">require</span>([</span></span><br><span class="line"><span class="javascript">        <span class="string">"esri/Basemap"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">"esri/layers/TileLayer"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">"esri/Map"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">"esri/views/MapView"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">"dojo/domReady!"</span></span></span><br><span class="line"><span class="javascript">      ], <span class="function"><span class="keyword">function</span> (<span class="params">Basemap, TileLayer, Map, MapView</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// --------------------------------------------------------------------</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// If you do not have public Internet access then use the Basemap class</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// and point this URL to your own locally accessible cached service.</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Otherwise you can just use one of the named hosted ArcGIS services.</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// https://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// --------------------------------------------------------------------</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> TileLayer(&#123;</span></span><br><span class="line"><span class="javascript">          url: <span class="string">"https://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer"</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> customBasemap = <span class="keyword">new</span> Basemap(&#123;</span></span><br><span class="line"><span class="undefined">          baseLayers: [layer],</span></span><br><span class="line"><span class="javascript">          title: <span class="string">"Custom Basemap"</span>,</span></span><br><span class="line"><span class="javascript">          id: <span class="string">"myBasemap"</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        myMap = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span><br><span class="line"><span class="undefined">          basemap: customBasemap</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        view = <span class="keyword">new</span> MapView(&#123;</span></span><br><span class="line"><span class="javascript">          center: [<span class="number">-111.87</span>, <span class="number">40.57</span>], <span class="comment">// long, lat</span></span></span><br><span class="line"><span class="javascript">          container: <span class="string">"viewDiv"</span>,</span></span><br><span class="line"><span class="undefined">          map: myMap,</span></span><br><span class="line"><span class="undefined">          zoom: 6</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"claro"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"viewDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动 Tomcat 服务器，浏览器访问：<code>http://localhost:8080/api49/test.html</code></p>
<p>若显示下图，则说明部署成功！</p>
<p><img src="http://image.renkaigis.com/webgis/0103.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/webgis/0100.png&quot;&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="WebGIS" scheme="http://yoursite.com/categories/WebGIS/"/>
    
    
      <category term="WebGIS" scheme="http://yoursite.com/tags/WebGIS/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 SSH 框架整合</title>
    <link href="http://yoursite.com/JavaWeb-SSH01.html"/>
    <id>http://yoursite.com/JavaWeb-SSH01.html</id>
    <published>2018-08-14T06:51:00.000Z</published>
    <updated>2018-08-13T13:52:33.027Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/ssh0100.png"></div>

<p id="div-border-left-blue">SSH 框架整合</p>

<a id="more"></a>
<hr>
<h1 id="SSH-框架整合的环境准备"><a href="#SSH-框架整合的环境准备" class="headerlink" title="SSH 框架整合的环境准备"></a>SSH 框架整合的环境准备</h1><hr>
<h2 id="SSH-三大框架需要的-jar包"><a href="#SSH-三大框架需要的-jar包" class="headerlink" title="SSH 三大框架需要的 jar包"></a>SSH 三大框架需要的 jar包</h2><h3 id="Struts2-框架"><a href="#Struts2-框架" class="headerlink" title="Struts2 框架"></a>Struts2 框架</h3><blockquote>
<p><code>struts-2.3.24\apps\struts2-blank\WEB-INF\lib\*.jar</code>————Struts2 需要的所有 jar 包<br><code>struts2-spring-plugin-2.3.24.jar</code>————Struts2 整合 Spring 的插件包</p>
</blockquote>
<h3 id="Hibernate-框架"><a href="#Hibernate-框架" class="headerlink" title="Hibernate 框架"></a>Hibernate 框架</h3><blockquote>
<p><code>hibernate-release-5.0.7.Final\lib\required\*.jar</code>————Hibernate 框架需要的 jar 包<br><code>slf4j-api-1.6.1.jar</code>————日志接口<br><code>slf4j-log4j12-1.7.2.jar</code>————日志实现<br><code>mysql-connector-java-5.1.7-bin.jar</code>————MySQL 的驱动包</p>
</blockquote>
<h3 id="Spring-框架"><a href="#Spring-框架" class="headerlink" title="Spring 框架"></a>Spring 框架</h3><blockquote>
<p><code>IoC</code> 核心包（6个）<br><code>AOP</code> 核心包（4个）<br><code>JDBC</code> 模板和<code>事务</code>核心包（2个）<br>Spring 整合 <code>JUnit</code> 测试包<br>Spring 整合 <code>Hibernate</code> 核心包<br>Spring 整合 <code>Struts2</code> 核心包</p>
</blockquote>
<h2 id="SSH-三大框架需要的配置文件"><a href="#SSH-三大框架需要的配置文件" class="headerlink" title="SSH 三大框架需要的配置文件"></a>SSH 三大框架需要的配置文件</h2><h3 id="Struts2-框架-1"><a href="#Struts2-框架-1" class="headerlink" title="Struts2 框架"></a>Struts2 框架</h3><ul>
<li>在 <code>web.xml</code> 中配置核心的过滤器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 Struts2 框架核心的过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在 <code>src</code> 目录下创建 <code>struts.xml</code>，用来配置 <code>Action</code></li>
</ul>
<h3 id="Hibernate-框架-1"><a href="#Hibernate-框架-1" class="headerlink" title="Hibernate 框架"></a>Hibernate 框架</h3><ul>
<li>在 <code>src</code> 目录创建 <code>hibernate.cfg.xml</code> 配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 必须配置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///ssh01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>541638<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 可选配置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 配置C3P0的连接池 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.provider_class"</span>&gt;</span>org.hibernate.c3p0.internal.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 映射配置文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/renkaigis/domain/Customer.hbm.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在 <code>JavaBean</code> 所在的包下编写 <code>映射的配置文件</code>：<code>JavaBean类名.hbm.xml</code></li>
</ul>
<h3 id="Spring-框架-1"><a href="#Spring-框架-1" class="headerlink" title="Spring 框架"></a>Spring 框架</h3><ul>
<li>在 <code>web.xml</code> 配置整合 WEB 的监听器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 Spring 框架整合 WEB 的监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>在 <code>src</code> 目录下创建 <code>applicationContext.xml</code></p>
</li>
<li><p>在 <code>src</code> 目录下加入 <code>log4j.proerties</code></p>
</li>
</ul>
<hr>
<h1 id="Spring-框架整合-Struts2-框架"><a href="#Spring-框架整合-Struts2-框架" class="headerlink" title="Spring 框架整合 Struts2 框架"></a>Spring 框架整合 Struts2 框架</h1><hr>
<h2 id="表单访问-Action"><a href="#表单访问-Action" class="headerlink" title="表单访问 Action"></a>表单访问 Action</h2><ul>
<li>导入 <code>CRM</code> 项目的 UI 页面，找到添加客户的页面，修改 form 表单，访问 Action。</li>
</ul>
<h2 id="编写-CustomerAction-接收请求，在-struts-xml-中完成-Action-的配置"><a href="#编写-CustomerAction-接收请求，在-struts-xml-中完成-Action-的配置" class="headerlink" title="编写 CustomerAction 接收请求，在 struts.xml 中完成 Action 的配置"></a>编写 CustomerAction 接收请求，在 struts.xml 中完成 Action 的配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--先配置包结构--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"crm"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置客户的 Action--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"customer_*"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="模型驱动封装数据"><a href="#模型驱动封装数据" class="headerlink" title="模型驱动封装数据"></a>模型驱动封装数据</h2><p>编写好客户的 JavaBean，在 Action 中使用模型驱动来封装数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的控制层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 不要忘记自己手动 new</span></span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"WEB 层：保存客户…"</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="在-Action-中获取到-service（开发不会使用，因为麻烦）"><a href="#在-Action-中获取到-service（开发不会使用，因为麻烦）" class="headerlink" title="在 Action 中获取到 service（开发不会使用，因为麻烦）"></a>在 Action 中获取到 service（开发不会使用，因为麻烦）</h2><p>可以通过 <code>WebApplicationContextUtils.getWebApplicationContext(ServletActionContext.getServletContext());</code> 来获取，但是这种方式编写代码太麻烦了！</p>
<h2 id="Spring-整合-Struts2-框架的第一种方式（Action-由-Struts2-框架来创建）"><a href="#Spring-整合-Struts2-框架的第一种方式（Action-由-Struts2-框架来创建）" class="headerlink" title="Spring 整合 Struts2 框架的第一种方式（Action 由 Struts2 框架来创建）"></a>Spring 整合 Struts2 框架的第一种方式（Action 由 Struts2 框架来创建）</h2><ul>
<li>因为导入的 <code>struts2-spring-plugin-2.3.24.jar</code> 包自带一个配置文件 struts-plugin.xml ，该配置文件中有如下代码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.objectFactory"</span> <span class="attr">value</span>=<span class="string">"spring"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>开启一个常量，如果该常量开启，那么下面的常量就可以使用</p>
<ul>
<li><p><code>struts.objectFactory.spring.autoWire = name</code>，该常量是可以让 <code>Action</code> 的类来自动装配 <code>Bean</code> 对象！</p>
</li>
<li><p><code>CustomerService.java</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提供 service 的成员属性，提供 set 方法</span></span><br><span class="line"><span class="keyword">private</span> CustomerService customerService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerService</span><span class="params">(CustomerService customerService)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.customerService = customerService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Spring-整合-Struts2-框架的第二种方式（Action-由-Spring-框架来创建）（强烈推荐）"><a href="#Spring-整合-Struts2-框架的第二种方式（Action-由-Spring-框架来创建）（强烈推荐）" class="headerlink" title="Spring 整合 Struts2 框架的第二种方式（Action 由 Spring 框架来创建）（强烈推荐）"></a>Spring 整合 Struts2 框架的第二种方式（Action 由 Spring 框架来创建）（强烈推荐）</h2><ul>
<li><p>把具体的 <code>Action</code> 类配置到 <code>applicatonContext.xml</code> 的配置文件中，但是注意 <code>struts.xml</code> 需要做修改：</p>
</li>
<li><p><code>applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置客户模块--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--强调：配置 Aciton，必须是多例的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAction"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.web.action.CustomerAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerService"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.service.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>struts.xml</code> 中的修改，把全路径修改成 <code>ID 值</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"crm"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置客户的 Action，如果 Action 是由 Spring 框架来管理，class 标签只需要去编写 id 值就ok了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"customer_*"</span> <span class="attr">class</span>=<span class="string">"customerAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种方式需要有两个注意的地方</p>
<blockquote>
<p><code>Spring</code> 框架默认生成 <code>CustomerAction</code> 是单例的，而 <code>Struts2</code> 框架是<code>多例</code>的。所以需要配置 <code>scope=&quot;prototype&quot;</code><br><code>CustomerService</code> 现在必须自己手动注入了。</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="Spring-框架整合-Hibernate-框架"><a href="#Spring-框架整合-Hibernate-框架" class="headerlink" title="Spring 框架整合 Hibernate 框架"></a>Spring 框架整合 Hibernate 框架</h1><hr>
<h2 id="Spring-框架整合-Hibernate-框架（有配置文件）"><a href="#Spring-框架整合-Hibernate-框架（有配置文件）" class="headerlink" title="Spring 框架整合 Hibernate 框架（有配置文件）"></a>Spring 框架整合 Hibernate 框架（有配置文件）</h2><p>（带有 <code>hibernate.cfg.xml</code> 的配置文件。<code>强调：不能加绑定当前线程的配置</code>）</p>
<h3 id="编写-CustomerDaoImpl-的代码，加入配置并且在-CustomerServiceImpl-中完成注入"><a href="#编写-CustomerDaoImpl-的代码，加入配置并且在-CustomerServiceImpl-中完成注入" class="headerlink" title="编写 CustomerDaoImpl 的代码，加入配置并且在 CustomerServiceImpl 中完成注入"></a>编写 <code>CustomerDaoImpl</code> 的代码，加入配置并且在 <code>CustomerServiceImpl</code> 中完成注入</h3><p><code>CustomerDaoImpl.java</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"持久层：保存客户…"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CustomerServiceImpl.java</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">CustomerService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDao</span><span class="params">(CustomerDao customerDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：保存客户…"</span>);</span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现步骤：<code>Action</code> 调用 <code>Service</code> ，<code>Service</code> 调用 <code>Dao</code></p>
<h3 id="编写映射的配置文件"><a href="#编写映射的配置文件" class="headerlink" title="编写映射的配置文件"></a>编写映射的配置文件</h3><p><code>Customer.hbm.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"cust_id"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_name"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_user_id"</span> <span class="attr">column</span>=<span class="string">"cust_user_id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_create_id"</span> <span class="attr">column</span>=<span class="string">"cust_create_id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_source"</span> <span class="attr">column</span>=<span class="string">"cust_source"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_industry"</span> <span class="attr">column</span>=<span class="string">"cust_industry"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_level"</span> <span class="attr">column</span>=<span class="string">"cust_level"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_linkman"</span> <span class="attr">column</span>=<span class="string">"cust_linkman"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_phone"</span> <span class="attr">column</span>=<span class="string">"cust_phone"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_mobile"</span> <span class="attr">column</span>=<span class="string">"cust_mobile"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>hibernate.cfg.xml</code> 的配置文件中引入映射的配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 映射配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/renkaigis/domain/Customer.hbm.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在-applicationContext-xml-中配置加载-hibernate-cfg-xml"><a href="#在-applicationContext-xml-中配置加载-hibernate-cfg-xml" class="headerlink" title="在 applicationContext.xml 中配置加载 hibernate.cfg.xml"></a>在 <code>applicationContext.xml</code> 中配置加载 <code>hibernate.cfg.xml</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--编写 Bean，名称都是固定的，加载 hibernate.cfg.xml 配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:hibernate.cfg.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Dao-继承-HibernateDaoSupport-的工具类"><a href="#Dao-继承-HibernateDaoSupport-的工具类" class="headerlink" title="Dao 继承 HibernateDaoSupport 的工具类"></a>Dao 继承 <code>HibernateDaoSupport</code> 的工具类</h3><p>在 <code>CustomerDaoImpl</code> 中想完成数据的添加，Spring 框架提供了一个 <code>HibernateDaoSupport</code> 的工具类，以后 <code>DAO</code> 都可以继承该类！</p>
<p><code>CustomerDaoImpl.java</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"持久层：保存客户…"</span>);</span><br><span class="line">        <span class="comment">// 把数据保存到数据库</span></span><br><span class="line">        <span class="keyword">this</span>.getHibernateTemplate().save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>applicationContext.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以后开发：Dao 都需要继承 HibernateDaoSupport，注入 sessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.dao.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="开启事务的配置"><a href="#开启事务的配置" class="headerlink" title="开启事务的配置"></a>开启事务的配置</h3><ul>
<li>先配置事务管理器，注意现在使用的是 <code>Hibernate</code> 框架，所以需要使用 <code>Hibernate</code> 框架的事务管理器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>开启注解事务</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务的注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在 <code>Service</code> 类中添加事务注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">CustomerService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDao</span><span class="params">(CustomerDao customerDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：保存客户…"</span>);</span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spring-框架整合-Hibernate-框架（无配置文件）"><a href="#Spring-框架整合-Hibernate-框架（无配置文件）" class="headerlink" title="Spring 框架整合 Hibernate 框架（无配置文件）"></a>Spring 框架整合 Hibernate 框架（无配置文件）</h2><p>（不带有 <code>hibernate.cfg.xml</code> 的配置文件）</p>
<h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3><p>要不带有 <code>hibernate.cfg.xml</code> 的配置文件，则需要将 <code>hibernate.cfg.xml</code> 中的配置移植到 <code>applicationContext.xml</code> 中。具体操作如下：</p>
<h4 id="Hibernate-配置文件中的配置"><a href="#Hibernate-配置文件中的配置" class="headerlink" title="Hibernate 配置文件中的配置"></a>Hibernate 配置文件中的配置</h4><ul>
<li>数据库连接基本参数（4 大参数）</li>
<li>Hibernate 相关的属性</li>
<li>连接池</li>
<li>映射文件</li>
</ul>
<h4 id="开始进行配置"><a href="#开始进行配置" class="headerlink" title="开始进行配置"></a>开始进行配置</h4><ul>
<li>先配置连接池相关的信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 C3P0 连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssh01"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"541638"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改 <code>LocalSessionFactoryBean</code> 的属性配置，因为已经没有了 <code>hibernate.cfg.xml</code> 配置文件，所以需要修改该配置，注入连接池：</li>
</ul>
<pre><code>&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
&lt;/bean&gt;
</code></pre><ul>
<li>继续在 <code>LocalSessionFactoryBean</code> 中配置，使用 <code>hibernateProperties</code> 属性继续来配置其他的属性，注意值是 <code>properties</code> 属性文件：</li>
</ul>
<p><code>applicationContext.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--LocalSessionFactoryBean 加载配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载方言，加载可选项--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载映射配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>com/renkaigis/domain/Customer.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="延迟加载问题"><a href="#延迟加载问题" class="headerlink" title="延迟加载问题"></a>延迟加载问题</h2><h3 id="no-session-异常"><a href="#no-session-异常" class="headerlink" title="no session 异常"></a>no session 异常</h3><p>使用延迟加载的时候，在 WEB 层查询对象的时候程序会抛出异常！</p>
<ul>
<li><p>原因是延迟加载还没有发生 SQL 语句，在业务层 session 对象就已经销毁了，所以查询到的 JavaBean 对象已经变成了托管态对象！</p>
</li>
<li><p>注意：一定要先删除 <code>javassist-3.11.0.GA.jar</code> 包（jar包冲突了）</p>
</li>
</ul>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决办法非常简单，Spring 框架提供了一个过滤器，让 <code>session</code> 对象在 WEB 层就创建，在 WEB 层销毁。只需要配置该过滤器即可。</p>
<ul>
<li>但是：要注意需要在 struts2 的<code>核心过滤器之前</code>进行配置：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解决延迟加载的问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="终极版-SSH-整合"><a href="#终极版-SSH-整合" class="headerlink" title="终极版 SSH 整合"></a>终极版 SSH 整合</h1><hr>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 Spring 框架整合 WEB 的监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 解决延迟加载的问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 Struts2 框架核心的过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="struts-xml"><a href="#struts-xml" class="headerlink" title="struts.xml"></a>struts.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"crm"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置客户的 Action--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"customer_*"</span> <span class="attr">class</span>=<span class="string">"customerAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="application-xml"><a href="#application-xml" class="headerlink" title="application.xml"></a>application.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 C3P0 连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssh01"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"541638"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--LocalSessionFactoryBean 加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载方言，加载可选项--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载映射配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>com/renkaigis/domain/Customer.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--先配置平台事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启事务的注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置客户模块--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--强调：配置 Aciton，必须是多例的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAction"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.web.action.CustomerAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerService"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.service.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以后开发：Dao 都需要继承 HibernateDaoSupport，注入 sessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.dao.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">### direct log messages to stdout ###</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.err</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line">### direct messages to file mylog.log ###</span><br><span class="line">log4j.appender.file=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.file.File=c\:mylog.log</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line">### set log levels - for more verbose logging change &apos;info&apos; to &apos;debug&apos; ###</span><br><span class="line"></span><br><span class="line">log4j.rootLogger=info, stdout</span><br></pre></td></tr></table></figure>
<h2 id="WEB-项目"><a href="#WEB-项目" class="headerlink" title="WEB 项目"></a>WEB 项目</h2><h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><p><code>CustomerAction.java</code> ，继承 <code>ActionSupport</code> 类，使用 <code>模型驱动</code> 封装数据（记得手动 new，手动实例化 <code>JavaBean</code>）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ModelDriven;</span><br><span class="line"><span class="keyword">import</span> com.renkaigis.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.renkaigis.service.CustomerService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的控制层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 不要忘记自己手动 new</span></span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供 service 的成员属性，提供 set 方法</span></span><br><span class="line">    <span class="keyword">private</span> CustomerService customerService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerService</span><span class="params">(CustomerService customerService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerService = customerService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"WEB 层：保存客户…"</span>);</span><br><span class="line">        customerService.save(customer);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><p><code>CustomerServiceImpl.java</code>，添加事务注解，处理业务逻辑，调用持久层。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.renkaigis.dao.CustomerDao;</span><br><span class="line"><span class="keyword">import</span> com.renkaigis.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">CustomerService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDao</span><span class="params">(CustomerDao customerDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：保存客户…"</span>);</span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        customerDao.update(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p><code>CustomerDaoImpl.java</code>，继承 <code>HibernateDaoSupport</code> 类，使用 <code>Hibernate</code> 模板类实现 Java 类与数据库之间的转换和访问。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.renkaigis.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.hibernate5.support.HibernateDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"持久层：保存客户…"</span>);</span><br><span class="line">        <span class="comment">// 把数据保存到数据库</span></span><br><span class="line">        <span class="keyword">this</span>.getHibernateTemplate().save(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getHibernateTemplate().update(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/ssh0100.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;SSH 框架整合&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="SSH" scheme="http://yoursite.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Spring 事务管理</title>
    <link href="http://yoursite.com/JavaWeb-Spring05.html"/>
    <id>http://yoursite.com/JavaWeb-Spring05.html</id>
    <published>2018-08-11T14:12:50.000Z</published>
    <updated>2018-08-13T02:26:33.228Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/spring0500.png"></div>

<p id="div-border-left-blue">Spring 事务管理</p>

<a id="more"></a>
<hr>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><hr>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>事务：指的是逻辑上的一组操作，组成这个事务的各个执行单元，要么一起成功，要么一起失败！</p>
<h2 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h2><ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ul>
<h2 id="安全性问题"><a href="#安全性问题" class="headerlink" title="安全性问题"></a>安全性问题</h2><p>如果不考虑隔离性,引发安全性问题</p>
<ul>
<li><p>读问题:</p>
<blockquote>
<p>脏读<br>不可重复读<br>虚读</p>
</blockquote>
</li>
<li><p>写问题:</p>
<blockquote>
<p>丢失更新</p>
</blockquote>
</li>
</ul>
<h2 id="如何解决安全性问题"><a href="#如何解决安全性问题" class="headerlink" title="如何解决安全性问题"></a>如何解决安全性问题</h2><blockquote>
<p>读问题解决，设置数据库隔离级别</p>
<p>写问题解决可以使用 <code>悲观锁</code> 和 <code>乐观锁</code> 的方式解决</p>
</blockquote>
<hr>
<h1 id="Spring-框架的事务管理"><a href="#Spring-框架的事务管理" class="headerlink" title="Spring 框架的事务管理"></a>Spring 框架的事务管理</h1><hr>
<h2 id="Spring-框架的事务管理相关的类和-API"><a href="#Spring-框架的事务管理相关的类和-API" class="headerlink" title="Spring 框架的事务管理相关的类和 API"></a>Spring 框架的事务管理相关的类和 API</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol>
<li><code>PlatformTransactionManager</code>接口————平台事务管理器。（真正管理事务的类）。该接口有具体的实现类，根据不同的持久层框架，需要选择不同的实现类！</li>
<li><code>TransactionDefinition</code>接口————事务定义信息。（事务的隔离级别，传播行为，超时，只读）</li>
<li><code>TransactionStatus</code>接口————事务的状态</li>
</ol>
<p>总结：上述对象之间的关系：平台事务管理器真正管理事务对象。根据事务定义的信息 <code>TransactionDefinition</code> 进行事务管理，在管理事务中产生一些状态，将状态记录到 <code>TransactionStatus</code> 中。</p>
<h3 id="PlatformTransactionManager-接口中实现类和常用的方法"><a href="#PlatformTransactionManager-接口中实现类和常用的方法" class="headerlink" title="PlatformTransactionManager 接口中实现类和常用的方法"></a>PlatformTransactionManager 接口中实现类和常用的方法</h3><ol>
<li><p>接口的实现类</p>
<blockquote>
<p>如果使用的 Spring 的 <code>JDBC</code> 模板或者 <code>MyBatis</code> 框架，需要选择 <code>DataSourceTransactionManager</code> 实现类<br>如果使用的是 <code>Hibernate</code> 的框架，需要选择 <code>HibernateTransactionManager</code> 实现类</p>
</blockquote>
</li>
<li><p>该接口的常用方法</p>
<blockquote>
<p><code>void commit(TransactionStatus status)</code><br><code>TransactionStatus getTransaction(TransactionDefinition definition)</code><br><code>void rollback(TransactionStatus status)</code></p>
</blockquote>
</li>
</ol>
<h3 id="TransactionDefinition-接口中实现类和常用的方法"><a href="#TransactionDefinition-接口中实现类和常用的方法" class="headerlink" title="TransactionDefinition 接口中实现类和常用的方法"></a>TransactionDefinition 接口中实现类和常用的方法</h3><ol>
<li><p>事务隔离级别的常量</p>
<blockquote>
<p>static int ISOLATION_DEFAULT————采用数据库的默认隔离级别<br>static int ISOLATION_READ_UNCOMMITTED<br>static int ISOLATION_READ_COMMITTED<br>static int ISOLATION_REPEATABLE_READ<br>static int ISOLATION_SERIALIZABLE </p>
</blockquote>
</li>
<li><p>事务的传播行为常量（不用设置，<code>使用默认值</code>）</p>
</li>
</ol>
<ul>
<li>事务的传播行为：解决的是业务层之间的方法调用！<blockquote>
<p>PROPAGATION_REQUIRED（默认值）————A 中有事务，使用 A 中的事务。如果没有，B 就会开启一个新的事务，将 A 包含进来。（保证 A，B 在同一个事务中），默认值！<br>PROPAGATION_SUPPORTS————A 中有事务，使用 A 中的事务。如果 A 中没有事务，那么 B 也不使用事务。<br>PROPAGATION_MANDATORY————A 中有事务，使用 A 中的事务。如果 A 没有事务，抛出异常。</p>
<p>PROPAGATION_REQUIRES_NEW（记）————A 中有事务，将 A 中的事务挂起。B 创建一个新的事务。（保证 A，B 没有在一个事务中）<br>PROPAGATION_NOT_SUPPORTED————A 中有事务，将 A 中的事务挂起。<br>PROPAGATION_NEVER————A 中有事务，抛出异常。</p>
<p>PROPAGATION_NESTED（记）————嵌套事务。当 A 执行之后，就会在这个位置设置一个保存点。如果 B 没有问题，执行通过。如果 B 出现异常了，运行客户根据需求回滚（选择回滚到保存点或者是最初始状态）</p>
</blockquote>
</li>
</ul>
<h2 id="搭建事务管理转账案例的环境"><a href="#搭建事务管理转账案例的环境" class="headerlink" title="搭建事务管理转账案例的环境"></a>搭建事务管理转账案例的环境</h2><p>（强调：简化开发，以后 <code>DAO</code> 可以继承 <code>JdbcDaoSupport</code> 类）</p>
<h3 id="步骤一：创建-WEB-工程，引入需要的-jar-包"><a href="#步骤一：创建-WEB-工程，引入需要的-jar-包" class="headerlink" title="步骤一：创建 WEB 工程，引入需要的 jar 包"></a>步骤一：创建 WEB 工程，引入需要的 jar 包</h3><blockquote>
<p>IoC 的 6 个包<br>AOP 的 4 个包<br>C3P0 的 1 个包<br>MySQL 的驱动包<br>JDBC 模板 2 个包<br>整合 JUnit 测试包</p>
</blockquote>
<h3 id="步骤二：引入配置文件"><a href="#步骤二：引入配置文件" class="headerlink" title="步骤二：引入配置文件"></a>步骤二：引入配置文件</h3><ul>
<li><p>引入配置文件</p>
<blockquote>
<p>引入 <code>log4j.properties</code></p>
</blockquote>
</li>
<li><p>引入 <code>applicationContext.xml</code></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="步骤三：创建对应的包结构和类"><a href="#步骤三：创建对应的包结构和类" class="headerlink" title="步骤三：创建对应的包结构和类"></a>步骤三：创建对应的包结构和类</h3><ul>
<li>com.itheima.demo2<blockquote>
<p>AccountService<br>AccountServlceImpl<br>AccountDao<br>AccountDaoImpl</p>
</blockquote>
</li>
</ul>
<h3 id="步骤四：引入-Spring-的配置文件，将类配置到-Spring-中"><a href="#步骤四：引入-Spring-的配置文件，将类配置到-Spring-中" class="headerlink" title="步骤四：引入 Spring 的配置文件，将类配置到 Spring 中"></a>步骤四：引入 Spring 的配置文件，将类配置到 Spring 中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.AccountDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="步骤五：在业务层注入-DAO-在-DAO-中注入-JDBC-模板"><a href="#步骤五：在业务层注入-DAO-在-DAO-中注入-JDBC-模板" class="headerlink" title="步骤五：在业务层注入 DAO ,在 DAO 中注入 JDBC 模板"></a>步骤五：在业务层注入 DAO ,在 DAO 中注入 JDBC 模板</h3><p>（强调：简化开发，DAO 可以继承 <code>JdbcDaoSupport</code> 类）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="步骤六：编写-DAO-和-Service-中的方法"><a href="#步骤六：编写-DAO-和-Service-中的方法" class="headerlink" title="步骤六：编写 DAO 和 Service 中的方法"></a>步骤六：编写 DAO 和 Service 中的方法</h3><p><code>Service</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(String out, String in, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先扣钱</span></span><br><span class="line">        accountDao.outMoney(out, money);</span><br><span class="line">        <span class="comment">// 后加钱</span></span><br><span class="line">        accountDao.inMoney(in, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DAO</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 扣钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outMoney</span><span class="params">(String out, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update t_account set money = money - ? where name = ?"</span>, money, out);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inMoney</span><span class="params">(String in, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update t_account set money = money + ? where name = ?"</span>, money, in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="步骤七：编写测试程序"><a href="#步骤七：编写测试程序" class="headerlink" title="步骤七：编写测试程序"></a>步骤七：编写测试程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"accountService"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountService.pay(<span class="string">"小关"</span>, <span class="string">"小西"</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spring-框架事务管理的分类"><a href="#Spring-框架事务管理的分类" class="headerlink" title="Spring 框架事务管理的分类"></a>Spring 框架事务管理的分类</h2><ol>
<li><p>Spring 的编程式事务管理（不推荐使用）</p>
<blockquote>
<p>通过手动编写代码的方式完成事务的管理（不推荐）</p>
</blockquote>
</li>
<li><p>Spring 的<code>声明式事务管理</code>（底层采用 <code>AOP</code> 的技术）</p>
<blockquote>
<p>通过一段配置的方式完成事务的管理（重点掌握<code>注解</code>的方式）</p>
</blockquote>
</li>
</ol>
<h3 id="Spring-框架事务管理之编程式事务管理（了解）"><a href="#Spring-框架事务管理之编程式事务管理（了解）" class="headerlink" title="Spring 框架事务管理之编程式事务管理（了解）"></a>Spring 框架事务管理之编程式事务管理（了解）</h3><p>说明：Spring 为了简化事务管理的代码：提供了模板类 <code>TransactionTemplate</code>，所以手动编程的方式来管理事务，只需要使用该模板类即可！</p>
<h4 id="步骤一：配置一个事务管理器"><a href="#步骤一：配置一个事务管理器" class="headerlink" title="步骤一：配置一个事务管理器"></a>步骤一：配置一个事务管理器</h4><p>Spring 使用 <code>PlatformTransactionManager</code> 接口来管理事务，所以需要使用到他的实现类！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤二：配置事务管理的模板"><a href="#步骤二：配置事务管理的模板" class="headerlink" title="步骤二：配置事务管理的模板"></a>步骤二：配置事务管理的模板</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--手动编码，提供了模板类，使用该类管理事务比较简单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤三：在需要进行事务管理的类中，注入事务管理的模板"><a href="#步骤三：在需要进行事务管理的类中，注入事务管理的模板" class="headerlink" title="步骤三：在需要进行事务管理的类中，注入事务管理的模板"></a>步骤三：在需要进行事务管理的类中，注入事务管理的模板</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionTemplate"</span> <span class="attr">ref</span>=<span class="string">"transactionTemplate"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤四：在业务层使用模板管理事务"><a href="#步骤四：在业务层使用模板管理事务" class="headerlink" title="步骤四：在业务层使用模板管理事务"></a>步骤四：在业务层使用模板管理事务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入事务的模板类</span></span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTransactionTemplate</span><span class="params">(TransactionTemplate transactionTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transactionTemplate = transactionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(String out, String in, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class="line">                accountDao.outMoney(out, money);</span><br><span class="line">                <span class="comment">// 模拟异常</span></span><br><span class="line">                <span class="comment">// int a = 10 / 0;</span></span><br><span class="line">                accountDao.inMoney(in, money);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Spring-框架事务管理之声明式事务管理"><a href="#Spring-框架事务管理之声明式事务管理" class="headerlink" title="Spring 框架事务管理之声明式事务管理"></a>Spring 框架事务管理之声明式事务管理</h3><p>即通过配置文件来完成事务管理（AOP 思想）</p>
<ul>
<li>声明式事务管理又分成两种方式<blockquote>
<p>基于 AspectJ 的 XML 方式（重点掌握）<br>基于 AspectJ 的注解方式（重点掌握）</p>
</blockquote>
</li>
</ul>
<h4 id="Spring-框架事务管理之基于-AspectJ-的-XML-方式（重点掌握）"><a href="#Spring-框架事务管理之基于-AspectJ-的-XML-方式（重点掌握）" class="headerlink" title="Spring 框架事务管理之基于 AspectJ 的 XML 方式（重点掌握）"></a>Spring 框架事务管理之基于 AspectJ 的 XML 方式（重点掌握）</h4><h5 id="步骤一：恢复转账开发环境"><a href="#步骤一：恢复转账开发环境" class="headerlink" title="步骤一：恢复转账开发环境"></a>步骤一：恢复转账开发环境</h5><h5 id="步骤二：引入-AOP-的开发包"><a href="#步骤二：引入-AOP-的开发包" class="headerlink" title="步骤二：引入 AOP 的开发包"></a>步骤二：引入 AOP 的开发包</h5><h5 id="步骤三：配置事务管理器"><a href="#步骤三：配置事务管理器" class="headerlink" title="步骤三：配置事务管理器"></a>步骤三：配置事务管理器</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="步骤四：配置事务增强"><a href="#步骤四：配置事务增强" class="headerlink" title="步骤四：配置事务增强"></a>步骤四：配置事务增强</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--先配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"myAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--aop:advisor，是 Spring 框架提供的通知--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"pay"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>name</code>：绑定事务的方法名，可以使用通配符，可以配置多个。<br><code>propagation</code>：传播行为<br><code>isolation</code>：隔离级别<br><code>read-only</code>：是否只读<br><code>timeout</code>：超时信息<br><code>rollback-for</code>：发生哪些异常回滚<br><code>no-rollback-for</code>：发生哪些异常不回滚</p>
</blockquote>
<h5 id="步骤五：配置-AOP-的切面"><a href="#步骤五：配置-AOP-的切面" class="headerlink" title="步骤五：配置 AOP 的切面"></a>步骤五：配置 AOP 的切面</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 AOP：如果是自己编写的 AOP，使用 aop:aspect 配置，使用的是 Spring 提供的通知用 aop:advisor--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public * com.renkaigis.demo3.AccountServiceImpl.pay(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：如果是自己编写的切面，使用 <code>&lt;aop:aspect&gt;</code> 标签，如果是系统提供的，使用 <code>&lt;aop:advisor&gt;</code> 标签。</p>
<h5 id="步骤六：编写测试类"><a href="#步骤六：编写测试类" class="headerlink" title="步骤六：编写测试类"></a>步骤六：编写测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"accountService"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountService.pay(<span class="string">"小关"</span>, <span class="string">"小西"</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Spring-框架事务管理之基于-AspectJ-的注解方式"><a href="#Spring-框架事务管理之基于-AspectJ-的注解方式" class="headerlink" title="Spring 框架事务管理之基于 AspectJ 的注解方式"></a>Spring 框架事务管理之基于 AspectJ 的注解方式</h4><p><strong>（重点掌握，最简单的方式）</strong></p>
<h5 id="步骤一：恢复转账的开发环境"><a href="#步骤一：恢复转账的开发环境" class="headerlink" title="步骤一：恢复转账的开发环境"></a>步骤一：恢复转账的开发环境</h5><h5 id="步骤二：配置事务管理器"><a href="#步骤二：配置事务管理器" class="headerlink" title="步骤二：配置事务管理器"></a>步骤二：配置事务管理器</h5><p>同上。</p>
<h5 id="步骤三：开启注解事务"><a href="#步骤三：开启注解事务" class="headerlink" title="步骤三：开启注解事务"></a>步骤三：开启注解事务</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务的注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="步骤四：在业务层上添加一个注解：-Transactional"><a href="#步骤四：在业务层上添加一个注解：-Transactional" class="headerlink" title="步骤四：在业务层上添加一个注解：@Transactional"></a>步骤四：在业务层上添加一个注解：@Transactional</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transactional 类上添加注解，类中的方法全部就都有了事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(String out, String in, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        accountDao.outMoney(out, money);</span><br><span class="line">        <span class="comment">// 模拟异常</span></span><br><span class="line">        <span class="comment">// int a = 10 / 0;</span></span><br><span class="line">        accountDao.inMoney(in, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="步骤五：编写测试类"><a href="#步骤五：编写测试类" class="headerlink" title="步骤五：编写测试类"></a>步骤五：编写测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext3.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"accountService"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountService.pay(<span class="string">"小关"</span>, <span class="string">"小西"</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/spring0500.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;Spring 事务管理&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Spring JDBC 模板技术</title>
    <link href="http://yoursite.com/JavaWeb-Spring04.html"/>
    <id>http://yoursite.com/JavaWeb-Spring04.html</id>
    <published>2018-08-11T05:23:47.000Z</published>
    <updated>2018-08-12T12:51:19.276Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/spring0400.png"></div>

<p id="div-border-left-blue">Spring JDBC 模板技术</p>

<a id="more"></a>
<hr>
<h1 id="Spring-框架的-JDBC-模板技术"><a href="#Spring-框架的-JDBC-模板技术" class="headerlink" title="Spring 框架的 JDBC 模板技术"></a>Spring 框架的 JDBC 模板技术</h1><hr>
<h2 id="Spring-框架的-JDBC-模板技术概述"><a href="#Spring-框架的-JDBC-模板技术概述" class="headerlink" title="Spring 框架的 JDBC 模板技术概述"></a>Spring 框架的 JDBC 模板技术概述</h2><ol>
<li><p>Spring 框架中提供了很多持久层的模板类来简化编程，使用模板类编写程序会变的简单。</p>
</li>
<li><p>提供了 <code>JDBC</code> 模板，Spring 框架提供的</p>
<blockquote>
<p><code>JdbcTemplate</code>类</p>
</blockquote>
</li>
<li><p>Spring 框架可以整合 <code>Hibernate</code> 框架，也提供了模板类</p>
<blockquote>
<p><code>HibernateTemplate</code>类</p>
</blockquote>
</li>
</ol>
<h2 id="演示-JDBC-的模板类"><a href="#演示-JDBC-的模板类" class="headerlink" title="演示 JDBC 的模板类"></a>演示 JDBC 的模板类</h2><h3 id="步骤一：创建数据库的表结构"><a href="#步骤一：创建数据库的表结构" class="headerlink" title="步骤一：创建数据库的表结构"></a>步骤一：创建数据库的表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> spring04;</span><br><span class="line"><span class="keyword">use</span> spring04;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_account(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="步骤二：引入开发的-jar-包"><a href="#步骤二：引入开发的-jar-包" class="headerlink" title="步骤二：引入开发的 jar 包"></a>步骤二：引入开发的 jar 包</h3><ul>
<li>先引入 <code>IoC</code> 基本的 jar 包（6个），还有1个 <code>test</code> 的包</li>
<li>再引入 <code>Spring-aop</code> 的 jar 包（1个）</li>
<li>最后引入 <code>JDBC模板</code> 需要的 jar 包：<blockquote>
<p>MySQL 数据库的驱动包：<code>mysql-connector-java-5.1.7-bin.jar</code><br><code>Spring-jdbc.jar</code><br>事务管理：<code>Spring-tx.jar</code></p>
</blockquote>
</li>
</ul>
<p><em>一共 11 个包。</em></p>
<h3 id="步骤三：编写测试代码（自己来-new-对象的方式）"><a href="#步骤三：编写测试代码（自己来-new-对象的方式）" class="headerlink" title="步骤三：编写测试代码（自己来 new 对象的方式）"></a>步骤三：编写测试代码（自己来 new 对象的方式）</h3><p>new 对象的方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示模板类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Spring 框架提供了内置的连接池，不想使用内置，整合其他的连接池</span></span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql:///spring04"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"541638"</span>);</span><br><span class="line">        <span class="comment">// 创建模板类</span></span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">// 设置连接池</span></span><br><span class="line">        template.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 完成操作</span></span><br><span class="line">        template.update(<span class="string">"insert into t_account values (null,?,?)"</span>, <span class="string">"小西"</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用-Spring-框架来管理模板类"><a href="#使用-Spring-框架来管理模板类" class="headerlink" title="使用 Spring 框架来管理模板类"></a>使用 Spring 框架来管理模板类</h2><p>现在应该把这些类交给 Spring 框架来管理。</p>
<h3 id="Spring-框架管理开源的连接池"><a href="#Spring-框架管理开源的连接池" class="headerlink" title="Spring 框架管理开源的连接池"></a>Spring 框架管理开源的连接池</h3><h4 id="步骤一：Spring-配置内置的连接池"><a href="#步骤一：Spring-配置内置的连接池" class="headerlink" title="步骤一：Spring 配置内置的连接池"></a>步骤一：Spring 配置内置的连接池</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内置的连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring04"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"541638"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤二：Spring-管理模板类"><a href="#步骤二：Spring-管理模板类" class="headerlink" title="步骤二：Spring 管理模板类"></a>步骤二：Spring 管理模板类</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 JDBC 的模板类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤三：编写测试程序"><a href="#步骤三：编写测试程序" class="headerlink" title="步骤三：编写测试程序"></a>步骤三：编写测试程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 JDBC 的模板类，使用 IoC 的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into t_account values (null,?,?)"</span>, <span class="string">"小关"</span>, <span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Spring-框架管理开源的连接池-1"><a href="#Spring-框架管理开源的连接池-1" class="headerlink" title="Spring 框架管理开源的连接池"></a>Spring 框架管理开源的连接池</h3><h4 id="管理-DBCP-连接池"><a href="#管理-DBCP-连接池" class="headerlink" title="管理 DBCP 连接池"></a>管理 DBCP 连接池</h4><ul>
<li><p>先引入 DBCP 的 2 个 jar 包</p>
<blockquote>
<p>com.springsource.org.apache.commons.dbcp-1.2.2.osgi.jar<br>com.springsource.org.apache.commons.pool-1.5.3.jar</p>
</blockquote>
</li>
<li><p>编写配置文件：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 DBCP 连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring04"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"541638"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用方法类似。</p>
<h4 id="管理-C3P0-连接池"><a href="#管理-C3P0-连接池" class="headerlink" title="管理 C3P0 连接池"></a>管理 C3P0 连接池</h4><ul>
<li><p>先引入 C3P0 的 jar 包</p>
<blockquote>
<p>com.springsource.com.mchange.v2.c3p0-0.9.1.2.jar</p>
</blockquote>
</li>
<li><p>编写配置文件：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 C3P0 连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring04"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"541638"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用方法类似。</p>
<h2 id="Spring-框架的-JDBC-模板的简单操作"><a href="#Spring-框架的-JDBC-模板的简单操作" class="headerlink" title="Spring 框架的 JDBC 模板的简单操作"></a>Spring 框架的 JDBC 模板的简单操作</h2><h3 id="增删改查的操作"><a href="#增删改查的操作" class="headerlink" title="增删改查的操作"></a>增删改查的操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 JDBC 的模板类，使用 IoC 的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into t_account values (null,?,?)"</span>, <span class="string">"小关"</span>, <span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update t_account set name = ? where id = ? "</span>, <span class="string">"小马"</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"delete from t_account where id = ? "</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试查询：通过主键查询一条记录</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Account account = jdbcTemplate.queryForObject(<span class="string">"select * from t_account where id = ?"</span>, <span class="keyword">new</span> BeanMapper(), <span class="number">1</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有的数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from t_account"</span>, <span class="keyword">new</span> BeanMapper());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自己手动封装数据（一行一行封装数据）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeanMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">        account.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">        account.setMoney(rs.getDouble(<span class="string">"money"</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询部分所需要的 JavaBean：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> + <span class="string">"id="</span> + id + <span class="string">", name='"</span> + name + <span class="string">'\''</span> + <span class="string">", money="</span> + money + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/spring0400.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;Spring JDBC 模板技术&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Spring AOP 面向切面编程</title>
    <link href="http://yoursite.com/JavaWeb-Spring03.html"/>
    <id>http://yoursite.com/JavaWeb-Spring03.html</id>
    <published>2018-08-07T04:36:23.000Z</published>
    <updated>2018-08-12T08:46:39.135Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/spring0300.png"></div>

<p id="div-border-left-blue">Spring AOP 面向切面编程</p>

<a id="more"></a>
<hr>
<h1 id="Spring-框架核心功能之-AOP-技术"><a href="#Spring-框架核心功能之-AOP-技术" class="headerlink" title="Spring 框架核心功能之 AOP 技术"></a>Spring 框架核心功能之 AOP 技术</h1><hr>
<h2 id="AOP-的概述"><a href="#AOP-的概述" class="headerlink" title="AOP 的概述"></a>AOP 的概述</h2><h3 id="什么是-AOP-的技术？"><a href="#什么是-AOP-的技术？" class="headerlink" title="什么是 AOP 的技术？"></a>什么是 AOP 的技术？</h3><ul>
<li>在软件业，AOP 为 Aspect Oriented Programming 的缩写，意为：<code>面向切面编程</code>。</li>
<li>AOP 是一种编程范式，隶属于软工范畴，指导开发者如何组织程序结构。</li>
<li>AOP 最早由 AOP 联盟的组织提出的，制定了一套规范。Spring 将 AOP 思想引入到框架中，必须遵守 AOP 联盟的规范。</li>
<li>通过<code>预编译方式和运行期动态代理</code>实现程序功能的统一维护的一种技术。</li>
<li>AOP 是 <code>OOP 的延续</code>，是软件开发中的一个热点，也是 Spring 框架中的一个重要内容，是函数式编程的一种衍生范型。</li>
<li>利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<code>耦合度降低</code>，提高程序的<code>可重用性</code>，同时提高了开发的效率。</li>
</ul>
<ol>
<li>AOP：面向切面编程。(思想————解决 <code>OOP</code> 遇到一些问题)</li>
<li>AOP 采取横向抽取机制，取代了传统纵向继承体系重复性代码（性能监视、事务管理、安全检查、缓存）</li>
</ol>
<h3 id="为什么要学习-AOP"><a href="#为什么要学习-AOP" class="headerlink" title="为什么要学习 AOP"></a>为什么要学习 AOP</h3><ul>
<li>可以在不修改源代码的前提下，对程序进行增强！</li>
</ul>
<h2 id="Spring-框架的-AOP-的底层实现"><a href="#Spring-框架的-AOP-的底层实现" class="headerlink" title="Spring 框架的 AOP 的底层实现"></a>Spring 框架的 AOP 的底层实现</h2><h3 id="代理方式"><a href="#代理方式" class="headerlink" title="代理方式"></a>代理方式</h3><p>Srping 框架的 AOP 技术底层也是采用的代理技术，代理的方式提供了两种</p>
<ul>
<li><p>基于 <code>JDK</code> 的动态代理</p>
<blockquote>
<p>必须是面向接口的，只有实现了具体接口的类才能生成代理对象</p>
</blockquote>
</li>
<li><p>基于 <code>CGLIB</code> 动态代理</p>
<blockquote>
<p>对于没有实现了接口的类，也可以产生代理，产生这个类的子类的方式</p>
</blockquote>
</li>
</ul>
<p>Spring 的传统 AOP 中根据类是否实现接口，来采用不同的代理方式</p>
<ul>
<li><p>如果实现类接口，使用 <code>JDK</code> 动态代理完成 AOP</p>
</li>
<li><p>如果没有实现接口，采用 <code>CGLIB</code> 动态代理完成 AOP</p>
</li>
</ul>
<h3 id="JDK-的动态代理（代码了解，理解原理）"><a href="#JDK-的动态代理（代码了解，理解原理）" class="headerlink" title="JDK 的动态代理（代码了解，理解原理）"></a>JDK 的动态代理（代码了解，理解原理）</h3><p>使用 <code>Proxy</code> 类来生成代理对象的一些代码如下：</p>
<p><strong>注意</strong>：得有接口才能使用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 JDK 的方式生成代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxyUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getProcy</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用 Proxy 生成代理对象</span></span><br><span class="line">        UserDao proxy = (UserDao) Proxy.newProxyInstance(dao.getClass().getClassLoader(), dao.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">// 代理对象方法一执行，invoke 方法就会执行一次</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">// 代理增强方法</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"save"</span>.equals(method.getName()))&#123;</span><br><span class="line">                    System.out.println(<span class="string">"记录日志…"</span>);</span><br><span class="line">                    <span class="comment">// 开启事务</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 提交事务</span></span><br><span class="line">                <span class="comment">// 让 dao 类的 save 或者 update 方法正常的执行下去</span></span><br><span class="line">                <span class="keyword">return</span> method.invoke(dao, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserDao dao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        <span class="comment">// 原始的调用方式</span></span><br><span class="line">        dao.save();</span><br><span class="line">        dao.update();</span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line">        <span class="comment">// 使用工具类，获取到代理对象</span></span><br><span class="line">        UserDao procy = MyProxyUtils.getProcy(dao);</span><br><span class="line">        <span class="comment">// 调用代理对象的方法</span></span><br><span class="line">        procy.save();</span><br><span class="line">        procy.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CGLIB-的代理技术（了解）"><a href="#CGLIB-的代理技术（了解）" class="headerlink" title="CGLIB 的代理技术（了解）"></a>CGLIB 的代理技术（了解）</h3><ul>
<li>引入 <code>CBLIB</code> 的开发包<blockquote>
<p>如果想使用 <code>CGLIB</code> 的技术来生成代理对象，那么需要引入 <code>CGLIB</code> 的开发的 <code>jar</code> 包，在 <code>Spring</code> 框架核心包中已经引入了 <code>CGLIB</code> 的开发包了。所以直接引入 <code>Spring</code> 核心开发包即可！</p>
</blockquote>
</li>
</ul>
<h4 id="编写相关的代码"><a href="#编写相关的代码" class="headerlink" title="编写相关的代码"></a>编写相关的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglibUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 CGLIB 方式生成代理对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BookDaoImpl <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 设置父类</span></span><br><span class="line">        enhancer.setSuperclass(BookDaoImpl.class);</span><br><span class="line">        <span class="comment">// 设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">// 代理对象的方法执行，回调函数就会执行</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"save"</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"记录日志…"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 生成代理对象</span></span><br><span class="line">        BookDaoImpl proxy = (BookDaoImpl) enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 使用 CGLIB 生成代理对象</span></span><br><span class="line">	BookDaoImpl proxy = MyCglibUtils.getProxy();</span><br><span class="line">	proxy.save();</span><br><span class="line">	proxy.update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Spring-基于-AspectJ-的-AOP-的开发"><a href="#Spring-基于-AspectJ-的-AOP-的开发" class="headerlink" title="Spring 基于 AspectJ 的 AOP 的开发"></a>Spring 基于 AspectJ 的 AOP 的开发</h1><hr>
<h2 id="AOP-的相关术语"><a href="#AOP-的相关术语" class="headerlink" title="AOP 的相关术语"></a>AOP 的相关术语</h2><ol>
<li><code>Joinpoint(连接点)</code>————所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点</li>
<li><code>Pointcut(切入点)</code>————所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义</li>
<li><code>Advice(通知/增强)</code>————所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知.通知分为前置通知,后置通知,异常通知,最终通知,环绕通知(切面要完成的功能)</li>
<li><code>Introduction(引介)</code>————引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field</li>
<li><code>Target(目标对象)</code>————代理的目标对象</li>
<li><code>Weaving(织入)</code>————是指把增强应用到目标对象来创建新的代理对象的过程</li>
<li><code>Proxy（代理）</code>————一个类被 AOP 织入增强后，就产生一个结果代理类</li>
<li><code>Aspect(切面)</code>————是切入点和通知的结合，需要自己来编写和配置的</li>
</ol>
<p>具体点就是：</p>
<blockquote>
<p>连接点：UserDaoImpl 中的所有方法都可以称为连接点。<br>切入点：拦截哪些方法（对哪些方法进行增强）。<br>通知/增强：具体做什么功能，比如记录日志。<br>目标对象：UserDaoImpl 称为目标对象。<br>织入：把增强添加到目标对象，生成代理对象的过程。<br>代理：生成的代理对象。<br>切面：切入点 + 通知，组合称为切面。通知需要自己来编写，切入点需要配置。</p>
</blockquote>
<h2 id="AspectJ-的-XML-方式完成-AOP-开发"><a href="#AspectJ-的-XML-方式完成-AOP-开发" class="headerlink" title="AspectJ 的 XML 方式完成 AOP 开发"></a>AspectJ 的 XML 方式完成 AOP 开发</h2><h3 id="第一个案例"><a href="#第一个案例" class="headerlink" title="第一个案例"></a>第一个案例</h3><h4 id="步骤一：创建-JavaWEB-项目，引入具体的开发的-jar-包"><a href="#步骤一：创建-JavaWEB-项目，引入具体的开发的-jar-包" class="headerlink" title="步骤一：创建 JavaWEB 项目，引入具体的开发的 jar 包"></a>步骤一：创建 JavaWEB 项目，引入具体的开发的 jar 包</h4><ul>
<li><p>先引入 Spring 框架开发的基本开发包（6个）</p>
</li>
<li><p>再引入 Spring 框架的 AOP 的开发包（4个）</p>
</li>
<li><ul>
<li>Spring 的传统 <code>AOP</code> 的开发的包<blockquote>
<p>spring-aop-4.2.4.RELEASE.jar<br>com.springsource.org.aopalliance-1.0.0.jar</p>
</blockquote>
</li>
</ul>
</li>
<li><ul>
<li><code>aspectJ</code> 的开发包<blockquote>
<p>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar<br>spring-aspects-4.2.4.RELEASE.jar</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="步骤二：创建-Spring-的配置文件，引入具体的-AOP-的-schema-约束"><a href="#步骤二：创建-Spring-的配置文件，引入具体的-AOP-的-schema-约束" class="headerlink" title="步骤二：创建 Spring 的配置文件，引入具体的 AOP 的 schema 约束"></a>步骤二：创建 Spring 的配置文件，引入具体的 AOP 的 schema 约束</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤三：创建包结构，编写具体的接口和实现类"><a href="#步骤三：创建包结构，编写具体的接口和实现类" class="headerlink" title="步骤三：创建包结构，编写具体的接口和实现类"></a>步骤三：创建包结构，编写具体的接口和实现类</h4><ul>
<li>com.renkaigis.demo4<blockquote>
<p>CustomerDao            – 接口<br>CustomerDaoImpl        – 实现类</p>
</blockquote>
</li>
</ul>
<h4 id="步骤四：将目标类配置到-Spring-中"><a href="#步骤四：将目标类配置到-Spring-中" class="headerlink" title="步骤四：将目标类配置到 Spring 中"></a>步骤四：将目标类配置到 Spring 中</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置客户的 dao--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo4.CustomerDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤五：定义切面类"><a href="#步骤五：定义切面类" class="headerlink" title="步骤五：定义切面类"></a>步骤五：定义切面类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类：切入点 + 通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectXml</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知（具体的增强）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"记录日志…"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="步骤六：在配置文件中定义切面类"><a href="#步骤六：在配置文件中定义切面类" class="headerlink" title="步骤六：在配置文件中定义切面类"></a>步骤六：在配置文件中定义切面类</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectXml"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo4.MyAspectXml"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤七：在配置文件中完成aop的配置"><a href="#步骤七：在配置文件中完成aop的配置" class="headerlink" title="步骤七：在配置文件中完成aop的配置"></a>步骤七：在配置文件中完成aop的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--引入切面类，配置切面类的切入点 + 通知（类型）--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspectXml"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置前置通知，save 方法执行之前，增强的方法会执行--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--定义通知类型：切面类的方法和切入点的表达式 execution(public void com.renkaigis.demo4.CustomerDaoImpl.save()) --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"log"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public void com.renkaigis.demo4.CustomerDaoImpl.save())"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="完成测试"><a href="#完成测试" class="headerlink" title="完成测试"></a>完成测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 AOP 功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"customerDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerDao.save();</span><br><span class="line">        customerDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="切入点的表达式"><a href="#切入点的表达式" class="headerlink" title="切入点的表达式"></a>切入点的表达式</h3><p>在配置切入点的时候，需要定义表达式，重点的格式如下：<code>execution(public * *(..))</code>，具体展开如下：</p>
<ul>
<li><p>切入点表达式的格式如下：</p>
<blockquote>
<p>execution([修饰符] 返回值类型 包名.类名.方法名(参数))</p>
</blockquote>
</li>
<li><p>修饰符可以省略不写，不是必须要出现的。</p>
</li>
<li><p>返回值类型是不能省略不写的，根据你的方法来编写返回值。可以使用 <code>*</code> 代替。</p>
</li>
<li><p>包名例如：com.renkaigis.demo4.BookDaoImpl</p>
<blockquote>
<p>首先 com 是不能省略不写的，但是可以使用 <code>*</code> 代替<br>中间的包名可以使用 <code>*</code> 号代替<br>如果想省略中间的包名可以使用 <code>*..*</code> </p>
</blockquote>
</li>
<li><p>类名也可以使用 <code>*</code> 号代替，也有类似的写法：<code>*DaoImpl</code></p>
</li>
<li><p>方法也可以使用 <code>*</code> 号代替，<code>save*()</code></p>
</li>
<li><p>参数如果是一个参数可以使用 <code>*</code> 号代替，如果想代表任意参数使用 <code>..</code></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspectXml"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--切入点的表达式：--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--1. execution() 固定的，不能不写--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"log"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public void com.renkaigis.demo4.CustomerDaoImpl.save())"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--2. pulbic 可以省略不写--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"log"</span> <span class="attr">pointcut</span>=<span class="string">"execution(void com.renkaigis.demo4.CustomerDaoImpl.save())"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--3. void，返回值写 * 表示任意的返回值，返回值类型不能不写--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"log"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.renkaigis.demo4.CustomerDaoImpl.save())"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--4. 包名可以使用 * 来代替，com.renkaigis.*，简写 *..*，不能不写--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"log"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* *..*.CustomerDaoImpl.save())"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--5. 类名也可以使用 * 号代替，也有类似的写法：*DaoIml--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"log"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* *..*.*DaoImpl.save())"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--6. 方法也可以使用 * 号代替，save*()--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"log"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* *..*.*DaoImpl.save*())"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--7. 方法的参数：可以使用 * 号代替，如果想代表任意参数使用 .. --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"log"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* *..*.*DaoImpl.save*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="AOP的通知类型"><a href="#AOP的通知类型" class="headerlink" title="AOP的通知类型"></a>AOP的通知类型</h3><ol>
<li><p>前置通知</p>
<blockquote>
<p>在目标类的方法执行之前执行。<br>配置文件信息：<code>&lt;aop:after method=&quot;before&quot; pointcut-ref=&quot;myPointcut3&quot;/&gt;</code><br>应用：可以对方法的参数来做校验</p>
</blockquote>
</li>
<li><p>最终通知</p>
<blockquote>
<p>在目标类的方法执行之后执行，如果程序出现了异常，最终通知也会执行。<br>配置文件信息：<code>&lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;myPointcut3&quot;/&gt;</code><br>应用：例如像释放资源</p>
</blockquote>
</li>
<li><p>后置通知</p>
<blockquote>
<p>方法正常执行后的通知。出现异常，不会执行。<br>配置文件信息：<code>&lt;aop:after-returning method=&quot;afterReturning&quot; pointcut-ref=&quot;myPointcut2&quot;/&gt;</code><br>应用：可以修改方法的返回值</p>
</blockquote>
</li>
<li><p>异常抛出通知</p>
<blockquote>
<p>在抛出异常后通知<br>配置文件信息：<code>&lt;aop:after-throwing method=&quot;afterThorwing&quot; pointcut-ref=&quot;myPointcut3&quot;/&gt;</code><br>应用：包装异常的信息</p>
</blockquote>
</li>
<li><p>环绕通知</p>
<blockquote>
<p>方法的执行前后执行。<br>配置文件信息：<code>&lt;aop:around method=&quot;around&quot; pointcut-ref=&quot;myPointcut2&quot;/&gt;</code><br>要注意：目标的方法默认不执行，需要使用 ProceedingJoinPoint 对来让目标对象的方法执行。</p>
</blockquote>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 环绕通知：方法执行之前和方法执行之后进行通知</span></span><br><span class="line"><span class="comment">* 默认的情况下，目标对象的方法不能执行，需要手动让目标对象的方法执行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"环绕通知1…"</span>);</span><br><span class="line">	<span class="comment">// 手动让目标对象的方法执行</span></span><br><span class="line">	joinPoint.proceed();</span><br><span class="line">	System.out.println(<span class="string">"环绕通知2…"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spring框架的AOP技术之注解方式"><a href="#Spring框架的AOP技术之注解方式" class="headerlink" title="Spring框架的AOP技术之注解方式"></a>Spring框架的AOP技术之注解方式</h2><h3 id="第一个案例-1"><a href="#第一个案例-1" class="headerlink" title="第一个案例"></a>第一个案例</h3><h4 id="步骤一：创建-JavaWEB-项目，引入具体的开发的-jar-包-1"><a href="#步骤一：创建-JavaWEB-项目，引入具体的开发的-jar-包-1" class="headerlink" title="步骤一：创建 JavaWEB 项目，引入具体的开发的 jar 包"></a>步骤一：创建 JavaWEB 项目，引入具体的开发的 jar 包</h4><p>同上。</p>
<h4 id="步骤二：创建-Spring-的配置文件，引入具体的-AOP-的-schema-约束-1"><a href="#步骤二：创建-Spring-的配置文件，引入具体的-AOP-的-schema-约束-1" class="headerlink" title="步骤二：创建 Spring 的配置文件，引入具体的 AOP 的 schema 约束"></a>步骤二：创建 Spring 的配置文件，引入具体的 AOP 的 schema 约束</h4><p>同上。</p>
<p>这里我引入一个<strong>最全的约束</strong>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤三：创建包结构，编写具体的接口和实现类-1"><a href="#步骤三：创建包结构，编写具体的接口和实现类-1" class="headerlink" title="步骤三：创建包结构，编写具体的接口和实现类"></a>步骤三：创建包结构，编写具体的接口和实现类</h4><ul>
<li>com.renkaigis.demo5<blockquote>
<p>CustomerDao————接口<br>CustomerDaoImpl————实现类</p>
</blockquote>
</li>
</ul>
<h4 id="步骤四：将目标类配置到-Spring-中-1"><a href="#步骤四：将目标类配置到-Spring-中-1" class="headerlink" title="步骤四：将目标类配置到 Spring 中"></a>步骤四：将目标类配置到 Spring 中</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置客户的 dao--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo4.CustomerDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤四：将目标类配置到-Spring-中-2"><a href="#步骤四：将目标类配置到-Spring-中-2" class="headerlink" title="步骤四：将目标类配置到 Spring 中"></a>步骤四：将目标类配置到 Spring 中</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置目标对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo5.CustomerDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤五：定义切面类-1"><a href="#步骤五：定义切面类-1" class="headerlink" title="步骤五：定义切面类"></a>步骤五：定义切面类</h4><h5 id="添加切面和通知的注解"><a href="#添加切面和通知的注解" class="headerlink" title="添加切面和通知的注解"></a>添加切面和通知的注解</h5><ul>
<li><p><code>@Aspect</code>————定义切面类的注解</p>
</li>
<li><p>通知类型（<code>注解的参数是切入点的表达式</code>）</p>
<blockquote>
<p>@Before————前置通知<br>@AfterReturing————后置通知<br>@Around————环绕通知<br>@After————最终通知<br>@AfterThrowing————异常抛出通知</p>
</blockquote>
</li>
</ul>
<h5 id="具体的代码如下"><a href="#具体的代码如下" class="headerlink" title="具体的代码如下"></a>具体的代码如下</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解方式的切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectAnno</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"execution(public * com.renkaigis.demo5.CustomerDaoImpl.save())"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"记录日志…"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="步骤六：在配置文件中定义切面类-1"><a href="#步骤六：在配置文件中定义切面类-1" class="headerlink" title="步骤六：在配置文件中定义切面类"></a>步骤六：在配置文件中定义切面类</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectAnno"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo5.MyAspectAnno"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤七：在配置文件中开启自动代理"><a href="#步骤七：在配置文件中开启自动代理" class="headerlink" title="步骤七：在配置文件中开启自动代理"></a>步骤七：在配置文件中开启自动代理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤八：完成测试"><a href="#步骤八：完成测试" class="headerlink" title="步骤八：完成测试"></a>步骤八：完成测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AOP 注解方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"customerDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerDao.save();</span><br><span class="line">        customerDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><h3 id="通知类型-1"><a href="#通知类型-1" class="headerlink" title="通知类型"></a>通知类型</h3><ul>
<li><code>@Before</code>————前置通知</li>
<li><code>@AfterReturing</code>————后置通知</li>
<li><code>@Around</code>————环绕通知（目标对象方法默认不执行的，需要手动执行）</li>
<li><code>@After</code>————最终通知</li>
<li><code>@AfterThrowing</code>————异常抛出通知</li>
</ul>
<h3 id="配置通用的切入点"><a href="#配置通用的切入点" class="headerlink" title="配置通用的切入点"></a>配置通用的切入点</h3><ul>
<li>使用 <code>@Pointcut</code> 定义通用的切入点</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectAnno</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 引入自定义切入点</span></span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"MyAspectAnno.fn()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"记录日志…"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义切入点，<span class="doctag">@Pointcut</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(value = <span class="string">"execution(public * com.renkaigis.demo5.CustomerDaoImpl.save())"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/spring0300.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;Spring AOP 面向切面编程&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Spring IoC 控制反转及整合 JUnit 单元测试</title>
    <link href="http://yoursite.com/JavaWeb-Spring02.html"/>
    <id>http://yoursite.com/JavaWeb-Spring02.html</id>
    <published>2018-08-05T02:27:56.000Z</published>
    <updated>2018-08-11T02:18:30.631Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/spring0200.png"></div>

<p id="div-border-left-blue">Spring IoC 控制反转 &amp; 整合 JUnit 单元测试。</p>

<a id="more"></a>
<hr>
<h1 id="Spring-框架-IoC-功能之配置文件方式"><a href="#Spring-框架-IoC-功能之配置文件方式" class="headerlink" title="Spring 框架 IoC 功能之配置文件方式"></a>Spring 框架 IoC 功能之配置文件方式</h1><hr>
<h2 id="Spring-框架中-lt-bean-gt-标签的配置"><a href="#Spring-框架中-lt-bean-gt-标签的配置" class="headerlink" title="Spring 框架中 &lt;bean&gt; 标签的配置"></a>Spring 框架中 <code>&lt;bean&gt;</code> 标签的配置</h2><h3 id="id-属性和-name-属性的区别"><a href="#id-属性和-name-属性的区别" class="headerlink" title="id 属性和 name 属性的区别"></a>id 属性和 name 属性的区别</h3><ul>
<li><p><code>id</code>————Bean 起个名字，在约束中采用 ID 的约束，唯一</p>
<blockquote>
<p>取值要求：必须以字母开始，可以使用字母、数字、连字符、下划线、句话、冒号    id：不能出现特殊字符</p>
</blockquote>
</li>
<li><p><code>name</code>————Bean 起个名字，没有采用 ID 的约束（了解）</p>
<blockquote>
<p>取值要求：name 允许出现特殊字符，如果 <code>&lt;bean&gt;</code> 没有 id 的话，name 可以当做 id 使用<br>Spring 框架在整合 <code>Struts1</code> 的框架的时候，<code>Struts1</code> 的框架的访问路径是以 <code>/</code> 开头的，例如：<code>/bookAction</code></p>
</blockquote>
</li>
</ul>
<h3 id="class-属性"><a href="#class-属性" class="headerlink" title="class 属性"></a>class 属性</h3><p>Bean 对象的全路径：<code>com.renkaigis.demo1.UserServiceImpl</code></p>
<h3 id="scope-属性"><a href="#scope-属性" class="headerlink" title="scope 属性"></a>scope 属性</h3><p>scope 属性代表 Bean 的作用范围</p>
<blockquote>
<p>singleton————单例（默认值）<br><code>prototype</code>————多例，在 Spring 框架整合 <code>Struts2</code> 框架的时候，Action 类也需要交给 Spring 做管理，配置把 <code>Action 类配置成多例</code>！！<br>request————应用在 Web 项目中，每次 HTTP 请求都会创建一个新的 Bean<br>session————应用在 Web 项目中，同一个 HTTP Session 共享一个 Bean<br>globalsession————应用在 Web 项目中，多服务器间的 session</p>
</blockquote>
<h3 id="Bean-对象的创建和销毁的两个属性配置（了解）"><a href="#Bean-对象的创建和销毁的两个属性配置（了解）" class="headerlink" title="Bean 对象的创建和销毁的两个属性配置（了解）"></a>Bean 对象的创建和销毁的两个属性配置（了解）</h3><p>Spring 初始化 bean 或销毁 bean 时，有时需要作一些处理工作，因此 spring 可以在创建和销毁 bean 的时候调用 bean 的两个生命周期方法</p>
<ul>
<li><p>init-method————当 bean 被载入到容器的时候调用 <code>init-method</code> 属性指定的方法</p>
</li>
<li><p>destroy-method————当bean从容器中删除的时候调用 <code>destroy-method</code> 属性指定的方法</p>
</li>
</ul>
<p>想查看 destroy-method 的效果，有如下条件</p>
<blockquote>
<p>① <code>scope = &quot;singleton&quot;</code>有效<br>② web 容器中会自动调用，但是 main 函数或测试用例需要手动调用（需要使用 <code>ClassPathXmlApplicationContext</code> 的 <code>close()</code> 方法）</p>
</blockquote>
<h2 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h2><p><code>IoC</code> 和 <code>DI</code> 的概念</p>
<ul>
<li>IoC————Inverse of Control，控制反转，将对象的创建权反转给 Spring！！</li>
<li>DI————Dependency Injection，依赖注入，在 Spring 框架负责创建 Bean 对象时，动态的将依赖对象注入到 Bean 组件中！！</li>
</ul>
<p><code>DI（依赖注入）</code>：</p>
<ul>
<li>例如：如果 <code>UserServiceImpl</code> 的实现类中有一个属性，那么使用 Spring 框架的 <code>IoC</code> 功能时，可以通过依赖注入把该属性的值传入进来！！</li>
<li>具体的配置如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo1.UserServiceImpl"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小风"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Spring-框架的属性注入"><a href="#Spring-框架的属性注入" class="headerlink" title="Spring 框架的属性注入"></a>Spring 框架的属性注入</h3><p>对于类成员变量，常用的注入方式有两种</p>
<ul>
<li>构造函数注入</li>
<li>属性 <code>setter</code> 方法注入</li>
</ul>
<h4 id="构造方法的注入方式"><a href="#构造方法的注入方式" class="headerlink" title="构造方法的注入方式"></a>构造方法的注入方式</h4><ul>
<li>编写 Java 类，提供构造方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car1</span><span class="params">(String cname, Double price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cname = cname;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Car1&#123;"</span> + <span class="string">"cname='"</span> + cname + <span class="string">'\''</span> + <span class="string">", price="</span> + price + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>编写配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--演示构造方法注入的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car1"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Car1"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"cname"</span> <span class="attr">value</span>=<span class="string">"奇瑞QQ"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"25000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>测试：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">	Car1 c1 = (Car1) ac.getBean(<span class="string">"car1"</span>);</span><br><span class="line">	System.out.println(c1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="setter-方法的注入方式"><a href="#setter-方法的注入方式" class="headerlink" title="setter 方法的注入方式"></a>setter 方法的注入方式</h4><ul>
<li><p>编写 Java 的类，提供属性和对应的 set 方法即可</p>
</li>
<li><p>编写配置文件</p>
</li>
<li><p>如果 Java 类的属性是另一个 Java 的类，那么需要怎么来注入值呢？</p>
<blockquote>
<p><code>&lt;property name=&quot;name&quot; rel=&quot;具体的Bean的ID或者name的值&quot;/&gt;</code></p>
</blockquote>
</li>
<li><p>例如：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Person"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pname"</span> <span class="attr">value</span>=<span class="string">"美美"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car2"</span> <span class="attr">ref</span>=<span class="string">"car2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Spring-2-5-版本：p-名称空间的注入（了解）"><a href="#Spring-2-5-版本：p-名称空间的注入（了解）" class="headerlink" title="Spring 2.5 版本：p 名称空间的注入（了解）"></a>Spring 2.5 版本：p 名称空间的注入（了解）</h3><h4 id="先引入-p-名称空间"><a href="#先引入-p-名称空间" class="headerlink" title="先引入 p 名称空间"></a>先引入 p 名称空间</h4><ul>
<li>在 <code>schema</code> 的名称空间中加入该行：<code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></li>
</ul>
<h4 id="使用-p-名称空间的语法"><a href="#使用-p-名称空间的语法" class="headerlink" title="使用 p 名称空间的语法"></a>使用 p 名称空间的语法</h4><ul>
<li>p:属性名 = “”</li>
<li>p:属性名-ref = “”</li>
</ul>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--采用 p 名称空间注入的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car1"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Car1"</span> <span class="attr">p:cname</span>=<span class="string">"保时捷"</span> <span class="attr">p:price</span>=<span class="string">"1000000"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Spring-3-0-版本：SpEL注入方式（了解）"><a href="#Spring-3-0-版本：SpEL注入方式（了解）" class="headerlink" title="Spring 3.0 版本：SpEL注入方式（了解）"></a>Spring 3.0 版本：SpEL注入方式（了解）</h3><p>SpEL：Spring Expression Language 是 Spring 的表达式语言，有一些自己的语法。</p>
<ul>
<li>语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;SpEL&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpEL的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo4.Person"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pname"</span> <span class="attr">value</span>=<span class="string">"#&#123;'小风'&#125;"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car2"</span> <span class="attr">value</span>=<span class="string">"#&#123;car2&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="数组，集合（List-Set-Map），Properties-等的注入"><a href="#数组，集合（List-Set-Map），Properties-等的注入" class="headerlink" title="数组，集合（List,Set,Map），Properties 等的注入"></a>数组，集合（List,Set,Map），Properties 等的注入</h3><h4 id="数组和-List-集合"><a href="#数组和-List-集合" class="headerlink" title="数组和 List 集合"></a>数组和 List 集合</h4><p>如果是数组或者List集合，注入配置文件的方式是一样的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示集合注入的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">    <span class="keyword">private</span> String[] arrs;</span><br><span class="line">    <span class="comment">// 集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArrs</span><span class="params">(String[] arrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arrs = arrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> + <span class="string">"arrs="</span> + Arrays.toString(arrs) + <span class="string">", list="</span> + list + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo3.User"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--注入数组--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrs"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>嘿嘿<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--注入集合--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>天哪<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>god<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 测试注入数组</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">	User user = (User) ac.getBean(<span class="string">"user"</span>);</span><br><span class="line">	System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 测试注入集合</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">	User user = (User) ac.getBean(<span class="string">"user"</span>);</span><br><span class="line">	System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h4><p>如果是 Set 集合，注入的配置文件方式如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注入 set 集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sets"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Map-集合"><a href="#Map-集合" class="headerlink" title="Map 集合"></a>Map 集合</h4><p>如果是 Map 集合，注入的配置方式如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注入 map--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"aaa"</span> <span class="attr">value</span>=<span class="string">"小瓜"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"bbb"</span> <span class="attr">value</span>=<span class="string">"小宗"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="properties-属性文件"><a href="#properties-属性文件" class="headerlink" title="properties 属性文件"></a>properties 属性文件</h4><p>如果是 <code>properties</code> 属性文件的方式，注入的配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注入属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pro"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Spring-配置文件分开管理（了解）"><a href="#Spring-配置文件分开管理（了解）" class="headerlink" title="Spring 配置文件分开管理（了解）"></a>Spring 配置文件分开管理（了解）</h2><p>例如：在 src 的目录下又多创建了一个配置文件，现在是两个核心的配置文件，那么加载这两个配置文件的方式有两种！</p>
<ul>
<li>主配置文件中引入其他的配置文件:</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext2.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>工厂创建的时候直接加载多个配置文件:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>,<span class="string">"applicationContext2.xml"</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Spring-框架-IoC-功能之注解方式"><a href="#Spring-框架-IoC-功能之注解方式" class="headerlink" title="Spring 框架 IoC 功能之注解方式"></a>Spring 框架 IoC 功能之注解方式</h1><hr>
<h2 id="Spring框架-IoC-之注解方式快速入门"><a href="#Spring框架-IoC-之注解方式快速入门" class="headerlink" title="Spring框架 IoC 之注解方式快速入门"></a>Spring框架 IoC 之注解方式快速入门</h2><h3 id="步骤一：导入注解开发所有需要的-jar-包"><a href="#步骤一：导入注解开发所有需要的-jar-包" class="headerlink" title="步骤一：导入注解开发所有需要的 jar 包"></a>步骤一：导入注解开发所有需要的 jar 包</h3><ul>
<li><p>引入IoC容器必须的6个jar包</p>
<blockquote>
<p>spring-beans-4.2.4.RELEASE.jar<br>spring-context-4.2.4.RELEASE.jar<br>spring-core-4.2.4.RELEASE.jar<br>spring-expression-4.2.4.RELEASE.jar<br>com.springsource.org.apache.commons.logging-1.1.1.jar<br>com.springsource.org.apache.log4j-1.2.15.jar</p>
</blockquote>
</li>
<li><p>多引入一个：Spring框架的AOP的jar包，<code>spring-aop的jar包</code></p>
</li>
</ul>
<h3 id="步骤二：创建对应的包结构，编写-Java-的类"><a href="#步骤二：创建对应的包结构，编写-Java-的类" class="headerlink" title="步骤二：创建对应的包结构，编写 Java 的类"></a>步骤二：创建对应的包结构，编写 Java 的类</h3><ul>
<li>UserService————接口</li>
<li>UserServiceImpl————具体的实现类</li>
</ul>
<h3 id="步骤三：引入约束"><a href="#步骤三：引入约束" class="headerlink" title="步骤三：引入约束"></a>步骤三：引入约束</h3><p>在 src 的目录下，创建 <code>applicationContext.xml</code> 的配置文件，然后<code>引入约束</code>。注意：因为现在想使用注解的方式，那么引入的约束发生了变化。</p>
<ul>
<li>需要引入context的约束，具体的约束如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">	   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="步骤四：在-applicationContext-xml-配置文件中开启组件扫描"><a href="#步骤四：在-applicationContext-xml-配置文件中开启组件扫描" class="headerlink" title="步骤四：在 applicationContext.xml 配置文件中开启组件扫描"></a>步骤四：在 <code>applicationContext.xml</code> 配置文件中开启组件扫描</h3><ul>
<li>Spring的注解开发：组件扫描</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解的扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.renkaigis.demo1"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意：可以采用如下配置：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这样是扫描com.renkaigis包下所有的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.renkaigis"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="步骤五：在-UserServiceImpl-的实现类上添加注解"><a href="#步骤五：在-UserServiceImpl-的实现类上添加注解" class="headerlink" title="步骤五：在 UserServiceImpl 的实现类上添加注解"></a>步骤五：在 <code>UserServiceImpl</code> 的实现类上添加注解</h3><ul>
<li>@Component(value=”userService”)    – 相当于在XML的配置方式中 <bean id="userService" class="..."></bean></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span>(value = "userService")</span></span><br><span class="line"><span class="comment"> * 等价于</span></span><br><span class="line"><span class="comment"> * &lt;bean id="userService" class="com.renkaigis.demo1.UserServiceImpl"/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(value = <span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Spring!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="步骤六：编写测试代码"><a href="#步骤六：编写测试代码" class="headerlink" title="步骤六：编写测试代码"></a>步骤六：编写测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">	UserService us = (UserService) ac.getBean(<span class="string">"userService"</span>);</span><br><span class="line">	us.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spring-框架中-Bean-管理的常用注解"><a href="#Spring-框架中-Bean-管理的常用注解" class="headerlink" title="Spring 框架中 Bean 管理的常用注解"></a>Spring 框架中 Bean 管理的常用注解</h2><h3 id="类注解"><a href="#类注解" class="headerlink" title="类注解"></a>类注解</h3><ul>
<li><p><code>@Component</code>：组件。（作用在类上）</p>
</li>
<li><p>Spring 中提供 <code>@Component</code> 的三个衍生注解：（功能目前来讲是一致的）</p>
<blockquote>
<p><code>@Controller</code>————作用在WEB层<br><code>@Service</code>————作用在业务层<br><code>@Repository</code>————作用在持久层</p>
</blockquote>
</li>
<li><p>说明：这三个注解是为了让标注类本身的用途清晰，Spring在后续版本会对其增强</p>
</li>
</ul>
<h3 id="属性注解"><a href="#属性注解" class="headerlink" title="属性注解"></a>属性注解</h3><p>属性注入的注解（说明：使用注解注入的方式,可以不用提供 <code>set</code> 方法）</p>
<ul>
<li>如果是注入的普通类型，可以使用 value 注解<blockquote>
<p><code>@Value</code>————用于注入普通类型</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"小美"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Spring!"</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如果注入的是对象类型，使用如下注解</p>
<blockquote>
<p><code>@Autowired</code>————默认按类型进行自动装配，寻找实现类。缺点：实现类多的话就出错了</p>
</blockquote>
</li>
<li><p>如果想按名称注入</p>
<blockquote>
<p><code>@Qualifier</code>————强制使用名称注入</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 按类型自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"ud"</span>) <span class="comment">// 按名称注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Spring!"</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@Resource</code>————相当于 <code>@Autowired</code> 和 <code>@Qualifier</code> 一起使用<blockquote>
<p>强调：<code>@Resource</code> 是 Java 提供的注解<br>属性使用 <code>name</code>属性</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"ud"</span>)</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure>
<h2 id="Bean-的作用范围和生命周期的注解"><a href="#Bean-的作用范围和生命周期的注解" class="headerlink" title="Bean 的作用范围和生命周期的注解"></a>Bean 的作用范围和生命周期的注解</h2><h3 id="Bean-的作用范围注解"><a href="#Bean-的作用范围注解" class="headerlink" title="Bean 的作用范围注解"></a>Bean 的作用范围注解</h3><ul>
<li>注解为 <code>@Scope(value = &quot;prototype&quot;)</code>，作用在<code>类</code>上。值如下：<blockquote>
<p><code>singleton</code>————单例，默认值<br><code>prototype</code>————多例</p>
</blockquote>
</li>
</ul>
<h3 id="Bean-的生命周期的配置（了解）"><a href="#Bean-的生命周期的配置（了解）" class="headerlink" title="Bean 的生命周期的配置（了解）"></a>Bean 的生命周期的配置（了解）</h3><ul>
<li>注解如下：<blockquote>
<p><code>@PostConstruct</code>————相当于 <code>init-method</code><br><code>@PreDestroy</code>————相当于 <code>destroy-method</code></p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="Spring-框架整合-JUnit-单元测试"><a href="#Spring-框架整合-JUnit-单元测试" class="headerlink" title="Spring 框架整合 JUnit 单元测试"></a>Spring 框架整合 JUnit 单元测试</h1><hr>
<p>为了简化了 <code>JUnit</code> 的测试，使用 Spring 框架也可以整合测试。</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>要求：必须先有 <code>JUnit</code> 的环境（即已经导入了 <code>JUnit4</code> 的开发环境）！！</p>
<ul>
<li><p>步骤一：在程序中引入：<code>spring-test.jar</code></p>
</li>
<li><p>步骤二：在具体的测试类上<code>添加注解</code></p>
<blockquote>
<p>@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration(“classpath:applicationContext.xml”)</p>
</blockquote>
</li>
</ul>
<p><em>以后不用再自己 new 工厂了，配置文件会自动加载：</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"userService"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/spring0200.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;Spring IoC 控制反转 &amp;amp; 整合 JUnit 单元测试。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Spring 快速入门</title>
    <link href="http://yoursite.com/JavaWeb-Spring01.html"/>
    <id>http://yoursite.com/JavaWeb-Spring01.html</id>
    <published>2018-08-03T07:46:23.000Z</published>
    <updated>2018-08-10T06:40:08.210Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/spring0100.png"></div>

<p id="div-border-left-blue">Spring 快速入门。</p>

<a id="more"></a>
<hr>
<h1 id="Spring-框架的概述和入门"><a href="#Spring-框架的概述和入门" class="headerlink" title="Spring 框架的概述和入门"></a>Spring 框架的概述和入门</h1><hr>
<h2 id="什么是-Spring-框架"><a href="#什么是-Spring-框架" class="headerlink" title="什么是 Spring 框架"></a>什么是 Spring 框架</h2><h3 id="Spring-框架的概述"><a href="#Spring-框架的概述" class="headerlink" title="Spring 框架的概述"></a>Spring 框架的概述</h3><ul>
<li><p>Spring 是一个开放源代码的设计层面框架，他解决的是 <code>业务逻辑层</code> 和其他各层的松耦合问题。</p>
</li>
<li><p>Spring 是于 2003 年兴起的一个轻量级的 Java 开发框架，由 Rod Johnson 在其著作 《Expert One-On-One J2EE Development and Design》 中阐述的部分理念和原型衍生而来。</p>
</li>
<li><p>它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。</p>
</li>
<li><p>Spring 使用基本的 <code>JavaBean</code> 来完成以前只可能由 <code>EJB</code> 完成的事情。然而，Spring 的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何 Java 应用都可以从 Spring 中受益。</p>
</li>
<li><p>Spring 的核心是 <code>控制反转（IoC）</code> 和 <code>面向切面（AOP）</code>。简单来说，Spring 是一个分层的 <code>JavaSE/EEfull-stack（一站式）</code> 轻量级开源框架。</p>
</li>
<li><p>Java EE 开发分成三层结构</p>
<blockquote>
<p>WEB层        ———— Spring MVC<br>业务层    ———— Bean管理：（IoC）<br>持久层    ———— Spring 的 JDBC 模板。ORM 模板用于整合其他的持久层框架。</p>
</blockquote>
</li>
</ul>
<h2 id="Spring-框架的特点"><a href="#Spring-框架的特点" class="headerlink" title="Spring 框架的特点"></a>Spring 框架的特点</h2><ul>
<li><p>方便解耦，简化开发</p>
<blockquote>
<p>Spring 就是一个大工厂，可以将所有对象创建和依赖关系维护，交给 Spring 管理。</p>
</blockquote>
</li>
<li><p>AOP 编程的支持</p>
<blockquote>
<p>Spring 提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</p>
</blockquote>
</li>
<li><p>声明式事务的支持</p>
<blockquote>
<p>只需要通过配置就可以完成对事务的管理，而无需手动编程。</p>
</blockquote>
</li>
<li><p>方便程序的测试</p>
<blockquote>
<p>Spring 对 Junit4 支持，可以通过注解方便的测试 Spring 程序。</p>
</blockquote>
</li>
<li><p>方便集成各种优秀框架</p>
<blockquote>
<p>Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts2、Hibernate、MyBatis、Quartz等）的直接支持。</p>
</blockquote>
</li>
<li><p>降低 JavaEE API 的使用难度</p>
<blockquote>
<p>Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些 API 应用难度大大降低。</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="Spring-框架的-IoC-核心功能快速入门"><a href="#Spring-框架的-IoC-核心功能快速入门" class="headerlink" title="Spring 框架的 IoC 核心功能快速入门"></a>Spring 框架的 IoC 核心功能快速入门</h1><hr>
<h2 id="IoC-的功能"><a href="#IoC-的功能" class="headerlink" title="IoC 的功能"></a>IoC 的功能</h2><ul>
<li><p>IoC（Inverse of Control），<code>控制反转</code>，将对象的创建权反转给 Spring ！！</p>
</li>
<li><p>使用 IoC 可以解决的程序 <code>耦合性高</code> 的问题！！</p>
</li>
</ul>
<h2 id="IoC-快速入门"><a href="#IoC-快速入门" class="headerlink" title="IoC 快速入门"></a>IoC 快速入门</h2><h3 id="步骤一：下载-Spring-框架的开发包"><a href="#步骤一：下载-Spring-框架的开发包" class="headerlink" title="步骤一：下载 Spring 框架的开发包"></a>步骤一：下载 Spring 框架的开发包</h3><ul>
<li><p>官网：<a href="http://spring.io/" target="_blank" rel="noopener">http://spring.io/</a></p>
</li>
<li><p>下载地址：<a href="http://repo.springsource.org/libs-release-local/org/springframework/spring" target="_blank" rel="noopener">http://repo.springsource.org/libs-release-local/org/springframework/spring</a></p>
</li>
<li><p>解压：（Spring 目录结构）</p>
<blockquote>
<p><code>docs</code>        ———— API 和开发规范<br><code>libs</code>        ———— jar 包和源码<br><code>schema</code>    ———— 约束</p>
</blockquote>
</li>
</ul>
<h3 id="步骤二：创建-JavaWEB-项目，引入-Spring-的开发包"><a href="#步骤二：创建-JavaWEB-项目，引入-Spring-的开发包" class="headerlink" title="步骤二：创建 JavaWEB 项目，引入 Spring 的开发包"></a>步骤二：创建 JavaWEB 项目，引入 Spring 的开发包</h3><h4 id="引入Spring框架IoC核心功能需要的具体的jar包"><a href="#引入Spring框架IoC核心功能需要的具体的jar包" class="headerlink" title="引入Spring框架IoC核心功能需要的具体的jar包"></a>引入Spring框架IoC核心功能需要的具体的jar包</h4><ul>
<li>Spring 框架的 IoC 的功能，那么根据 Spring 框架的体系结构图能看到，只需要引入如下的 jar 包<blockquote>
<p><code>Beans</code><br><code>Core</code><br><code>Context</code><br><code>Expression Language</code></p>
</blockquote>
</li>
</ul>
<h4 id="Spring-框架也需要引入日志相关的-jar-包"><a href="#Spring-框架也需要引入日志相关的-jar-包" class="headerlink" title="Spring 框架也需要引入日志相关的 jar 包"></a>Spring 框架也需要引入日志相关的 jar 包</h4><ul>
<li>spring-framework-3.0.2.RELEASE-dependencies/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1</li>
</ul>
<blockquote>
<p>com.springsource.org.apache.commons.logging-1.1.1.jar</p>
</blockquote>
<h4 id="引入-log4j-的jar包"><a href="#引入-log4j-的jar包" class="headerlink" title="引入 log4j 的jar包"></a>引入 log4j 的jar包</h4><ul>
<li>spring-framework-3.0.2.RELEASE-dependencies\org.apache.log4j\com.springsource.org.apache.log4j\1.2.15</li>
</ul>
<blockquote>
<p>com.springsource.org.apache.log4j-1.2.15.jar</p>
</blockquote>
<p><em>注意</em>：记得在 src 目录下导入 log4j 的属性文件 <code>log4j.properties</code></p>
<h3 id="步骤三：编写-Java-类"><a href="#步骤三：编写-Java-类" class="headerlink" title="步骤三：编写 Java 类"></a>步骤三：编写 Java 类</h3><p>创建对应的包结构，编写 Java 的类。</p>
<p><em>注意：</em>以后使用 Spring 框架做开发，都需要来编写接口与实现类！！</p>
<ul>
<li>com.renkaigis.demo1<blockquote>
<p>UserService            ———— 接口<br>UserServiceImpl        ———— 具体的实现类</p>
</blockquote>
</li>
</ul>
<h3 id="步骤四：编写配置文件-applicationContext-xml"><a href="#步骤四：编写配置文件-applicationContext-xml" class="headerlink" title="步骤四：编写配置文件 applicationContext.xml"></a>步骤四：编写配置文件 applicationContext.xml</h3><p>想把 UserServiceImpl 实现类的创建交给 <code>Spring</code> 框架来管理，需要创建 Spring 框架的配置文件，完成配置。</p>
<ul>
<li><p>在 src 目录下创建 <code>applicationContext.xml</code> 的配置文件，名称是可以任意的，但是一般都会使用默认名称！</p>
</li>
<li><p>引入 spring 的约束，需要先找到具体的约束头信息！</p>
</li>
<li><p>spring-framework-3.2.0.RELEASE\docs\spring-framework-reference\html\xsd-config.html</p>
</li>
<li><p>具体的约束如下：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">	   http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>完成 UserService 的配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring的快速入门 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo1.UserServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="步骤五：编写测试程序"><a href="#步骤五：编写测试程序" class="headerlink" title="步骤五：编写测试程序"></a>步骤五：编写测试程序</h3><p>采用 Spring 框架的 <code>工厂方式</code> 来获取到 UserService 接口的具体实现类！！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 IoC 的程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原来的方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserService usi = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        usi.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 Spring 框架的方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建工厂，加载核心配置文件</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 从工厂中获取对象</span></span><br><span class="line">        UserService us = (UserService) ac.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        <span class="comment">// 调用对象的方法执行</span></span><br><span class="line">        us.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spring-框架中的工厂（了解）"><a href="#Spring-框架中的工厂（了解）" class="headerlink" title="Spring 框架中的工厂（了解）"></a>Spring 框架中的工厂（了解）</h2><h3 id="ApplicationContext-接口"><a href="#ApplicationContext-接口" class="headerlink" title="ApplicationContext 接口"></a>ApplicationContext 接口</h3><ul>
<li><p>使用 <code>ApplicationContext</code> 工厂的接口，使用该接口可以获取到具体的 <code>Bean</code> 对象。</p>
</li>
<li><p>启动服务器的时候即创建好了对象。</p>
</li>
<li><p>该接口下有两个具体的实现类：</p>
<blockquote>
<p>ClassPathXmlApplicationContext————加载<code>类路径</code>下的 Spring 配置文件<br>FileSystemXmlApplicationContext————加载本地磁盘下的 Spring 配置文件</p>
</blockquote>
</li>
</ul>
<h3 id="BeanFactory工厂（过时）"><a href="#BeanFactory工厂（过时）" class="headerlink" title="BeanFactory工厂（过时）"></a>BeanFactory工厂（过时）</h3><p>（是Spring框架早期的创建Bean对象的工厂接口）</p>
<ul>
<li><p>启动服务器的时候不会创建对象，只有在第一次调用的时候才会创建。</p>
</li>
<li><p>使用 <code>BeanFactory</code> 接口也可以获取到 Bean 对象</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">	BeanFactory factory = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">"applicationContext.xml"</span>));</span><br><span class="line">	UserService us = (UserService) factory.getBean(<span class="string">"userService"</span>);</span><br><span class="line">	us.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="BeanFactory-和-ApplicationContext-的区别"><a href="#BeanFactory-和-ApplicationContext-的区别" class="headerlink" title="BeanFactory 和 ApplicationContext 的区别"></a><code>BeanFactory</code> 和 <code>ApplicationContext</code> 的区别</h3><ul>
<li><p>BeanFactory————BeanFactory 采取延迟加载，第一次 <code>1getBean</code> 时才会初始化 Bean</p>
</li>
<li><p>ApplicationContext————在加载 <code>applicationContext.xml</code> 时候就会创建具体的 Bean 对象的实例，还提供了一些其他的功能：</p>
<blockquote>
<p>事件传递<br>Bean 自动装配<br>各种不同应用层的 Context 实现</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/spring0100.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;Spring 快速入门。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 OGNL 表达式、Struts2 值栈与OGNL 特殊符号</title>
    <link href="http://yoursite.com/JavaWeb-Struts203.html"/>
    <id>http://yoursite.com/JavaWeb-Struts203.html</id>
    <published>2018-08-01T01:32:15.000Z</published>
    <updated>2018-08-10T06:46:27.972Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/struts20300.png"></div>

<p id="div-border-left-blue">OGNL 表达式  &amp;  Struts2 值栈  &amp;  OGNL 特殊符号<br></p>

<a id="more"></a>
<hr>
<h1 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h1><hr>
<h2 id="OGNL表达式概述（了解）"><a href="#OGNL表达式概述（了解）" class="headerlink" title="OGNL表达式概述（了解）"></a>OGNL表达式概述（了解）</h2><ul>
<li><p>OGNL 是 <code>Object Graphic Navigation Language</code>（对象图导航语言）的缩写</p>
<blockquote>
<p>所谓对象图，即以任意一个对象为根，通过 OGNL 可以访问与这个对象关联的其它对象</p>
<p>通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。</p>
</blockquote>
</li>
<li><p>Struts2 框架使用 <code>OGNL</code> 作为默认的表达式语言</p>
<blockquote>
<p><code>OGNL</code> 是一种比 <code>EL</code> 强大很多倍的语言<br><code>xwork</code> 提供 <code>OGNL</code> 表达式<br><code>ognl-3.0.5.jar</code></p>
</blockquote>
</li>
<li><p>OGNL 提供五大类功能</p>
<blockquote>
<p>支持对象方法调用<br>支持类静态的方法调用和值访问<br>访问 OGNL 上下文（OGNLcontext）和 ActionContext<br>支持赋值操作和表达式串联<br>操作集合对象</p>
</blockquote>
</li>
<li><p>测试的代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问对象的方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException</span>&#123;</span><br><span class="line">    OgnlContext context = <span class="keyword">new</span> OgnlContext();</span><br><span class="line">    <span class="comment">// 获取对象的方法</span></span><br><span class="line">    Object obj = Ognl.getValue(<span class="string">"'helloworld'.length()"</span>, context, context.getRoot());</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取OGNL上下文件的对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run3</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException</span>&#123;</span><br><span class="line">    OgnlContext context = <span class="keyword">new</span> OgnlContext();</span><br><span class="line">    context.put(<span class="string">"name"</span>, <span class="string">"美美"</span>);</span><br><span class="line">    <span class="comment">// 获取对象的方法</span></span><br><span class="line">    Object obj = Ognl.getValue(<span class="string">"#name"</span>, context, context.getRoot());</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从root栈获取值</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException</span>&#123;</span><br><span class="line">    OgnlContext context = <span class="keyword">new</span> OgnlContext();</span><br><span class="line">    Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">    c.setCust_name(<span class="string">"haha"</span>);</span><br><span class="line">    context.setRoot(c);</span><br><span class="line">    String name = (String) Ognl.getValue(<span class="string">"cust_name"</span>, context, context.getRoot());</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己测试的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ognl.Ognl;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlContext;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示 OGNL 表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException </span>&#123;</span><br><span class="line">        <span class="comment">// 上下文对象</span></span><br><span class="line">        OgnlContext context = <span class="keyword">new</span> OgnlContext();</span><br><span class="line">        <span class="comment">// 获取到根对象</span></span><br><span class="line">        Object root = context.getRoot();</span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        context.put(<span class="string">"name"</span>, <span class="string">"美美"</span>);</span><br><span class="line">        <span class="comment">// 获取值，注意表达式写法</span></span><br><span class="line">        Object value = Ognl.getValue(<span class="string">"#name"</span>, context, root);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="comment">//Object value = Ognl.getValue("'haha'.length()", context, root);</span></span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="在-Struts2-框架中使用-OGNL-表达式"><a href="#在-Struts2-框架中使用-OGNL-表达式" class="headerlink" title="在 Struts2 框架中使用 OGNL 表达式"></a>在 Struts2 框架中使用 OGNL 表达式</h2><p>1）. Struts2 引入了 <code>OGNL</code> 表达式，主要是在 <code>JSP</code> 页面中获取值栈中的值</p>
<p>2）. 具体在 Struts2 中怎么使用呢？如下步骤</p>
<blockquote>
<p>需要先在 JSP 页面中引入 <code>Struts2</code> 的标签库</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 <code>Struts2</code> 提供的标签中的标签</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"OGNL表达式"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>3）. 在 JSP 页面使用 <code>OGNL</code> 表达式</p>
<blockquote>
<p>访问对象方法</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"'hello'.length()"</span>/&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Struts2-框架的值栈"><a href="#Struts2-框架的值栈" class="headerlink" title="Struts2 框架的值栈"></a>Struts2 框架的值栈</h1><hr>
<h2 id="值栈的概述"><a href="#值栈的概述" class="headerlink" title="值栈的概述"></a>值栈的概述</h2><ul>
<li><p>值栈就相当于 <code>Struts2</code> 框架的数据的中转站，向值栈存入一些数据。从值栈中获取到数据。</p>
</li>
<li><p><code>ValueStack</code> 是 struts2 提供一个接口，实现类 <code>OgnlValueStack</code> —- 值栈对象 （<code>OGNL</code> 是从值栈中获取数据的 ）</p>
</li>
<li><p><code>Action</code> 是多例的，有一个请求，创建 <code>Action</code> 实例，创建一个 <code>ActionContext</code> 对象，代表的是 <code>Action</code> 的上下文对象，还会创建一个 <code>ValueStack</code> 对象。</p>
</li>
<li><p>每个 <code>Action</code> 实例都有一个 <code>ValueStack</code> 对象 （一个请求对应一个 <code>ValueStack</code> 对象 ）</p>
</li>
<li><p>在其中保存当前 <code>Action</code> 对象和其他相关对象</p>
</li>
<li><p>Struts 框架把 <code>ValueStack</code> 对象保存在名为 <code>“struts.valueStack”</code> 的请求属性中，<code>request</code> 中 （值栈对象是 <code>request</code> 一个属性）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不常用</span></span><br><span class="line">ValueStack vs = (ValueStack)request.getAttribute(<span class="string">"struts.valueStack"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="值栈的内部结构"><a href="#值栈的内部结构" class="headerlink" title="值栈的内部结构"></a>值栈的内部结构</h2><h3 id="值栈由两部分组成"><a href="#值栈由两部分组成" class="headerlink" title="值栈由两部分组成"></a>值栈由两部分组成</h3><ul>
<li><p>值栈由以下两部分组成：</p>
<blockquote>
<p><strong>root</strong>  ———— Struts 把动作和相关对象压入 <code>ObjectStack</code> 中–<code>List</code><br><strong>context</strong>  ———— Struts 把各种各样的映射关系(一些 <code>Map</code> 类型的对象) 压入 <code>ContextMap</code> 中</p>
</blockquote>
</li>
<li><p>Struts 会默认把下面这些映射压入 <code>ContextMap</code>（context）中</p>
</li>
<li><p>注意：<code>request</code> 代表的是 <code>Map</code> 集合的 <code>key</code> 值，<code>value</code> 的值其实也是一个 <code>Map</code> 集合。</p>
<blockquote>
<p><strong>parameters</strong>：该 Map 中包含当前请求的请求参数  ?name=xxx&amp;password=123<br><strong>request</strong>：该 Map 中包含当前 <code>request</code> 对象中的所有属性<br><strong>session</strong>：该 Map 中包含当前 <code>session</code> 对象中的所有属性<br><strong>application</strong>：该 Map 中包含当前 <code>application</code>  对象中的所有属性<br><strong>attr</strong>：该 Map 按如下顺序来检索某个属性: <code>request</code>, <code>session</code>, <code>application</code></p>
</blockquote>
</li>
<li><p>ValueStack 中存在 <code>root</code> 属性 (CompoundRoot) 、 <code>context</code> 属性 （OgnlContext ）</p>
<blockquote>
<p><code>CompoundRoot</code> 就是 <code>ArrayList</code><br><code>OgnlContext</code> 就是 <code>Map</code></p>
</blockquote>
</li>
<li><p>context 对应 Map 引入 root 对象 </p>
<blockquote>
<p>context 中还存在 request、 session、application、 attr、 parameters 对象引用 </p>
</blockquote>
</li>
</ul>
<p><strong><em>操作值栈默认指操作 root 元素</em></strong></p>
<h3 id="OGNL-获取值"><a href="#OGNL-获取值" class="headerlink" title="OGNL 获取值"></a>OGNL 获取值</h3><p>如果从 <code>root</code> 栈中获取值，OGNL 表达式默认情况下不能写 <code>#</code> 号：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"表达式"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>如果从 <code>context</code> 栈中获取值，OGNL 表达式默认需要加 <code>#</code> 号（访问 request、 session、application、 attr、 parameters 对象数据必须写）：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"#表达式"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="值栈的创建和-ActionContext-对象的关系"><a href="#值栈的创建和-ActionContext-对象的关系" class="headerlink" title="值栈的创建和 ActionContext 对象的关系"></a>值栈的创建和 ActionContext 对象的关系</h2><ul>
<li><p>值栈对象是 <code>请求时创建</code> 的</p>
</li>
<li><p><code>ActionContext</code> 是绑定到当前的线程上，那么在每个拦截器或者 <code>Action</code> 中获取到的 <code>ActionContext</code> 是同一个。</p>
</li>
<li><p><code>ActionContext</code> 中存在一个 <code>Map</code> 集合，该 <code>Map</code> 集合和 <code>ValueStack</code> 的 <code>context</code> 是同一个地址。</p>
</li>
<li><p><code>ActionContext</code> 中可以获取到 <code>ValueStack</code> 的引用，以后再开发，使用 <code>ActionContext</code> 来获取到值栈对象</p>
</li>
</ul>
<h2 id="获取值栈对象"><a href="#获取值栈对象" class="headerlink" title="获取值栈对象"></a>获取值栈对象</h2><ul>
<li>获得值栈对象，有三种方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueStack vs1 = (ValueStack) ServletActionContext.getRequest().getAttribute(<span class="string">"struts.valueStack"</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueStack vs2 = (ValueStack) ServletActionContext.getRequest().getAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY);</span><br></pre></td></tr></table></figure>
<p><strong>★重要</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取值栈对象，首先要获取 ActionContext 对象</span></span><br><span class="line">ValueStack vs3 = ActionContext.getContext().getValueStack();</span><br></pre></td></tr></table></figure>
<h2 id="向值栈中保存数据"><a href="#向值栈中保存数据" class="headerlink" title="向值栈中保存数据"></a>向值栈中保存数据</h2><p>向值栈保存数据 （主要针对 <code>root</code> 栈）</p>
<h3 id="push-方法"><a href="#push-方法" class="headerlink" title="push 方法"></a>push 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向栈顶压入对象</span></span><br><span class="line">valueStack.push(Object obj);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>push</code> 方法的底层调用 <code>root</code> 对象的 <code>push</code> 方法（把元素添加到 0 位置）</li>
</ul>
<h3 id="set-方法"><a href="#set-方法" class="headerlink" title="set 方法"></a>set 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向栈顶压入 map 集合，把 key 和 obj 存入到 map 集合中</span></span><br><span class="line">valueStack.set(String key, Object obj);</span><br></pre></td></tr></table></figure>
<ul>
<li>源码获取 <code>map</code> 集合（<code>map</code> 有可能是已经存在的，有可能是新创建的），把 <code>map</code> 集合压入到栈顶，再把数据存入到 <code>map</code> 集合中。</li>
</ul>
<blockquote>
<p>在 jsp 中，通过 <code>&lt;s:debug/&gt;</code> 查看值栈的内容</p>
</blockquote>
<h2 id="从值栈中获取值"><a href="#从值栈中获取值" class="headerlink" title="从值栈中获取值"></a>从值栈中获取值</h2><h3 id="一些小细节"><a href="#一些小细节" class="headerlink" title="一些小细节"></a>一些小细节</h3><blockquote>
<p>访问 <code>root</code> 中的数据不需要 <code>#</code><br>访问 <code>context</code> 中的对象数据，要加 <code>#</code><br>如果向 <code>root</code> 中存入对象的话，优先使用 <code>push</code> 方法。<br>如果向 <code>root</code> 中存入集合的话，优先要使用 <code>set</code> 方法。</p>
</blockquote>
<h3 id="在-OgnlContext-中获取数据"><a href="#在-OgnlContext-中获取数据" class="headerlink" title="在 OgnlContext 中获取数据"></a>在 OgnlContext 中获取数据</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request:&lt;s:property value=<span class="string">"#request.username"</span>/&gt;</span><br><span class="line">session:&lt;s:property value=<span class="string">"#session.username"</span>/&gt;</span><br><span class="line">application:&lt;s:property value=<span class="string">"#application.username"</span>/&gt;</span><br><span class="line">attr:&lt;s:property value=<span class="string">"#attr.username"</span>/&gt;</span><br><span class="line">parameters:&lt;s:property value=<span class="string">"#parameters.cid"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>前提 <code>struts.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--压栈和取值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"save"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.ValueStack1Action"</span> <span class="attr">method</span>=<span class="string">"save"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo2/vs.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>注意：</em>jsp 中首先要引入标签库 <code>&lt;%@taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt;</code>，在 jsp 中使用 <code>&lt;s:debug&gt;&lt;/s:debug&gt;</code> 可以查看值栈的内容。</p>
<p>以下代码演示 <code>压栈和取值</code>：</p>
<h4 id="push-字符串"><a href="#push-字符串" class="headerlink" title="push 字符串"></a>push 字符串</h4><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取值栈</span></span><br><span class="line">ValueStack vs = ActionContext.getContext().getValueStack();</span><br><span class="line"><span class="comment">// 压栈</span></span><br><span class="line">vs.push(<span class="string">"小灰"</span>);</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--获取栈顶的值--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"[0].top"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h4 id="set-字符串"><a href="#set-字符串" class="headerlink" title="set 字符串"></a>set 字符串</h4><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vs.set(<span class="string">"msg"</span>, <span class="string">"小瓜"</span>);</span><br></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--栈顶是 map 集合，通过 key 来获取值--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"[0].top.msg"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h4 id="获取对象（push）"><a href="#获取对象（push）" class="headerlink" title="获取对象（push）"></a>获取对象（push）</h4><p>首先需要创建一个 JavaBean：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 User 对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"小雷"</span>, <span class="string">"123"</span>);</span><br><span class="line"><span class="comment">// 压栈</span></span><br><span class="line">vs.push(user);</span><br></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--栈顶放 user 对象--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"[0].top.username"</span>/&gt;</span><br><span class="line">&lt;%--[<span class="number">0</span>].top 是可以省略的--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"username"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h4 id="获取对象（set）"><a href="#获取对象（set）" class="headerlink" title="获取对象（set）"></a>获取对象（set）</h4><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vs.set(<span class="string">"user"</span>, user);</span><br></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"[0].top.user.username"</span>/&gt;</span><br><span class="line">&lt;%--省略关键字--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"user.username"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h4 id="List-集合（push）"><a href="#List-集合（push）" class="headerlink" title="List 集合（push）"></a>List 集合（push）</h4><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;User&gt; ulist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ulist.add(<span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="string">"123"</span>));</span><br><span class="line">ulist.add(<span class="keyword">new</span> User(<span class="string">"李四"</span>, <span class="string">"456"</span>));</span><br><span class="line">ulist.add(<span class="keyword">new</span> User(<span class="string">"王五"</span>, <span class="string">"789"</span>));</span><br><span class="line"><span class="comment">// 把 ulist 压栈</span></span><br><span class="line">vs.push(ulist);</span><br></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"[0].top[0].username"</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"[0].top[1].username"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h4 id="List-集合（set）"><a href="#List-集合（set）" class="headerlink" title="List 集合（set）"></a>List 集合（set）</h4><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vs.set(<span class="string">"ulist"</span>, ulist);</span><br></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"ulist[0].username"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--迭代的标签</span><br><span class="line">    属性：</span><br><span class="line">        vaule   表示要迭代的集合，需要从值栈中获取</span><br><span class="line">        var     迭代过程中，遍历的对象（可写可不写）</span><br><span class="line">            * var 编写上，把迭代产生的对象默认压入到 context 栈中，取值要加 #</span><br><span class="line">            * var 不编写，默认把迭代产生的对象压入到 root 栈中</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;s:iterator value=<span class="string">"ulist"</span> var=<span class="string">"user"</span>&gt;</span><br><span class="line">    &lt;s:property value=<span class="string">"#user.username"</span>/&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--不编写 var--%&gt;</span><br><span class="line">&lt;s:iterator value=<span class="string">"ulist"</span>&gt;</span><br><span class="line">    &lt;s:property value=<span class="string">"username"</span>/&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure>
<h4 id="从-context-栈中获取值"><a href="#从-context-栈中获取值" class="headerlink" title="从 context 栈中获取值"></a>从 context 栈中获取值</h4><p>底层已经封装了 request、session 等对象，操作的就是 map 集合</p>
<h5 id="request"><a href="#request" class="headerlink" title="request"></a>request</h5><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"小鬼"</span>);</span><br></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"#request.msg"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h5 id="session"><a href="#session" class="headerlink" title="session"></a>session</h5><p><code>Action</code> 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getSession().setAttribute(<span class="string">"msg"</span>, <span class="string">"小卡"</span>);</span><br></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"#session.msg"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h5 id="parameters"><a href="#parameters" class="headerlink" title="parameters"></a>parameters</h5><p>路径传值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:9090/save.action?id=10</span></span><br></pre></td></tr></table></figure>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"#parameters.id"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h5 id="attr"><a href="#attr" class="headerlink" title="attr"></a>attr</h5><p>attr 从最小域开始找</p>
<p><code>jsp</code> 代码：</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"#attr.msg"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="EL-表达式也能获取到值栈中的数据"><a href="#EL-表达式也能获取到值栈中的数据" class="headerlink" title="EL 表达式也能获取到值栈中的数据"></a>EL 表达式也能获取到值栈中的数据</h2><h3 id="EL-获取值栈的值"><a href="#EL-获取值栈的值" class="headerlink" title="EL 获取值栈的值"></a>EL 获取值栈的值</h3><p>获取上面的 ulist：</p>
<ol>
<li><p>首先导包：<code>jstl.jar</code>、<code>standard.jar</code></p>
</li>
<li><p>引标签库：<code>&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--在 jsp 页面上使用 EL 和 JSTL 标签库来取值--%&gt;</span><br><span class="line">&lt;c:forEach items=&quot;$&#123;ulist&#125;&quot; var=&quot;user&quot;&gt;</span><br><span class="line">    $&#123;user.username&#125; -- $&#123;user.password&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>
<h3 id="为什么-EL-也能访问值栈中的数据？"><a href="#为什么-EL-也能访问值栈中的数据？" class="headerlink" title="为什么 EL 也能访问值栈中的数据？"></a>为什么 EL 也能访问值栈中的数据？</h3><p>因为 Struts2 底层使用了装饰者模式，对 <code>getAttribute()</code> 方法进行了增强。</p>
<p><code>StrutsPreparedAndExecuteFilter</code> 的 <code>doFilter</code> 代码中 <code>request = prepare.wrapRequest(request);</code></p>
<blockquote>
<p>对 <code>Request</code>对象进行了包装<br><code>StrutsRequestWrapper</code> 增强了 <code>request</code> 的 <code>getAttribute()</code> 方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object attribute = <span class="keyword">super</span>.getAttribute(s);</span><br><span class="line"><span class="keyword">if</span> (attribute == <span class="keyword">null</span>) &#123;</span><br><span class="line">	attribute = stack.findValue(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>访问 <code>request</code> 范围的数据时，如果数据找不到，会去值栈中找<br><code>request</code> 对象具备访问值栈数据的能力（查找 <code>root</code> 的数据）</p>
</blockquote>
<hr>
<h1 id="OGNL-表达式的特殊符号"><a href="#OGNL-表达式的特殊符号" class="headerlink" title="OGNL 表达式的特殊符号"></a>OGNL 表达式的特殊符号</h1><hr>
<h2 id="符号的用法-★"><a href="#符号的用法-★" class="headerlink" title="# 符号的用法 ★"></a># 符号的用法 ★</h2><h3 id="获得-contextMap-中的数据"><a href="#获得-contextMap-中的数据" class="headerlink" title="获得 contextMap 中的数据"></a>获得 contextMap 中的数据</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"#request.name"</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#session.name"</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#application.name"</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#attr.name"</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#parameters.id"</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#parameters.name"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="可以构建一个-map-集合"><a href="#可以构建一个-map-集合" class="headerlink" title="# 可以构建一个 map 集合"></a># 可以构建一个 map 集合</h3><p>以构建表单为例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;编写表单&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    性别：&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span>/&gt;男&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span>/&gt;女</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;使用 Struts2 UI 标签方式&lt;/h3&gt;</span><br><span class="line">&lt;s:form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    性别：&lt;s:radio name=<span class="string">"sex"</span> list=<span class="string">"&#123;'男','女'&#125;"</span>/&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure>
<p>使用 <code>#</code> 构建 map 集合：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;编写表单&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    性别：&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"1"</span>/&gt;男&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"2"</span>/&gt;女</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;使用 Struts2 UI 标签方式&lt;/h3&gt;</span><br><span class="line">&lt;s:form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    性别：&lt;s:radio name=<span class="string">"sex"</span> list=<span class="string">"#&#123;'1':'男','2:':'女'&#125;"</span>/&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure>
<h2 id="符号的用法"><a href="#符号的用法" class="headerlink" title="% 符号的用法"></a>% 符号的用法</h2><h3 id="强制字符串解析成-OGNL-表达式"><a href="#强制字符串解析成-OGNL-表达式" class="headerlink" title="强制字符串解析成 OGNL 表达式"></a>强制字符串解析成 OGNL 表达式</h3><blockquote>
<p>例如：在 <code>request</code> 域中存入值，然后在文本框（<code>&lt;s:textfield&gt;</code>）中取值，现在到 <code>value</code> 上。</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:textfield value=<span class="string">"%&#123;#request.msg&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="中的值用-‘’-引起来，此时不再是-ognl-表达式，而是普通的字符串"><a href="#中的值用-‘’-引起来，此时不再是-ognl-表达式，而是普通的字符串" class="headerlink" title="{ } 中的值用 ‘’ 引起来，此时不再是 ognl 表达式，而是普通的字符串"></a>{ } 中的值用 ‘’ 引起来，此时不再是 ognl 表达式，而是普通的字符串</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"%&#123;'#request.msg'&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="符号的用法-1"><a href="#符号的用法-1" class="headerlink" title="$ 符号的用法"></a>$ 符号的用法</h2><ul>
<li>在配置文件中可以使用 OGNL 表达式，例如：文件下载的配置文件。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"download1"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.DownloadAction"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"stream"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>$&#123;contentType&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentDisposition"</span>&gt;</span>attachment;filename=$&#123;downFilename&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/struts20300.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;OGNL 表达式  &amp;amp;  Struts2 值栈  &amp;amp;  OGNL 特殊符号&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Struts2" scheme="http://yoursite.com/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Struts2 中的 Servlet API、封装数据、拦截器</title>
    <link href="http://yoursite.com/JavaWeb-Struts202.html"/>
    <id>http://yoursite.com/JavaWeb-Struts202.html</id>
    <published>2018-07-22T09:56:43.000Z</published>
    <updated>2018-08-10T06:46:25.453Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/struts20200.png"></div>

<p id="div-border-left-blue">Servlet API、封装数据、拦截器。</p>

<a id="more"></a>
<hr>
<h1 id="Struts2-框架中-Servlet-API-的使用"><a href="#Struts2-框架中-Servlet-API-的使用" class="headerlink" title="Struts2 框架中 Servlet API 的使用"></a>Struts2 框架中 Servlet API 的使用</h1><hr>
<h2 id="Servlet-的-API"><a href="#Servlet-的-API" class="headerlink" title="Servlet 的 API"></a>Servlet 的 API</h2><p>在 <code>Action</code> 类中也可以获取到 <code>Servlet</code> 一些常用的 <code>API</code></p>
<ul>
<li>案例需求：提供 <code>JSP</code> 的表单页面的数据，在 <code>Action</code> 中使用 <code>Servlet</code> 的 <code>API</code> 接收到，然后保存到三个域对象中，最后再显示到 <code>JSP</code> 的页面上。</li>
</ul>
<p>提供 JSP 注册的页面：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123; pageContext.request.contextPath &#125;/xxx.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">	姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="完全解耦合的方式"><a href="#完全解耦合的方式" class="headerlink" title="完全解耦合的方式"></a>完全解耦合的方式</h3><p>为了避免与 <code>Servlet API</code> 耦合在一起，方便 Action 类做单元测试，Struts2 对 <code>HttpServletRequest</code>、<code>HttpSession</code> 和 <code>ServletContext</code> 进行了封装，构造了三个 Map 对象来替代这三种对象，在 Action 中，直接使用 <code>HttpServletRequest</code>、<code>HttpSession</code>、<code>ServletContext</code> 对应的 Map 对象来保存和读取数据。</p>
<p>要获得这三个Map对象，可以使用 <code>com.opensymphony.xwork2.ActionContext类</code></p>
<p><code>ActionContext</code> ： <code>请求上下文</code></p>
<p>常用的方法如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static ActionContext getContext()  										-- 获取 ActionContext 对象实例</span><br><span class="line">java.util.Map&lt;java.lang.String,java.lang.Object&gt; getParameters()  		-- 获取请求参数，相当于 request.getParameterMap();</span><br><span class="line">java.util.Map&lt;java.lang.String,java.lang.Object&gt; getSession()  			-- 获取的代表 session 域的 Map 集合，就相当于操作 session 域。</span><br><span class="line">java.util.Map&lt;java.lang.String,java.lang.Object&gt; getApplication() 		-- 获取代表 application 域的 Map 集合</span><br><span class="line">void put(java.lang.String key, java.lang.Object value)  					-- 注意：向 request 域中存入值。</span><br></pre></td></tr></table></figure>
<h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><p><strong>Demo1Action.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完全解耦合的方式，使用 Servlet 的 API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 完全解耦合的方式</span></span><br><span class="line">        ActionContext context = ActionContext.getContext();</span><br><span class="line">        <span class="comment">// 获取到请求的参数，封装所有请求的参数</span></span><br><span class="line">        Map&lt;String, Object&gt; map = context.getParameters();</span><br><span class="line">        <span class="comment">// 遍历获取数据</span></span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="comment">// 通过 Key，来获取到值</span></span><br><span class="line">            String[] vals = (String[]) map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">":"</span> + Arrays.toString(vals));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向 request 域中存入值</span></span><br><span class="line">        context.put(<span class="string">"msg"</span>,<span class="string">"小天"</span>);</span><br><span class="line">        <span class="comment">// 获取其他 map 集合，并存入数据</span></span><br><span class="line">        context.getSession().put(<span class="string">"msg"</span>,<span class="string">"小明"</span>);</span><br><span class="line">        context.getApplication().put(<span class="string">"msg"</span>,<span class="string">"小红"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>JSP 输入页面：</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>完全解耦合方式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123; pageContext.request.contextPath &#125;/demo1Action.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>JSP 跳转页面：</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 EL 表达式获取值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">$&#123;requestScope.msg&#125;</span><br><span class="line">$&#123;sessionScope.msg&#125;</span><br><span class="line">$&#123;applicationScope.msg&#125;</span><br></pre></td></tr></table></figure>
<p><code>struts.xml 配置文件：</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo1"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--完全解耦合的方式--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo1Action"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo1.Demo1Action"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="案例结果："><a href="#案例结果：" class="headerlink" title="案例结果："></a>案例结果：</h4><p>输入信息：</p>
<p><img src="http://image.renkaigis.com/javaweb/struts20201.png"></p>
<p>跳转并取值：</p>
<p><img src="http://image.renkaigis.com/javaweb/struts20202.png"></p>
<p>控制台输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">password:[12345]</span><br><span class="line">username:[renkai]</span><br></pre></td></tr></table></figure>
<h3 id="使用原生-Servlet-的-API-的方式"><a href="#使用原生-Servlet-的-API-的方式" class="headerlink" title="使用原生 Servlet 的 API 的方式"></a>使用原生 Servlet 的 API 的方式</h3><p>直接访问 <code>Servlet API</code> 将使 <code>Action</code> 类与 <code>Servlet API</code> 耦合在一起，<code>Servlet API</code> 对象均由 <code>Servlet</code> 容器来构造，与这些对象绑定在一起，测试过程中就必须有 <code>Servlet</code> 容器，这样不便于 <code>Action</code> 类的测试，但有时候，确实需要访问这些对象，<code>Struts2</code> 同样提供了直接访问 <code>ServletAPI</code> 对象的方式。</p>
<p>要直接获取 <code>Servlet API</code> 对象可以使用 <code>org.apache.struts2.ServletActionContext</code> 类，该类是 <code>ActionContext</code> 类的子类。</p>
<ul>
<li>具体的方法如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request=ServletActionContext.getRequest();</span><br><span class="line">HttpSession session=request.getSession();</span><br><span class="line">session.setAttribute(<span class="string">"xxx"</span>,xxx);</span><br><span class="line">HttpServletResponse response=ServletActionContext.getResponse();</span><br><span class="line">HttpServletContext application=ServletActionContext.getApplication();</span><br></pre></td></tr></table></figure>
<h4 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h4><p><strong>Demo2Action.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原生 Servlet API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到 request 对象</span></span><br><span class="line">        HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>, <span class="string">"天天"</span>);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">"msg"</span>, <span class="string">"美美"</span>);</span><br><span class="line">        ServletActionContext.getServletContext().setAttribute(<span class="string">"msg"</span>, <span class="string">"园园"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 response 对象，可以使用输出流，输出内容</span></span><br><span class="line">        HttpServletResponse response = ServletActionContext.getResponse();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>JSP 输入页面：</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>ServletCActionContext 类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123; pageContext.request.contextPath &#125;/demo2Action.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>JSP 跳转页面：</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 EL 表达式获取值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">$&#123;requestScope.msg&#125;</span><br><span class="line">$&#123;sessionScope.msg&#125;</span><br><span class="line">$&#123;applicationScope.msg&#125;</span><br></pre></td></tr></table></figure>
<p><code>struts.xml 配置文件：</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--原生 Servlet API 方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo2Action"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo1.Demo2Action"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="案例结果：-1"><a href="#案例结果：-1" class="headerlink" title="案例结果："></a>案例结果：</h4><p>输入信息：</p>
<p><img src="http://image.renkaigis.com/javaweb/struts20203.png"></p>
<p>跳转并取值：</p>
<p><img src="http://image.renkaigis.com/javaweb/struts20204.png"></p>
<hr>
<h1 id="结果类型的跳转"><a href="#结果类型的跳转" class="headerlink" title="结果类型的跳转"></a>结果类型的跳转</h1><hr>
<p>结果页面存在两种方式</p>
<h2 id="全局结果页面"><a href="#全局结果页面" class="headerlink" title="全局结果页面"></a>全局结果页面</h2><p>条件：如果 <code>&lt;package&gt;</code> 包中的一些 <code>action</code> 都返回 <code>success</code>，并且返回的页面都是同一个 <code>JSP</code> 页面，这样就可以配置全局的结果页面。</p>
<p>全局结果页面针对的 <code>当前包</code> 中的所有的 <code>Action</code>，但是如果局部还有结果页面，会 <code>优先局部</code> 的。使用的标签是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo1"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--配置全局的结果页面--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="局部结果页面"><a href="#局部结果页面" class="headerlink" title="局部结果页面"></a>局部结果页面</h2><p>也就是之前一直所使用的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="结果页面的类型"><a href="#结果页面的类型" class="headerlink" title="结果页面的类型"></a>结果页面的类型</h2><ul>
<li>结果页面使用 <code>&lt;result&gt;</code> 标签进行配置，包含两个属性</li>
</ul>
<blockquote>
<p><code>name</code>    – 逻辑视图的名称</p>
<p><code>type</code>    – 跳转的类型，需要掌握一些常用的类型。常见的结果类型去 <code>struts-default.xml</code> 中查找。</p>
</blockquote>
<ul>
<li><code>dispatcher</code>        – 转发，<code>type的默认值</code>。<code>Action---&gt;JSP</code></li>
<li><code>redirect</code>            – 重定向。    <code>Action---&gt;JSP</code></li>
<li><code>chain</code>                – 多个action之间跳转，从一个Action转发到另一个Action。    <code>Action---Action</code></li>
<li><code>redirectAction</code>    – 多个action之间跳转，从一个Action重定向到另一个Action。    <code>Action---Action</code></li>
<li><code>stream</code>            – 文件下载时候使用的</li>
</ul>
<hr>
<h1 id="Struts2-框架的数据封装"><a href="#Struts2-框架的数据封装" class="headerlink" title="Struts2 框架的数据封装"></a>Struts2 框架的数据封装</h1><hr>
<h2 id="数据的封装"><a href="#数据的封装" class="headerlink" title="数据的封装"></a>数据的封装</h2><ul>
<li>作为 <code>MVC</code> 框架，必须要负责解析 <code>HTTP</code> 请求参数，并将其封装到 <code>Model</code> 对象中</li>
<li>封装数据为开发提供了很多方便</li>
<li>Struts2 框架提供了很强大的数据封装的功能，<code>不再需要使用 Servlet 的 API 完成手动封装了</code>！</li>
</ul>
<p>Struts2 中提供了两类数据封装的方式：</p>
<h3 id="第一种方式：属性驱动"><a href="#第一种方式：属性驱动" class="headerlink" title="第一种方式：属性驱动"></a>第一种方式：属性驱动</h3><h4 id="提供对应属性的-set-方法进行数据的封装。"><a href="#提供对应属性的-set-方法进行数据的封装。" class="headerlink" title="提供对应属性的 set 方法进行数据的封装。"></a>提供对应属性的 <code>set</code> 方法进行数据的封装。</h4><ul>
<li><p>表单的哪些属性需要封装数据，那么在对应的 <code>Action</code> 类中提供该属性的 <code>set</code> 方法即可。</p>
</li>
<li><p>表单中的数据提交，最终找到 <code>Action</code> 类中的 <code>setXxx</code> 的方法，最后赋值给全局变量。</p>
</li>
<li><p>注意0：<code>Struts2</code> 的框架采用拦截器完成数据的封装。</p>
</li>
<li><p>注意1：这种方式不是特别好：因为属性特别多，提供特别多的set方法，而且还需要手动将数据存入到对象中。</p>
</li>
<li><p>注意2：这种情况下，<code>Action</code> 类就相当于一个 <code>JavaBean</code>，就没有体现出 <code>MVC</code> 的思想，<code>Action</code> 类又封装数据，又接收请求处理，耦合性较高。</p>
</li>
</ul>
<p><strong>Action:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="comment">// 只需要提供 set 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>struts.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--属性驱动的方式--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist1"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Regist1Action"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>jsp页面</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;属性驱动的方式&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/regist1.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"注册"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">renkai 12 25</span><br></pre></td></tr></table></figure>
<h4 id="属性驱动：把数据封装到-JavaBean-对象中"><a href="#属性驱动：把数据封装到-JavaBean-对象中" class="headerlink" title="属性驱动：把数据封装到 JavaBean 对象中"></a>属性驱动：把数据封装到 JavaBean 对象中</h4><blockquote>
<p>在页面上，使用 <code>OGNL</code> 表达式进行数据封装。</p>
</blockquote>
<ul>
<li><p>在页面中使用 <code>OGNL</code> 表达式进行数据的封装，就可以直接把属性封装到某一个 <code>JavaBean</code> 的对象中。</p>
</li>
<li><p>在页面中定义一个 <code>JavaBean</code>，并且提供 <code>set</code> 方法：例如：<code>private User user;</code></p>
</li>
<li><p>页面中的编写发生了变化，需要使用 <code>OGNL</code> 的方式，表单中的写法：<code>&lt;input type=&quot;text&quot; name=&quot;user.username&quot;&gt;</code></p>
</li>
<li><p>注意：只提供一个 <code>set</code> 方法还不够，必须还需要提供 <code>user</code> 属性的 <code>get</code> 和 <code>set</code> 方法！！！</p>
</li>
</ul>
<p><strong>原理：</strong> 先调用 <code>get</code> 方法，判断一下是否有 <code>user</code> 对象的实例对象，如果没有，调用 <code>set</code> 方法把拦截器创建的对象注入进来。</p>
<p><strong>Action:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要提供 get 和 set 方法</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>struts.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--属性驱动的方式，把数据封装到 JavaBean 的对象中--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist2"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Regist2Action"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>jsp页面</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;属性驱动的方式（把数据封装到 JavaBean 的对象中）&lt;/h3&gt;</span><br><span class="line">&lt;%--页面的编写发生了变化，使用的是 OGNL 表达式的写法--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/regist2.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.username"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"user.password"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.age"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"注册"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;username=&apos;renkai&apos;, password=&apos;12&apos;, age=25&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二种方式：模型驱动"><a href="#第二种方式：模型驱动" class="headerlink" title="第二种方式：模型驱动"></a>第二种方式：模型驱动</h3><blockquote>
<p>使用模型驱动的方式，也可以把表单中的数据直接封装到一个 <code>JavaBean</code> 的对象中，并且表单的写法和之前的写法没有区别！</p>
<p>编写的页面不需要任何变化，正常编写 <code>name</code> 属性的值</p>
<p>模型驱动的编写步骤：</p>
</blockquote>
<ul>
<li><p>手动实例化 <code>JavaBean</code>，即：<code>private User user = new User();</code></p>
</li>
<li><p>必须实现 <code>ModelDriven&lt;T&gt;</code> 接口，实现 <code>getModel()</code> 的方法，在 <code>getModel()</code> 方法中返回 <code>user</code> 即可！！</p>
</li>
</ul>
<p><strong>Action:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模型驱动的方式</span></span><br><span class="line"><span class="comment"> * 需要实现 ModelDriven 接口</span></span><br><span class="line"><span class="comment"> * 必须要手动实例化对象（需要自己new好）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regist3Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 必须要手动实例化</span></span><br><span class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="comment">// 获取模型对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>struts.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--模型驱动的方式--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist3"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Regist3Action"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>jsp页面</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;模型驱动的方式&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/regist3.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"注册"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;username=&apos;renkai&apos;, password=&apos;12&apos;, age=25&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Struts2-把数据封装到集合中"><a href="#Struts2-把数据封装到集合中" class="headerlink" title="Struts2 把数据封装到集合中"></a>Struts2 把数据封装到集合中</h3><p>（默认采用的是属性驱动的方式）</p>
<h4 id="把数据封装到-List-集合中"><a href="#把数据封装到-List-集合中" class="headerlink" title="把数据封装到 List 集合中"></a>把数据封装到 List 集合中</h4><ul>
<li>因为 <code>Collection</code> 接口都会有下标值，所有页面的写法会有一些区别，注意：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"products[0].name"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在 <code>Action</code> 中的写法，需要提供 <code>user</code> 的集合，并且提供 <code>get</code> 和 <code>set</code> 方法。</li>
</ul>
<p><strong>Action:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性驱动的方式，把数据封装到List集合中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regist4Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; list;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;User&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>struts.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--把数据封装到List集合中--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist4"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Regist4Action"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>jsp页面</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;向List集合封装数据（默认情况下，采用的是属性驱动的方式）&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/regist4.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"list[0].username"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"list[0].password"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">"text"</span> name=<span class="string">"list[0].age"</span> /&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"list[1].username"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"list[1].password"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">"text"</span> name=<span class="string">"list[1].age"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"注册"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User&#123;username=&apos;renkai&apos;, password=&apos;12&apos;, age=25&#125;</span><br><span class="line">User&#123;username=&apos;xiaomei&apos;, password=&apos;34&apos;, age=22&#125;</span><br></pre></td></tr></table></figure>
<h4 id="把数据封装到-Ma-中"><a href="#把数据封装到-Ma-中" class="headerlink" title="把数据封装到 Ma 中"></a>把数据封装到 Ma 中</h4><ul>
<li><code>Map</code> 集合是键值对的形式，页面的写法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['one'].name"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>里面的 <code>key</code> 值可以自定义。</p>
<ul>
<li>Action中提供 <code>map</code> 集合，并且提供 <code>get</code> 和 <code>set</code> 方法</li>
</ul>
<p><strong>Action:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性驱动的方式，把数据封装到map集合中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regist5Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; map;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, User&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, User&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>struts.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--把数据封装到map集合中--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist5"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo2.Regist5Action"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>jsp页面</strong>：这里的 <code>key</code> 值自定义。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;向map集合封装数据（默认情况下，采用的是属性驱动的方式）&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/regist5.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['one'].username"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"map['one'].password"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['one'].age"</span> /&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['two'].username"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"map['two'].password"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['two'].age"</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"注册"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;one=User&#123;username=&apos;renkai&apos;, password=&apos;12&apos;, age=25&#125;, two=User&#123;username=&apos;xiaomei&apos;, password=&apos;34&apos;, age=22&#125;&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Struts2-的拦截器技术"><a href="#Struts2-的拦截器技术" class="headerlink" title="Struts2 的拦截器技术"></a>Struts2 的拦截器技术</h1><hr>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="拦截器概述"><a href="#拦截器概述" class="headerlink" title="拦截器概述"></a>拦截器概述</h3><ul>
<li><p>拦截器就是 <code>AOP</code>（Aspect-Oriented Programming，面向切面编程）的一种实现。（AOP是指用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。）</p>
</li>
<li><p>过滤器：过滤从客服端发送到服务器端请求的。</p>
</li>
<li><p>拦截器：对目标 <code>Action</code> 中的某些方法进行拦截。</p>
</li>
</ul>
<blockquote>
<p>拦截器不能拦截JSP</p>
<p>拦截 <code>Action</code> 中某些方法</p>
</blockquote>
<h3 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h3><p>1）拦截器是基于 <code>JAVA反射机制</code> 的，而过滤器是基于 <code>函数回调</code> 的<br>2）过滤器依赖于Servlet容器，而拦截器不依赖于Servlet容器<br>3）拦截器 <code>只能对Action请求</code> 起作用（Action中的方法），而过滤器可以对 <code>几乎所有的请求</code> 起作用（CSS JSP JS）。</p>
<ul>
<li>拦截器 采用 <code>责任链</code> 模式</li>
</ul>
<blockquote>
<p>在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链</p>
<p>责任链每一个节点，都可以继续调用下一个节点，也可以阻止流程继续执行</p>
</blockquote>
<ul>
<li>在 struts2 中可以定义很多个拦截器，将多个拦截器按照特定顺序组成拦截器栈（顺序调用栈中的每一个拦截器 ）</li>
</ul>
<p><strong>Struts2 框架的核心是拦截器</strong></p>
<h2 id="自定义拦截器和配置"><a href="#自定义拦截器和配置" class="headerlink" title="自定义拦截器和配置"></a>自定义拦截器和配置</h2><h3 id="编写拦截器"><a href="#编写拦截器" class="headerlink" title="编写拦截器"></a>编写拦截器</h3><p>需要实现 <code>Interceptor</code> 接口，实现接口中的三个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 获取session对象</span></span><br><span class="line">    User user = (User) ServletActionContext.getRequest().getSession().getAttribute(<span class="string">"existUser"</span>);</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 说明，没有登录，后面就不会执行了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> invocation.invoke(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p><strong>注意：</strong> <em>只要引用了自己的拦截器，Struts2 框架默认栈的拦截器就不执行了，必须要手动引入默认栈。</em></p>
<p>需要在 <code>struts.xml</code> 中进行拦截器的配置，配置一共有两种方式</p>
<h4 id="第一种方式：直接引入"><a href="#第一种方式：直接引入" class="headerlink" title="第一种方式：直接引入"></a>第一种方式：直接引入</h4><ul>
<li>在 <code>&lt;package&gt;</code> 包中定义拦截器，出现在 <code>&lt;package&gt;</code> 包的上方</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"DemoInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.interceptor.DemoInterceptor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在某个 <code>action</code> 中引入拦截器：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo3.UserAction"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只要是引用自己的拦截器，默认栈的拦截器就不执行了，必须要手动引入默认栈 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"DemoInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="第二种方式：定义拦截器栈"><a href="#第二种方式：定义拦截器栈" class="headerlink" title="第二种方式：定义拦截器栈"></a>第二种方式：定义拦截器栈</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"DemoInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.interceptor.DemoInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义拦截器栈 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"DemoInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.demo3.UserAction"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只要是引用自己的拦截器，默认栈的拦截器就不执行了，必须要手动引入默认栈 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"DemoInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/struts20200.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;Servlet API、封装数据、拦截器。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Struts2" scheme="http://yoursite.com/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Struts2 快速入门</title>
    <link href="http://yoursite.com/JavaWeb-Struts201.html"/>
    <id>http://yoursite.com/JavaWeb-Struts201.html</id>
    <published>2018-06-27T13:39:05.000Z</published>
    <updated>2018-08-10T06:46:13.237Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/struts20100.png"></div>

<p id="div-border-left-blue">Struts2 快速入门。</p>

<a id="more"></a>
<hr>
<h1 id="Struts2-框架的概述"><a href="#Struts2-框架的概述" class="headerlink" title="Struts2 框架的概述"></a>Struts2 框架的概述</h1><hr>
<h2 id="Struts2-框架由来"><a href="#Struts2-框架由来" class="headerlink" title="Struts2 框架由来"></a>Struts2 框架由来</h2><ul>
<li><p><code>Struts2</code> 是 <code>Struts1</code> 的下一代产品，是在 <code>struts1</code> 和 <code>WebWork</code> 的技术基础上进行了合并的全新的 <code>Struts2</code> 框架。</p>
</li>
<li><p>其全新的 <code>Struts2</code> 的体系结构与 <code>Struts1</code> 的体系结构差别巨大。</p>
</li>
<li><p><code>Struts2</code> 以 <code>WebWork</code> 为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与 <code>ServletAPI</code> 完全脱离开，所以 <code>Struts2</code> 可以理解为 <code>WebWork</code> 的更新产品。</p>
</li>
<li><p>虽然从 <code>Struts1</code> 到 <code>Struts2</code> 有着太大的变化，但是相对于 <code>WebWork</code> ，<code>Struts2</code> 的变化很小。</p>
</li>
</ul>
<h2 id="Struts2-设计模型"><a href="#Struts2-设计模型" class="headerlink" title="Struts2 设计模型"></a>Struts2 设计模型</h2><p><strong>Struts2 是一个基于 MVC 设计模式的 Web 层框架</strong></p>
<ul>
<li><p><code>MVC</code> 和 JavaEE 的三层结构</p>
</li>
<li><p><code>MVC</code> 设计模式：是由一些网站的开发人员提出来的（<code>Model View Controller</code>）</p>
</li>
<li><p>JavaEE 三层结构：SUN 公司为 EE 开发划分的结构</p>
</li>
</ul>
<h2 id="常见的Web层的框架"><a href="#常见的Web层的框架" class="headerlink" title="常见的Web层的框架"></a>常见的Web层的框架</h2><ul>
<li><p>Struts1</p>
</li>
<li><p>Struts2 <strong>★</strong></p>
</li>
<li><p>Webwork</p>
</li>
<li><p>SpringMVC <strong>★</strong></p>
</li>
</ul>
<h2 id="Web层框架的特点"><a href="#Web层框架的特点" class="headerlink" title="Web层框架的特点"></a>Web层框架的特点</h2><ul>
<li><p>都是一个特点，<code>前端控制器模式</code></p>
</li>
<li><p>记住：<code>前端控制器（核心的控制器）</code></p>
</li>
<li><p><code>Struts2</code> 框架前端的控制器就是 <code>过滤器</code></p>
</li>
</ul>
<hr>
<h1 id="Struts2-快速入门"><a href="#Struts2-快速入门" class="headerlink" title="Struts2 快速入门"></a>Struts2 快速入门</h1><hr>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="创建-WEB-项目"><a href="#创建-WEB-项目" class="headerlink" title="创建 WEB 项目"></a>创建 <code>WEB</code> 项目</h3><p>编写 <code>JSP</code> 的页面，编写超链接，点击超链接发送请求，请求服务器，让服务器的方法去执行！！</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Struts2的入门程序<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123; pageContext.request.contextPath &#125;/hello.action"</span>&gt;</span>Struts2入门程序<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="下载-Struts2-的开发包"><a href="#下载-Struts2-的开发包" class="headerlink" title="下载 Struts2 的开发包"></a>下载 Struts2 的开发包</h3><ul>
<li><a href="https://struts.apache.org/" target="_blank" rel="noopener">https://struts.apache.org/</a>        – 官网地址</li>
</ul>
<h3 id="解压struts-2-3-24-all-zip包"><a href="#解压struts-2-3-24-all-zip包" class="headerlink" title="解压struts-2.3.24-all.zip包"></a>解压struts-2.3.24-all.zip包</h3><ul>
<li>解压后会看到有包和一些文件，大家需要掌握包相关的信息</li>
</ul>
<blockquote>
<p><code>apps</code>    – Struts2 框架提供了一些应用<br><code>libs</code>    – Struts2 框架开发的 jar 包<br><code>docs</code>    – Struts2 框架开发文档<br><code>src</code>    – Struts2 框架源码</p>
</blockquote>
<h3 id="引入需要开发的-jar-包"><a href="#引入需要开发的-jar-包" class="headerlink" title="引入需要开发的 jar 包"></a>引入需要开发的 jar 包</h3><ul>
<li><code>Struts2</code> 框架的开发 <code>jar</code> 包非常多，但是不是所有都是必须要引入的，有一些必须要导入的 <code>jar</code> 包，这些 <code>jar</code> 包可以从 <code>Struts2</code> 框架提供的<code>应用</code>中找到。</li>
<li>可以打开 <code>apps</code> 目录，然后找到 <code>struts2-blank.war</code> 应用。<code>war 包和</code>zip` 包的压缩格式是一样的，所以可以修改后缀名，解压。</li>
<li>找到解压后的应用，打开 <code>WEB-INF/lib</code> 目录下所以的 <code>jar</code> 包。复制到工程中，就可以了。</li>
</ul>
<h3 id="配置-Struts2-的前端控制器"><a href="#配置-Struts2-的前端控制器" class="headerlink" title="配置 Struts2 的前端控制器"></a>配置 Struts2 的前端控制器</h3><p>注意：这一步是必须要做的操作，这是 <code>Struts2</code> 核心的控制器。</p>
<ul>
<li><code>Struts2</code> 的前端控制器就是一个过滤器，那么过滤器相关知识咱们都学习过，需要在 <code>web.xml</code> 中进行配置。</li>
<li>前端控制器的类的路径和名称：<code>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</code></li>
<li>具体配置如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="编写-Action-类"><a href="#编写-Action-类" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h2><p><code>Action</code> 类是动作类，是 <code>Struts2</code> <code>处理请求</code>，<code>封装数据</code>，<code>响应页面</code>的<code>核心控制器</code>。需要自己编写。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Struts2 框架都是用 Action 类处理用户的请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Action 类中的方法签名是有要求的，必须这么做</span></span><br><span class="line"><span class="comment">     * public 共有的</span></span><br><span class="line"><span class="comment">     * 必须有返回值，必须 String 类型</span></span><br><span class="line"><span class="comment">     * 方法名称可以是任意的，但是不能有参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Struts2!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编写-Struts-的配置文件"><a href="#编写-Struts-的配置文件" class="headerlink" title="编写 Struts 的配置文件"></a>编写 Struts 的配置文件</h2><ol>
<li><p>配置文件名称是 <code>struts.xml</code>（名称必须是 <code>struts.xml</code>）</p>
</li>
<li><p>在 <code>src</code> 下引入 <code>struts.xml</code> 配置文件（配置文件的路径必须是在 <code>src</code> 的目录下）</p>
</li>
<li><p>配置如下</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置 Action--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action.HelloAction"</span> <span class="attr">method</span>=<span class="string">"sayHello"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="编写跳转"><a href="#编写跳转" class="headerlink" title="编写跳转"></a>编写跳转</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action.HelloAction"</span> <span class="attr">method</span>=<span class="string">"sayHello"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置跳转的页面，路径的写法。在 Struts2 框架中，不管是转发还是重定向，都不用写项目名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"OK"</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="总结-Struts2-执行流程"><a href="#总结-Struts2-执行流程" class="headerlink" title="总结 Struts2 执行流程"></a>总结 Struts2 执行流程</h2><h3 id="执行的流程"><a href="#执行的流程" class="headerlink" title="执行的流程"></a>执行的流程</h3><ul>
<li><p>编写的页面，点击超链接，请求提交到服务器端。</p>
</li>
<li><p>请求会先经过 <code>Struts2</code> 的核心过滤器（<code>StrutsPrepareAndExecuteFilter</code>）</p>
</li>
</ul>
<blockquote>
<p>过滤器的功能是完成了一部分代码功能<br>就是一系列的拦截器执行了，进行一些处理工作。<br>可以在 <code>struts-default.xml</code> 配置文件中看到有很多的拦截器。</p>
</blockquote>
<ul>
<li>拦截器执行完后，会根据 <code>struts.xml</code> 的配置文件找到请求路径，找到具体的类，通过<code>反射</code>的方式让方法执行。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>JSP页面 –&gt; <code>StrutsPrepereAndExecuteFilter</code>过滤器 –&gt; 执行一系列拦截器（完成了部分代码） –&gt; 执行到目标 <code>Action</code> –&gt; 返回字符串 –&gt; 结果页面（<code>result</code>） –&gt; 页面跳转</li>
</ul>
<hr>
<h2 id="Struts2-框架配置文件加载的顺序"><a href="#Struts2-框架配置文件加载的顺序" class="headerlink" title="Struts2 框架配置文件加载的顺序"></a>Struts2 框架配置文件加载的顺序</h2><h3 id="Struts2-框架的核心是-StrutsPrepareAndExecuteFilter-过滤器"><a href="#Struts2-框架的核心是-StrutsPrepareAndExecuteFilter-过滤器" class="headerlink" title="Struts2 框架的核心是 StrutsPrepareAndExecuteFilter 过滤器"></a>Struts2 框架的核心是 <code>StrutsPrepareAndExecuteFilter</code> 过滤器</h3><h4 id="该过滤器有两个功能"><a href="#该过滤器有两个功能" class="headerlink" title="该过滤器有两个功能"></a>该过滤器有两个功能</h4><ul>
<li>Prepare        – 预处理，加载核心的配置文件</li>
<li>Execute        – 执行，让部分拦截器执行</li>
</ul>
<h4 id="StrutsPrepareAndExecuteFilter-过滤器会加载哪些配置文件呢？"><a href="#StrutsPrepareAndExecuteFilter-过滤器会加载哪些配置文件呢？" class="headerlink" title="StrutsPrepareAndExecuteFilter  过滤器会加载哪些配置文件呢？"></a><code>StrutsPrepareAndExecuteFilter</code>  过滤器会加载哪些配置文件呢？</h4><p>通过源代码可以看到具体加载的配置文件和加载配置文件的顺序</p>
<ul>
<li>init_DefaultProperties();                 – 加载 <code>org/apache/struts2/default.properties</code></li>
<li>init_TraditionalXmlConfigurations();        – 加载 <code>struts-default.xml</code>,<code>struts-plugin.xml</code>,<code>struts.xml</code></li>
<li>init_LegacyStrutsProperties();            – 加载自定义的 <code>struts.properties</code></li>
<li>init_CustomConfigurationProviders();        – 加载用户自定义配置提供者</li>
<li>init_FilterInitParameters() ;                – 加载 <code>web.xml</code></li>
</ul>
<h4 id="重点了解的配置文件"><a href="#重点了解的配置文件" class="headerlink" title="重点了解的配置文件"></a>重点了解的配置文件</h4><ul>
<li>default.properties        – 在 <code>org/apache/struts2/</code> 目录下，代表的是配置的是 <code>Struts2</code> 的常量的值</li>
<li>struts-default.xml        – 在 <code>Struts2</code> 的核心包下，代表的是 <code>Struts2</code> 核心功能的配置（Bean、拦截器、结果类型等）</li>
<li>struts.xml                – 重点中的重点配置，代表 <code>WEB</code> 应用的默认配置，在工作中，基本就配置它就可以了！！（可以配置常量）</li>
<li>web.xml                    – 配置前端控制器（可以配置常量）</li>
</ul>
<p>注意：</p>
<ul>
<li><p>前 3 个配置文件是 <code>struts2</code> 框架的默认配置文件，基本不用修改。</p>
</li>
<li><p>后 3 个配置文件可以允许自己修改 <code>struts2</code> 的常量。但是有一个特点：后加载的配置文件修改的常量的值，会覆盖掉前面修改的常量的值。</p>
</li>
</ul>
<h4 id="总结（重点掌握的配置文件）"><a href="#总结（重点掌握的配置文件）" class="headerlink" title="总结（重点掌握的配置文件）"></a>总结（重点掌握的配置文件）</h4><ul>
<li>先加载 <code>default.properties</code> 文件，在 <code>org/apache/struts2/default.properties</code> 文件，都是常量。</li>
<li>又加载 <code>struts-default.xml</code> 配置文件，在核心的 <code>jar</code> 包最下方，<code>struts2</code> 框架的核心功能都是在该配置文件中配置的。</li>
<li>再加载 <code>struts.xml</code> 的配置文件，在 <code>src</code> 的目录下，代表用户自己配置的配置文件</li>
<li><p>最后加载 <code>web.xml</code> 的配置文件</p>
</li>
<li><p>后加载的配置文件会覆盖掉之前加载的配置文件（在这些配置文件中可以配置常量）</p>
</li>
</ul>
<h4 id="注意一个问题"><a href="#注意一个问题" class="headerlink" title="注意一个问题"></a>注意一个问题</h4><p>哪些配置文件中可以配置常量？</p>
<ul>
<li>default.properties        – 默认值，是不能修改的！！</li>
<li>struts.xml                – 可以配置，开发中基本上都在该配置文件中配置常量</li>
<li>struts.properties            – 可以配置，基本不会在该配置文件中配置</li>
<li><p>web.xml                    – 可以配置，基本不会在该配置文件中配置</p>
</li>
<li><p>后加载的配置文件会覆盖掉之前加载的配置！！</p>
</li>
</ul>
<hr>
<h1 id="struts-xml-配置文件"><a href="#struts-xml-配置文件" class="headerlink" title="struts.xml 配置文件"></a>struts.xml 配置文件</h1><hr>
<h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><h3 id="lt-package-gt-标签"><a href="#lt-package-gt-标签" class="headerlink" title="&lt;package&gt; 标签"></a><code>&lt;package&gt;</code> 标签</h3><p>如果要配置 <code>&lt;Action&gt;</code> 的标签，那么必须要先配置 <code>&lt;package&gt;</code> 标签，代表的包的概念</p>
<p>包含的属性:</p>
<ul>
<li>name                    – 包的名称，要求是唯一的，管理 <code>action</code>配置</li>
<li>extends                – 继承，可以继承其他的包，只要继承了，那么该包就包含了其他包的功能，一般都是继承 <code>struts-default</code></li>
<li>namespace                – 名称空间，一般与 <code>&lt;action&gt;</code> 标签中的 <code>name</code> 属性共同决定访问路径（通俗话：怎么来访问 <code>action</code>），常见的配置如下<blockquote>
<p>namespace=”/“        – 根名称空间<br>namespace=”/aaa”    – 带有名称的名称空间</p>
</blockquote>
</li>
<li>abstract                – 抽象的。这个属性基本很少使用，值如果是 <code>true</code>，那么编写的包是被继承的</li>
</ul>
<h3 id="lt-action-gt-标签"><a href="#lt-action-gt-标签" class="headerlink" title="&lt;action&gt; 标签"></a><code>&lt;action&gt;</code> 标签</h3><p>代表配置 <code>action</code> 类，包含的属性</p>
<ul>
<li>name            – 和 <code>&lt;package&gt;</code> 标签的 <code>namespace</code> 属性一起来决定访问路径的</li>
<li>class            – 配置 <code>Action</code> 类的全路径（默认值是 <code>ActionSupport</code> 类）</li>
<li>method        – <code>Action</code> 类中执行的方法，如果不指定，默认值是 <code>execute</code></li>
</ul>
<h3 id="lt-result-gt-标签"><a href="#lt-result-gt-标签" class="headerlink" title="&lt;result&gt; 标签"></a><code>&lt;result&gt;</code> 标签</h3><p><code>action</code>类中方法执行，返回的结果跳转的页面</p>
<ul>
<li>name        – 结果页面逻辑视图名称</li>
<li>type        – 结果类型（默认值是转发，也可以设置其他的值）</li>
</ul>
<h2 id="Struts2-配置常量"><a href="#Struts2-配置常量" class="headerlink" title="Struts2 配置常量"></a>Struts2 配置常量</h2><h3 id="Struts2-框架中的哪些配置文件中配置常量？"><a href="#Struts2-框架中的哪些配置文件中配置常量？" class="headerlink" title="Struts2 框架中的哪些配置文件中配置常量？"></a>Struts2 框架中的哪些配置文件中配置常量？</h3><p>struts.xml（必须要掌握，开发中基本上就在该配置文件中编写常量）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>web.xml</p>
<ul>
<li><p>在 <code>StrutsPrepareAndExecuteFilter</code> 配置文件中配置初始化参数</p>
</li>
<li><p>注意：后加载的配置的文件的常量会覆盖之前加载的常量！！</p>
</li>
</ul>
<h3 id="需要了解的常量"><a href="#需要了解的常量" class="headerlink" title="需要了解的常量"></a>需要了解的常量</h3><ul>
<li>struts.i18n.encoding=UTF-8            – 指定默认编码集，作用于 HttpServletRequest 的 setCharacterEncoding 方法 </li>
<li>struts.action.extension=action,,        – 该属性指定需要 Struts 2 处理的请求后缀，该属性的默认值是 action，即所有匹配 <code>*.action</code> 的请求都由 Struts2 处理。如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（,）隔开</li>
<li>struts.serve.static.browserCache=true        – 设置浏览器是否缓存静态内容,默认值为 <code>true</code> (生产环境下使用)，开发阶段最好关闭 </li>
<li>struts.configuration.xml.reload=false        – 当 struts 的配置文件修改后，系统是否自动重新加载该文件，默认值为 <code>false</code>(生产环境下使用) </li>
<li>struts.devMode = false                    – 开发模式下使用，这样可以打印出更详细的错误信息 </li>
</ul>
<h2 id="指定多个struts的配置文件（了解）"><a href="#指定多个struts的配置文件（了解）" class="headerlink" title="指定多个struts的配置文件（了解）"></a>指定多个struts的配置文件（了解）</h2><ol>
<li>在大部分应用里，随着应用规模的增加，系统中 <code>Action</code> 的数量也会大量增加，导致 <code>struts.xml</code> 配置文件变得非常臃肿。</li>
</ol>
<p>为了避免 <code>struts.xml</code> 文件过于庞大、臃肿，提高 <code>struts.xml</code> 文件的可读性，我们可以将一个 <code>struts.xml</code> 配置文件分解成多个配置文件，然后在 <code>struts.xml</code> 文件中包含其他配置文件。</p>
<ol>
<li>可以在 <code>&lt;package&gt;</code> 标签中，使用 <code>&lt;include&gt;</code> 标签来引入其他的 <code>struts_xx.xml</code> 的配置文件。例如：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"struts-part1.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"struts-part2.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>注意注意注意（重要的事情说三遍）：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"com/renkaigis/demo2/struts-part1.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Action-类的三种写法"><a href="#Action-类的三种写法" class="headerlink" title="Action 类的三种写法"></a>Action 类的三种写法</h2><h3 id="Action类就是一个POJO类"><a href="#Action类就是一个POJO类" class="headerlink" title="Action类就是一个POJO类"></a>Action类就是一个POJO类</h3><ul>
<li>什么是 POJO 类，<code>POJO（Plain Ordinary Java Object）</code>简单的 Java 对象，简单记：没有继承某个类，没有实现接口，就是 POJO 的类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是 POJO 类：没有任何继承和实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * execute 是默认方法</span></span><br><span class="line"><span class="comment">     * return null; 不会进行跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Demo1Action 是一个 POJO 类…"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--POJO 类的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo1Action"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action1.Demo1Action"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Action-类可以实现-Action-接口"><a href="#Action-类可以实现-Action-接口" class="headerlink" title="Action 类可以实现 Action 接口"></a>Action 类可以实现 Action 接口</h3><p>Action 接口中定义了 5 个常量，5 个常量的值对应的是 5 个逻辑视图跳转页面（跳转的页面还是需要自己来配置），还定义了一个方法，<code>execute</code> 方法。</p>
<p>需要掌握5个逻辑视图的常量</p>
<ul>
<li>SUCCESS        – 成功</li>
<li>INPUT            – 用于数据表单校验.如果校验失败,跳转 INPUT 视图</li>
<li>LOGIN            – 登录</li>
<li>ERROR            – 错误</li>
<li>NONE            – 页面不转向</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现 Action 接口，Action 是框架提供的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Demo2Action 实现了 Action 的接口…"</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--实现 Action 接口的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo2Action"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action1.Demo2Action"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Action-类可以去继承-ActionSupport-类"><a href="#Action-类可以去继承-ActionSupport-类" class="headerlink" title="Action 类可以去继承 ActionSupport 类"></a>Action 类可以去继承 ActionSupport 类</h3><p>（开发中这种方式使用最多）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写 Action 类继承 ActionSupport 类，ActionSupport 类已经实现了 Action 和一些其他的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Demo3Action 继承了 ActionSupport 类…"</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--继承 ActionSupport 类的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo3Action"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action1.Demo3Action"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Action-的访问"><a href="#Action-的访问" class="headerlink" title="Action 的访问"></a>Action 的访问</h2><h3 id="传统的配置方式"><a href="#传统的配置方式" class="headerlink" title="传统的配置方式"></a>传统的配置方式</h3><p>通过 <code>&lt;action&gt;</code> 标签中的 <code>method</code> 属性，访问到 Action 中的具体的方法。</p>
<ul>
<li>传统的配置方式，配置更清晰更好理解！但是扩展需要修改配置文件等！</li>
</ul>
<h4 id="具体的实例如下："><a href="#具体的实例如下：" class="headerlink" title="具体的实例如下："></a>具体的实例如下：</h4><ul>
<li>页面代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">H3</span>&gt;</span>传统的配置文件的方式<span class="tag">&lt;/<span class="name">H3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/saveCust.action"</span>&gt;</span>保存客户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/updCust.action"</span>&gt;</span>修改客户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置文件的代码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--传统方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"saveCust"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action2.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"save"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"updCust"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action2.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"update"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Action 的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写客户的 Action 类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存客户…"</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改用户…"</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通配符的访问方式"><a href="#通配符的访问方式" class="headerlink" title="通配符的访问方式"></a>通配符的访问方式</h3><p>（访问的路径和方法的名称必须要有某种联系）</p>
<p>通配符就是 <code>*</code> 代表任意的字符</p>
<ul>
<li>使用通配符的方式可以简化配置文件的代码编写，而且扩展和维护比较容易。</li>
</ul>
<h4 id="具体实例如下："><a href="#具体实例如下：" class="headerlink" title="具体实例如下："></a>具体实例如下：</h4><ul>
<li>页面代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">H3</span>&gt;</span>通配符配置文件的方式<span class="tag">&lt;/<span class="name">H3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/linkman_save.action"</span>&gt;</span>保存联系人<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/linkman_update.action"</span>&gt;</span>修改联系人<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置文件代码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通配符的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"linkman_*"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action2.LinkmanAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"saveOK"</span>&gt;</span>/demo2/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Action 的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用联系人来测试通配符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkmanAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存联系人…"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"saveOK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改联系人…"</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>具体理解：在 JSP 页面发送请求，<code>http://localhost:9090/demo2/linkman_save.action</code>，配置文件中的 <code>linkman_*</code> 可以匹配该请求，<code>*</code> 就相当于变成了 <code>add</code>，<code>method</code> 属性的值使用 <code>{1}</code> 来代替，<code>{1}</code> 就表示的是第一个 <code>*</code> 号的位置！！所以 <code>method</code> 的值就等于了 <code>add</code>，那么就找到 <code>Action</code> 类中的 <code>add</code> 方法，那么 <code>add</code> 方法就执行了！</li>
</ul>
<h3 id="动态方法访问的方式"><a href="#动态方法访问的方式" class="headerlink" title="动态方法访问的方式"></a>动态方法访问的方式</h3><p>（有的开发中也会使用这种方式）</p>
<ul>
<li><p>如果想完成动态方法访问的方式，需要开启一个常量，<code>struts.enable.DynamicMethodInvocation = false</code>，把值设置成 <code>true</code>。</p>
</li>
<li><p>注意：不同的 <code>Struts2</code> 框架的版本，该常量的值不一定是 <code>true</code> 或者 <code>false</code>，需要自己来看一下。如果是 <code>false</code>，需要自己开启。</p>
</li>
<li><p>在 <code>struts.xml</code> 中开启该常量。</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启动态方法访问 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="具体实例如下：-1"><a href="#具体实例如下：-1" class="headerlink" title="具体实例如下："></a>具体实例如下：</h4><ul>
<li>页面的代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">H3</span>&gt;</span>动态方法访问的方式<span class="tag">&lt;/<span class="name">H3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/user!save.action"</span>&gt;</span>保存用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath&#125;/user!update.action"</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置文件代码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置动态方法访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action2.UserAction"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Action的类的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存用户…"</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改用户…"</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>Struts2 框架主要以下几个步骤：</p>
<h3 id="编写-web-xml-前端控制器"><a href="#编写-web-xml-前端控制器" class="headerlink" title="编写 web.xml 前端控制器"></a>编写 <code>web.xml</code> 前端控制器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="编写-struts-xml-配置文件"><a href="#编写-struts-xml-配置文件" class="headerlink" title="编写 struts.xml 配置文件"></a>编写 <code>struts.xml</code> 配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.action2.LinkmanAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"saveOK"</span>&gt;</span>/demo2/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="编写-Action-类-1"><a href="#编写-Action-类-1" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h3><ul>
<li><p>一般继承 <code>ActionSupport</code> 类</p>
</li>
<li><p><code>&lt;action&gt;</code> 访问配置一般使用 <code>通配符</code> 的方式：</p>
</li>
</ul>
<p><code>name=&quot;user_*&quot; method=&quot;{1}&quot;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/struts20100.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-blue&quot;&gt;Struts2 快速入门。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Struts2" scheme="http://yoursite.com/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>世间安得双全法，不负如来不负卿</title>
    <link href="http://yoursite.com/novel-nverqing.html"/>
    <id>http://yoursite.com/novel-nverqing.html</id>
    <published>2018-06-18T12:05:27.000Z</published>
    <updated>2019-09-04T11:39:12.609Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/novel/nverqing01.jpg"></div>

<div align="center">图源微博：<a href="https://weibo.com/p/1005053965448819/home?from=page_100505&mod=TAB&is_all=1#place" target="_blank" rel="noopener">青暮从山</a></div>

<a id="more"></a>
<hr>

<h1 id="世间安得双全法，不负如来不负卿。"><a href="#世间安得双全法，不负如来不负卿。" class="headerlink" title="世间安得双全法，不负如来不负卿。"></a>世间安得双全法，不负如来不负卿。</h1><p>唐玄奘师徒四人取经之路历经千难万险，为的是求取至高无上的佛法佛理，凭的是普渡众生的苍生大义。</p>
<p>这一路，最难的不是遇到妖魔鬼怪，也不是碰到魔女画皮，更不是什么蝎子精蜘蛛精。</p>
<p>而是唐玄奘的心魔，或者说是情劫。</p>
<p>佛曰：色即是空，空即是色。</p>
<p>不惧大风大浪、高山戈壁，也不怕魑魅魍魉、鬼怪妖邪，最怕的是和尚没了取经的念头啊。</p>
<h2 id="（一）缘起"><a href="#（一）缘起" class="headerlink" title="（一）缘起"></a>（一）缘起</h2><p>却说这一日，碧空如洗，和风习习。</p>
<p>小船悠悠，师徒四人不知不觉就来到了西梁女国了。</p>
<p>唐玄奘虽也是见过大风大浪的人，可还是第一次来到一个只有女子的国度。</p>
<p>走在大街上，周围投射来新奇又热烈的目光，玄奘只觉得浑身不自在。</p>
<p>心中默念“阿弥陀佛”，一心只想着赶快换了通关文牒，离开这个是非之地。</p>
<p>女王听闻唐朝高僧觐见，闪凤目，簇蛾眉，仔细观看，果然一表非凡。</p>
<p>丰姿英伟，相貌轩昂。齿白如银砌，唇红口四方。顶平额阔天仓满，目秀眉清地阁长。两耳有轮真杰士，一身不俗是才郎。好个妙龄聪俊风流子，堪配西梁窈窕娘。<sup>[1]</sup></p>
<p>玄奘见到女王陛下，双手合十，恭敬的行礼：“贫僧唐三藏参见女王陛下”。</p>
<p>却见没有声响。</p>
<p>连忙继续“贫僧唐三藏参见女王陛下”。还是没有回应。</p>
<p>无奈只得再拜“贫僧唐三藏参见女王陛下”。玄奘却不知，这女王正细细端详着他的面庞出神，哪听得到他在说什么。</p>
<p>玄奘本想着通关文牒上加盖宝印是很简单的事，却没料想女王陛下让他与徒儿先到馆驿休息。</p>
<h2 id="（二）梦"><a href="#（二）梦" class="headerlink" title="（二）梦"></a>（二）梦</h2><blockquote>
<p>此部分对话皆来自<code>央视 86 版《西游记》第十六集《趣经女儿国》台词。</code><sup>[2]</sup></p>
</blockquote>
<p>夜里，檀香缭绕，女王独坐窗前，画笔下轻轻勾勒着，画上的人可不就是今天来的大唐高僧吗。</p>
<p>闻得太师唤她，女王连忙用绢布将画遮起来。</p>
<p>女王禁不住心下欣喜，同太师说道：“想我西梁女国，从未有过男子，今日有幸，天赐唐王御弟下降。我想这是千载难逢的机缘，愿以一国之富，招他为王，我为王后。”</p>
<p>深夜，女王倚着软塌，望着唐三藏的画像，渐渐陷入了沉睡。</p>
<p>这夜，她做了一个梦。</p>
<p>梦里，他为王，她为后。</p>
<p>梦里，他们策马驰骋。</p>
<p>梦里，他们相互依偎，同游御花园…</p>
<p>梦醒，却是一阵阵失落。</p>
<p>翌日，依着梦境，女王邀玄奘同游御花园。</p>
<p>女王莲步轻移，谈天说地，玄奘却一直恭恭敬敬，时刻与女王保持着距离。</p>
<p>“你看那戏水鸳鸯，如胶似漆，多么欢快，你说是吗？”</p>
<p>玄奘拱手道：“陛下看的真切，贫僧不曾留意。”</p>
<p>“御弟哥哥，为什么天地间的鸟呀、蝶呀，都要成对成双的呢？”</p>
<p>“这事自有天地以来便是如此。”</p>
<p>“御弟……哥哥……”</p>
<p>“陛下……”</p>
<p>女王眸中泛着微光，带着哭腔央求道：“不去取经行不行？”</p>
<p>“这……哎……”玄奘轻叹一声，不知如何回应。</p>
<p>只听女王叹道：“为什么世间还有像我们这样的孤男寡女，不能成双成对？”</p>
<p>玄奘连忙说，“陛下，贫僧许身佛门，正是为了解救芸芸众生，使世上不再有杀伐纷争，使人间不再有怨女旷夫。”</p>
<p>“既然御弟哥哥有如此情怀，那么眼前就有需要你解救的芸芸众生！”</p>
<p>女王无奈，你只知解救芸芸众生，却不救救我？</p>
<p>“哎……陛下，贫僧取经心切，还望陛下早日发放通关牒文。”</p>
<p>“今日且莫谈取经之事，御弟哥哥，你看这御花园中春光明媚，景色怡人，我再陪哥哥流连观赏一番，好吗？”</p>
<p>且看湖中鸳鸯戏水，桥上人成双成对。</p>
<p>女王看着玄奘，眸中柔情似水。</p>
<div align="center"><img src="http://image.renkaigis.com/novel/nverqing06.jpg"></div>

<h2 id="（三）情动"><a href="#（三）情动" class="headerlink" title="（三）情动"></a>（三）情动</h2><blockquote>
<p>此部分对话皆来自<code>央视 86 版《西游记》第十六集《趣经女儿国》台词。</code><sup>[2]</sup></p>
</blockquote>
<p>是夜，女王以“夜赏国宝”为由将玄奘请至自己的寝殿。</p>
<p>玄奘来到之后才恍然过来，急忙给女王解释道：“太师领贫僧夜赏国宝，不知为何闯到陛下寝宫？”</p>
<p>只闻帘后人温柔至极，“御弟哥哥，那就请观赏国宝吧！”</p>
<p>床帘徐徐展开，只见床上人斜倚塌前，薄纱缚身，丹唇轻启，头戴高簪珠翠，一副雍容华贵之姿。</p>
<p>玄奘闻言，又看到这一幕，耳红面赤，羞答答不敢抬头。</p>
<p>“难道在御弟哥哥眼里，我还算不得国宝吗？”</p>
<p>说着，女王捧起一盏烛火向玄奘走来。</p>
<p>玄奘早已慌得不知如何是好，不敢正面看她，却忍不住偷偷看她的背影。</p>
<p>“哥哥你看，这烛光也知人情，欲照今日之喜。”</p>
<p>“不知陛下喜从何来？”</p>
<p>“我身为女王，饱享荣华富贵，可是，从未享受过人间欢乐。今日哥哥到此，真乃天赐良缘。来日哥哥登上宝座，我为王后，从此双宿双飞，这不是万千之喜吗？”</p>
<p>玄奘目光移向别处，使自己快速镇静下来。“佛心四大皆空，贫僧尘念已绝，无缘消受人间富贵。阿弥陀佛…”</p>
<p>说完，紧闭双眼，不敢再多看一眼。</p>
<p>女王依旧巧笑嫣然，如若月里嫦娥到此一般，美得不可方物。</p>
<p>“你说四大皆空，却紧闭双眼。要是你睁开眼睛看看我，我不相信你两眼空空。”</p>
<p>玄奘眯着眼看了看，但又很快紧闭双眼，嘴中不停念叨着阿弥陀佛。</p>
<p>“不敢睁眼看我，还说什么四大皆空呢？”女王看着他颤抖的唇和额头的汗珠，笑意盈盈的反驳他。</p>
<p>玄奘无奈，睁开眼看向女王。</p>
<p>只见眼前人，眉如翠羽，肌似羊脂。脸衬桃花瓣，鬟堆金凤丝。秋波湛湛妖娆态，春笋纤纤妖媚姿。斜軃红绡飘彩艳，高簪珠翠显光辉。<sup>[3]</sup></p>
<p>这一眼看得他呆了很久很久，他的额头又一次布满了细密的汗珠。</p>
<p>玄奘连忙回过神来，眼睛移向别处，匆忙用袖子擦拭额头的汗，又念了句“阿弥陀佛”。</p>
<p>“哥哥，别闭上，睁开眼睛吧。”</p>
<p>“你就睁开眼睛吧。”</p>
<p>玄奘摇头，“我就是睁眼看你，又能怎样？”</p>
<p>“哥哥……”</p>
<p>说着，女王趴在玄奘肩上，拽着他的袈裟袖子，无限暧昧。</p>
<p>玄奘慌了，连忙起身将袖子从她手中拽出。却不想拉扯之间，对方突然放手，自己躺倒在了女王的床上。</p>
<p>玄奘欲起身，却见女王口中不停唤着“哥哥…哥哥…”，将他又一次推倒在床上。</p>
<p>玄奘想反抗，却手忙脚乱不知如何是好，时刻把持着尺度。</p>
<p>女王幽怨的看着他，“哥哥，你难道真的不喜欢我吗？”</p>
<p>玄奘犹豫了，他心里似云海翻涌，不知道怎么作答。只得偏过头去，不让女王看见自己的表情。</p>
<p>女王看着他的样子，更加贴近他，温言软语：“今夜良宵难得，你就答应了我吧”</p>
<p>玄奘长呼一口气，镇静如初，“女王陛下，贫僧已许身佛门，与大唐天子有诺在先，还望女王陛下放了贫僧西去。”</p>
<p>说着，顿了顿，玄奘缓缓转过头来，看着她的背影说道：“来世若有缘分……”</p>
<p>后面的话犹豫了很久说不出口，玄奘也许真的动了心吧。今世无缘，只能来世再续。</p>
<p>女王听闻，心中一喜，若论来世，谁又说的准呢。“我只想今生，不想来世。今生今世，我们俩是有缘分的。”</p>
<p>说着，头倚在玄奘肩上。</p>
<p>良辰美景，灯光烛影之间，两人你侬我侬。</p>
<p>玄奘欲拒还迎，虽故作镇静，但凡心已动，怎奈终究摆脱不了女王。</p>
<h2 id="（四）不负如来"><a href="#（四）不负如来" class="headerlink" title="（四）不负如来"></a>（四）不负如来</h2><p>却说唐玄奘被那蝎子精掳走，这妖精山洞中灯红酒绿，一副洞房的装扮。</p>
<p>同样是绝世美人儿，玄奘却对那蝎子精提不起一点兴趣。</p>
<p>即使她不是妖怪，即使她再怎么美艳动人，在玄奘眼中只有嫌弃。</p>
<p>玄奘一个出家人自然不懂自己心里的变化。</p>
<p>脑海里依旧浮现着女王的一颦一笑，极尽温柔，极尽欢乐。</p>
<p>玄奘不知道自己动没动情。</p>
<p>他自己不知道，他也不想知道。</p>
<p>面对一个『情』字，七情六欲皆无的玄奘居然选择了逃避。</p>
<p>他怕的是什么？什么王权富贵，什么戒律清规？</p>
<p>他怕的是，如果动情了，就负了如来；如果不动情，就辜负了“她”。</p>
<h2 id="（五）相见难，别亦难"><a href="#（五）相见难，别亦难" class="headerlink" title="（五）相见难，别亦难"></a>（五）相见难，别亦难</h2><p>待到临行女儿国之际，女王依依不舍的在通关文牒上盖上印章。</p>
<p>女王哀怨的看着玄奘，舍不得与他分离。身为女王，却留不住这个凡人。</p>
<p>那天，她一直送他到城外。</p>
<p>这一路上，两人没有说过一句话。</p>
<p>这段路，是女王走过的最长的路，也是女王最不想走完的一段路。</p>
<p>这段路，是玄奘走的最不舒服的一段路，虽有佳人在侧，却如鲠在喉。</p>
<p>直到城外，玄奘打破了沉默，“陛下，请留步！”。</p>
<p>女王看着她，欲语还休，怎诉这胸中蜜语万千。只怨今生无缘，道不尽声声珍重，默默地祝君一路平安。</p>
<p>女王唇齿轻咬，似乎是做了很大的一个决定，将关文递给眼前人。</p>
<p>玄奘接过关文，对女王拱手道：“多谢陛下。”</p>
<p>这里，玄奘行的是俗家礼，只因尘缘未了，只有等到来世…</p>
<p>奈何戒律清规，奈何天子之诺，奈何芸芸众生，玄奘纵有万般不舍，也只得策马扬鞭，西行而去。</p>
<p>她在城头似哭似笑，当着百官的面对着他的背影大喊：“御弟哥哥……”千言万语梗在胸中，无法诉说。</p>
<p>夕阳下，玄奘勒马回头，只看了一眼。遂又毅然决然扬鞭而去…</p>
<p>只留女王，孑然一人，孤立城头。</p>
<p>“唐玄奘，下辈子娶我可好？”</p>
<p>风沙漫天，看不见他的表情，也看不见她脸上的泪痕。</p>
<p>僧人不语，只余风声喧嚣。</p>
<div align="center"><img src="http://image.renkaigis.com/novel/nverqing02.jpg"></div>

<h2 id="（六）圆寂"><a href="#（六）圆寂" class="headerlink" title="（六）圆寂"></a>（六）圆寂</h2><p>玄奘走后的日子，女王日日思君不见君。从来不相信一见钟情的女王，居然败给了一个和尚。</p>
<p>佛门无尘缘。你许我来生，可你既已成佛，又何来来世？</p>
<p>女王只得在闭塞的女儿国内，努力打探着外界的消息，尤其是关于他的一点一滴。</p>
<p>听闻他取得真经，听闻他受万人朝拜。女王为他高兴，也为自己难过。</p>
<p>数十年的等待，如今女王已人老珠黄。若玄奘你回来，还会认得这个人吗。</p>
<p>女王不过是凡人，有七情六欲，也有生老病死。若说来生，谁还记得谁？</p>
<p>这天，有属下来报，白马寺玄奘法师圆寂。</p>
<p>如晴天霹雳般，女王瘫倒在塌，泪流满面。</p>
<p>颤颤巍巍的她来到御花园，看着湖中鸳鸯戏水，园中彩蝶翩翩，想起和御弟哥哥的那一幕幕。</p>
<p>宫中议论纷纷，隐约可以听到有宫女说道：</p>
<p>『 听说那唐朝和尚圆寂的时候，千佛诵经，万众朝宗，他走的时候只笑着留下一句：“好！” 』</p>
<div align="center"><img src="http://image.renkaigis.com/novel/nverqing05.jpg"></div>

<p><br></p>
<p>犹记得那日两人分别时，女王对着他的背影大喊：</p>
<p>“唐玄奘，下辈子娶我可好？”</p>
<h2 id="（七）成佛"><a href="#（七）成佛" class="headerlink" title="（七）成佛"></a>（七）成佛</h2><p>玄奘取得真经，回到白马寺，受万人敬仰。每日吃斋念佛，诵经以普度众生。</p>
<p>两耳不闻窗外事，但是他真的忘了那段情劫吗？</p>
<p>玄奘本乃金蝉子转世，圆寂后成佛，世称“旃檀功德佛”。</p>
<div align="center"><img src="http://image.renkaigis.com/novel/nverqing04.jpg"></div>

<p><br></p>
<p>前世的许诺玄奘还记得，但既身已成佛，心亦要剔除七情六欲。</p>
<p>佛不比前世的唐朝和尚，那时尚可动情，现在心止如死水。</p>
<p>佛曰：人生有八苦：生，老，病，死，爱别离，怨长久，求不得，放不下。</p>
<p>佛又曰：一切有为法，如梦幻泡影。如露亦如电，应作如是观。</p>
<p>果真是生劫易渡，情劫难了。</p>
<p>始于必经之劫，终于苍生大义。</p>
<hr>

<h1 id="女王"><a href="#女王" class="headerlink" title="女王"></a>女王</h1><blockquote class="blockquote-center">我做了一个梦，<br>你蓄起了长发，<br>我们一起慢慢变老。</blockquote>

<p>我不后悔遇见你。</p>
<p>我也不后悔遇见你之后爱上你。</p>
<p>我更不后悔守着你许诺的来世等了你数多载。</p>
<p>我身为一国之主，却留不住你这个凡人。</p>
<p>何以缘起，何以缘灭。若是没遇见，错过便是错过。</p>
<p>可是一旦遇见了，一旦动了情，又怎叫人放得下。</p>
<p>你心中只有众生和戒律清规，可是我心中却只有你。</p>
<p>一个人孤寂的等了你那么多年，最后等来了你圆寂的消息。</p>
<p>至此，我也就断了这世间的一切念想了。</p>
<p>这世间没了你，我要怎么活？</p>
<hr>

<h1 id="玄奘"><a href="#玄奘" class="headerlink" title="玄奘"></a>玄奘</h1><blockquote class="blockquote-center">世间安得双全法，不负如来不负卿。</blockquote>

<p>如果动情了，就负了如来；如果不动情，就辜负了“她”。</p>
<div align="center"><img src="http://image.renkaigis.com/novel/nverqing03.jpg"></div>

<p><br></p>
<p>我本是如来二弟子金蝉子，只因不听佛祖说法，轻漫佛法，转世为大唐高僧。奉观世音菩萨之命前往西天大雷音寺求取大乘佛法，普渡众生。</p>
<p>直到我来到西梁女国，见到了那位花颜月貌的女王。</p>
<p>我觉得我难逃此劫了……</p>
<p>不知道为什么，我不敢看她的眼睛，我也不敢和她多说话。</p>
<p>但是看到她明媚的笑我又会很欢喜，虽然极力控制着自己。</p>
<p>是否我这个出家人真的动了情？</p>
<p>我一直都在躲避这个问题，让自己不要去想，我以为不去想就会忘掉这一切。</p>
<p>那一夜，烛火摇曳，我差点就万劫不复。</p>
<p>多亏了蝎子精横插一脚，我想这便是佛祖派蝎子精来警告我的。</p>
<p>想起自己身负拯救苍生的使命，纵使千世万世无欲无情也在所不惜。</p>
<p>『 曾虑多情损梵行，入山又恐别倾城。世间安得双全法，不负如来不负卿。 』</p>
<p>终究没有负了如来，却负了你。</p>
<p>今世的你是什么身份，今世的你又在哪里。</p>
<p>也许有情，奈何缘浅。</p>
<!-- <hr>

# 番外 - 今生

2004 年《艺术人生》，西游记剧组再聚首。

女儿国王扮演者朱琳，上场后深情凝视着徐少华：“自女儿国一别，至今已经二十载…御弟哥哥，别来无恙。”

岁月的车轮驶过，美丽的女王脸上已现皱纹，但仍姿色不减当年。

虽然看似说的很随意，但语气明显颤抖着，极力压抑着。

徐少华闻言，也当场红了眼眶。

也许有情，奈何缘浅。 -->
<!-- <hr>

# 悟空

多年后，身为斗战胜佛的我还会想起曾经西天取经所经历的每一道劫难。这是一个漫长的过程，这也是我的成佛之路。

这一路上，记不得杀死了多少妖怪，也记不得被那和尚赶走过多少次。

原本心性顽劣的齐天大圣，也渐渐磨去棱角，成了佛。

要说取经路上，遇到再怎么强大的妖怪我都不怕。

可是，我最怕的是，那和尚没了取经的念头。

记得那是在西梁女国，和尚居然动了凡心，差点就……

离开女儿国后，经常看到和尚一个人坐着发呆。

夜里隐约能听到和尚说梦话的声音。

我本是一石猴，不懂什么情情爱爱的。但我能感受到和尚经过女儿国一劫后确实变了。

之后的他意志更为坚定，一步一个脚印誓要求取真经。无论遇到什么样的美女妖怪。

女儿国或许是和尚最难过的一关吧！

<hr> -->
<h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><p><a href="https://www.bilibili.com/video/av5973539" target="_blank" rel="noopener">B站 - 【西游记女儿国国王】之 浮生相思梦</a></p>
<p>文中所用图源于微博：<a href="https://weibo.com/p/1005053965448819/home?from=page_100505&mod=TAB&is_all=1#place" target="_blank" rel="noopener">青暮从山</a></p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">《西游记》第五十四回-法性西来逢女国，心猿定计脱烟花：女王闪凤目，簇蛾眉，仔细观看，果然一表非凡，你看他丰姿英伟，相貌轩昂。齿白如银砌，唇红口四方。顶平额阔天仓满，目秀眉清地阁长。两耳有轮真杰士，一身不俗是才郎。好个妙龄聪俊风流子，堪配西梁窈窕娘。<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">央视 86 版《西游记》第十六集《趣经女儿国》台词。<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">《西游记》第五十四回-法性西来逢女国，心猿定计脱烟花：猪八戒在旁，掬着嘴，饧眼观看那女王，却也袅娜，真个眉如翠羽，肌似羊脂。脸衬桃花瓣，鬟堆金凤丝。秋波湛湛妖娆态，春笋纤纤妖媚姿。斜軃红绡飘彩艳，高簪珠翠显光辉。说什么昭君美貌，果然是赛过西施。柳腰微展鸣金珮，莲步轻移动玉肢。月里嫦娥难到此，九天仙子怎如斯。宫妆巧样非凡类，诚然王母降瑶池。<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/novel/nverqing01.jpg&quot;&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;图源微博：&lt;a href=&quot;https://weibo.com/p/1005053965448819/home?from=page_100505&amp;mod=TAB&amp;is_all=1#place&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;青暮从山&lt;/a&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Mine" scheme="http://yoursite.com/categories/Mine/"/>
    
    
      <category term="Novel" scheme="http://yoursite.com/tags/Novel/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Hibernate 查询方式与策略优化</title>
    <link href="http://yoursite.com/JavaWeb-Hibernate05.html"/>
    <id>http://yoursite.com/JavaWeb-Hibernate05.html</id>
    <published>2018-06-05T07:21:45.000Z</published>
    <updated>2018-08-10T06:41:21.246Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/hibernate0500.png"></div>

<p id="div-border-left-green">Hibernate 查询方式与策略优化</p>

<a id="more"></a>
<hr>
<h1 id="Hibernate-框架的查询方式"><a href="#Hibernate-框架的查询方式" class="headerlink" title="Hibernate 框架的查询方式"></a>Hibernate 框架的查询方式</h1><hr>
<ul>
<li>唯一标识 OID 的检索方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.get(对象.class,OID);</span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">Customer customer = session.get(Customer.class, <span class="number">1L</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>对象的导航的方式</li>
</ul>
<p>比如，查询客户下的联系人：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Customer.getLinkmans();</span><br></pre></td></tr></table></figure>
<ul>
<li>HQL 的检索方式</li>
</ul>
<p>（Hibernate Query Language）        – Hibernate 的查询语言</p>
<ul>
<li>QBC 的检索方式</li>
</ul>
<p>（Query By Criteria）        – 条件查询</p>
<ul>
<li>SQL 检索方式（了解）</li>
</ul>
<p>本地的SQL检索</p>
<h2 id="HQL-查询"><a href="#HQL-查询" class="headerlink" title="HQL 查询"></a>HQL 查询</h2><h3 id="HQL-概述"><a href="#HQL-概述" class="headerlink" title="HQL 概述**"></a>HQL 概述**</h3><h4 id="HQL-的介绍"><a href="#HQL-的介绍" class="headerlink" title="HQL 的介绍"></a>HQL 的介绍</h4><ul>
<li><code>HQL</code> (Hibernate Query Language) 是面向对象的查询语言, 它和 SQL 查询语言有些相似。</li>
<li>在 Hibernate 提供的各种检索方式中, HQL 是使用最广的一种检索方式</li>
</ul>
<h4 id="HQL-与-SQL-的关系"><a href="#HQL-与-SQL-的关系" class="headerlink" title="HQL 与 SQL 的关系"></a>HQL 与 SQL 的关系</h4><ul>
<li>HQL 查询语句是面向对象的，Hibernate 负责解析 HQL 查询语句，然后根据对象-关系映射文件中的映射信息，把 HQL 查询语句翻译成相应的 SQL 语句。</li>
<li>HQL 查询语句中的主体是域模型中的类及类的属性；</li>
<li>SQL 查询语句是与关系数据库绑定在一起的。SQL 查询语句中的主体是数据库表及表的字段。</li>
</ul>
<h3 id="HQL-的基本查询"><a href="#HQL-的基本查询" class="headerlink" title="HQL 的基本查询"></a>HQL 的基本查询</h3><h4 id="HQL-基本的查询格式"><a href="#HQL-基本的查询格式" class="headerlink" title="HQL 基本的查询格式"></a>HQL 基本的查询格式</h4><ul>
<li><p>支持 <code>方法链</code> 的编程，即直接调用 <code>list()</code> 方法</p>
</li>
<li><p>简单的代码如下</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.createQuery(<span class="string">"from Customer"</span>).list();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本查询的演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from Customer"</span>);</span><br><span class="line">    List&lt;Customer&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用别名的方式"><a href="#使用别名的方式" class="headerlink" title="使用别名的方式"></a>使用别名的方式</h4><ul>
<li>可以使用别名的方式</li>
</ul>
<p>不能出现 <code>*</code>，即不能 <code>select * from Customer c</code> <strong>✖</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.createQuery(<span class="string">"from Customer c"</span>).list();</span><br><span class="line">session.createQuery(<span class="string">"select c from Customer c"</span>).list();</span><br></pre></td></tr></table></figure>
<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>排序查询和 SQL 语句中的排序的语法是一样的：</p>
<ul>
<li>升序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.createQuery(<span class="string">"from Customer order by cust_id"</span>).list();</span><br></pre></td></tr></table></figure>
<ul>
<li>降序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.createQuery(<span class="string">"from Customer order by cust_id desc"</span>).list();</span><br></pre></td></tr></table></figure>
<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>不论使用的是 MySQL 还是 Oracle，都可以使用 Hibernate 框架提供的分页方法。</p>
<ul>
<li>两个方法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setFirstResult(a);        <span class="comment">// 从哪条记录开始，如果查询是从第一条开始，值是 0</span></span><br><span class="line">setMaxResults(b);     <span class="comment">// 每页查询的记录条数</span></span><br></pre></td></tr></table></figure>
<ul>
<li>演示代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;LinkMan&gt; list = session.createQuery(<span class="string">"from LinkMan"</span>).setFirstResult(<span class="number">0</span>).setMaxResults().list();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tr = session.beginTransaction();</span><br><span class="line">    <span class="comment">// 查询联系人</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from Linkman l order by l.lkm_id"</span>);</span><br><span class="line">    <span class="comment">// 分页查询，调用方法，查询第一页的数据 1-3 条</span></span><br><span class="line">    query.setFirstResult(<span class="number">0</span>);</span><br><span class="line">    query.setMaxResults(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Linkman&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span>(Linkman linkman:list)&#123;</span><br><span class="line">        System.out.println(linkman);</span><br><span class="line">    &#125;</span><br><span class="line">    tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul>
<li><p><code>setParameter(&quot;?号的位置，默认从0开始&quot;,&quot;参数的值&quot;);</code> 不用考虑参数的具体类型</p>
</li>
<li><p>按位置绑定参数的条件查询（指定下标值，默认从 0 开始）</p>
</li>
<li><p>按名称绑定参数的条件查询（HQL语句中的 ? 号换成 :名称 的方式）</p>
</li>
</ul>
<p>例如代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tr = session.beginTransaction();</span><br><span class="line">    <span class="comment">// 查询联系人</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from Linkman l where l.lkm_gender = ?"</span>);</span><br><span class="line">    <span class="comment">// 传入值</span></span><br><span class="line">    <span class="comment">// query.setString(0, "男");</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Query query = session.createQuery("from Linkman l where l.lkm_id &gt; 2");</span></span><br><span class="line">    <span class="comment">// query.setLong(0, 2L);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的方法，不用判断具体的类型</span></span><br><span class="line">    query.setParameter(<span class="number">0</span>, <span class="string">"男"</span>);</span><br><span class="line">    List&lt;Linkman&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Linkman linkman : list) &#123;</span><br><span class="line">        System.out.println(linkman);</span><br><span class="line">    &#125;</span><br><span class="line">    tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HQL-的投影查询"><a href="#HQL-的投影查询" class="headerlink" title="HQL 的投影查询"></a>HQL 的投影查询</h3><p>投影查询就是想查询某一字段的值或者某几个字段的值。</p>
<p>投影查询的案例：</p>
<ul>
<li>如果查询多个字段，例如下面这种方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object[]&gt; list = session.createQuery(<span class="string">"select c.cust_name,c.cust_level from Customer c"</span>).list();</span><br><span class="line"><span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">    System.out.println(Arrays.toString(objects));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果查询两个字段，也可以把这两个字段封装到对象中</li>
</ul>
<blockquote>
<p>先在持久化类中 <code>提供对应字段的构造方法</code>（不要忘了空的构造方法）<br>语句也要像下面一样发生改变</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">"select new Customer(c.cust_name,c.cust_level) from Customer c"</span>).list();</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">    System.out.println(customer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="聚合函数查询"><a href="#聚合函数查询" class="headerlink" title="聚合函数查询"></a>聚合函数查询</h3><p><code>count()</code>、<code>sum()</code>、<code>avg()</code>、<code>max()</code>、<code>min()</code>等。</p>
<h4 id="获取总的记录数"><a href="#获取总的记录数" class="headerlink" title="获取总的记录数"></a>获取总的记录数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line"><span class="comment">// 也可以是 select count(*) from Customer</span></span><br><span class="line">List&lt;Number&gt; list = session.createQuery(<span class="string">"select count(c) from Customer c"</span>).list();</span><br><span class="line"><span class="comment">// 通过下标取值</span></span><br><span class="line">Long count = list.get(<span class="number">0</span>).longValue();</span><br><span class="line">System.out.println(count);</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure>
<h4 id="获取某一列数据的和"><a href="#获取某一列数据的和" class="headerlink" title="获取某一列数据的和"></a>获取某一列数据的和</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line">List&lt;Number&gt; list = session.createQuery(<span class="string">"select sum(c.cust_id) from Customer c"</span>).list();</span><br><span class="line">Long count = list.get(<span class="number">0</span>).longValue();</span><br><span class="line">System.out.println(count);</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure>
<h3 id="HQL-多表查询"><a href="#HQL-多表查询" class="headerlink" title="HQL 多表查询"></a>HQL 多表查询</h3><h4 id="多表的查询"><a href="#多表的查询" class="headerlink" title="多表的查询"></a>多表的查询</h4><p>HQL 语句和 SQL 语句的查询语法比较类似。</p>
<h5 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h5><ul>
<li>显示内连接</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers c <span class="keyword">inner</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> c.cid = o.cno;</span><br></pre></td></tr></table></figure>
<ul>
<li>隐式内连接</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers c,orders o <span class="keyword">where</span> c.cid = o.cno;</span><br></pre></td></tr></table></figure>
<h5 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h5><ul>
<li>左外连接</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers c <span class="keyword">left</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> c.cid = o.cno;</span><br></pre></td></tr></table></figure>
<ul>
<li>右外连接</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers c <span class="keyword">right</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> c.cid = o.cno;</span><br></pre></td></tr></table></figure>
<h4 id="迫切和非迫切"><a href="#迫切和非迫切" class="headerlink" title="迫切和非迫切"></a>迫切和非迫切</h4><ul>
<li><p>非迫切返回结果是 <code>Object[]</code></p>
</li>
<li><p>迫切连接返回的结果是对象，把客户的信息封装到客户的对象中，把订单的信息封装到客户的 <code>Set</code> 集合中。</p>
</li>
</ul>
<h4 id="内连接查询-1"><a href="#内连接查询-1" class="headerlink" title="内连接查询"></a>内连接查询</h4><ul>
<li>内连接使用 <code>inner join</code> ，默认返回的是 <code>Object</code> 数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内连接，数据默认返回的是数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">	Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 默认返回数组</span></span><br><span class="line">	Query query = session.createQuery(<span class="string">"from Customer c inner join c.linkmans"</span>);</span><br><span class="line">	List&lt;Object[]&gt; list = query.list();</span><br><span class="line">	<span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">		System.out.println(Arrays.toString(objects));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>迫切内连接: <code>inner join fetch</code> ，返回的是实体对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内连接，数据默认返回的是数组</span></span><br><span class="line"><span class="comment"> * 把数据封装到对象中</span></span><br><span class="line"><span class="comment"> * 使用关键字：fetch 迫切连接，这样就会把数据封装到对象中</span></span><br><span class="line"><span class="comment"> * 此时数据会重复</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">	Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用 fetch 迫切连接，封装数据</span></span><br><span class="line">	Query query = session.createQuery(<span class="string">"from Customer c inner join fetch c.linkmans"</span>);</span><br><span class="line">	List&lt;Customer&gt; list = query.list();</span><br><span class="line">	<span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">		System.out.println(customer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决数据重复：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决数据的重复问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">	Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">	Query query = session.createQuery(<span class="string">"from Customer c inner join fetch c.linkmans"</span>);</span><br><span class="line">	List&lt;Customer&gt; list = query.list();</span><br><span class="line">	<span class="comment">// 手动解决数据重复问题，编程中都使用这种方式来解决重复的问题</span></span><br><span class="line">	Set&lt;Customer&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;(list);</span><br><span class="line">	<span class="keyword">for</span> (Customer customer : set) &#123;</span><br><span class="line">		System.out.println(customer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="左外连接查询"><a href="#左外连接查询" class="headerlink" title="左外连接查询"></a>左外连接查询</h4><ul>
<li><p>左外连接:    封装成 <code>List&lt;Object[]&gt;</code></p>
</li>
<li><p>迫切左外连接</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">"from Customer c left join fetch c.linkmans"</span>).list();</span><br><span class="line">Set&lt;Customer&gt; set = <span class="keyword">new</span> HashSet&lt;Customer&gt;(list);</span><br><span class="line"><span class="keyword">for</span> (Customer customer : set) &#123;</span><br><span class="line">	System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure>
<h2 id="QBC-查询"><a href="#QBC-查询" class="headerlink" title="QBC 查询"></a>QBC 查询</h2><p>QBC：<code>Query By Criteria</code>，按条件进行查询。</p>
<ul>
<li><p><code>Criteria</code>：代表一次查询；</p>
</li>
<li><p><code>Criterion</code>：代表一个查询条件；</p>
</li>
<li><p><code>Restrictions</code>：产生查询条件的工具类。</p>
</li>
</ul>
<h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><p>使用的是 <code>Criteria</code> 接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Customer&gt; list = session.createCriteria(Customer.class).list();</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">    System.out.println(customer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="排序查询-1"><a href="#排序查询-1" class="headerlink" title="排序查询"></a>排序查询</h3><ul>
<li><p>需要使用 <code>addOrder()</code> 的方法来设置参数，参数使用 <code>org.hibernate.criterion.Order</code> 对象。</p>
</li>
<li><p>具体代码如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line">Criteria criteria = session.createCriteria(Linkman.class);</span><br><span class="line"><span class="comment">// 设置排序</span></span><br><span class="line"><span class="comment">// criteria.addOrder(Order.asc("lkm_id"));</span></span><br><span class="line">criteria.addOrder(Order.desc(<span class="string">"lkm_id"</span>));</span><br><span class="line">List&lt;Linkman&gt; list = criteria.list();</span><br><span class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</span><br><span class="line">    System.out.println(linkman);</span><br><span class="line">&#125;</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure>
<h3 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h3><p><code>QBC</code> 的分页查询也是使用两个方法:</p>
<ul>
<li>setFirstResult();</li>
<li><p>setMaxResults();</p>
</li>
<li><p>代码如下;</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line">Criteria criteria = session.createCriteria(Linkman.class);</span><br><span class="line"><span class="comment">// 设置排序</span></span><br><span class="line">criteria.addOrder(Order.desc(<span class="string">"lkm_id"</span>));</span><br><span class="line">criteria.setFirstResult(<span class="number">0</span>);</span><br><span class="line">criteria.setMaxResults(<span class="number">3</span>);</span><br><span class="line">List&lt;Linkman&gt; list = criteria.list();</span><br><span class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</span><br><span class="line">    System.out.println(linkman);</span><br><span class="line">&#125;</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure>
<h3 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h3><p><code>Criterion</code> 是查询条件的接口，<code>Restrictions</code> 类是 Hibernate 框架提供的工具类，使用该工具类来设置查询条件。</p>
<ul>
<li><p>条件查询使用 Criteria 接口的 <code>add</code> 方法，用来传入条件。</p>
</li>
<li><p>使用 <code>Restrictions</code> 的添加条件的方法，来添加条件，例如：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Restrictions.eq</td>
<td style="text-align:center">相等</td>
</tr>
<tr>
<td>Restrictions.gt</td>
<td style="text-align:center">大于号</td>
</tr>
<tr>
<td>Restrictions.ge</td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td>Restrictions.lt</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td>Restrictions.le</td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td>Restrictions.between</td>
<td style="text-align:center">在之间</td>
</tr>
<tr>
<td>Restrictions.like</td>
<td style="text-align:center">模糊查询</td>
</tr>
<tr>
<td>Restrictions.in</td>
<td style="text-align:center">范围</td>
</tr>
<tr>
<td>Restrictions.and</td>
<td style="text-align:center">并且</td>
</tr>
<tr>
<td>Restrictions.or</td>
<td style="text-align:center">或者</td>
</tr>
<tr>
<td>Restrictions.isNull</td>
<td style="text-align:center">查询某属性为空的值</td>
</tr>
</tbody>
</table>
<ul>
<li>测试代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line">Criteria criteria = session.createCriteria(Linkman.class);</span><br><span class="line"><span class="comment">// 设置排序</span></span><br><span class="line">criteria.addOrder(Order.desc(<span class="string">"lkm_id"</span>));</span><br><span class="line"><span class="comment">// 设置查询条件</span></span><br><span class="line"><span class="comment">// Restrictions 提供静态的方法，拼接查询的条件</span></span><br><span class="line">criteria.add(Restrictions.or(Restrictions.eq(<span class="string">"lkm_gender"</span>, <span class="string">"男"</span>), Restrictions.gt(<span class="string">"lkm_id"</span>, <span class="number">3L</span>)));</span><br><span class="line">List&lt;Linkman&gt; list = criteria.list();</span><br><span class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</span><br><span class="line">    System.out.println(linkman);</span><br><span class="line">&#125;</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure>
<h3 id="聚合函数查询-1"><a href="#聚合函数查询-1" class="headerlink" title="聚合函数查询"></a>聚合函数查询</h3><p><code>Projection</code> 的聚合函数的接口，而 <code>Projections</code> 是 Hibernate 提供的工具类，使用该工具类设置聚合函数查询。</p>
<ul>
<li><p>使用 QBC 的聚合函数查询，需要使用 <code>criteria.setProjection()</code> 方法</p>
</li>
<li><p>具体的代码如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line">Criteria criteria = session.createCriteria(Linkman.class);</span><br><span class="line">criteria.setProjection(Projections.rowCount());</span><br><span class="line">List&lt;Number&gt; list = criteria.list();</span><br><span class="line">Long count = list.get(<span class="number">0</span>).longValue();</span><br><span class="line">System.out.println(count);</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure>
<h3 id="离线条件查询"><a href="#离线条件查询" class="headerlink" title="离线条件查询"></a>离线条件查询</h3><p><strong>脱离 session，可以不使用 session 来创建。而是在 web 层创建对象。</strong></p>
<p>离线条件查询使用的是 <code>DetachedCriteria</code> 接口进行查询，离线条件查询对象在创建的时候，不需要使用 <code>Session</code> 对象，只是在查询的时候使用 <code>Session</code> 对象即可。</p>
<ul>
<li>创建离线条件查询对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DetachedCriteria criteria = DetachedCriteria.forClass(Linkman.class);</span><br></pre></td></tr></table></figure>
<ul>
<li>具体的代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">DetachedCriteria criteria = DetachedCriteria.forClass(Linkman.class);</span><br><span class="line"><span class="comment">// 设置查询条件</span></span><br><span class="line">criteria.add(Restrictions.eq(<span class="string">"lkm_gender"</span>, <span class="string">"男"</span>));</span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line">List&lt;Linkman&gt; list = criteria.getExecutableCriteria(session).list();</span><br><span class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</span><br><span class="line">    System.out.println(linkman);</span><br><span class="line">&#125;</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure>
<h2 id="SQL-查询方式（了解）"><a href="#SQL-查询方式（了解）" class="headerlink" title="SQL 查询方式（了解）"></a>SQL 查询方式（了解）</h2><p>使用 Hibernate 框架一般不会使用 SQL 查询。</p>
<p>基本语法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">SQLQuery sqlQuery = session.createSQLQuery(<span class="string">"select * from cst_linkman where lkm_gender = ?"</span>);</span><br><span class="line">sqlQuery.setParameter(<span class="number">0</span>,<span class="string">"男"</span>);</span><br><span class="line"><span class="comment">// 通过方法设置，封装数据</span></span><br><span class="line">sqlQuery.addEntity(Linkman.class);</span><br><span class="line">List&lt;Linkman&gt; list = sqlQuery.list();</span><br><span class="line">System.out.println(list);</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="查询功能优化"><a href="#查询功能优化" class="headerlink" title="查询功能优化"></a>查询功能优化</h1><hr>
<p>没有好与坏之分，只有适合不适合，可根据需求自行优化。但一般都会使用默认的，除非有特殊需求。</p>
<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><p>延迟加载先获取到代理对象，当真正使用到该对象中的属性的时候，才会发送 SQL 语句，是 Hibernate 框架提升性能的方式。</p>
<h3 id="类级别的延迟加载"><a href="#类级别的延迟加载" class="headerlink" title="类级别的延迟加载"></a>类级别的延迟加载</h3><ul>
<li><p>Session 对象的 <code>get</code> 方法是没有延迟加载；</p>
</li>
<li><p>Session 对象的 <code>load</code> 方法默认就是 <code>延迟加载</code>；</p>
</li>
<li><p><code>Customer c1 = session.load(Customer.class, 1L);</code> 没有发送 SQL 语句，当使用该对象的属性时，才发送 SQL 语句。</p>
</li>
</ul>
<p>使类级别的延迟加载失效：</p>
<ul>
<li>在 <code>&lt;class&gt;</code> 标签上配置 <code>lazy=&quot;false&quot;</code></li>
</ul>
<p>或者：</p>
<ul>
<li><code>Hibernate.initialize(Object proxy);</code> 把对象先初始化一下。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hibernate.initialize(c1);</span><br></pre></td></tr></table></figure>
<h3 id="关联级别的延迟加载"><a href="#关联级别的延迟加载" class="headerlink" title="关联级别的延迟加载"></a>关联级别的延迟加载</h3><p>（查询某个客户，当查看该客户下的所有联系人是否是延迟加载）</p>
<ul>
<li>默认是延迟加载</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line">Customer c = session.get(Customer.class, <span class="number">1L</span>);</span><br><span class="line">System.out.println(<span class="string">"============="</span>);</span><br><span class="line">System.out.println(c.getLinkmans().size()); <span class="comment">// 当查询客户下的联系人的时候才发送语句进行查询</span></span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure>
<h3 id="关联级别延迟加载的策略"><a href="#关联级别延迟加载的策略" class="headerlink" title="关联级别延迟加载的策略"></a>关联级别延迟加载的策略</h3><p>查询策略：使用 Hibernate 查询一个对象的时候，查询其关联对象，应该如何查询，是 Hibernate 的一种优化手段！！</p>
<p>Hibernate 框架的检索策略解决的问题</p>
<h4 id="查询的时机"><a href="#查询的时机" class="headerlink" title="查询的时机"></a>查询的时机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Customer c1 = (Customer) session.get(Customer.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(c1.getLinkmans().size());</span><br></pre></td></tr></table></figure>
<ul>
<li><code>lazy</code> 属性解决查询的时机的问题，需要配置 <code>是否采用延迟加载</code>！！</li>
</ul>
<h4 id="查询的语句格式"><a href="#查询的语句格式" class="headerlink" title="查询的语句格式"></a>查询的语句格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">"from Customer"</span>).list();</span><br><span class="line"><span class="keyword">for</span>(Customer c : list)&#123;</span><br><span class="line">	System.out.println(c.getLinkmans());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>fetch</code> 属性就可以解决 <code>查询语句的格式</code> 的问题！！</li>
</ul>
<h4 id="set-标签配置策略"><a href="#set-标签配置策略" class="headerlink" title="set 标签配置策略"></a>set 标签配置策略</h4><p>在 <code>&lt;set&gt;</code> 标签上使用 <code>fetch</code> 和 <code>lazy</code> 属性：</p>
<ul>
<li><code>fetch</code> 的取值                – 控制 SQL 语句生成的格式</li>
</ul>
<blockquote>
<p><code>select</code>                – 默认值。发送查询语句</p>
<p><code>join</code>                    – 连接查询。发送的是一条迫切左外连接！配置了 join，lazy 就失效了</p>
<p><code>subselect</code>                – 子查询。发送一条子查询查询其关联对象。（需要使用 <code>list()</code> 方法进行测试）</p>
</blockquote>
<ul>
<li><code>lazy</code> 的取值                – 查找关联对象的时候是否采用延迟!</li>
</ul>
<blockquote>
<p><code>true</code>                    – 默认。延迟</p>
<p><code>false</code>                    – 不延迟</p>
<p><code>extra</code>                    – 及其懒惰</p>
</blockquote>
<p><code>set</code> 标签上的默认值是 <code>fetch=&quot;select&quot;</code> 和 <code>lazy=&quot;true&quot;</code></p>
<p><strong>总结：</strong>Hibernate 框架都采用了默认值，开发中基本上使用的都是默认值。特殊情况再进行设置。</p>
<h4 id="many-to-one-标签配置策略"><a href="#many-to-one-标签配置策略" class="headerlink" title="many-to-one 标签配置策略"></a>many-to-one 标签配置策略</h4><p>在 <code>&lt;many-to-one&gt;</code> 标签上使用 <code>fetch</code> 和 <code>lazy</code> 属性</p>
<ul>
<li>fetch的取值        – 控制SQL的格式.</li>
</ul>
<blockquote>
<p>select        – 默认。发送基本select语句查询</p>
<p>join            – 发送迫切左外连接查询</p>
</blockquote>
<ul>
<li>lazy的取值        – 控制加载关联对象是否采用延迟</li>
</ul>
<blockquote>
<p>false            – 不采用延迟加载。</p>
<p>proxy            – 默认值。代理。现在是否采用延迟</p>
</blockquote>
<ul>
<li><p>由另一端的 <code>&lt;class&gt;</code> 上的 <code>lazy</code> 确定.如果这端的 <code>class</code> 上的 <code>lazy=&quot;true&quot;</code>。<code>proxy</code> 的值就是 <code>true</code>(延迟加载)。</p>
</li>
<li><p>如果 <code>class</code> 上 <code>lazy=&quot;false&quot;</code> ，<code>proxy</code> 的值就是 <code>false</code>(不采用延迟)</p>
</li>
</ul>
<p>在 <code>&lt;many-to-one&gt;</code> 标签上的默认值是 <code>fetch=&quot;select&quot;</code> 和 <code>proxy</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/hibernate0500.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-green&quot;&gt;Hibernate 查询方式与策略优化&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Hibernate 关联关系映射</title>
    <link href="http://yoursite.com/JavaWeb-Hibernate04.html"/>
    <id>http://yoursite.com/JavaWeb-Hibernate04.html</id>
    <published>2018-06-01T10:45:37.000Z</published>
    <updated>2018-08-10T06:41:12.377Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/hibernate0400.png"></div>

<p id="div-border-left-green">Hibernate 关联关系映射</p>

<a id="more"></a>
<h1 id="Hibernate-一对多映射"><a href="#Hibernate-一对多映射" class="headerlink" title="Hibernate 一对多映射"></a>Hibernate 一对多映射</h1><p>以 <code>客户关系管理系统（CRM）</code> 为例：</p>
<h2 id="Java-WEB中一对多的设计及其建表原则"><a href="#Java-WEB中一对多的设计及其建表原则" class="headerlink" title="Java WEB中一对多的设计及其建表原则"></a>Java WEB中一对多的设计及其建表原则</h2><p>多方表建一个字段作为外键，指向一方表的主键。</p>
<h2 id="先导入SQL的建表语句"><a href="#先导入SQL的建表语句" class="headerlink" title="先导入SQL的建表语句"></a>先导入SQL的建表语句</h2><ul>
<li><p>创建数据库：<code>create database hibernate_03;</code></p>
</li>
<li><p>执行 SQL 语句进行建表：</p>
</li>
</ul>
<p>客户表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer`</span> (</span><br><span class="line">  <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'客户编号(主键)'</span>,</span><br><span class="line">  <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户名称(公司名称)'</span>,</span><br><span class="line">  <span class="string">`cust_user_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'负责人id'</span>,</span><br><span class="line">  <span class="string">`cust_create_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建人id'</span>,</span><br><span class="line">  <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户信息来源'</span>,</span><br><span class="line">  <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户所属行业'</span>,</span><br><span class="line">  <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户级别'</span>,</span><br><span class="line">  <span class="string">`cust_linkman`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人'</span>,</span><br><span class="line">  <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'固定电话'</span>,</span><br><span class="line">  <span class="string">`cust_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'移动电话'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
<p>联系人表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_linkman`</span> (</span><br><span class="line">  <span class="string">`lkm_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'联系人编号(主键)'</span>,</span><br><span class="line">  <span class="string">`lkm_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人姓名'</span>,</span><br><span class="line">  <span class="string">`lkm_cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户id'</span>,</span><br><span class="line">  <span class="string">`lkm_gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人性别'</span>,</span><br><span class="line">  <span class="string">`lkm_phone`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人办公电话'</span>,</span><br><span class="line">  <span class="string">`lkm_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人手机'</span>,</span><br><span class="line">  <span class="string">`lkm_email`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人邮箱'</span>,</span><br><span class="line">  <span class="string">`lkm_qq`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人qq'</span>,</span><br><span class="line">  <span class="string">`lkm_position`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人职位'</span>,</span><br><span class="line">  <span class="string">`lkm_memo`</span> <span class="built_in">varchar</span>(<span class="number">512</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人备注'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`lkm_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_cst_linkman_lkm_cust_id`</span> (<span class="string">`lkm_cust_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_cst_linkman_lkm_cust_id`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`lkm_cust_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`cst_customer`</span> (<span class="string">`cust_id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
<h2 id="编写客户和联系人的-JavaBean-程序"><a href="#编写客户和联系人的-JavaBean-程序" class="headerlink" title="编写客户和联系人的 JavaBean 程序"></a>编写客户和联系人的 JavaBean 程序</h2><p>（注意一对多的编写规则）</p>
<p><strong>一方 Set 集合，必须自己初始化；多方编写一个对象，不要自己 new ！</strong></p>
<ul>
<li>客户的 JavaBean 如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long cust_id;</span><br><span class="line">    <span class="keyword">private</span> String cust_name;</span><br><span class="line">    <span class="keyword">private</span> Long cust_user_id;</span><br><span class="line">    <span class="keyword">private</span> Long cust_create_id;</span><br><span class="line">    <span class="keyword">private</span> String cust_source;</span><br><span class="line">    <span class="keyword">private</span> String cust_industry;</span><br><span class="line">    <span class="keyword">private</span> String cust_level;</span><br><span class="line">    <span class="keyword">private</span> String cust_linkman;</span><br><span class="line">    <span class="keyword">private</span> String cust_phone;</span><br><span class="line">    <span class="keyword">private</span> String cust_mobile;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Set&lt;Linkman&gt; linkmans = <span class="keyword">new</span> HashSet&lt;Linkman&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>联系人的 JavaBean 如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Linkman</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long lkm_id;</span><br><span class="line">    <span class="keyword">private</span> String lkm_name;</span><br><span class="line">    <span class="keyword">private</span> String lkm_gender;</span><br><span class="line">    <span class="keyword">private</span> String lkm_phone;</span><br><span class="line">    <span class="keyword">private</span> String lkm_mobile;</span><br><span class="line">    <span class="keyword">private</span> String lkm_email;</span><br><span class="line">    <span class="keyword">private</span> String lkm_qq;</span><br><span class="line">    <span class="keyword">private</span> String lkm_position;</span><br><span class="line">    <span class="keyword">private</span> String lkm_memo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编写客户和联系人的映射配置文件"><a href="#编写客户和联系人的映射配置文件" class="headerlink" title="编写客户和联系人的映射配置文件"></a>编写客户和联系人的映射配置文件</h2><p>注意一对多的配置编写：</p>
<ul>
<li>多方：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Customer"</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中：</p>
<blockquote>
<p><code>name</code>：当前 JavaBean 中的属性<br><code>class</code>：属性的全路径<br><code>column</code>：外键的字段</p>
</blockquote>
<ul>
<li>一方：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一方--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkmans"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要出现两个子标签--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--外键的字段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Linkman"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="客户的映射配置文件"><a href="#客户的映射配置文件" class="headerlink" title="客户的映射配置文件"></a>客户的映射配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"cust_id"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_name"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_user_id"</span> <span class="attr">column</span>=<span class="string">"cust_user_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_create_id"</span> <span class="attr">column</span>=<span class="string">"cust_create_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_source"</span> <span class="attr">column</span>=<span class="string">"cust_source"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_industry"</span> <span class="attr">column</span>=<span class="string">"cust_industry"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_level"</span> <span class="attr">column</span>=<span class="string">"cust_level"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_linkman"</span> <span class="attr">column</span>=<span class="string">"cust_linkman"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_phone"</span> <span class="attr">column</span>=<span class="string">"cust_phone"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_mobile"</span> <span class="attr">column</span>=<span class="string">"cust_mobile"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkmans"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Linkman"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="联系人的映射配置文件"><a href="#联系人的映射配置文件" class="headerlink" title="联系人的映射配置文件"></a>联系人的映射配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.Linkman"</span> <span class="attr">table</span>=<span class="string">"cst_linkman"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"lkm_id"</span> <span class="attr">column</span>=<span class="string">"lkm_id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_name"</span> <span class="attr">column</span>=<span class="string">"lkm_name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_gender"</span> <span class="attr">column</span>=<span class="string">"lkm_gender"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_phone"</span> <span class="attr">column</span>=<span class="string">"lkm_phone"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_mobile"</span> <span class="attr">column</span>=<span class="string">"lkm_mobile"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_email"</span> <span class="attr">column</span>=<span class="string">"lkm_email"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_qq"</span> <span class="attr">column</span>=<span class="string">"lkm_qq"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_position"</span> <span class="attr">column</span>=<span class="string">"lkm_position"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkm_memo"</span> <span class="attr">column</span>=<span class="string">"lkm_memo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Customer"</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="保存客户和联系人的数据"><a href="#保存客户和联系人的数据" class="headerlink" title="保存客户和联系人的数据"></a>保存客户和联系人的数据</h2><h3 id="双向关联数据保存（麻烦）"><a href="#双向关联数据保存（麻烦）" class="headerlink" title="双向关联数据保存（麻烦）"></a>双向关联数据保存（麻烦）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试双向关联</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">	Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">	Customer c1 = <span class="keyword">new</span> Customer();</span><br><span class="line">	c1.setCust_name(<span class="string">"小虞"</span>);</span><br><span class="line">	Linkman l1 = <span class="keyword">new</span> Linkman();</span><br><span class="line">	l1.setLkm_name(<span class="string">"小项"</span>);</span><br><span class="line">	Linkman l2 = <span class="keyword">new</span> Linkman();</span><br><span class="line">	l2.setLkm_name(<span class="string">"小羽"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 双向关联</span></span><br><span class="line">	c1.getLinkmans().add(l1);</span><br><span class="line">	c1.getLinkmans().add(l2);</span><br><span class="line"></span><br><span class="line">	l1.setCustome1r(c1);</span><br><span class="line">	l2.setCustomer(c1);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 保存</span></span><br><span class="line">	session.save(c1);</span><br><span class="line">	session.save(l1);</span><br><span class="line">	session.save(l2);</span><br><span class="line"></span><br><span class="line">	tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="级联保存"><a href="#级联保存" class="headerlink" title="级联保存"></a>级联保存</h3><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>如果现在代码只插入其中的一方的数据</p>
<ul>
<li><p>如果只保存其中的一方的数据，那么程序会抛出异常。</p>
</li>
<li><p>如果想完成只保存一方的数据，并且把相关联的数据都保存到数据库中，那么需要配置级联！！</p>
</li>
<li><p>级联保存是方向性</p>
</li>
</ul>
<h4 id="级联保存效果"><a href="#级联保存效果" class="headerlink" title="级联保存效果"></a>级联保存效果</h4><ul>
<li><p>级联保存：保存一方同时可以把关联的对象也保存到数据库中！！</p>
</li>
<li><p>使用 <code>cascade=&quot;save-update&quot;</code></p>
</li>
</ul>
<p>注意：<strong>级联保存有方向性</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--客户级联联系人--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkmans"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Linkman"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试级联关联</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">	Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">	Customer c1 = <span class="keyword">new</span> Customer();</span><br><span class="line">	c1.setCust_name(<span class="string">"小虞"</span>);</span><br><span class="line">	Linkman l1 = <span class="keyword">new</span> Linkman();</span><br><span class="line">	l1.setLkm_name(<span class="string">"小项"</span>);</span><br><span class="line">	Linkman l2 = <span class="keyword">new</span> Linkman();</span><br><span class="line">	l2.setLkm_name(<span class="string">"小羽"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 双向关联</span></span><br><span class="line">	c1.getLinkmans().add(l1);</span><br><span class="line">	c1.getLinkmans().add(l2);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 保存客户级联保存联系人</span></span><br><span class="line">	session.save(c1);</span><br><span class="line"></span><br><span class="line">	tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>相反的，要使用联系人去关联客户，那么需要在联系人的映射里面配置 <code>cascade=&quot;save_update&quot;</code>，这是只要保存了联系人，与其对应的客户也会保存或更新。</li>
</ul>
<h3 id="级联删除"><a href="#级联删除" class="headerlink" title="级联删除"></a>级联删除</h3><ul>
<li><p>1.数据库中删除含有外键的客户时，SQL 语句会报出错误的：<code>delete from customers where cid = 1;</code></p>
</li>
<li><p>2.如果使用 Hibernate 框架直接删除客户的时候，测试发现是可以删除的；</p>
</li>
<li><ul>
<li>Hibernate 框架删除有外键的信息是，会将外键先查出来置为 null，然后执行删除操作；</li>
</ul>
</li>
<li><p>3.上述的删除是普通的删除，那么也可以使用级联删除，注意：级联删除也是有方向性的！！（轻易不要使用）</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">cascade</span>=<span class="string">"delete"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="级联的取值（cascade的取值）"><a href="#级联的取值（cascade的取值）" class="headerlink" title="级联的取值（cascade的取值）"></a>级联的取值（cascade的取值）</h3><ul>
<li><code>none</code>                        – 不使用级联</li>
<li><code>save-update</code>                – 级联保存或更新</li>
<li><code>delete</code>                    – 级联删除</li>
<li><code>delete-orphan</code>                – 孤儿删除(注意：只能应用在一对多关系)</li>
<li><code>all</code>                        – 除了 delete-orphan 的所有情况（包含save-update delete）</li>
<li><code>all-delete-orphan</code>            – 包含了 delete-orphan 的所有情况（包含save-update delete delete-orphan）</li>
</ul>
<h3 id="孤儿删除（孤子删除）"><a href="#孤儿删除（孤子删除）" class="headerlink" title="孤儿删除（孤子删除）"></a>孤儿删除（孤子删除）</h3><p>只有在一对多的环境下才有孤儿删除</p>
<ul>
<li>在一对多的关系中，可以将一的一方认为是父方。将多的一方认为是子方。孤儿删除：在解除了父子关系的时候，将子方记录就直接删除。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">cascade</span>=<span class="string">"delete-orphan"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试孤儿删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">	Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">	Customer c1 = session.get(Customer.class, <span class="number">1L</span>);</span><br><span class="line">	Linkman l1 = session.get(Linkman.class, <span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解除关系</span></span><br><span class="line">	c1.getLinkmans().remove(l1);</span><br><span class="line"></span><br><span class="line">	tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="放弃外键的维护"><a href="#放弃外键的维护" class="headerlink" title="放弃外键的维护"></a>放弃外键的维护</h2><h3 id="双方都维护外键的时候，会产生多余的-SQL-语句"><a href="#双方都维护外键的时候，会产生多余的-SQL-语句" class="headerlink" title="双方都维护外键的时候，会产生多余的 SQL 语句"></a>双方都维护外键的时候，会产生多余的 SQL 语句</h3><ul>
<li><p>想修改客户和联系人的关系，进行双向关联，双方都会维护外键，会产生多余的 SQL 语句。</p>
</li>
<li><p>产生的原因：session 的一级缓存中的快照机制，会让双方都更新数据库，产生了多余的 SQL 语句。</p>
</li>
</ul>
<h3 id="放弃外键维护"><a href="#放弃外键维护" class="headerlink" title="放弃外键维护"></a>放弃外键维护</h3><p>如果不想产生多余的 SQL 语句，那么需要一方来放弃外键的维护！</p>
<p>只有 <code>一方</code> 可以放弃，<code>多方</code> 没有哪个属性</p>
<ul>
<li>在 <code>&lt;set&gt;</code> 标签上配置一个 <code>inverse=&quot;true&quot;</code>，true：放弃，false：不放弃，默认值是false</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 放弃外键的维护 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkmans"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Linkman"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="cascade-和-inverse-的区别"><a href="#cascade-和-inverse-的区别" class="headerlink" title="cascade 和 inverse 的区别"></a>cascade 和 inverse 的区别</h3><ul>
<li><p><code>cascade</code> 用来级联操作（保存、修改和删除）;</p>
</li>
<li><p><code>inverse</code> 用来维护外键的。</p>
</li>
</ul>
<blockquote>
<p>一般情况下，在 <code>一方</code> 配置 <code>inverse</code> 放弃外键维护，在 <code>多方</code> 配置 <code>cascade</code> 来进行级联保存操作。</p>
</blockquote>
<hr>
<h1 id="Hibernate-多对多映射"><a href="#Hibernate-多对多映射" class="headerlink" title="Hibernate 多对多映射"></a>Hibernate 多对多映射</h1><hr>
<h2 id="多对多的建表原则"><a href="#多对多的建表原则" class="headerlink" title="多对多的建表原则"></a>多对多的建表原则</h2><ul>
<li><p>需要创建一个中间表，至少需要包含两个字段，作为这个表外键，分别指向两张表的主键。</p>
</li>
<li><p>两个外键一起叫联合主键。</p>
</li>
<li><p>使用 Hibernate 框架，只要编写两个 JavaBean，编写两个映射的配置文件，中间表会自动生成。</p>
</li>
</ul>
<h2 id="多对多-JavaBean-的编写"><a href="#多对多-JavaBean-的编写" class="headerlink" title="多对多 JavaBean 的编写"></a>多对多 JavaBean 的编写</h2><p>以用户和角色为例，一个用户可以有多个角色，一个角色可以被多个用户扮演。</p>
<h3 id="编写用户和角色的-JavaBean"><a href="#编写用户和角色的-JavaBean" class="headerlink" title="编写用户和角色的 JavaBean"></a>编写用户和角色的 JavaBean</h3><p>多对多都要用 <code>Set</code> 集合：</p>
<ul>
<li>用户的 JavaBean 代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Long user_id;</span><br><span class="line">	<span class="keyword">private</span> String user_code;</span><br><span class="line">	<span class="keyword">private</span> String user_name;</span><br><span class="line">	<span class="keyword">private</span> String user_password;</span><br><span class="line">	<span class="keyword">private</span> String user_state;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;Role&gt;();</span><br><span class="line">	<span class="comment">// 省略 get / set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>角色的 JavaBean 代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Long role_id;</span><br><span class="line">	<span class="keyword">private</span> String role_name;</span><br><span class="line">	<span class="keyword">private</span> String role_memo;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet&lt;User&gt;();</span><br><span class="line">	<span class="comment">// 省略 get / set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用户和角色的映射配置"><a href="#用户和角色的映射配置" class="headerlink" title="用户和角色的映射配置"></a>用户和角色的映射配置</h3><ul>
<li>用户的映射配置文件如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.User"</span> <span class="attr">table</span>=<span class="string">"sys_user"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"user_id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_code"</span> <span class="attr">column</span>=<span class="string">"user_code"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_name"</span> <span class="attr">column</span>=<span class="string">"user_name"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_password"</span> <span class="attr">column</span>=<span class="string">"user_password"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_state"</span> <span class="attr">column</span>=<span class="string">"user_state"</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置多对多</span></span><br><span class="line"><span class="comment">		name	集合的名称</span></span><br><span class="line"><span class="comment">		table	中间表的名称	</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"roles"</span> <span class="attr">table</span>=<span class="string">"sys_user_role"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 当前对象在中间表的外键名称 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			class	集合中存入对象，对象的全路径</span></span><br><span class="line"><span class="comment">			column	集合中对象在中间表的外键的名称</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.Role"</span> <span class="attr">column</span>=<span class="string">"role_id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>角色的映射配置文件如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.Role"</span> <span class="attr">table</span>=<span class="string">"sys_role"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"role_id"</span> <span class="attr">column</span>=<span class="string">"role_id"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"role_name"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"role_memo"</span> <span class="attr">column</span>=<span class="string">"role_memo"</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"users"</span> <span class="attr">table</span>=<span class="string">"sys_user_role"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"role_id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.renkaigis.domain.User"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>多对多进行双向关联的时候：<strong>必须有一方去放弃外键维护权</strong>。</p>
<p>否则会发生异常！</p>
<h3 id="级联保存-1"><a href="#级联保存-1" class="headerlink" title="级联保存"></a>级联保存</h3><h4 id="级联保存-2"><a href="#级联保存-2" class="headerlink" title="级联保存"></a>级联保存</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="级联删除-1"><a href="#级联删除-1" class="headerlink" title="级联删除"></a>级联删除</h4><p>（在多对多中是很少使用的）</p>
<p><strong>开发中不用！</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">cascade</span>=<span class="string">"delete"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="操作中间表"><a href="#操作中间表" class="headerlink" title="操作中间表"></a>操作中间表</h3><p>操作集合，就是操作中间表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 假设：张三用户，有2个角色，演员和导演，让张三没有演员这个角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">	Transaction tr = session.beginTransaction();</span><br><span class="line">	<span class="comment">// 获取用户和角色</span></span><br><span class="line">	User u1 = session.get(User.class, <span class="number">1L</span>);</span><br><span class="line">	Role r2 = session.get(Role.class, <span class="number">2L</span>);</span><br><span class="line">	<span class="comment">// 移除用户的某一个角色，那么中间表就会修改了</span></span><br><span class="line">	u1.getRoles().remove(r2);	</span><br><span class="line">	tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/hibernate0400.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-green&quot;&gt;Hibernate 关联关系映射&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 之 Hibernate 持久化类、缓存与事务</title>
    <link href="http://yoursite.com/JavaWeb-Hibernate03.html"/>
    <id>http://yoursite.com/JavaWeb-Hibernate03.html</id>
    <published>2018-05-30T08:43:19.000Z</published>
    <updated>2018-08-10T06:41:33.801Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/javaweb/hibernate0300.png"></div>

<p id="div-border-left-green">Hibernate 持久化类、缓存与事务。</p>

<a id="more"></a>
<hr>
<h1 id="Hibernate-的持久化类"><a href="#Hibernate-的持久化类" class="headerlink" title="Hibernate 的持久化类"></a>Hibernate 的持久化类</h1><hr>
<h2 id="什么是持久化类"><a href="#什么是持久化类" class="headerlink" title="什么是持久化类"></a>什么是持久化类</h2><p>持久化类：就是一个 Java 类（自己编写的 JavaBean），这个 Java 类与表建立了映射关系就可以称为是持久化类。</p>
<ul>
<li>持久化类 = JavaBean + xxx.hbm.xml</li>
</ul>
<h2 id="持久化类的编写规则"><a href="#持久化类的编写规则" class="headerlink" title="持久化类的编写规则"></a>持久化类的编写规则</h2><ul>
<li>提供一个无参数 public 访问控制符的构造器     – 底层需要进行反射。</li>
<li>提供一个标识属性，映射数据表主键字段       – 唯一标识 OID。数据库中通过主键，Java 对象通过地址确定对象，持久化类通过唯一标识 OID 确定记录。</li>
<li>所有属性提供 public 访问控制符的 set 或者 get 方法</li>
<li>标识属性应尽量使用基本数据类型的包装类型</li>
</ul>
<h2 id="区分自然主键和代理主键"><a href="#区分自然主键和代理主键" class="headerlink" title="区分自然主键和代理主键"></a>区分自然主键和代理主键</h2><p>创建表的时候</p>
<ul>
<li><p>自然主键：对象本身的一个属性。创建一个人员表，每个人都有一个身份证号（唯一的）。使用身份证号作为表的主键，自然主键。（开发中不会使用这种方式）</p>
</li>
<li><p>代理主键：不是对象本身的一个属性。创建一个人员表，为每个人员单独创建一个字段。用这个字段作为主键，代理主键。（开发中推荐使用这种方式）</p>
</li>
</ul>
<ol>
<li>创建表的时候尽量使用代理主键创建表</li>
</ol>
<h2 id="主键的生成策略"><a href="#主键的生成策略" class="headerlink" title="主键的生成策略"></a>主键的生成策略</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--主键的生成策略--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">length</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重要的是 <code>uuid</code> 和 <code>native</code></p>
<h3 id="increment"><a href="#increment" class="headerlink" title="increment"></a>increment</h3><p>适用于 short，int，long 作为主键。不是使用的数据库自动增长机制。</p>
<ul>
<li>Hibernate中提供的一种增长机制。</li>
<li>先进行查询：<code>select max(id) from user;</code></li>
<li>再进行插入：获得 <code>最大值 + 1</code>作为新的记录的主键。</li>
</ul>
<p>SQL 代码如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">max</span>(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        t_user</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">insert</span> </span><br><span class="line">    <span class="keyword">into</span></span><br><span class="line">        t_user</span><br><span class="line">        (<span class="keyword">name</span>, age, <span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (?, ?, ?)</span><br></pre></td></tr></table></figure>
<p><em>问题：</em> 不能在集群环境下或者有并发访问的情况下使用。</p>
<h3 id="identity"><a href="#identity" class="headerlink" title="identity"></a>identity</h3><p>适用于 short，int，long 作为主键。但是这个必须使用在有自动增长数据库中，采用的是数据库底层的自动增长机制。</p>
<ul>
<li>底层使用的是数据库的自动增长（auto_increment）。像 Oracle 数据库没有自动增长。</li>
</ul>
<h3 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h3><p>适用于 short，int，long 作为主键。底层使用的是序列的增长方式。</p>
<ul>
<li>Oracle 数据库底层没有自动增长，想自动增长需要使用序列。</li>
</ul>
<h3 id="uuid-★"><a href="#uuid-★" class="headerlink" title="uuid ★"></a>uuid <strong>★</strong></h3><p>适用于 char，varchar 类型的作为主键。</p>
<ul>
<li>使用随机的字符串作为主键。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 uuid 生成主键策略</span></span><br><span class="line"><span class="comment"> * Person 类有两个属性 String pname 和 String pid</span></span><br><span class="line"><span class="comment"> * Person.hbm.xml 如下编写：</span></span><br><span class="line"><span class="comment"> * &lt;id name="pid" column="pid"&gt;</span></span><br><span class="line"><span class="comment">        &lt;generator class="uuid"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/id&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runUUID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getSession();</span><br><span class="line">    Transaction tr = session.beginTransaction();</span><br><span class="line">    Person p = <span class="keyword">new</span> Person();</span><br><span class="line">    p.setPname(<span class="string">"老王"</span>);</span><br><span class="line"></span><br><span class="line">    session.save(p);</span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看生成的 uuid 主键：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t_person;</span><br><span class="line">+<span class="comment">----------------------------------+--------+</span></span><br><span class="line">| pid                              | pname  |</span><br><span class="line">+<span class="comment">----------------------------------+--------+</span></span><br><span class="line">| ff80808163ab33ae0163ab33b2370000 | 老王   |</span><br><span class="line">+<span class="comment">----------------------------------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="native-★"><a href="#native-★" class="headerlink" title="native ★"></a>native <strong>★</strong></h3><p>本地策略。根据底层的数据库不同，自动选择适用于该种数据库的生成策略。（short，int，long）</p>
<ul>
<li><p>如果底层使用 MySQL 数据库：相当于 identity</p>
</li>
<li><p>如果底层使用 Oracle 数据库：相当于 sequence</p>
</li>
</ul>
<h3 id="assigned"><a href="#assigned" class="headerlink" title="assigned"></a>assigned</h3><p>主键的生成不用 Hibernate 管理了。必须手动设置主键。    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.setPid(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Hibernate-持久化对象的状态"><a href="#Hibernate-持久化对象的状态" class="headerlink" title="Hibernate 持久化对象的状态"></a>Hibernate 持久化对象的状态</h1><hr>
<h2 id="持久化对象的状态"><a href="#持久化对象的状态" class="headerlink" title="持久化对象的状态"></a>持久化对象的状态</h2><p>Hibernate 为了管理持久化类：将持久化类分成了三个状态</p>
<ul>
<li>瞬时态：Transient  Object</li>
<li><ul>
<li>没有持久化标识 OID，没有被纳入到 Session 对象的管理。</li>
</ul>
</li>
<li><p>持久态：Persistent Object</p>
</li>
<li><ul>
<li>有持久化标识 OID，已经被纳入到 Session 对象的管理。</li>
</ul>
</li>
<li><p>脱管态：Detached Object</p>
</li>
<li><ul>
<li>有持久化标识 OID，没有被纳入到 Session 对象的管理。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久化对象的状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getSession();</span><br><span class="line">    Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 瞬时态：没有 OID 的值，也没有被 session 管理，此时 user 对象是瞬时态对象</span></span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"空空"</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时 user 中已经有 id 值了，默认的情况下，把 user 对象也保存到 session 的缓存中</span></span><br><span class="line">    session.save(user);</span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">    <span class="comment">// 此时，user 是持久化对象</span></span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    <span class="comment">// session 销毁，缓存没有了</span></span><br><span class="line">    session.close();</span><br><span class="line">    <span class="comment">// 此时 user 对象存在 id 值，但是 session 销毁了，缓存不存在了，session 不管理 user 对象了</span></span><br><span class="line">    <span class="comment">// user 是托管态对象</span></span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">    System.out.println(user.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台输出的结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        max(id) </span><br><span class="line">    from</span><br><span class="line">        t_user</span><br><span class="line"><span class="number">2</span>           <span class="comment">// 此时的 user 有 id 值，并且被 session 管理，证明 user 是持久态对象</span></span><br><span class="line">Hibernate: </span><br><span class="line">    insert </span><br><span class="line">    into</span><br><span class="line">        t_user</span><br><span class="line">        (name, age, id) </span><br><span class="line">    values</span><br><span class="line">        (?, ?, ?)</span><br><span class="line"><span class="number">2</span>           <span class="comment">// 此时 session 已经销毁，但是 user 还有 id 值，证明 user 是托管态对象</span></span><br><span class="line">空空</span><br></pre></td></tr></table></figure>
<h2 id="Hibernate-持久化对象状态的转换"><a href="#Hibernate-持久化对象状态的转换" class="headerlink" title="Hibernate 持久化对象状态的转换"></a>Hibernate 持久化对象状态的转换</h2><h3 id="瞬时态"><a href="#瞬时态" class="headerlink" title="瞬时态"></a>瞬时态</h3><ul>
<li>获得瞬时态的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User()</span><br></pre></td></tr></table></figure>
<ul>
<li>瞬时态对象转换持久态</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save();</span><br><span class="line">或者</span><br><span class="line">saveOrUpdate();</span><br></pre></td></tr></table></figure>
<ul>
<li>瞬时态对象转换成脱管态</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.setId(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="持久态"><a href="#持久态" class="headerlink" title="持久态"></a>持久态</h3><ul>
<li>获得持久态的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get();</span><br><span class="line">或者</span><br><span class="line">load();</span><br></pre></td></tr></table></figure>
<ul>
<li>持久态转换成瞬时态对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete();  <span class="comment">// 比较有争议的，进入特殊的状态（删除态：Hibernate 中不建议使用的）</span></span><br></pre></td></tr></table></figure>
<ul>
<li>持久态对象转成脱管态对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.close()/evict()/clear();</span><br></pre></td></tr></table></figure>
<h3 id="脱管态"><a href="#脱管态" class="headerlink" title="脱管态"></a>脱管态</h3><ul>
<li>获得托管态对象:不建议直接获得脱管态的对象.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>脱管态对象转换成持久态对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update();或者</span><br><span class="line">saveOrUpdate();或者</span><br><span class="line">lock();</span><br></pre></td></tr></table></figure>
<ul>
<li>脱管态对象转换成瞬时态对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.setId(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 持久态对象有自动更新数据库的能力！！</p>
<p>持久态对象自动更新数据库：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久态对象自动更新数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getSession();</span><br><span class="line">    Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// user 是持久态对象，有自动更新数据库的能力</span></span><br><span class="line">    User user = session.get(User.class, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 重新设置名称</span></span><br><span class="line">    user.setName(<span class="string">"天才"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// session.update(user);</span></span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码注释掉了 <code>session.update(user);</code> 方法，但是数据库依旧更新了，SQL 语句也正常执行了。</p>
<p>控制台输出结果（没调用 update，但是执行了 update 语句。原因是因为一级缓存的存在。）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        user0_.id <span class="keyword">as</span> id1_1_0_,</span><br><span class="line">        user0_.name <span class="keyword">as</span> name2_1_0_,</span><br><span class="line">        user0_.age <span class="keyword">as</span> age3_1_0_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        t_user user0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        user0_.id=?</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">update</span></span><br><span class="line">        t_user </span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">        <span class="keyword">name</span>=?,</span><br><span class="line">        age=? </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        <span class="keyword">id</span>=?</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Hibernate-的一级缓存"><a href="#Hibernate-的一级缓存" class="headerlink" title="Hibernate 的一级缓存"></a>Hibernate 的一级缓存</h1><hr>
<h2 id="Session-对象的一级缓存（重点）"><a href="#Session-对象的一级缓存（重点）" class="headerlink" title="Session 对象的一级缓存（重点）"></a>Session 对象的一级缓存（重点）</h2><h3 id="什么是缓存？"><a href="#什么是缓存？" class="headerlink" title="什么是缓存？"></a>什么是缓存？</h3><p>其实就是一块内存空间，将数据源（数据库或者文件）中的数据存放到缓存中。再次获取的时候，直接从缓存中获取。可以提升程序的性能！</p>
<h3 id="Hibernate-框架提供了两种缓存"><a href="#Hibernate-框架提供了两种缓存" class="headerlink" title="Hibernate 框架提供了两种缓存"></a>Hibernate 框架提供了两种缓存</h3><p>一级缓存</p>
<ul>
<li>自带的不可卸载的。一级缓存的生命周期与 session 一致。一级缓存称为 session 级别的缓存。</li>
</ul>
<p>二级缓存（有更好的替代品）</p>
<ul>
<li>默认没有开启，需要手动配置才可以使用的。二级缓存可以在多个 session 中共享数据，二级缓存称为是 sessionFactory 级别的缓存。</li>
</ul>
<h3 id="Session-对象的缓存概述"><a href="#Session-对象的缓存概述" class="headerlink" title="Session 对象的缓存概述"></a>Session 对象的缓存概述</h3><ul>
<li><p>Session 接口中，有一系列的 java 的集合，这些 java 集合构成了 Session 级别的缓存（一级缓存），将对象存入到一级缓存中，session 没有结束生命周期，那么对象在 session 中存放着</p>
</li>
<li><p>内存中包含 Session 实例 –&gt; Session 的缓存（一些集合） –&gt; 集合中包含的是缓存对象！</p>
</li>
</ul>
<h3 id="证明一级缓存的存在，编写查询的代码即可证明"><a href="#证明一级缓存的存在，编写查询的代码即可证明" class="headerlink" title="证明一级缓存的存在，编写查询的代码即可证明"></a>证明一级缓存的存在，编写查询的代码即可证明</h3><ul>
<li>在同一个 Session 对象中两次查询，可以证明使用了缓存。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 证明一级缓存的存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getSession();</span><br><span class="line">    Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"天行健"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存用户，user 已经存入到 session 的缓存中</span></span><br><span class="line">    <span class="comment">// id 是生成的 id</span></span><br><span class="line">    Serializable id = session.save(user);</span><br><span class="line">    System.out.println(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取对象，不会看到 SQL 语句</span></span><br><span class="line">    User user2 = session.get(User.class, id);</span><br><span class="line">    System.out.println(user2.getName());</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台输出结果：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">insert</span> </span><br><span class="line">    <span class="keyword">into</span></span><br><span class="line">        t_user</span><br><span class="line">        (<span class="keyword">name</span>, age) </span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (?, ?)</span><br><span class="line"><span class="number">4</span></span><br><span class="line">天行健</span><br></pre></td></tr></table></figure>
<p><strong>分析：</strong> 获取对象的时候没有查询的 SQL 语句执行，说明 session 是从缓存中获取对象的。证明 session 一级缓存的存在。</p>
<h3 id="Hibernate框架是如何做到数据发生变化时进行同步操作的呢？"><a href="#Hibernate框架是如何做到数据发生变化时进行同步操作的呢？" class="headerlink" title="Hibernate框架是如何做到数据发生变化时进行同步操作的呢？"></a>Hibernate框架是如何做到数据发生变化时进行同步操作的呢？</h3><ul>
<li><p>使用 get 方法查询 User 对象</p>
</li>
<li><p>然后设置 User 对象的一个属性，注意：没有做 update 操作。发现，数据库中的记录也改变了。</p>
</li>
<li><p>利用快照机制来完成的（SnapShot）</p>
</li>
</ul>
<h3 id="控制Session的一级缓存（了解）"><a href="#控制Session的一级缓存（了解）" class="headerlink" title="控制Session的一级缓存（了解）"></a>控制Session的一级缓存（了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Session.clear(); <span class="comment">// 清空缓存。</span></span><br><span class="line">Session.evict(Object entity); <span class="comment">// 从一级缓存中清除指定的实体对象。</span></span><br><span class="line">Session.flush(); <span class="comment">// 刷出缓存</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Hibernate中的事务与并发"><a href="#Hibernate中的事务与并发" class="headerlink" title="Hibernate中的事务与并发"></a>Hibernate中的事务与并发</h1><hr>
<h2 id="事务相关的概念"><a href="#事务相关的概念" class="headerlink" title="事务相关的概念**"></a>事务相关的概念**</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><ul>
<li>事务就是逻辑上的一组操作，组成事务的各个执行单元，操作要么全都成功，要么全都失败.</li>
<li>转账的例子：扣钱，加钱。两个操作组成了一个事情！</li>
</ul>
<h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><ul>
<li>原子性    – 事务不可分割。</li>
<li>一致性    – 事务执行的前后数据的完整性保持一致。</li>
<li>隔离性    – 一个事务执行的过程中，不应该受到其他的事务的干扰。</li>
<li>持久性    – 事务一旦提交，数据就永久保持到数据库中。</li>
</ul>
<h3 id="如果不考虑隔离性：引发一些读的问题"><a href="#如果不考虑隔离性：引发一些读的问题" class="headerlink" title="如果不考虑隔离性：引发一些读的问题"></a>如果不考虑隔离性：引发一些读的问题</h3><ul>
<li><p>脏读            – 一个事务读到了另一个事务未提交的数据。</p>
</li>
<li><p>不可重复读            – 一个事务读到了另一个事务已经提交的 update 数据，导致多次查询结果不一致。</p>
</li>
<li><p>虚读            – 一个事务读到了另一个事务已经提交的 insert 数据，导致多次查询结构不一致。</p>
</li>
</ul>
<h3 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h3><p>通过设置数据库的隔离级别来解决上述读的问题</p>
<ul>
<li><p>未提交读：以上的读的问题都有可能发生。</p>
</li>
<li><p>已提交读：避免脏读，但是不可重复读，虚读都有可能发生。</p>
</li>
<li><p>可重复读：避免脏读，不可重复读。但是虚读是有可能发生。</p>
</li>
<li><p>串行化：以上读的情况都可以避免。</p>
</li>
</ul>
<p>如果想在 Hibernate 的框架中来设置隔离级别，需要在 <code>hibernate.cfg.xml</code> 的配置文件中通过标签来配置（默认隔离级别是 4）：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.isolation"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过：<code>hibernate.connection.isolation = 4</code> 来配置，取值如下：</p>
<ul>
<li>1 — Read uncommitted isolation</li>
<li>2 — Read committed isolation</li>
<li>4 — Repeatable read isolation</li>
<li>8 — Serializable isolation</li>
</ul>
<h2 id="丢失更新的问题"><a href="#丢失更新的问题" class="headerlink" title="丢失更新的问题"></a>丢失更新的问题</h2><p>如果不考虑隔离性，也会产生写入数据的问题，这一类的问题叫丢失更新的问题。</p>
<p>例如：两个事务同时对某一条记录做修改，就会引发丢失更新的问题。</p>
<ul>
<li><p>A事务和B事务同时获取到一条数据，同时再做修改</p>
</li>
<li><p>如果A事务修改完成后，提交了事务</p>
</li>
<li><p>B事务修改完成后，不管是提交还是回滚，如果不做处理，都会对数据产生影响</p>
</li>
</ul>
<h3 id="丢失更新问题演示"><a href="#丢失更新问题演示" class="headerlink" title="丢失更新问题演示"></a>丢失更新问题演示</h3><p>更新前的数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t_user;</span><br><span class="line">+----+-----------+------+</span><br><span class="line">| id | name      | age  |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">|  1 | 天才      |   18 |</span><br><span class="line">|  2 | 空空      |   18 |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>假设 runA 方法和 runB() 方法同时对 t_user 表进行修改，同时查询到 id = 1 的用户（需加断点），对其进行修改。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 丢失更新1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getSession();</span><br><span class="line">    Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    User user = session.get(User.class, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 修改 id = 1 的用户名为白蛇</span></span><br><span class="line">    user.setName(<span class="string">"白蛇"</span>);</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 丢失更新2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getSession();</span><br><span class="line">    Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    User user = session.get(User.class, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 修改 id = 1 的用户年龄为 88 </span></span><br><span class="line">    user.setAge(<span class="number">88</span>);</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分析：假设 runA 方法先提交，那么数据库中的数据为：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t_user;</span><br><span class="line">+----+-----------+------+</span><br><span class="line">| id | name      | age  |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">|  1 | 白蛇      |   18 |</span><br><span class="line">|  2 | 空空      |   18 |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分析：runA 提交之后，runB 提交，则此时数据库中数据为：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t_user;</span><br><span class="line">+----+-----------+------+</span><br><span class="line">| id | name      | age  |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">|  1 | 天才      |   88 |</span><br><span class="line">|  2 | 空空      |   18 |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分析：最后数据库中的数据只是 runB 修改的结果，而 runA 修改的结果“丢失了”，这就是丢失更新的问题。</p>
</blockquote>
<h3 id="丢失更新解决方案"><a href="#丢失更新解决方案" class="headerlink" title="丢失更新解决方案"></a>丢失更新解决方案</h3><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>乐观锁采用 <code>版本号</code> 的机制来解决的。会给表结构添加一个字段 version = 0 ，默认值是 0</p>
<ul>
<li><p>当 A 事务在操作完该条记录，提交事务时，会先检查版本号，如果发生版本号的值相同时，才可以提交事务。同时会更新版本号 version = 1 。</p>
</li>
<li><p>当 B 事务操作完该条记录时，提交事务时，会先检查版本号，如果发现版本不同时，程序会出现错误。</p>
</li>
</ul>
<h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>悲观锁采用的是数据库提供的一种锁机制，如果采用做了这种机制，在 SQL 语句的后面添加 for update 子句</p>
<ul>
<li>当 A 事务在操作该条记录时，会把该条记录锁起来，其他事务是不能操作这条记录的。</li>
<li>只有当 A 事务提交后，锁释放了，其他事务才能操作该条记录</li>
</ul>
<h3 id="使用-Hibernate-框架解决丢失更新的问题"><a href="#使用-Hibernate-框架解决丢失更新的问题" class="headerlink" title="使用 Hibernate 框架解决丢失更新的问题"></a>使用 Hibernate 框架解决丢失更新的问题</h3><h4 id="悲观锁-1"><a href="#悲观锁-1" class="headerlink" title="悲观锁"></a>悲观锁</h4><ul>
<li>使用session.get(Customer.class, 1,LockMode.UPGRADE); 方法</li>
</ul>
<h4 id="乐观锁-1"><a href="#乐观锁-1" class="headerlink" title="乐观锁"></a>乐观锁</h4><ul>
<li>在对应的 JavaBean 中添加一个属性，名称可以是任意的。例如：<code>private Integer version</code>; 并提供 <code>get</code> 和 <code>set</code> 方法。</li>
<li>在映射的配置文件中，提供 <code>&lt;version name=&quot;version&quot;/&gt;</code> 标签即可。</li>
<li>注意 version 标签的编写位置。 </li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.renkaigis.domain.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--乐观锁，使用 version 标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">name</span>=<span class="string">"version"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">length</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="绑定本地的Session"><a href="#绑定本地的Session" class="headerlink" title="绑定本地的Session"></a>绑定本地的Session</h2><p>Hibernate 框架中，使用 session 对象开启事务，所以需要来传递 session 对象，框架提供了 ThreadLocal 的方式</p>
<ul>
<li>需要在 <code>hibernate.cfg.xml</code> 的配置文件中提供配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启绑定本地的 session--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>重新编写 <code>HibernateUtils</code> 的工具类，使用 SessionFactory 的 getCurrentSession() 方法，获取当前的 Session 对象。并且该 Session 对象不用手动关闭，线程结束了，会自动关闭。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务层开事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从 ThreadLocal 类中获取到 session 对象</span></span><br><span class="line">    <span class="keyword">return</span> FACTORY.getCurrentSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 想使用 <code>getCurrentSession()</code> 方法，必须要先配置才能使用。</p>
<h3 id="演示绑定本地-session"><a href="#演示绑定本地-session" class="headerlink" title="演示绑定本地 session"></a>演示绑定本地 session</h3><h4 id="web层"><a href="#web层" class="headerlink" title="web层"></a>web层</h4><p>浏览器端发送请求，同时新增两个用户。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">        u1.setName(<span class="string">"测试1"</span>);</span><br><span class="line"></span><br><span class="line">        User u2 = <span class="keyword">new</span> User();</span><br><span class="line">        u2.setName(<span class="string">"测试2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> UserService().save(u1, u2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h4><p>业务层获取当前线程的 session，开启事务，调用 dao 保存用户，若发生异常则回滚。</p>
<p>线程结束后 session 自动关闭。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User u1, User u2)</span> </span>&#123;</span><br><span class="line">        UserDao dao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction tr = session.beginTransaction();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dao.save1(u1);</span><br><span class="line">            <span class="comment">// int a = 10 / 0;</span></span><br><span class="line">            dao.save2(u2);</span><br><span class="line">            tr.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 出现问题，回滚事务</span></span><br><span class="line">            tr.rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// session.close();</span></span><br><span class="line">            <span class="comment">// 以前需要自己释放资源</span></span><br><span class="line">            <span class="comment">// 现在 session 不用关闭，线程结束后 session 自动关闭。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><p>获取当前 session，与业务层 session 保持一致，进行保存操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save1</span><span class="params">(User u1)</span> </span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        session.save(u1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save2</span><span class="params">(User u2)</span> </span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        session.save(u2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问 Servlet，数据添加完成。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t_user;</span><br><span class="line">+----+---------+------+---------+</span><br><span class="line">| id | name    | age  | version |</span><br><span class="line">+----+---------+------+---------+</span><br><span class="line">|  1 | 天才    |   88 |       1 |</span><br><span class="line">|  2 | 空空    |   18 |       0 |</span><br><span class="line">|  7 | 测试1   | NULL |       0 |</span><br><span class="line">|  8 | 测试2   | NULL |       0 |</span><br><span class="line">+----+---------+------+---------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.renkaigis.com/javaweb/hibernate0300.png&quot;&gt;&lt;/div&gt;

&lt;p id=&quot;div-border-left-green&quot;&gt;Hibernate 持久化类、缓存与事务。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
</feed>
