{"meta":{"title":"Kai's Blog","subtitle":"要有最朴素的生活，与最遥远的梦想。即使明日天寒地冻，路远马亡。","description":"码渣  |  鸡丝儿  |  二次元  |  古典乐","author":"RenKai","url":"http://yoursite.com"},"pages":[{"title":"Tags","date":"2017-06-07T13:05:24.000Z","updated":"2017-06-07T13:05:58.292Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2017-06-07T05:18:02.000Z","updated":"2017-06-07T13:02:57.269Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2017-06-07T05:18:23.000Z","updated":"2017-06-07T13:41:21.912Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"要有最朴素的生活，与最遥远的梦想。即使明日天寒地冻，路远马亡。 RenKai / 男 / 1993本科 / 西北农林科技大学资源环境学院（地理信息系统 2012/09～2016/06）硕士研究生 / 南京师范大学虚拟地理环境教育部重点实验室（地图学与地理信息系统 2016/09～2019/06）"}],"posts":[{"title":"Chrome 浏览器设置 XX-Net 的方法（Windows）","slug":"Chrome-浏览器设置-XX-Net-的方法（Windows）","date":"2017-07-26T09:41:42.000Z","updated":"2017-07-26T14:29:30.988Z","comments":true,"path":"2017/07/26/Chrome-浏览器设置-XX-Net-的方法（Windows）/","link":"","permalink":"http://yoursite.com/2017/07/26/Chrome-浏览器设置-XX-Net-的方法（Windows）/","excerpt":"本文详细介绍如何在一台 Windows 电脑上架设起 Chrome + XX-Net 的上网渠道。XX-Net 对于需要翻墙的用户来说非常方便。尤其是配置了自己的私有 appid 后，浏览外网毫无压力。","text":"本文详细介绍如何在一台 Windows 电脑上架设起 Chrome + XX-Net 的上网渠道。XX-Net 对于需要翻墙的用户来说非常方便。尤其是配置了自己的私有 appid 后，浏览外网毫无压力。 下载安装 Chrome 浏览器Chrome 下载地址：https://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html 这一步很简单，直接跳过。 获取和运行 XX-Net 打开 https://github.com/XX-net/XX-Net/blob/master/code/default/download.md，选择稳定版下载。 下载完毕后解压缩文件夹，运行文件夹中 start.vbs 文件。 如果弹出管理员权限请求（用户账户控制），请允许。 首次运行可能会弹出防火墙警告，请允许访问。 设置代理方法一：简单方法 启动 XX-Net 后，右下角会出现托盘图标。右键单击托盘图标，点击“全局 PAC 智能代理”即可。 方法二：安装和使用代理切换插件 打开 XX-Net/SwitchyOmega 文件夹；打开 Chrome 浏览器的扩展程序页面 chrome://extensions 。把 SwitchyOmega.crx 文件拖放到浏览器扩展程序页面安装。如图: 此时。浏览器上方会出现对话框，点击添加扩展程序。 进入 SwitchOmega 页面，第一次进来，选择跳过教程； 点击界面左侧栏的导入/导出，选择从备份文件恢复： 点击从备份文件中恢复后，找到 XX-Net/SwitchyOmega/OmegaOptions.bak 文件，点击打开： 点击左侧栏“情景模式”下的 XX-Net自动切换； 下拉点击立即更新情景模式 点击 Chrome 右上角的 SwitchOmega，切换成 “XX-Net自动切换”； 到此，浏览器端设置代理也就完成了，还需最后一步，把 XX-Net 切换为“取消全局代理”，就可以畅游网络了。 但是此时用的是公共 APPID，因为资源有限，使用上存在限制，建议部署私有 APPID。 配置个人 APPID登录 Google 账户 https://www.google.com/ncr (若无帐户，需注册) 创建 APPID 打开https://console.cloud.google.com/start ，点击选择项目，然后点击创建项目： 输入项目名称后，会自动帮你匹配可用ID，然后左击创建(请细读此教程底部说明) 设置 APPID 的 App 引擎 点击激活 Google云端Shell，点击启动云端SHELL进入Shell； 在页面底部输入 gcloud config set project 项目ID,按下键盘的enter键，然后输入 gcloud beta app create --region us-central ，再按一次enter； 当底部出现 Success! The app is now created. Please use &#39;gcloud app deploy&#39; to deploy your first app. 时，创建 appid 成功。此时可以重复前面两步，创建更多的 appid； 部署服务器端 打开 XX-Net 的设置页：http://127.0.0.1:8085 ，切换到部署服务端； 输入AppID（多个APPID中间使用 | 隔开），“Show Debug Log”选择为 On ，点击 开始部署 ； 弹出授权窗口，点击 Allow，然后就会进行服务端的部署； Debug Log 里面显示如下信息，则说明部署完成； 部署完成后，切换到 配置 ，输入部署好的 APPID 后点击 保存。 切换到 状态 来确认部署的状态，如果一切正常，那么恭喜你，现在可以流畅的翻墙喽~~~ 说明 每个 AppID 每天1G流量，一般每个 Google 帐户最多12个 AppID； AppID 的数量只影响流量，不影响速度； 若部署过程中始终无法弹出窗口 , 建议使用ss部署服务端； 若部署一直失败，可以安装 Google Cloud SDK，gcloud init设置代理，gcloud app deploy 上传 gae 文件夹，在 app.yaml 中不要指定 application 和 version。","categories":[{"name":"Chrome","slug":"Chrome","permalink":"http://yoursite.com/categories/Chrome/"}],"tags":[{"name":"Chrome, XX-Net","slug":"Chrome-XX-Net","permalink":"http://yoursite.com/tags/Chrome-XX-Net/"}]},{"title":"ArcGIS Engine 地图操作基础——地图文档保存","slug":"ArcGIS-Engine-地图操作基础——地图文档保存","date":"2017-06-13T13:15:30.000Z","updated":"2017-06-13T14:27:06.536Z","comments":true,"path":"2017/06/13/ArcGIS-Engine-地图操作基础——地图文档保存/","link":"","permalink":"http://yoursite.com/2017/06/13/ArcGIS-Engine-地图操作基础——地图文档保存/","excerpt":"在对地图文档进行修改后，经常需要对其进行保存。地图文档的保存分为直接保存和另存为两种。这里的保存仅仅只是修改地图文档文件记录的信息，并不会对数据进行更改。保存地图文档的一般格式是 *.mxd 格式。","text":"在对地图文档进行修改后，经常需要对其进行保存。地图文档的保存分为直接保存和另存为两种。这里的保存仅仅只是修改地图文档文件记录的信息，并不会对数据进行更改。保存地图文档的一般格式是 *.mxd 格式。 地图文档保存实例程序实现思路 (1) 地图文档的保存主要使用 IMapDocument 接口。首先使用 IMxdContents 接口读取已打开地图文档的内容，并使之替换 IMapDocument 接口的实例对象。 (2) 保存时使用 IMapDocument 接口的 Save 方法，函数原型为 public void Save(bool bUseRelativePaths, bool bCreateThumnbail) 参数 描述 bUseRelativePaths 是否保存为相对路径（区别于绝对路径） bCreateThumnbail 表示保存的地图在 ArcCatalog 中查看时是否显示缩略图 1234567891011121314151617181920212223242526272829303132333435363738394041424344//保存地图private void SaveMap_Click(object sender, EventArgs e)&#123; try &#123; string sMxdFileName = mainMapControl.DocumentFilename; IMapDocument pMapDocument = new MapDocumentClass(); if (sMxdFileName!=null &amp;&amp; mainMapControl.CheckMxFile(sMxdFileName)) &#123; if (pMapDocument.get_IsReadOnly(sMxdFileName)) &#123; MessageBox.Show(\"本地图文档是只读的，不能保存!\"); pMapDocument.Close(); return; &#125; &#125; else &#123; SaveFileDialog pSaveFileDialog = new SaveFileDialog(); pSaveFileDialog.Title = \"请选择保存路径\"; pSaveFileDialog.OverwritePrompt = true; pSaveFileDialog.Filter = \"ArcMap文档（*.mxd）|*.mxd|ArcMap模板（*.mxt）|*.mxt\"; pSaveFileDialog.RestoreDirectory = true; if (pSaveFileDialog.ShowDialog() == DialogResult.OK) &#123; sMxdFileName = pSaveFileDialog.FileName; &#125; else &#123; return; &#125; &#125; pMapDocument.New(sMxdFileName); pMapDocument.ReplaceContents(mainMapControl.Map as IMxdContents); pMapDocument.Save(pMapDocument.UsesRelativePaths, true); pMapDocument.Close(); MessageBox.Show(\"保存地图文档成功!\"); &#125; catch (Exception ex) &#123; MessageBox.Show(ex.Message); &#125;&#125; 地图文档另存为实例程序实现思路 (1) 地图文档的另存为与保存的方法类似，保存前需判断保存的路径里是否存在相同的文件； (2) 另存为需要用 IMapDocument 接口的 New 方法创建新的路径。 123456789101112131415161718192021222324252627282930//地图另存为private void btnSaveAsMap_Click(object sender, EventArgs e)&#123; try &#123; SaveFileDialog pSaveFileDialog = new SaveFileDialog(); pSaveFileDialog.Title = \"另存为\"; pSaveFileDialog.OverwritePrompt = true; pSaveFileDialog.Filter = \"ArcMap文档（*.mxd）|*.mxd|ArcMap模板（*.mxt）|*.mxt\"; pSaveFileDialog.RestoreDirectory = true; if (pSaveFileDialog.ShowDialog() == DialogResult.OK) &#123; string sFilePath = pSaveFileDialog.FileName; IMapDocument pMapDocument = new MapDocumentClass(); pMapDocument.New(sFilePath); pMapDocument.ReplaceContents(mainMapControl.Map as IMxdContents); pMapDocument.Save(true, true); pMapDocument.Close(); &#125; &#125; catch (Exception ex) &#123; MessageBox.Show(ex.Message); &#125; //也可以使用 ArcGIS Engine 中封装好的类库资源 ControlsSaveAsDocCommandClass 实现地图文档的另存为： //ICommand command = new ControlsSaveAsDocCommandClass(); //command.OnCreate(mainMapControl.Object); //command.OnClick();&#125;","categories":[{"name":"ArcGIS","slug":"ArcGIS","permalink":"http://yoursite.com/categories/ArcGIS/"}],"tags":[{"name":"ArcGIS","slug":"ArcGIS","permalink":"http://yoursite.com/tags/ArcGIS/"},{"name":"AE","slug":"AE","permalink":"http://yoursite.com/tags/AE/"}]},{"title":"Hexo+Github 搭建个人博客（小白版图文教程）","slug":"Hexo-Github搭建个人博客（小白版图文教程）","date":"2017-06-09T15:13:15.000Z","updated":"2017-06-14T00:33:10.120Z","comments":true,"path":"2017/06/09/Hexo-Github搭建个人博客（小白版图文教程）/","link":"","permalink":"http://yoursite.com/2017/06/09/Hexo-Github搭建个人博客（小白版图文教程）/","excerpt":"本人技术小白，折腾了两天时间，看遍了网上各种各样杂乱的教程，走了很多弯路，终于成功搭建出来了个人博客。等到结束的那一刻，心里很是开心。回想这一整个步骤，其实并不难，很简单就能掌握。有过经历，才知道好的教程的重要性。因而我将自己的经验分享出来~","text":"本人技术小白，折腾了两天时间，看遍了网上各种各样杂乱的教程，走了很多弯路，终于成功搭建出来了个人博客。等到结束的那一刻，心里很是开心。回想这一整个步骤，其实并不难，很简单就能掌握。有过经历，才知道好的教程的重要性。因而我将自己的经验分享出来~ 写在前面最近兴趣使然，想要搭建一个个人博客。每次看到别人拥有自己的个人主页都特别羡慕，一直想着自己有一个博客该有多好啊。就这样折腾了两天时间，看遍了网上各种各样杂乱的教程，走了很多弯路，终于成功搭建出来了。等到结束的那一刻，心里很是开心。回想这一整个步骤，其实并不难，很简单就能掌握。由于自己是技术小白，很多大神写的教程看了依旧操作错误。多么希望有人能手把手的教你每一步做什么。有过经历，才知道好的教程的重要性。因而我将自己建站的步骤详细记录下来，以供参考。希望后面想要建站的人不要走弯路了哦~ 搭建环境配置 Node.js 环境下载 Node.js 安装文件，根据自己电脑的位数，选择下载32位或者64位的：http://nodejs.cn/download/然后安装下载的文件，保持默认设置就好了，一路点 Next ，很快就安装完成了。接着检查一下 Node 是否安装好，打开运行窗口，输入 cmd ，打开命令行： 在命令行分别输入以下命令：12node -vnpm -v 如果出现下图界面，则说明 node 安装正确。可以进入下一步了。 配置 Git 环境去官网下载 Git 安装文件: https://git-scm.com/downloads 接着进行安装，如下图，在 Windows Explorer integration 这一项及下边的两项都打上勾： 然后一直 Next 就可以了，安装完成后同样检查一下 Git 是否正确安装。 Github账户的注册和代码库的创建Github帐号注册，打开链接：https://github.com/，申请一个 Github 帐号；注册好之后还需要确认邮箱，打开注册的邮箱，确认注册，然后进入下一步；点击页面右上角自己的头像，点击下拉菜单的New repository，创建一个新的代码库：代码库的名字最好与你的用户名相同，格式为 yourname.github.io ，比如我的用户名是 renkaitest，那我的代码库名即为 renkaitest.github.io创建成功后出现下图所示界面，点击右边的复制按钮，复制这个地址： 配置 Github pages随便找一个目录，右击鼠标，选择Git Bash Here，打开一个类似命令行的界面，输入以下代码：1$ git clone https://github.com/username/username.github.io clone 后面的链接即就是上一步复制的那个链接，比如我的就是下面的代码： 1$ git clone https://github.com/renkaitest/renkaitest.github.io 然后输入 cd 你的代码库名 ，例如 cd renkaitest.github.io ，也可以直接进入该目录下的一个名为 renkaitest.github.io 的文件夹。1$ cd renkaitest.github.io 然后输入： 1$ echo \"Hello World\" &gt; index.html 接着输入：12$ git add --all$ git commit -m \"Initial commit\" 这里会出现一个错误，是因为我们没有设置Git的 user name 和 email ，此时输入以下代码： 12$ git config --global user.email \"541638321@qq.com\"$ git config --global user.name \"renkaitest\" 注意：上面的 name 和 email 都要换成自己的邮箱和用户名 此时继续执行以下代码： 1$ git commit -m \"Initial commit\" 下面 push 到你的代码库，输入代码：1$ git push -u origin master 可能会弹出以下界面让你登录，使用 Github 帐号登录即可。 此时你的 Github Pages 已经配置好了，打开 yourname.github,io 这个网址就能看到你的博客了，yourname 替换成你自己的用户名。 Hexo安装找一个目录，我是在 d:\\Hexo 目录下，鼠标右击打开 Git Bash Here，输入：1$ npm install hexo-cli -g 可能会看到一个 WARN，但是没关系的，进入下一步。输入：1$ npm install hexo --save 等一段时间，他安装完之后检查一下是否安装成功，输入： 1$ hexo -v 看到相关的版本信息则说明安装成功。 Hexo配置初始化 Hexo，首先需要找一个目录，这个目录即就是你的博客的所有文件存放的目录，最好路径不要太深，我选择的是 D:\\Hexo\\blog 。在这个路径下打开 Git Bash Here ，输入代码：1$ hexo init 然后输入：1$ npm stall 这里 npm 会自动帮你安装你需要的组件。继续输入：1$ hexo g 生成博客。输入：1$ hexo s 启动服务，会提示以下信息：1INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 在浏览器打开 http://localhost:4000/ ，将会看到自己的 hexo 博客： 关联 Hexo 与 Github Page配置Git个人信息如果你之前已经配置好git个人信息，请跳过这一个步骤，直接来到步骤2设置Git的user name和email：（如果是第一次的话）12$ git config --global user.name \"renkaitset\"$ git config --global user.email \"541638321@qq.com\" 生成密钥1$ ssh-keygen -t rsa -C \"541638321@qq.com\" 输入代码后一直按回车就好了，不用自己定义目录，生成的 ssh 会存放在 C:\\Users\\用户名\\.ssh 目录下，如果找不到 .ssh 目录，请在文件夹选项中显示隐藏的项目。 配置 SSH 密匙进入 Github 网页，点击右上角自己的头像，选择 Settings ：配置 SSH and GPG keys ，点击 New SSH key：用 txt 打开刚才生成的 Key，复制到下图所示区域，点击 Add SSH key： 配置 Deployment打开博客目录下的站点配置文件 _config.yml ，比如我的博客目录是 D:\\Hexo\\blog，找到该目录下的 _config.yml。打开他，在最末尾找到 Deployment ，然后按照如下修改：1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 上面的 yourname 都要替换成自己的用户名，以我的为例：1234deploy: type: git repo: git@github.com:renkaitest/renkaitest.github.io.git branch: master 这样就配置好了，接下来就可以写博客了。 发布博文新建一篇博文，在博客存放的目录里面 Git Bash Here ，执行命令：1$ hexo new post \"我的第一篇博文\" 然后就会在电脑的目录下 D:\\Hexo\\blog\\source\\_posts 看到一个 我的第一篇博文.md 文件，使用 MarkDown 编辑这篇文章就可以了。文章编辑好后，运行生成、部署命令。但是此时还缺少一个扩展，因而不能部署，先要执行以下命令：1$ npm install hexo-deployer-git --save 如果没有执行这个命令，将会提醒： deloyer not found:git 现在开始执行：12$ hexo g // 生成$ hexo d // 部署 也可以将这两个命令一起执行：1$ hexo d -g //在部署前先生成 若出现如下图所示的信息 INFO Deploy done: git ，则表示部署成功，已经上传到你的代码库。此时访问你的地址 https://yourname.github.io ，将会看到刚才写的文章了。注：我的主题是自己换过的，可能与你的显示结果有所不同，做到这一步，你已经成功搭建了自己的博客。已经大功告成了！恭喜你~ 总结以后发布博文，就是以下的步骤： 写博文： 1$ hexo new post \"博文名字\" 生成博文： 1$ hexo g 部署博文： 1$ hexo d 由于网络原因，进入你的网页可能不会立即显示最新的信息。过几分钟就好了~","categories":[{"name":"Hexo+Github","slug":"Hexo-Github","permalink":"http://yoursite.com/categories/Hexo-Github/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"http://yoursite.com/tags/Github/"}]},{"title":"ArcGIS Engine 地图操作基础——数据加载","slug":"ArcGIS-Engine-地图操作基础——数据加载","date":"2017-06-05T04:47:44.000Z","updated":"2017-06-13T14:27:20.221Z","comments":true,"path":"2017/06/05/ArcGIS-Engine-地图操作基础——数据加载/","link":"","permalink":"http://yoursite.com/2017/06/05/ArcGIS-Engine-地图操作基础——数据加载/","excerpt":"数据加载是 ArcGIS Engine 中最基础的操作，AE 支持的数据广泛，包含矢量数据、栅格数据、CAD 数据、Excel数据等等，这些数据的加载有助于我们使用 AE 做进一步的数据处理与分析。","text":"数据加载是 ArcGIS Engine 中最基础的操作，AE 支持的数据广泛，包含矢量数据、栅格数据、CAD 数据、Excel数据等等，这些数据的加载有助于我们使用 AE 做进一步的数据处理与分析。 加载地图文档地图文档可以是一个ArcMap文档（*.mxd）或者ArcMap模版（*.mxt）或ArcReader文件（*.pmf）。 加载地图文档的方式有三种： 使用 IMapControl 接口的 LoadMxFile 方法加载； 通过 IMapDocument 接口加载; 使用 ArcGIS Engine 中封装好的类库资源 ControlsOpenDocCommandClass 加载。 LoadMxFile 方法加载地图文档文件1234567891011121314151617181920212223242526272829303132333435private void BtnLoadMxFile_Click(object sender, EventArgs e)&#123; //加载数据前如果有数据则清空 try &#123; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.CheckFileExists = true; pOpenFileDialog.Title = \"打开地图文档\"; pOpenFileDialog.Filter = \"ArcMap文档(*.mxd)|*.mxd;|ArcMap模板(*.mxt)|*.mxt|发布地图文件(*.pmf)|*.pmf|所有地图格式(*.mxd;*.mxt;*.pmf)|*.mxd;*.mxt;*.pmf\"; pOpenFileDialog.Multiselect = false; //不允许多个文件同时选择 pOpenFileDialog.RestoreDirectory = true; //存储打开的文件路径 if (pOpenFileDialog.ShowDialog() == DialogResult.OK) &#123; string pFileName = pOpenFileDialog.FileName; if (pFileName == \"\") &#123; return; &#125; if (mainMapControl.CheckMxFile(pFileName)) //检查地图文档有效性 &#123; ClearAllData(); mainMapControl.LoadMxFile(pFileName); &#125; else &#123; MessageBox.Show(pFileName + \"是无效的地图文档!\", \"信息提示\"); return; &#125; &#125; &#125; catch (Exception ex) &#123; MessageBox.Show(\"打开地图文档失败\" + ex.Message); &#125;&#125; 关于 ClearAllData 函数: 1234567891011121314151617private void ClearAllData()&#123; if (mainMapControl.Map != null &amp;&amp; mainMapControl.Map.LayerCount &gt; 0) &#123; //新建mainMapControl中Map IMap dataMap = new MapClass(); dataMap.Name = \"Map\"; mainMapControl.DocumentFilename = string.Empty; mainMapControl.Map = dataMap; //新建EagleEyeMapControl中Map IMap eagleEyeMap = new MapClass(); eagleEyeMap.Name = \"eagleEyeMap\"; EagleEyeMapControl.DocumentFilename = string.Empty; EagleEyeMapControl.Map = eagleEyeMap; &#125;&#125; IMapDocument 方法加载 Mxd 文档文件123456789101112131415161718192021222324252627282930313233343536373839private void BtnIMapDocument_Click(object sender, EventArgs e)&#123; try &#123; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.CheckFileExists = true; pOpenFileDialog.Title = \"打开地图文档\"; pOpenFileDialog.Filter = \"ArcMap文档(*.mxd)|*.mxd;|ArcMap模板(*.mxt)|*.mxt|发布地图文件(*.pmf)|*.pmf|所有地图格式(*.mxd;*.mxt;*.pmf)|*.mxd;*.mxt;*.pmf\"; pOpenFileDialog.Multiselect = false; pOpenFileDialog.RestoreDirectory = true; if (pOpenFileDialog.ShowDialog() == DialogResult.OK) &#123; string pFileName = pOpenFileDialog.FileName; if (pFileName == \"\") &#123; return; &#125; if (mainMapControl.CheckMxFile(pFileName)) //检查地图文档有效性 &#123; //将数据载入pMapDocument并与Map控件关联 IMapDocument pMapDocument = new MapDocument();//using ESRI.ArcGIS.Carto; pMapDocument.Open(pFileName, \"\"); //获取Map中激活的地图文档 mainMapControl.Map = pMapDocument.ActiveView.FocusMap; mainMapControl.ActiveView.Refresh(); &#125; else &#123; MessageBox.Show(pFileName + \"是无效的地图文档!\", \"信息提示\"); return; &#125; &#125; &#125; catch (Exception ex) &#123; MessageBox.Show(\"打开地图文档失败\" + ex.Message); &#125;&#125; ControlsOpenDocCommandClass 加载地图123456private void BtncontrolsOpenDocCommandClass_Click(object sender, EventArgs e)&#123; ICommand command = new ControlsOpenDocCommandClass(); command.OnCreate(mainMapControl.Object); command.OnClick();&#125; 加载 Shapefile 数据加载 Shapefile 数据的方式有两种： 通过工作空间加载； 通过 MapControl 空间的 AddShapefile 方法加载 通过工作空间加载实例程序实现思路： (1) 创建 ShapefileWorkspaceFactory 实例 pWorkspaceFactory ，使用 IWorkspaceFactory 接口的 OpenFromFile 方法打开 pFeatureWorkspace 中存储的基于 Shapefile 的工作区。 (2) 创建 FeatureLayer 的实例 pFeatureLayer ，并定义数据集。 (3) 使用 IMap 接口的 AddLayer 方法加载 pFeatureLayer 到当前地图。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657private void AddShp_Click(object sender, EventArgs e)&#123; //ClearAllData(); try &#123; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.CheckFileExists = true; pOpenFileDialog.Title = \"打开Shape文件\"; pOpenFileDialog.Filter = \"Shape文件（*.shp）|*.shp\"; pOpenFileDialog.ShowDialog(); ////获取文件路径,此即为第二种方法 //FileInfo pFileInfo = new FileInfo(pOpenFileDialog.FileName); //string pPath = pOpenFileDialog.FileName.Substring(0, pOpenFileDialog.FileName.Length - pFileInfo.Name.Length); //mainMapControl.AddShapeFile(pPath, pFileInfo.Name); // 获取文件路径 IWorkspaceFactory pWorkspaceFactory; IFeatureWorkspace pFeatureWorkspace; IFeatureLayer pFeatureLayer; string pFullPath = pOpenFileDialog.FileName; if (pFullPath == \"\") return; int pIndex = pFullPath.LastIndexOf(\"\\\\\"); //lastIndexOf是从字符串末尾开始检索，检索到子字符，则返回子字符在字符串中的位置，（位置从前向后数，最小位为0，也就是从第0位开始算起）未检测到则返回-1。 string pFilePath = pFullPath.Substring(0, pIndex); //文件路径 string pFileName = pFullPath.Substring(pIndex + 1); //文件名 /*substring(参数)是java中截取字符串的一个方法 有两种传参方式 一种是 public String substring(int beginIndex) 返回一个新的字符串，它是此字符串的一个子字符串。该子字符串从指定索引处的字符开始，直到此字符串末尾。 另一种是 public String substring(int beginIndex, int endIndex) 返回一个新字符串，它是此字符串的一个子字符串。该子字符串从指定的 beginIndex 处开始，直到索引 endIndex - 1 处的字符。因此，该子字符串的长度为 endIndex-beginIndex。 */ //实例化ShapefileWorkspaceFactory工作空间，打开Shape文件 pWorkspaceFactory = new ShapefileWorkspaceFactory(); pFeatureWorkspace = (IFeatureWorkspace)pWorkspaceFactory.OpenFromFile(pFilePath, 0); //创建并实例化要素集 IFeatureClass pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName); pFeatureLayer = new FeatureLayer(); pFeatureLayer.FeatureClass = pFeatureClass; pFeatureLayer.Name = pFeatureLayer.FeatureClass.AliasName;//获取别名 ClearAllData(); //新增删除数据 mainMapControl.Map.AddLayer(pFeatureLayer);//加载图层 mainMapControl.ActiveView.Refresh(); //同步鹰眼.可有可无 SynchronizeEagleEye(); &#125; catch (Exception ex) &#123; MessageBox.Show(\"图层加载失败！\" + ex.Message); &#125;&#125; 通过 MapControl 空间的 AddShapefile 方法加载 调用该方法需要传入两个参数，分别是文件路径和不带扩展名的文件名。 1234567891011121314private void AddShp2_Click(object sender, EventArgs e)&#123; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.CheckFileExists = true; pOpenFileDialog.Title = \"打开Shape文件\"; pOpenFileDialog.Filter = \"Shape文件（*.shp）|*.shp\"; pOpenFileDialog.ShowDialog(); //获取文件路径 FileInfo pFileInfo = new FileInfo(pOpenFileDialog.FileName);//FileInfo需要using system.IO string pPath = pOpenFileDialog.FileName.Substring(0, pOpenFileDialog.FileName.Length - pFileInfo.Name.Length); mainMapControl.AddShapeFile(pPath, pFileInfo.Name); // 调用该方法需要传入两个参数，分别是文件路径和不带扩展名的文件名。&#125; 加载栅格数据实例程序实现思路： 在加载栅格文件时，需引用 ESRI.ArcGIS.DataSourcesRaster 命名空间。 (1) 用 IWorkspaceFactory 接口的 OpenFromFile 方法获得栅格文件的工作区； (2) 用 IRasterWorkspace 接口的 OpenRasterDataset 方法获得栅格文件的数据集，实例化栅格文件对象，并对栅格数据集是否具有金字塔进行判断（这里栅格文件如果不具有金字塔则创建金字塔，可以提高大数据量图像的显示效率）； (3) 创建 RasterLayer 类的实例 pRasterLayer ，并定义其数据集； (4) 使用 MapControl 控件的 AllLayer 方法将 pRasterLayer 添加至当前地图。 123456789101112131415161718192021222324252627282930313233343536373839private void AddRaster_Click(object sender, EventArgs e)&#123; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.CheckFileExists = true; pOpenFileDialog.Title = \"打开Raster文件\"; pOpenFileDialog.Filter = \"栅格文件 (*.*)|*.bmp;*.tif;*.jpg;*.img|(*.bmp)|*.bmp|(*.tif)|*.tif|(*.jpg)|*.jpg|(*.img)|*.img\"; pOpenFileDialog.ShowDialog(); string pRasterFileName = pOpenFileDialog.FileName; if (pRasterFileName == \"\") &#123; return; &#125; string pPath = System.IO.Path.GetDirectoryName(pRasterFileName); string pFileName = System.IO.Path.GetFileName(pRasterFileName); IWorkspaceFactory pWorkspaceFactory = new RasterWorkspaceFactory(); IWorkspace pWorkspace = pWorkspaceFactory.OpenFromFile(pPath, 0); IRasterWorkspace pRasterWorkspace = pWorkspace as IRasterWorkspace; IRasterDataset pRasterDataset = pRasterWorkspace.OpenRasterDataset(pFileName); //影像金字塔判断与创建 IRasterPyramid3 pRasPyrmid; pRasPyrmid = pRasterDataset as IRasterPyramid3; if (pRasPyrmid != null) &#123; if (!(pRasPyrmid.Present)) &#123; pRasPyrmid.Create(); //创建金字塔 &#125; &#125; IRaster pRaster; pRaster = pRasterDataset.CreateDefaultRaster(); IRasterLayer pRasterLayer; pRasterLayer = new RasterLayerClass(); pRasterLayer.CreateFromRaster(pRaster); mainMapControl.Map.AddLayer(pLayer);//加载shp文件时是这样弄得，经过尝试这样也是可以的，具体有什么区别不可知 //mainMapControl.AddLayer(pLayer, 0);//这是书上的源代码&#125; 加载 CAD 数据对于 ArcGIS Engine 来说，有两种不同的方式使用 CAD 数据：① 作为要素图层，以矢量数据来使用；② 作为地图背景，以栅格数据来使用。对于前者， ArcGIS Engine 使用与 FeatureLayer 一样的方法来管理，对于后者则采用 CadLayer 对象来管理。 CAD 文件作为矢量图层加载分图层加载实例程序实现思路： (1) CAD 图可以分为点、线、面、标注，它们可以分别被加载到 MapControl 中。与加载其他数据一样，首先定义一个工作空间，用 CadWorkspaceFactoryClass 实例化工作空间，并打开相应的工作空间； (2) 创建 FeatureLayer 的实例，定义数据集，使用 IMap 接口的 AddLayer 方法将要素图层添加至当前地图。 1234567891011121314151617181920212223242526272829303132333435363738394041private void AddCADByLayer_Click(object sender, EventArgs e)&#123; IWorkspaceFactory pWorkspaceFactory; IFeatureWorkspace pFeatureWorkspace; IFeatureLayer pFeatureLayer; IFeatureClass pFeatureClass; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.Filter = \"CAD(*.dwg)|*.dwg\"; pOpenFileDialog.Title = \"打开CAD数据文件\"; pOpenFileDialog.ShowDialog(); string pFullPath = pOpenFileDialog.FileName; if (pFullPath == \"\") &#123; return; &#125; //获取文件名和文件路径 int pIndex = pFullPath.LastIndexOf(\"\\\\\"); string pFilePath = pFullPath.Substring(0, pIndex); string pFileName = pFullPath.Substring(pIndex + 1); pWorkspaceFactory = new CadWorkspaceFactory(); pFeatureWorkspace = (IFeatureWorkspace)pWorkspaceFactory.OpenFromFile(pFilePath, 0); //加载CAD文件中的线文件 pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + \":polyline\"); //pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + \":polygon\");//打开多边形 //pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + \":point\");//打开点 //pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + \":multipatch\");//打开多面体 //pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + \":annotation\");//打开标注是这样吗？自己尝试失败，打开的是点，什么鬼？搞不懂。。。 pFeatureLayer = new FeatureLayerClass(); pFeatureLayer.Name = pFileName; pFeatureLayer.FeatureClass = pFeatureClass; ClearAllData(); //新增删除数据 mainMapControl.Map.AddLayer(pFeatureLayer); mainMapControl.ActiveView.Refresh(); //同步鹰眼，可有可无 SynchronizeEagleEye();&#125; 整幅图加载实例程序实现思路： 将 CAD 作为整幅图加载时，在得到相应的工作空间之后对 CAD 文件中的要素进行遍历，并判断是否为注记图层，如果是注记则需要使用 CadAnnotationLayer 对象。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455private void AddWholeCAD_Click(object sender, EventArgs e)&#123; IWorkspaceFactory pWorkspaceFactory; IFeatureWorkspace pFeatureWorkspace; IFeatureLayer pFeatureLayer; IFeatureDataset pFeatureDataset; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.Filter = \"CAD(*.dwg)|*.dwg\"; pOpenFileDialog.Title = \"打开CAD数据文件\"; pOpenFileDialog.ShowDialog(); string pFullPath = pOpenFileDialog.FileName; if (pFullPath == \"\") &#123; return; &#125; //获取文件名和文件路径 int pIndex = pFullPath.LastIndexOf(\"\\\\\"); string pFilePath = pFullPath.Substring(0, pIndex); string pFileName = pFullPath.Substring(pIndex + 1); //打开CAD数据集 pWorkspaceFactory = new CadWorkspaceFactoryClass(); //using ESRI.ArcGIS.DataSourcesFile; pFeatureWorkspace = (IFeatureWorkspace)pWorkspaceFactory.OpenFromFile(pFilePath, 0); //打开一个要素集 pFeatureDataset = pFeatureWorkspace.OpenFeatureDataset(pFileName); //IFeatureClassContainer可以管理IFeatureDataset中的每个要素类 IFeatureClassContainer pFeatClassContainer = (IFeatureClassContainer)pFeatureDataset; ClearAllData(); //新增删除数据 //对CAD文件中的要素进行遍历处理 for (int i = 0; i &lt; pFeatClassContainer.ClassCount; i++) &#123; IFeatureClass pFeatClass = pFeatClassContainer.get_Class(i); //如果是注记，则添加注记层 if (pFeatClass.FeatureType == esriFeatureType.esriFTCoverageAnnotation) &#123; pFeatureLayer = new CadAnnotationLayerClass(); pFeatureLayer.Name = pFeatClass.AliasName; pFeatureLayer.FeatureClass = pFeatClass; mainMapControl.Map.AddLayer(pFeatureLayer); &#125; else //如果是点、线、面则添加要素层 &#123; pFeatureLayer = new FeatureLayerClass(); pFeatureLayer.Name = pFeatClass.AliasName; pFeatureLayer.FeatureClass = pFeatClass; mainMapControl.Map.AddLayer(pFeatureLayer); &#125; mainMapControl.ActiveView.Refresh(); &#125; //同步鹰眼，可有可无 SynchronizeEagleEye();&#125; CAD 文件作为栅格图层加载实例程序实现思路： (1) 用 IWorkspaceFactory 接口的 OpenFromFile 方法获得 CAD 文件的工作区； (2) 用 ICadDrawingWorkspace 接口的 OpenCadDrawingDataset 方法获得 CAD 文件的数据集，并将其赋值给 CadLayerClass 类的实例对象 pCadLayer 的 CadDrawingDataset 属性； (3) 使用 IMap 接口的 AddLayer 方法将 pCadLayer 添加至当前地图。 1234567891011121314151617181920212223242526272829303132333435private void AddRasterByCAD_Click(object sender, EventArgs e)&#123; IWorkspaceFactory pCadWorkspaceFactory; IWorkspace pWorkspace; ICadDrawingWorkspace pCadDrawingWorkspace; ICadDrawingDataset pCadDrawingDataset; ICadLayer pCadLayer; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.Filter = \"CAD(*.dwg)|*.dwg\"; pOpenFileDialog.Title = \"打开CAD数据文件\"; pOpenFileDialog.ShowDialog(); string pFullPath = pOpenFileDialog.FileName; if (pFullPath == \"\") &#123; return; &#125; //获取文件名和文件路径 int pIndex = pFullPath.LastIndexOf(\"\\\\\"); string pFilePath = pFullPath.Substring(0, pIndex); string pFileName = pFullPath.Substring(pIndex + 1); pCadWorkspaceFactory = new CadWorkspaceFactoryClass(); pWorkspace = pCadWorkspaceFactory.OpenFromFile(pFilePath, 0); pCadDrawingWorkspace = (ICadDrawingWorkspace)pWorkspace; //获得CAD文件的数据集 pCadDrawingDataset = pCadDrawingWorkspace.OpenCadDrawingDataset(pFileName); pCadLayer = new CadLayerClass(); pCadLayer.CadDrawingDataset = pCadDrawingDataset; pCadLayer.Name = pFileName;//书中代码没有这一句，打开的结果是TOC面板里面没有文件的名字，故而自己添上了这一句 mainMapControl.Map.AddLayer(pCadLayer); mainMapControl.ActiveView.Refresh();&#125; 加载个人地理数据库个人地理数据库（Personal Geodatabase）使用 Micorosoft Access 文件（*.mdb）进行空间数据的存储与管理，它将不同的数据同一纳入 Access 文件中，便于数据的管理与迁移，容量限制为2GB。个人地理数据库支持单用户编辑，不支持版本管理。实例程序实现思路： (1) 创建 AccessWorkspaceFactory 类的实例； (2) 用 IWorkspaceFactory 接口的 OpenFromFile 方法打开 *.mdb 数据集的工作空间，对工作空间里面的数据进行加载。 1234567891011121314151617181920212223private void AddPersonGDB_Click(object sender, EventArgs e)&#123; IWorkspaceFactory pAccessWorkspaceFactory; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.Filter = \"Personal Geodatabase(*.mdb)|*.mdb\"; pOpenFileDialog.Title = \"打开PersonGeodatabase文件\"; pOpenFileDialog.ShowDialog(); string pFullPath = pOpenFileDialog.FileName; if (pFullPath == \"\") &#123; return; &#125; pAccessWorkspaceFactory = new AccessWorkspaceFactory(); //using ESRI.ArcGIS.DataSourcesGDB; //获取工作空间 IWorkspace pWorkspace = pAccessWorkspaceFactory.OpenFromFile(pFullPath, 0); ClearAllData(); //新增删除数据 //加载工作空间里的数据 AddAllDataset(pWorkspace, mainMapControl);&#125; 这里对加载工作空间中数据的方法进行了封装，自定义了 AddAllDataset 函数，以便对其他空间数据库（文件地理数据库、ArcSDE 空间数据库）加载时可直接调用。 以上代码主要介绍矢量和栅格数据的加载（其实不止这两种数据格式，加载其他类型的数据也是采用相同的方法，只是采用不同的工作空间而已）。 自定义函数 AddAllDataset 核心代码如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/// &lt;summary&gt;/// 加载工作空间里面的要素和栅格数据/// &lt;/summary&gt;/// &lt;param name=\"pWorkspace\"&gt;&lt;/param&gt;private void AddAllDataset(IWorkspace pWorkspace, AxMapControl mapControl)&#123; IEnumDataset pEnumDataset = pWorkspace.get_Datasets(ESRI.ArcGIS.Geodatabase.esriDatasetType.esriDTAny); pEnumDataset.Reset(); //将Enum数据集中的数据一个个读到DataSet中 IDataset pDataset = pEnumDataset.Next(); //判断数据集是否有数据 while (pDataset != null) &#123; if (pDataset is IFeatureDataset) //要素数据集 &#123; IFeatureWorkspace pFeatureWorkspace = (IFeatureWorkspace)pWorkspace; IFeatureDataset pFeatureDataset = pFeatureWorkspace.OpenFeatureDataset(pDataset.Name); IEnumDataset pEnumDataset1 = pFeatureDataset.Subsets; pEnumDataset1.Reset(); IGroupLayer pGroupLayer = new GroupLayerClass(); pGroupLayer.Name = pFeatureDataset.Name; IDataset pDataset1 = pEnumDataset1.Next(); while (pDataset1 != null) &#123; if (pDataset1 is IFeatureClass) //要素类 &#123; IFeatureLayer pFeatureLayer = new FeatureLayerClass(); pFeatureLayer.FeatureClass = pFeatureWorkspace.OpenFeatureClass(pDataset1.Name); if (pFeatureLayer.FeatureClass != null) &#123; pFeatureLayer.Name = pFeatureLayer.FeatureClass.AliasName; pGroupLayer.Add(pFeatureLayer); mapControl.Map.AddLayer(pFeatureLayer); &#125; &#125; pDataset1 = pEnumDataset1.Next(); &#125; &#125; else if (pDataset is IFeatureClass) //要素类 &#123; IFeatureWorkspace pFeatureWorkspace = (IFeatureWorkspace)pWorkspace; IFeatureLayer pFeatureLayer = new FeatureLayerClass(); pFeatureLayer.FeatureClass = pFeatureWorkspace.OpenFeatureClass(pDataset.Name); pFeatureLayer.Name = pFeatureLayer.FeatureClass.AliasName; mapControl.Map.AddLayer(pFeatureLayer); &#125; else if (pDataset is IRasterDataset) //栅格数据集 &#123; IRasterWorkspaceEx pRasterWorkspace = (IRasterWorkspaceEx)pWorkspace; IRasterDataset pRasterDataset = pRasterWorkspace.OpenRasterDataset(pDataset.Name); //影像金字塔判断与创建 IRasterPyramid3 pRasPyrmid; pRasPyrmid = pRasterDataset as IRasterPyramid3; if (pRasPyrmid != null) &#123; if (!(pRasPyrmid.Present)) &#123; pRasPyrmid.Create(); //创建金字塔 &#125; &#125; IRasterLayer pRasterLayer = new RasterLayerClass(); pRasterLayer.CreateFromDataset(pRasterDataset); ILayer pLayer = pRasterLayer as ILayer; mapControl.AddLayer(pLayer, 0); &#125; pDataset = pEnumDataset.Next(); &#125; mapControl.ActiveView.Refresh(); //同步鹰眼 SynchronizeEagleEye();&#125; 加载文件地理数据库数据文件地理数据库（File Geodatabase）是以文件夹形式存储各种类型的 GIS 数据集，可以存储、查询和管理空间数据和非空间数据，支持的地理数据库的大小最大为 1 TB。文件地理数据库支持单用户编辑，不支持版本管理。实例程序实现思路： (1) 由于文件地理数据库是以文件夹的形式存在的，因此可以使用 FolderBrowserDialog 选择文件夹进行加载。首先创建 FileGDBWorkspaceFactoryClass 类的实例； (2) 用 IWorkspaceFactory 接口的 OpenFromFile 方法打开文件地理数据库的工作空间，对工作空间里面的数据进行加载。 12345678910111213141516171819202122#region 加载文件地理数据库数据private void AddFileDatabase_Click(object sender, EventArgs e)&#123; IWorkspaceFactory pFileGDBWorkspaceFactory; FolderBrowserDialog dlg = new FolderBrowserDialog(); if (dlg.ShowDialog() != DialogResult.OK) return; string pFullPath = dlg.SelectedPath; if (pFullPath == \"\") &#123; return; &#125; pFileGDBWorkspaceFactory = new FileGDBWorkspaceFactoryClass(); //using ESRI.ArcGIS.DataSourcesGDB; ClearAllData(); //新增删除数据 //获取工作空间 IWorkspace pWorkspace = pFileGDBWorkspaceFactory.OpenFromFile(pFullPath, 0); AddAllDataset(pWorkspace, mainMapControl);&#125;#endregion 加载 ArcSDE 空间数据库数据ArcSDE（Spatial Database Engine，空间搜索引擎）是在现有的关系型数据库上进行的空间扩展，它使空间数据能保存在关系数据库中（如 Oracle、SQLServer等）。ArcSDE 空间数据库的一个重要特点是支持多用户并发操作，并且可以通过版本来表现空间数据编辑的状态。 ArcSDE 的组成： ArcSDE 服务器管理进程负责维护 ArcSDE 和监听来自客户端的连接请求。ArcSDE 启动就是启动 ArcSDE 服务器管理进程，利用管理员账户管理 ArcSDE 与 RDBMS 的连接，处理客户端的连接请求。 专用服务器进程由 ArcSDE 服务器管理进程穿件，用于每一个特定的客户端应用程序与数据库的连接。 ArcSDE 客户端通过 ArcSDE 服务器管理进程和专用服务器进程建立和 RDBMS 的连接，实现对数据库的操作。 ArcSDE 提供了应用服务器连接和直接连接两种连接方式。当服务器性能较好时可采用应用服务器连接，否则采用直接连接。为了减轻服务器的压力，建议采用直接连接的方式进行连接。 两种连接方式的异同：直接连接就是通过 ArcSDE 访问数据表，并在本地完成对数据的各种操作（如空间分析、编辑等）；而应用服务器连接就是通过 ArcSDE 访问数据表后，在服务器端完成对数据的各种操作，再把操作结果返回客户端。 实例程序实现思路： (1) 创建 SDEWorksapceFactoryClass 类的实例； (2) 通过 SDE 连接的连接属性打开 SDE 数据库的工作空间，对工作空间里面的数据进行加载。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869# 这里以基于 Oracle 11g 的 ArcSDE 10.0 连接为例对两种连接方式进行说明。#region 加载 ArcSDE 数据库/// &lt;summary&gt;/// 服务器连接/// &lt;/summary&gt;/// &lt;param name=\"sender\"&gt;&lt;/param&gt;/// &lt;param name=\"e\"&gt;&lt;/param&gt;private void AddSDEByService_Click(object sender, EventArgs e)&#123; IWorkspace pWorkspace; pWorkspace = arcSDEWorkspaceOpen(\"192.168.70.110\", \"esri_sde\", \"sde\", \"sde\", \"\", \"SDE.DEFAULT\"); //如果工作空间不为空则进行加载 if (pWorkspace != null) &#123; AddAllDataset(pWorkspace, mainMapControl); &#125;&#125;/// &lt;summary&gt;/// 直连/// &lt;/summary&gt;/// &lt;param name=\"sender\"&gt;&lt;/param&gt;/// &lt;param name=\"e\"&gt;&lt;/param&gt;private void AddSDEByDirect_Click(object sender, EventArgs e)&#123; IWorkspace pWorkspace; //如果工作空间不为空则进行加载 if (pWorkspace != null) &#123; AddAllDataset(pWorkspace, mainMapControl); &#125;&#125;/// &lt;summary&gt;/// 通过SDE连接打开SDE数据库/// &lt;/summary&gt;/// &lt;param name=\"server\"&gt;服务器IP&lt;/param&gt;/// &lt;param name=\"instance\"&gt;数据库实例，应用服务器连接为：5151或esri_sde，直连为sde:oracle11g:orcl(orcl为服务名)&lt;/param&gt;/// &lt;param name=\"user\"&gt;SDE用户名&lt;/param&gt;/// &lt;param name=\"password\"&gt;用户密码&lt;/param&gt;/// &lt;param name=\"database\"&gt;数据库&lt;/param&gt;/// &lt;param name=\"version\"&gt;SDE版本，缺省为\"SDE.DEFAULT\"&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;private IWorkspace arcSDEWorkspaceOpen(string server, string instance, string user, string password, string database, string version)&#123; IWorkspace pWorkSpace = null; //创建和实例化数据集 IPropertySet pPropertySet = new PropertySetClass(); pPropertySet.SetProperty(\"SERVER\", server); pPropertySet.SetProperty(\"INSTANCE\", instance); pPropertySet.SetProperty(\"USER\", user); pPropertySet.SetProperty(\"PASSWORD\", password); pPropertySet.SetProperty(\"DATABASE\", database); pPropertySet.SetProperty(\"VERSION\", version); IWorkspaceFactory2 pWorkspaceFactory = new SdeWorkspaceFactoryClass(); try &#123; pWorkSpace = pWorkspaceFactory.Open(pPropertySet, 0); &#125; catch (Exception ex) &#123; MessageBox.Show(ex.Message); &#125; return pWorkSpace;&#125;#endregion 加载文本文件数据野外测量的数据通常为含有 X、Y 坐标的 Excel 文件或者文本文件。实例程序实现思路： (1) 根据 Excel 或者 *.txt 文件等获取点的坐标信息； (2) 根据点的坐标创建 Shapefile 图层； (3) 加载该 Shapefile 图层。 坐标信息的提取 (1) 创建一个点结构，进行点信息的存储。 123456struct CPoint&#123; public string Name; public double X; public double Y;&#125; (2) 创建并实例化一个 CPoint 类型的数组，将所有的点信息进行存储。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647List&lt;string&gt; pColumns = new List&lt;string&gt;();private List&lt;CPoint&gt; GetPoints(string surveyDataFullName)&#123; try &#123; List&lt;CPoint&gt; pList = new List&lt;CPoint&gt;(); char[] charArray = new char[] &#123; ',', ' ', '\\t' &#125;; //常用的分隔符为逗号、空格、制表符 //文本信息读取 FileStream fs = new FileStream(surveyDataFullName, FileMode.Open); StreamReader sr = new StreamReader(fs, Encoding.Default); string strLine = sr.ReadLine(); if (strLine != null) &#123; string[] strArray = strLine.Split(charArray); if (strArray.Length &gt; 0) &#123; for (int i = 0; i &lt; strArray.Length; i++) &#123; pColumns.Add(strArray[i]); &#125; &#125; while ((strLine= sr.ReadLine())!=null) &#123; //点信息的读取 strArray = strLine.Split(charArray); CPoint pCPoint = new CPoint(); pCPoint.Name = strArray[0].Trim(); pCPoint.X = Convert.ToDouble(strArray[1]); pCPoint.Y = Convert.ToDouble(strArray[2]); pList.Add(pCPoint); &#125; &#125; else &#123; return null; &#125; sr.Close(); return pList; &#125; catch (Exception ex) &#123; MessageBox.Show(ex.Message); return null; &#125;&#125; 根据点坐标创建 Shapefile 图层 (1) 创建表的工作空间，通过 IFields、IFieldsEdit、IField 等接口创建属性字段，添加到要素集中。 (2) 根据获得的点坐标信息为属性字段赋值，进而得到图层的要素集。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546private IFeatureLayer CreateShpFromPoints(List&lt;CPoint&gt; cPointList, string filePath)&#123; int index = filePath.LastIndexOf('\\\\'); string folder = filePath.Substring(0, index);//路径切分得到文件夹名 string shapeName = filePath.Substring(index + 1); //路径切分得到文件名 IWorkspaceFactory pWSF = new ShapefileWorkspaceFactoryClass(); IFeatureWorkspace pFWS = (IFeatureWorkspace)pWSF.OpenFromFile(folder, 0); IFields pFields = new FieldsClass(); IFieldsEdit pFieldsEdit; pFieldsEdit = (IFieldsEdit)pFields; IField pField = new FieldClass(); IFieldEdit pFieldEdit = (IFieldEdit)pField; pFieldEdit.Name_2 = \"Shape\"; pFieldEdit.Type_2 = esriFieldType.esriFieldTypeGeometry; IGeometryDef pGeometryDef = new GeometryDefClass(); IGeometryDefEdit pGDefEdit = (IGeometryDefEdit)pGeometryDef; pGDefEdit.GeometryType_2 = esriGeometryType.esriGeometryPoint; //定义坐标系 ISpatialReferenceFactory pSRF = new SpatialReferenceEnvironmentClass(); ISpatialReference pSpatialReference = pSRF.CreateGeographicCoordinateSystem((int)esriSRGeoCSType.esriSRGeoCS_Beijing1954); pGDefEdit.SpatialReference_2 = pSpatialReference; pFieldEdit.GeometryDef_2 = pGeometryDef; pFieldsEdit.AddField(pField); IFeatureClass pFeatureClass; pFeatureClass = pFWS.CreateFeatureClass(shapeName, pFields, null, null, esriFeatureType.esriFTSimple, \"Shape\", \"\"); IPoint pPoint = new PointClass(); for (int j = 0; j &lt; cPointList.Count; j++) &#123; pPoint.X = cPointList[j].X; pPoint.Y = cPointList[j].Y; IFeature pFeature = pFeatureClass.CreateFeature(); pFeature.Shape = pPoint; pFeature.Store(); &#125; IFeatureLayer pFeatureLayer = new FeatureLayerClass(); pFeatureLayer.Name = shapeName; pFeatureLayer.FeatureClass = pFeatureClass; return pFeatureLayer;&#125; Shapefile 图层的加载1234567891011121314151617private void btnCreate_Click(object sender, EventArgs e)&#123; if (ValidateTxtbox()) &#123; List&lt;CPoint&gt; pCPointList = GetPoints(txtSource.Text); if (pCPointList == null) &#123; MessageBox.Show(\"所选文件为空，请重新选择！\"); &#125; else &#123; IFeatureLayer pFeatureLayer = CreateShpFromPoints(pCPointList, txtSave.Text); buddyMap.Map.AddLayer(pFeatureLayer); this.Close(); &#125; &#125;&#125; 总结根据上述 ArcGIS Engine 加载几种常用的数据源的方法，可以看出 ArcGIS Engine 加载空间数据一般具有以下五个步骤： 创建数据对应的工作空间工厂（WorkspaceFactory）； 使用 WorkspaceFactory 创建要加载数据的工作空间（Workspace）; 使用 Workspace 打开并得到图层的数据集 DataSet ; 将 DataSet 赋值给新建图层的数据源； 添加图层到 MapControl。","categories":[{"name":"ArcGIS","slug":"ArcGIS","permalink":"http://yoursite.com/categories/ArcGIS/"}],"tags":[{"name":"ArcGIS","slug":"ArcGIS","permalink":"http://yoursite.com/tags/ArcGIS/"},{"name":"AE","slug":"AE","permalink":"http://yoursite.com/tags/AE/"}]}]}