{"meta":{"title":"Kai's Blog","subtitle":"要有最朴素的生活，与最遥远的梦想。即使明日天寒地冻，路远马亡。","description":"码渣  |  鸡丝儿  |  二次元  |  古典乐","author":"RenKai","url":"http://yoursite.com"},"pages":[{"title":"Categories","date":"2017-06-07T05:18:02.000Z","updated":"2017-06-07T13:02:57.269Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2017-06-07T05:18:23.000Z","updated":"2017-06-07T13:41:21.912Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"要有最朴素的生活，与最遥远的梦想。即使明日天寒地冻，路远马亡。 RenKai / 男 / 1993本科 / 西北农林科技大学资源环境学院（地理信息系统 2012/09～2016/06）硕士研究生 / 南京师范大学虚拟地理环境教育部重点实验室（地图学与地理信息系统 2016/09～2019/06）"},{"title":"Tags","date":"2017-06-07T13:05:24.000Z","updated":"2017-06-07T13:05:58.292Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"测试：《雨巷》","slug":"测试：《雨巷》","date":"2017-06-05T09:42:35.000Z","updated":"2017-06-07T12:59:01.569Z","comments":true,"path":"2017/06/05/测试：《雨巷》/","link":"","permalink":"http://yoursite.com/2017/06/05/测试：《雨巷》/","excerpt":"","text":"雨巷戴望舒撑着油纸伞，独自彷徨在悠长，悠长又寂寥的雨巷，我希望逢着一个丁香一样的结着愁怨的姑娘。她是有丁香一样的颜色，丁香一样的芬芳，丁香一样的忧愁，在雨中哀怨，哀怨又彷徨；她彷徨在这寂寥的雨巷，撑着油纸伞像我一样，像我一样地默默彳亍着，冷漠，凄清，又惆怅。她静默地走近走近，又投出太息一般的眼光，她飘过像梦一般的，像梦一般的凄婉迷茫。像梦中飘过一枝丁香的，我身旁飘过这女郎；她静默地远了，远了，到了颓圮的篱墙，走尽这雨巷。在雨的哀曲里，消了她的颜色，散了她的芬芳消散了，甚至她的太息般的眼光，丁香般的惆怅。撑着油纸伞，独自彷徨在悠长，悠长又寂寥的雨巷，我希望飘过一个丁香一样的结着愁怨的姑娘。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"ArcGIS Engine 地图操作基础","slug":"ArcGIS-Engine-地图操作基础","date":"2017-06-05T04:47:44.000Z","updated":"2017-06-07T14:27:00.946Z","comments":true,"path":"2017/06/05/ArcGIS-Engine-地图操作基础/","link":"","permalink":"http://yoursite.com/2017/06/05/ArcGIS-Engine-地图操作基础/","excerpt":"","text":"一、数据加载1. 加载地图文档地图文档可以是一个ArcMap文档（*.mxd）或者ArcMap模版（*.mxt）或ArcReader文件（*.pmf）。 加载地图文档的方式有三种： (1) 使用 IMapControl 接口的 LoadMxFile 方法加载； (2) 通过 IMapDocument 接口加载; (3) 使用 ArcGIS Engine 中封装好的类库资源 ControlsOpenDocCommandClass 加载。 1.1 LoadMxFile 方法加载地图文档文件1234567891011121314151617181920212223242526272829303132333435private void BtnLoadMxFile_Click(object sender, EventArgs e)&#123; //加载数据前如果有数据则清空 try &#123; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.CheckFileExists = true; pOpenFileDialog.Title = \"打开地图文档\"; pOpenFileDialog.Filter = \"ArcMap文档(*.mxd)|*.mxd;|ArcMap模板(*.mxt)|*.mxt|发布地图文件(*.pmf)|*.pmf|所有地图格式(*.mxd;*.mxt;*.pmf)|*.mxd;*.mxt;*.pmf\"; pOpenFileDialog.Multiselect = false; //不允许多个文件同时选择 pOpenFileDialog.RestoreDirectory = true; //存储打开的文件路径 if (pOpenFileDialog.ShowDialog() == DialogResult.OK) &#123; string pFileName = pOpenFileDialog.FileName; if (pFileName == \"\") &#123; return; &#125; if (mainMapControl.CheckMxFile(pFileName)) //检查地图文档有效性 &#123; ClearAllData(); mainMapControl.LoadMxFile(pFileName); &#125; else &#123; MessageBox.Show(pFileName + \"是无效的地图文档!\", \"信息提示\"); return; &#125; &#125; &#125; catch (Exception ex) &#123; MessageBox.Show(\"打开地图文档失败\" + ex.Message); &#125;&#125; 关于 ClearAllData 函数: 1234567891011121314151617private void ClearAllData()&#123; if (mainMapControl.Map != null &amp;&amp; mainMapControl.Map.LayerCount &gt; 0) &#123; //新建mainMapControl中Map IMap dataMap = new MapClass(); dataMap.Name = \"Map\"; mainMapControl.DocumentFilename = string.Empty; mainMapControl.Map = dataMap; //新建EagleEyeMapControl中Map IMap eagleEyeMap = new MapClass(); eagleEyeMap.Name = \"eagleEyeMap\"; EagleEyeMapControl.DocumentFilename = string.Empty; EagleEyeMapControl.Map = eagleEyeMap; &#125;&#125; 1.2 IMapDocument 方法加载 Mxd 文档文件123456789101112131415161718192021222324252627282930313233343536373839private void BtnIMapDocument_Click(object sender, EventArgs e)&#123; try &#123; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.CheckFileExists = true; pOpenFileDialog.Title = \"打开地图文档\"; pOpenFileDialog.Filter = \"ArcMap文档(*.mxd)|*.mxd;|ArcMap模板(*.mxt)|*.mxt|发布地图文件(*.pmf)|*.pmf|所有地图格式(*.mxd;*.mxt;*.pmf)|*.mxd;*.mxt;*.pmf\"; pOpenFileDialog.Multiselect = false; pOpenFileDialog.RestoreDirectory = true; if (pOpenFileDialog.ShowDialog() == DialogResult.OK) &#123; string pFileName = pOpenFileDialog.FileName; if (pFileName == \"\") &#123; return; &#125; if (mainMapControl.CheckMxFile(pFileName)) //检查地图文档有效性 &#123; //将数据载入pMapDocument并与Map控件关联 IMapDocument pMapDocument = new MapDocument();//using ESRI.ArcGIS.Carto; pMapDocument.Open(pFileName, \"\"); //获取Map中激活的地图文档 mainMapControl.Map = pMapDocument.ActiveView.FocusMap; mainMapControl.ActiveView.Refresh(); &#125; else &#123; MessageBox.Show(pFileName + \"是无效的地图文档!\", \"信息提示\"); return; &#125; &#125; &#125; catch (Exception ex) &#123; MessageBox.Show(\"打开地图文档失败\" + ex.Message); &#125;&#125; 1.3 ControlsOpenDocCommandClass 加载地图123456private void BtncontrolsOpenDocCommandClass_Click(object sender, EventArgs e)&#123; ICommand command = new ControlsOpenDocCommandClass(); command.OnCreate(mainMapControl.Object); command.OnClick();&#125; 2. 加载 Shapefile 数据加载 Shapefile 数据的方式有两种： (1) 通过工作空间加载； (2) 通过 MapControl 空间的 AddShapefile 方法加载 2.1 通过工作空间加载实例程序实现思路： (1) 创建 ShapefileWorkspaceFactory 实例 pWorkspaceFactory ，使用 IWorkspaceFactory 接口的 OpenFromFile 方法打开 pFeatureWorkspace 中存储的基于 Shapefile 的工作区。 (2) 创建 FeatureLayer 的实例 pFeatureLayer ，并定义数据集。 (3) 使用 IMap 接口的 AddLayer 方法加载 pFeatureLayer 到当前地图。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657private void AddShp_Click(object sender, EventArgs e)&#123; //ClearAllData(); try &#123; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.CheckFileExists = true; pOpenFileDialog.Title = \"打开Shape文件\"; pOpenFileDialog.Filter = \"Shape文件（*.shp）|*.shp\"; pOpenFileDialog.ShowDialog(); ////获取文件路径,此即为第二种方法 //FileInfo pFileInfo = new FileInfo(pOpenFileDialog.FileName); //string pPath = pOpenFileDialog.FileName.Substring(0, pOpenFileDialog.FileName.Length - pFileInfo.Name.Length); //mainMapControl.AddShapeFile(pPath, pFileInfo.Name); // 获取文件路径 IWorkspaceFactory pWorkspaceFactory; IFeatureWorkspace pFeatureWorkspace; IFeatureLayer pFeatureLayer; string pFullPath = pOpenFileDialog.FileName; if (pFullPath == \"\") return; int pIndex = pFullPath.LastIndexOf(\"\\\\\"); //lastIndexOf是从字符串末尾开始检索，检索到子字符，则返回子字符在字符串中的位置，（位置从前向后数，最小位为0，也就是从第0位开始算起）未检测到则返回-1。 string pFilePath = pFullPath.Substring(0, pIndex); //文件路径 string pFileName = pFullPath.Substring(pIndex + 1); //文件名 /*substring(参数)是java中截取字符串的一个方法 有两种传参方式 一种是 public String substring(int beginIndex) 返回一个新的字符串，它是此字符串的一个子字符串。该子字符串从指定索引处的字符开始，直到此字符串末尾。 另一种是 public String substring(int beginIndex, int endIndex) 返回一个新字符串，它是此字符串的一个子字符串。该子字符串从指定的 beginIndex 处开始，直到索引 endIndex - 1 处的字符。因此，该子字符串的长度为 endIndex-beginIndex。 */ //实例化ShapefileWorkspaceFactory工作空间，打开Shape文件 pWorkspaceFactory = new ShapefileWorkspaceFactory(); pFeatureWorkspace = (IFeatureWorkspace)pWorkspaceFactory.OpenFromFile(pFilePath, 0); //创建并实例化要素集 IFeatureClass pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName); pFeatureLayer = new FeatureLayer(); pFeatureLayer.FeatureClass = pFeatureClass; pFeatureLayer.Name = pFeatureLayer.FeatureClass.AliasName;//获取别名 ClearAllData(); //新增删除数据 mainMapControl.Map.AddLayer(pFeatureLayer);//加载图层 mainMapControl.ActiveView.Refresh(); //同步鹰眼.可有可无 SynchronizeEagleEye(); &#125; catch (Exception ex) &#123; MessageBox.Show(\"图层加载失败！\" + ex.Message); &#125;&#125; 2.2 通过 MapControl 空间的 AddShapefile 方法加载 调用该方法需要传入两个参数，分别是文件路径和不带扩展名的文件名。 1234567891011121314private void AddShp2_Click(object sender, EventArgs e)&#123; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.CheckFileExists = true; pOpenFileDialog.Title = \"打开Shape文件\"; pOpenFileDialog.Filter = \"Shape文件（*.shp）|*.shp\"; pOpenFileDialog.ShowDialog(); //获取文件路径 FileInfo pFileInfo = new FileInfo(pOpenFileDialog.FileName);//FileInfo需要using system.IO string pPath = pOpenFileDialog.FileName.Substring(0, pOpenFileDialog.FileName.Length - pFileInfo.Name.Length); mainMapControl.AddShapeFile(pPath, pFileInfo.Name); // 调用该方法需要传入两个参数，分别是文件路径和不带扩展名的文件名。&#125; 2. 加载栅格数据实例程序实现思路： 在加载栅格文件时，需引用 ESRI.ArcGIS.DataSourcesRaster 命名空间。 (1) 用 IWorkspaceFactory 接口的 OpenFromFile 方法获得栅格文件的工作区； (2) 用 IRasterWorkspace 接口的 OpenRasterDataset 方法获得栅格文件的数据集，实例化栅格文件对象，并对栅格数据集是否具有金字塔进行判断（这里栅格文件如果不具有金字塔则创建金字塔，可以提高大数据量图像的显示效率）； (3) 创建 RasterLayer 类的实例 pRasterLayer ，并定义其数据集； (4) 使用 MapControl 控件的 AllLayer 方法将 pRasterLayer 添加至当前地图。 123456789101112131415161718192021222324252627282930313233343536373839private void AddRaster_Click(object sender, EventArgs e)&#123; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.CheckFileExists = true; pOpenFileDialog.Title = \"打开Raster文件\"; pOpenFileDialog.Filter = \"栅格文件 (*.*)|*.bmp;*.tif;*.jpg;*.img|(*.bmp)|*.bmp|(*.tif)|*.tif|(*.jpg)|*.jpg|(*.img)|*.img\"; pOpenFileDialog.ShowDialog(); string pRasterFileName = pOpenFileDialog.FileName; if (pRasterFileName == \"\") &#123; return; &#125; string pPath = System.IO.Path.GetDirectoryName(pRasterFileName); string pFileName = System.IO.Path.GetFileName(pRasterFileName); IWorkspaceFactory pWorkspaceFactory = new RasterWorkspaceFactory(); IWorkspace pWorkspace = pWorkspaceFactory.OpenFromFile(pPath, 0); IRasterWorkspace pRasterWorkspace = pWorkspace as IRasterWorkspace; IRasterDataset pRasterDataset = pRasterWorkspace.OpenRasterDataset(pFileName); //影像金字塔判断与创建 IRasterPyramid3 pRasPyrmid; pRasPyrmid = pRasterDataset as IRasterPyramid3; if (pRasPyrmid != null) &#123; if (!(pRasPyrmid.Present)) &#123; pRasPyrmid.Create(); //创建金字塔 &#125; &#125; IRaster pRaster; pRaster = pRasterDataset.CreateDefaultRaster(); IRasterLayer pRasterLayer; pRasterLayer = new RasterLayerClass(); pRasterLayer.CreateFromRaster(pRaster); mainMapControl.Map.AddLayer(pLayer);//加载shp文件时是这样弄得，经过尝试这样也是可以的，具体有什么区别不可知 //mainMapControl.AddLayer(pLayer, 0);//这是书上的源代码&#125; 3. 加载 CAD 数据对于 ArcGIS Engine 来说，有两种不同的方式使用 CAD 数据：① 作为要素图层，以矢量数据来使用；② 作为地图背景，以栅格数据来使用。对于前者， ArcGIS Engine 使用与 FeatureLayer 一样的方法来管理，对于后者则采用 CadLayer 对象来管理。 3.1 CAD 文件作为矢量图层加载3.1.1 分图层加载实例程序实现思路： (1) CAD 图可以分为点、线、面、标注，它们可以分别被加载到 MapControl 中。与加载其他数据一样，首先定义一个工作空间，用 CadWorkspaceFactoryClass 实例化工作空间，并打开相应的工作空间； (2) 创建 FeatureLayer 的实例，定义数据集，使用 IMap 接口的 AddLayer 方法将要素图层添加至当前地图。 1234567891011121314151617181920212223242526272829303132333435363738394041private void AddCADByLayer_Click(object sender, EventArgs e)&#123; IWorkspaceFactory pWorkspaceFactory; IFeatureWorkspace pFeatureWorkspace; IFeatureLayer pFeatureLayer; IFeatureClass pFeatureClass; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.Filter = \"CAD(*.dwg)|*.dwg\"; pOpenFileDialog.Title = \"打开CAD数据文件\"; pOpenFileDialog.ShowDialog(); string pFullPath = pOpenFileDialog.FileName; if (pFullPath == \"\") &#123; return; &#125; //获取文件名和文件路径 int pIndex = pFullPath.LastIndexOf(\"\\\\\"); string pFilePath = pFullPath.Substring(0, pIndex); string pFileName = pFullPath.Substring(pIndex + 1); pWorkspaceFactory = new CadWorkspaceFactory(); pFeatureWorkspace = (IFeatureWorkspace)pWorkspaceFactory.OpenFromFile(pFilePath, 0); //加载CAD文件中的线文件 pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + \":polyline\"); //pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + \":polygon\");//打开多边形 //pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + \":point\");//打开点 //pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + \":multipatch\");//打开多面体 //pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + \":annotation\");//打开标注是这样吗？自己尝试失败，打开的是点，什么鬼？搞不懂。。。 pFeatureLayer = new FeatureLayerClass(); pFeatureLayer.Name = pFileName; pFeatureLayer.FeatureClass = pFeatureClass; ClearAllData(); //新增删除数据 mainMapControl.Map.AddLayer(pFeatureLayer); mainMapControl.ActiveView.Refresh(); //同步鹰眼，可有可无 SynchronizeEagleEye();&#125; 3.1.2 整幅图加载实例程序实现思路： 将 CAD 作为整幅图加载时，在得到相应的工作空间之后对 CAD 文件中的要素进行遍历，并判断是否为注记图层，如果是注记则需要使用 CadAnnotationLayer 对象。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455private void AddWholeCAD_Click(object sender, EventArgs e)&#123; IWorkspaceFactory pWorkspaceFactory; IFeatureWorkspace pFeatureWorkspace; IFeatureLayer pFeatureLayer; IFeatureDataset pFeatureDataset; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.Filter = \"CAD(*.dwg)|*.dwg\"; pOpenFileDialog.Title = \"打开CAD数据文件\"; pOpenFileDialog.ShowDialog(); string pFullPath = pOpenFileDialog.FileName; if (pFullPath == \"\") &#123; return; &#125; //获取文件名和文件路径 int pIndex = pFullPath.LastIndexOf(\"\\\\\"); string pFilePath = pFullPath.Substring(0, pIndex); string pFileName = pFullPath.Substring(pIndex + 1); //打开CAD数据集 pWorkspaceFactory = new CadWorkspaceFactoryClass(); //using ESRI.ArcGIS.DataSourcesFile; pFeatureWorkspace = (IFeatureWorkspace)pWorkspaceFactory.OpenFromFile(pFilePath, 0); //打开一个要素集 pFeatureDataset = pFeatureWorkspace.OpenFeatureDataset(pFileName); //IFeatureClassContainer可以管理IFeatureDataset中的每个要素类 IFeatureClassContainer pFeatClassContainer = (IFeatureClassContainer)pFeatureDataset; ClearAllData(); //新增删除数据 //对CAD文件中的要素进行遍历处理 for (int i = 0; i &lt; pFeatClassContainer.ClassCount; i++) &#123; IFeatureClass pFeatClass = pFeatClassContainer.get_Class(i); //如果是注记，则添加注记层 if (pFeatClass.FeatureType == esriFeatureType.esriFTCoverageAnnotation) &#123; pFeatureLayer = new CadAnnotationLayerClass(); pFeatureLayer.Name = pFeatClass.AliasName; pFeatureLayer.FeatureClass = pFeatClass; mainMapControl.Map.AddLayer(pFeatureLayer); &#125; else //如果是点、线、面则添加要素层 &#123; pFeatureLayer = new FeatureLayerClass(); pFeatureLayer.Name = pFeatClass.AliasName; pFeatureLayer.FeatureClass = pFeatClass; mainMapControl.Map.AddLayer(pFeatureLayer); &#125; mainMapControl.ActiveView.Refresh(); &#125; //同步鹰眼，可有可无 SynchronizeEagleEye();&#125; 3.2 CAD 文件作为栅格图层加载实例程序实现思路： (1) 用 IWorkspaceFactory 接口的 OpenFromFile 方法获得 CAD 文件的工作区； (2) 用 ICadDrawingWorkspace 接口的 OpenCadDrawingDataset 方法获得 CAD 文件的数据集，并将其赋值给 CadLayerClass 类的实例对象 pCadLayer 的 CadDrawingDataset 属性； (3) 使用 IMap 接口的 AddLayer 方法将 pCadLayer 添加至当前地图。 1234567891011121314151617181920212223242526272829303132333435private void AddRasterByCAD_Click(object sender, EventArgs e)&#123; IWorkspaceFactory pCadWorkspaceFactory; IWorkspace pWorkspace; ICadDrawingWorkspace pCadDrawingWorkspace; ICadDrawingDataset pCadDrawingDataset; ICadLayer pCadLayer; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.Filter = \"CAD(*.dwg)|*.dwg\"; pOpenFileDialog.Title = \"打开CAD数据文件\"; pOpenFileDialog.ShowDialog(); string pFullPath = pOpenFileDialog.FileName; if (pFullPath == \"\") &#123; return; &#125; //获取文件名和文件路径 int pIndex = pFullPath.LastIndexOf(\"\\\\\"); string pFilePath = pFullPath.Substring(0, pIndex); string pFileName = pFullPath.Substring(pIndex + 1); pCadWorkspaceFactory = new CadWorkspaceFactoryClass(); pWorkspace = pCadWorkspaceFactory.OpenFromFile(pFilePath, 0); pCadDrawingWorkspace = (ICadDrawingWorkspace)pWorkspace; //获得CAD文件的数据集 pCadDrawingDataset = pCadDrawingWorkspace.OpenCadDrawingDataset(pFileName); pCadLayer = new CadLayerClass(); pCadLayer.CadDrawingDataset = pCadDrawingDataset; pCadLayer.Name = pFileName;//书中代码没有这一句，打开的结果是TOC面板里面没有文件的名字，故而自己添上了这一句 mainMapControl.Map.AddLayer(pCadLayer); mainMapControl.ActiveView.Refresh();&#125; 4. 加载个人地理数据库实例程序实现思路： (1) 创建 AccessWorkspaceFactory 类的实例； (2) 用 IWorkspaceFactory 接口的 OpenFromFile 方法打开 *.mdb 数据集的工作空间，对工作空间里面的数据进行加载。 1234567891011121314151617181920212223private void AddPersonGDB_Click(object sender, EventArgs e)&#123; IWorkspaceFactory pAccessWorkspaceFactory; OpenFileDialog pOpenFileDialog = new OpenFileDialog(); pOpenFileDialog.Filter = \"Personal Geodatabase(*.mdb)|*.mdb\"; pOpenFileDialog.Title = \"打开PersonGeodatabase文件\"; pOpenFileDialog.ShowDialog(); string pFullPath = pOpenFileDialog.FileName; if (pFullPath == \"\") &#123; return; &#125; pAccessWorkspaceFactory = new AccessWorkspaceFactory(); //using ESRI.ArcGIS.DataSourcesGDB; //获取工作空间 IWorkspace pWorkspace = pAccessWorkspaceFactory.OpenFromFile(pFullPath, 0); ClearAllData(); //新增删除数据 //加载工作空间里的数据 AddAllDataset(pWorkspace, mainMapControl);&#125; 这里对加载工作空间中数据的方法进行了封装，自定义了 AddAllDataset 函数，以便对其他空间数据库（文件地理数据库、ArcSDE 空间数据库）加载时可直接调用。 以上代码主要介绍矢量和栅格数据的加载（其实不止这两种数据格式，加载其他类型的数据也是采用相同的方法，只是采用不同的工作空间而已）。 自定义函数 AddAllDataset 核心代码如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/// &lt;summary&gt;/// 加载工作空间里面的要素和栅格数据/// &lt;/summary&gt;/// &lt;param name=\"pWorkspace\"&gt;&lt;/param&gt;private void AddAllDataset(IWorkspace pWorkspace, AxMapControl mapControl)&#123; IEnumDataset pEnumDataset = pWorkspace.get_Datasets(ESRI.ArcGIS.Geodatabase.esriDatasetType.esriDTAny); pEnumDataset.Reset(); //将Enum数据集中的数据一个个读到DataSet中 IDataset pDataset = pEnumDataset.Next(); //判断数据集是否有数据 while (pDataset != null) &#123; if (pDataset is IFeatureDataset) //要素数据集 &#123; IFeatureWorkspace pFeatureWorkspace = (IFeatureWorkspace)pWorkspace; IFeatureDataset pFeatureDataset = pFeatureWorkspace.OpenFeatureDataset(pDataset.Name); IEnumDataset pEnumDataset1 = pFeatureDataset.Subsets; pEnumDataset1.Reset(); IGroupLayer pGroupLayer = new GroupLayerClass(); pGroupLayer.Name = pFeatureDataset.Name; IDataset pDataset1 = pEnumDataset1.Next(); while (pDataset1 != null) &#123; if (pDataset1 is IFeatureClass) //要素类 &#123; IFeatureLayer pFeatureLayer = new FeatureLayerClass(); pFeatureLayer.FeatureClass = pFeatureWorkspace.OpenFeatureClass(pDataset1.Name); if (pFeatureLayer.FeatureClass != null) &#123; pFeatureLayer.Name = pFeatureLayer.FeatureClass.AliasName; pGroupLayer.Add(pFeatureLayer); mapControl.Map.AddLayer(pFeatureLayer); &#125; &#125; pDataset1 = pEnumDataset1.Next(); &#125; &#125; else if (pDataset is IFeatureClass) //要素类 &#123; IFeatureWorkspace pFeatureWorkspace = (IFeatureWorkspace)pWorkspace; IFeatureLayer pFeatureLayer = new FeatureLayerClass(); pFeatureLayer.FeatureClass = pFeatureWorkspace.OpenFeatureClass(pDataset.Name); pFeatureLayer.Name = pFeatureLayer.FeatureClass.AliasName; mapControl.Map.AddLayer(pFeatureLayer); &#125; else if (pDataset is IRasterDataset) //栅格数据集 &#123; IRasterWorkspaceEx pRasterWorkspace = (IRasterWorkspaceEx)pWorkspace; IRasterDataset pRasterDataset = pRasterWorkspace.OpenRasterDataset(pDataset.Name); //影像金字塔判断与创建 IRasterPyramid3 pRasPyrmid; pRasPyrmid = pRasterDataset as IRasterPyramid3; if (pRasPyrmid != null) &#123; if (!(pRasPyrmid.Present)) &#123; pRasPyrmid.Create(); //创建金字塔 &#125; &#125; IRasterLayer pRasterLayer = new RasterLayerClass(); pRasterLayer.CreateFromDataset(pRasterDataset); ILayer pLayer = pRasterLayer as ILayer; mapControl.AddLayer(pLayer, 0); &#125; pDataset = pEnumDataset.Next(); &#125; mapControl.ActiveView.Refresh(); //同步鹰眼 SynchronizeEagleEye();&#125;","categories":[{"name":"ArcGIS","slug":"ArcGIS","permalink":"http://yoursite.com/categories/ArcGIS/"}],"tags":[{"name":"ArcGIS","slug":"ArcGIS","permalink":"http://yoursite.com/tags/ArcGIS/"},{"name":"AE","slug":"AE","permalink":"http://yoursite.com/tags/AE/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-06-05T02:42:14.878Z","updated":"2017-06-07T12:58:43.488Z","comments":true,"path":"2017/06/05/hello-world/","link":"","permalink":"http://yoursite.com/2017/06/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo+github","slug":"hexo-github","permalink":"http://yoursite.com/categories/hexo-github/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}