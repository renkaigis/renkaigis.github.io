<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>监修中 - Kai</title>
      <link href="/Test-Kai-2022.html"/>
      <url>/Test-Kai-2022.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p id="div-border-left-red">就是上来看看而已，看我还有没有控制权！</p><span id="more"></span><h1 id="无花无骨，无我无她"><a href="#无花无骨，无我无她" class="headerlink" title="无花无骨，无我无她"></a>无花无骨，无我无她</h1><p>就是上来看看而已，看我还有没有控制权！</p>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> living </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 整合 HttpClient，后端调用远程接口</title>
      <link href="/SpringBoot-HttpClient1.html"/>
      <url>/SpringBoot-HttpClient1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/springboot/springboot0400.png"></div><p id="div-border-left-red">SpringBoot 整合 HttpClient</p><span id="more"></span><h1 id="添加-HttpClient-依赖"><a href="#添加-HttpClient-依赖" class="headerlink" title="添加 HttpClient 依赖"></a>添加 HttpClient 依赖</h1><p>在 <code>SpringBoot</code> 项目中的 <code>pom.xml</code> 文件中添加 <code>HttpClient</code> 的起步依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HttpClient 起步依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HttpClient-发送-GET-请求"><a href="#HttpClient-发送-GET-请求" class="headerlink" title="HttpClient 发送 GET 请求"></a>HttpClient 发送 GET 请求</h1><p>先尝试通过 <code>HttpClient</code> 发送 <code>GET</code> 请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testGet&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">httpClientTestGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 要请求的远程连接（此为我本地另开的一个服务，即：http://localhost:8082/queryUser）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://172.20.10.2:8082/queryUser&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建httpclient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="comment">// 创建GET方式请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置请求头信息</span></span><br><span class="line">        <span class="comment">// httpGet.setHeader(&quot;Cookie&quot;, &quot;JSESSIONID=xxxxxxx&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行请求操作，并拿到结果（同步阻塞）</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取结果实体</span></span><br><span class="line">        <span class="comment">// 判断网络连接状态码是否正常(0--200都数正常)</span></span><br><span class="line">        <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;</span><br><span class="line">            result = EntityUtils.toString(response.getEntity(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放链接</span></span><br><span class="line">        response.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过访问：<code>http://localhost:8080/testGet</code> 测试该远程 <code>GET</code> 请求是否成功。</p><img src="../../images/springboot/springboot0401.png"><h1 id="HttpClient-发送-POST-请求"><a href="#HttpClient-发送-POST-请求" class="headerlink" title="HttpClient 发送 POST 请求"></a>HttpClient 发送 POST 请求</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testPost&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">httpClientTestPost</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// json数据：&#123;&quot;username&quot;: &quot;testPost&quot;,&quot;password&quot;: &quot;1234&quot;,&quot;realname&quot;: &quot;post 测试&quot;&#125;</span></span><br><span class="line">    String json=<span class="string">&quot;&#123;\&quot;username\&quot;: \&quot;testPost\&quot;,\&quot;password\&quot;: \&quot;1234\&quot;,\&quot;realname\&quot;: \&quot;post 测试\&quot;&#125;&quot;</span>;</span><br><span class="line">    <span class="comment">// 若传入的是个对象，可使用 fastjson 工具包将其转为json字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要请求的远程连接</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://172.20.10.2:8088/addUser&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建httpclient对象</span></span><br><span class="line">    <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建post方式请求对象</span></span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置参数到请求对象中，这里内容类型设为json</span></span><br><span class="line">    <span class="type">StringEntity</span> <span class="variable">stringEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(json, ContentType.APPLICATION_JSON);</span><br><span class="line">    stringEntity.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    httpPost.setEntity(stringEntity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行请求操作，并拿到结果（同步阻塞）</span></span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取结果实体</span></span><br><span class="line">    <span class="comment">// 判断网络连接状态码是否正常(0--200都属正常)</span></span><br><span class="line">    <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;</span><br><span class="line">        result = EntityUtils.toString(response.getEntity(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(response.getStatusLine().getStatusCode());</span><br><span class="line">    <span class="comment">// 释放链接</span></span><br><span class="line">    response.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过访问：<code>http://localhost:8080/testGet</code> 测试该远程 <code>POST</code> 请求是否成功。</p><img src="../../images/springboot/springboot0402.png"><p>查询数据库，添加成功。</p><img src="../../images/springboot/springboot0403.png"><p><strong>PUT</strong> 和 <strong>DELETE</strong> 同理可以这样进行请求，不一一赘述。</p><p>下面将这常用的四个请求方法整合为一个工具类，以使得大部分的请求都能直接调用工具类中的方法实现。</p><h1 id="整合-HttpClient-请求方法"><a href="#整合-HttpClient-请求方法" class="headerlink" title="整合 HttpClient 请求方法"></a>整合 HttpClient 请求方法</h1><p>编写 <code>CommonMethod.java</code> 工具类，该类为静态类，可直接通过类名调用里面的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rk.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.ContentType;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET 请求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">commonGet</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;</span><br><span class="line">            result = EntityUtils.toString(response.getEntity(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// POST 请求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">commonPost</span><span class="params">(String url, String json)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">stringEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(json, ContentType.APPLICATION_JSON);</span><br><span class="line">        stringEntity.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        httpPost.setEntity(stringEntity);</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;</span><br><span class="line">            result = EntityUtils.toString(response.getEntity(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// PUT 请求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">commonPut</span><span class="params">(String url, String json)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpPut</span> <span class="variable">httpPut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPut</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">stringEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(json, ContentType.APPLICATION_JSON);</span><br><span class="line">        stringEntity.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        httpPut.setEntity(stringEntity);</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPut);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;</span><br><span class="line">            result = EntityUtils.toString(response.getEntity(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DELETE 请求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">commonDelete</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpDelete</span> <span class="variable">httpDelete</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpDelete</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpDelete);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;</span><br><span class="line">            result = EntityUtils.toString(response.getEntity(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该工具类的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 GET</span></span><br><span class="line">CommonMethod.commonGet(url);</span><br><span class="line"><span class="comment">// 调用 POST</span></span><br><span class="line">CommonMethod.commonPost(url, json);</span><br><span class="line"><span class="comment">// 调用 PUT</span></span><br><span class="line">CommonMethod.commonPut(url, json);</span><br><span class="line"><span class="comment">// 调用 DELETE</span></span><br><span class="line">CommonMethod.commonDelete(url);</span><br></pre></td></tr></table></figure><p>常用的请求是 <code>GET</code>、<code>POTS</code>、<code>PUT</code> 和 <code>DELETE</code> 这四个请求方法。其中 <code>GET</code> 和 <code>DELETE</code> 一般只需要传入请求路径 <code>url</code> 就可完成调用，简单的 <code>POST</code> 和 <code>PUT</code> 方法也只需传入 <code>url</code> 和 <code>body</code> 数据就可调用成功。</p><p>这是学习工作中整理的，有参考网上别人的教程。只是简单的远程调用接口，复杂的可以设置请求头参数，POST 的时候传入 Map 或者 form 表单数据等。这些我暂时用不到，暂不深究。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> HttpClient </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只要平凡，却不甘平凡</title>
      <link href="/view-ordinary-world.html"/>
      <url>/view-ordinary-world.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p id="div-border-left-yellow">一个平平常常的日子，细蒙蒙的雨丝，夹着一星半点的雪花，正纷纷淋淋地向大地飘洒着。时令已快到惊蛰，雪当然再不会存留，往往还没等落地，就已经消失得无踪无影了。黄土高原严寒而漫长的冬天，看来就要过去，但那真正温暖的春天，还远远地没有到来……</p><span id="more"></span><p>少年时，畅读了《平凡的世界》，一本对我影响非常深远的书。</p><p>大学时，一部同名电视剧播出，本以为会毁了原作，不成想改编的恰到好处，故事情节丰富，人物刻画饱满，矛盾更加突出。这本书我不知道反反复复看了多遍，这部剧我也不知道刷了多少遍。</p><p>这是一部讲述黄土地上的人们在时代改革的洪流中的苦难、奋斗和爱情故事的长篇小说。对于我这样一个生长在三秦大地上的人来说，这一个个场景、语言、人物、故事都显得尤为亲切。</p><p>毕竟是荣获矛盾文学奖的小说，《平凡的世界》在中国现代长篇小说文学史上的地位与水准是非常之高的。</p><p>我喜欢一遍一遍的读这本书，我喜欢书中每一个淳朴又善良的人物，仿佛就是隔壁的邻居一样亲切，我仿佛可以切身体会到他们生活的熬煎、不易，我为少平和少安永不遏止的奋斗感到高兴且热血沸腾，我又为这俩兄弟的所遭遇的爱情上的坎坷感到惋惜且羡慕。</p><p>我承认电视剧的表达与演绎和小说有很大出入，但文学作品影视化本就有很多局限性，同时为了故事情节发展连贯有序，做适当改编无可厚非。至少故事核心情节还在，故事所要表达的情感和主旋律都没有变。</p><p>小说与电视剧存在差异，且分开讨论。</p><h1 id="《平凡的世界》小说"><a href="#《平凡的世界》小说" class="headerlink" title="《平凡的世界》小说"></a>《平凡的世界》小说</h1><p>我尚在初中时就听过这本书的名字，《平凡的世界》，啊，多么普通的一本书的名字，“平凡”二字透着简单、快乐，“世界”二字却又给人一种大胸怀、包罗万象的感觉。</p><p>那时只喜欢看什么修仙、玄幻和言情小说，对文学作品精读甚少。直到高中毕业，有了充足的时间去审视这本书。于是在网上下载了盗版的txt，我就深陷其中不能自拔了。</p><p>全篇故事以少平这个小人物徐徐展开，这是一个普普通通的少年，家境贫寒，在学校里只能吃得起最便宜的黑面馍馍。他虽然穷，但是他有自己的尊严。他会在大家都吃完饭的时候，默默的一个人出来拿走自己那两个难看的“黑疙瘩”。</p><p>上高中期间，他认识了地主出身的郝红梅，身体缺陷爱打小报告的侯玉英，还有家境优越的顾养民。当然，最重要的是他认识了田晓霞，她就是少平的冬妮娅，这是一个带他重新认识世界的奇女子，为他打开了新世界的大门，他不甘于只做一个平凡的农民，他要为了自己的理想、为了去看外面广阔的世界而奋斗。</p><p>而少安则是一个土生土长的农民，小学文化却深知读书的重要性，就算自己再苦再累都要供弟弟少平和妹妹兰香上学。在感情方面，少安与润叶青梅竹马，彼此互生情愫，奈何家境贫寒，福堂支书等从中干涉，最终遗憾收场。好在他遇见了秀莲，这是多么贤惠多么温柔体贴的女子，她不要彩礼，她不怕这个家穷苦，她深深爱着这个“烂包”的家和自己的男人。有了秀莲“温柔乡”的抚慰，少安开办窑厂，烂包的日子慢慢过得红火起来，成为了村里甚至是县上名声大噪的人物。</p><p>润叶与少安青梅竹马，从小在一个被窝里玩到大。他们一起玩耍，一起上学，一起长大。从童真时代一路走来，村里的老人们都说她是少安的“媳妇”。在女大当嫁的年纪，来自家庭的逼迫和少安哥对命运的妥协，她心灰意冷。同时又听闻少安结婚了，和一个山西姑娘一块过光景了。<code>“如果少安没有结婚，不论有多少人进攻，她感情的阵地仍然会固若金汤。想不到，她在前方的战壕里拼命抵挡，但她为之而战的后方却自己烧成了一片火海…”</code> 这年轻时的失恋，爱情的悲剧沉重的打击着她。迫于各方无奈她嫁给了不喜欢的李向前，这又是一次婚姻上的悲剧，她在婚姻里受着水深火热的煎熬，向前的日子也不好过，感情上的失意和妻子的冷漠令他终日酗酒，最后失去了自己的一条腿。润叶这时才发现了深爱自己的人是李向前，在向前出事后她也慢慢生出了感情，虽然这是不完美的爱情或者婚姻，但也算是有了一个美好的结局。</p><p>书中不仅仅讲山沟沟里穷苦农民的故事，更涉及国家政策、国家体制变化、土地革命等宏大历史背景。尤其是以田福军为首的改革派，体察民情，以农民吃饱肚子为己任，尽职尽责，永远扑在改革的前列。同时也对官员腐败，思想固化等社会现状进行抨击。</p><p>全书最令人惋惜的是晓霞的离去和秀莲的病倒。晓霞属于那个时代追求浪漫追求自由的女性，而秀莲则是更现实更适合踏踏实实过日子的女性。这两个完美的女子在这平凡的世界里显得那么格格不入。</p><p>我喜欢秀莲，凡是看过书的人都希望有秀莲这样的女子做自己的媳妇吧。这个女子在孙家最困难的时候，也是在少安决定彻底放弃与润叶的感情的煎熬时刻来到了孙家，她不要彩礼，她悉心照顾奶奶、照顾妹妹兰香，撑起这个烂包的家，给少安内心与肉体上最温暖的呵护。她爱这个男人，也爱这个家，她始终如一的听少安的话。她心疼少安，给少安盛饭捞稠的，把奶奶吃的白面馍给少安吃。少安开办窑厂，有她在背后鼎力支持，在窑厂面临空前大危机的时候，是她从娘家借来钱为少安减轻压力。啊，这是一个多么美好多么贤淑的妻子，孙家的光景越过越好了，可是秀莲却累倒了，她查出了肺癌。这平凡的世界里哪里容得下这么完美的女子啊，这样的女子在当时的时代背景下也许是不存在的吧，或者是极其极其稀少的吧。</p><p>原书作者是这样描写的：<code>“我们无比沉痛的获悉，原西县医院对秀莲的诊断结果是：肺癌。”</code>感谢作者到此戛然而止，尽管知道以当时的医疗水平和条件，秀莲活下去的几率很低，但我们还是要对这个世界抱一点美好的幻想。</p><p>我也喜欢晓霞，自由、浪漫、敢说、敢做，美丽大方，才华出众。她仿佛不属于那个年代，她应该像一只鸟儿一样，飞向更广阔的天地，拥有属于自己的一片天。是她带着少平养成了看《参考消息》的好习惯，是她唤醒了少平胸中的热血，在她的推动和帮助下，少平渴望通过自己的努力来改变苦难的生活，改变这不公的命运，甚至改变世界。他们两个人从友谊到爱情，是感情上的升华，亦是心与心更近的沟通。正因为她的正直勇敢，敢闯敢拼，尤其是对工作认真对待的态度，身为一个报社记者，在大洪灾袭城时，她有着向广大民众传达灾区最新消息的责任。洪水无情似凶猛野兽，美丽的花朵凋谢了，看到这里我抑制不住的悲伤。我相信，美丽的花朵凋谢了也是美丽的。田晓霞太完美了，完美到作者也觉得她不适合在这个故事里。在网络上看到一句话 <strong>“爱情败给命运总比爱情败给世俗要好”</strong>，也许他们将是下一对少安与润叶，也许作者不忍再看到他们的爱情败给世俗，也许这才是最好的结局吧。</p><p>这平凡的世界里，只有平凡的人和事。这两个格格不入的完美女性不属于这个时代，也不属于这个世界。</p><p>书中每一个角色都是鲜活的，每个人都有自己的故事。就连双水村的田二都被作者描写的活灵活现。留下深刻印象的角色太多了，且不一一评说了。</p><h1 id="《平凡的世界》电视剧"><a href="#《平凡的世界》电视剧" class="headerlink" title="《平凡的世界》电视剧"></a>《平凡的世界》电视剧</h1><p>剧版在保留原著核心的基础上进行二次创作，还原度之高令我惊讶。唯一不满意之处是晓霞死后，少平赴杜梨树下之约时居然出现了外星人，这过度改编让人很不舒服。</p><p>剧版似乎淡化了少平的主角，反观少安更像这部剧的主角。也许这与演员的演技和张力有关，王雷的少安深入人心，但袁弘的少平总觉得缺少点什么。</p><p>虽然我不是生长在黄土高原上的，但对剧中出现的一些民风民俗还是倍感亲切的。</p><p><code>“我们原是自由飞翔的鸟，飞去吧！飞到那乌云背后明媚的山峦，飞到那里，到那蓝色的海角。只有风在欢舞，还有我作伴。”</code> 这是晓霞在铁轨上念给少平的诗歌，是对自由的渴望，对外面世界的追求，更是对少平的爱慕。他们的爱情充满了浪漫和现实主义，他们的交流是心灵与心灵的沟通。她爱他那掏碳的男人，他们相约会在古塔山后的杜梨树下见面，她要他带自己回村子里，以少平未婚妻的名义回去。</p><p>然而善良的她为救一个小女孩被洪水卷走了，抗洪指挥部的老父亲田福军一夜白头，只留下一句：<code>“她是我女儿”</code>。晓霞的离去配上凄凉的信天游，连老天都在哭泣，晓霞变成了一只自由飞翔的鸟，飞向了她一直追求的那一方天地。作者何其忍心写死晓霞，我多么希望电视剧对这里进行改编，她其实没有死，她在洪水的下游城市被人救了。</p><p>秀莲依旧是那么可爱和贤惠，在穷苦的家里任劳任怨。一心一意爱着这个庄稼汉，她给少安捞稠的饭，给少安拿奶奶吃的白面馍，她苦口婆心央求少安箍个新窑，然后却只得到了少安的回复：“额捶你啊…”看到这里，连弹幕都笑了，这么好的媳妇，打着灯笼都找不到，天天喊“捶”。如今不懂得珍惜，待到失去的时候后悔莫及啊。</p><p>最感动的是秀莲说，“少安哥，<code>你命短，我给你延上</code>。只要你愿意娶我，我就心甘情愿地跟你走，只要是我秀莲愿意，我不嫌穷，谁也不能说啥，这再说了，这穷怕什么，这穷又扎不下跟，将来我来帮你家过光景”。她包容他，嫁过去的第一天就说过：“<code>你笑，我陪你笑，你流啥泪，我都替你抹</code>”。她用自己的一生，在践行这句话。</p><p>感谢电视剧在最后一集留下了一个看似“完美”的结局，全村上下沉浸在临近过年的喜气洋洋的氛围中，以喜衬哀、笑中带泪的表现手法运用的淋漓尽致。最后桥上的那一段秀莲闭上眼后又缓缓苏醒看哭了我个男儿，他们的幸福生活来之不易，他们受了多少苦难和艰辛。时代在缓慢进步，人民生活在逐步变好，正是源于这一批勤劳的劳动人民和像田福军一样的改革先驱者的共同努力。</p><p>如尾声时的旁白所言，“双水村沉浸在一片欢腾和喜悦中，天真的孩子们欢快地笑着，有的大人却悄悄抹泪，<code>哭、笑都是因为欢乐，哭的人知道，而笑的人不知道。</code>”</p><hr><p>至此，掩卷叹息。</p><p>我的心灵得以净化，灵魂得以洗涤，我对自己有了更准确的定位。</p><p>平凡的世界，正因为它的悲剧，体现了它的平凡，也造就了它的不平凡。</p><p>那是一个改革和奋斗的时代。而如今我们身处于一个人才泛滥，经济蓬勃发展，物质生活丰富却又精神迷惘混沌的时代，在这个时代里如何才能更好的体现出自己的价值，这正是我们值得思考的问题。</p><p>但我相信，提升自我能力是最正确的选择。<strong>在这平凡的世界里，我们只是一个平凡的普通人，但是一个平凡的人，也可以过得不平凡！</strong></p><p>只要平凡，却不甘于平凡。</p>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 整合 Mybatis</title>
      <link href="/SpringBoot-Mybatis1.html"/>
      <url>/SpringBoot-Mybatis1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/springboot/springboot0300.png"></div><p id="div-border-left-red">SpringBoot 整合 Mybatis</p><span id="more"></span><p>在 idea 按步骤新建 SpringBoot 项目。</p><img src="../../images/springboot/springboot0301.png"><img src="../../images/springboot/springboot0302.png"><img src="../../images/springboot/springboot0303.png"><p>若只选择了 <code>Web</code> 这个起步依赖，则需要进行 <code>第 1、2 步</code>。若勾选了 <code>Mybatis</code> 依赖和 <code>MySQL Driver</code> 依赖，则从 <code>第 3 步</code> 开始。</p><h1 id="1-添加-Mybatis-的起步依赖"><a href="#1-添加-Mybatis-的起步依赖" class="headerlink" title="1. 添加 Mybatis 的起步依赖"></a>1. 添加 Mybatis 的起步依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis 起步依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-添加数据库驱动坐标"><a href="#2-添加数据库驱动坐标" class="headerlink" title="2. 添加数据库驱动坐标"></a>2. 添加数据库驱动坐标</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL 连接驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时的 <code>pom.xml</code> 文件为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot_mybatis<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-添加数据库连接信息"><a href="#3-添加数据库连接信息" class="headerlink" title="3. 添加数据库连接信息"></a>3. 添加数据库连接信息</h1><p>在 <code>application.properties</code> 中添加数据库的连接信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line"><span class="attr">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h1 id="4-创建-user-表"><a href="#4-创建-user-表" class="headerlink" title="4. 创建 user 表"></a>4. 创建 user 表</h1><p>在 test 数据库中创建 user 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `user`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>);</span><br></pre></td></tr></table></figure><p>表如下所示：</p><img src="../../images/springboot/springboot0304.png"><h1 id="5-创建实体-Bean"><a href="#5-创建实体-Bean" class="headerlink" title="5. 创建实体 Bean"></a>5. 创建实体 Bean</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rk.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="6-编写-Mapper"><a href="#6-编写-Mapper" class="headerlink" title="6. 编写 Mapper"></a>6. 编写 Mapper</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rk.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rk.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUserList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>@Mapper</code> 标记该类是一个 <code>mybatis</code> 的 <code>mapper</code> 接口，可以被 <code>spring boot</code> 自动扫描到 spring 上下文中。</p><h1 id="7-配置-Mapper-映射文件"><a href="#7-配置-Mapper-映射文件" class="headerlink" title="7. 配置 Mapper 映射文件"></a>7. 配置 Mapper 映射文件</h1><p>在 <code>src\main\resources\mapper</code> 路径下加入 <code>UserMapper.xml</code> 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.rk.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.rk.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="8-在-application-properties-中添加-mybatis-配置信息"><a href="#8-在-application-properties-中添加-mybatis-配置信息" class="headerlink" title="8. 在 application.properties 中添加 mybatis 配置信息"></a>8. 在 application.properties 中添加 mybatis 配置信息</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#spring集成Mybatis环境</span></span><br><span class="line"><span class="comment">#pojo别名扫描包</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.rk.domain</span></span><br><span class="line"><span class="comment">#加载Mybatis映射文件</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*Mapper.xml</span></span><br></pre></td></tr></table></figure><h1 id="9-编写测试-Controller"><a href="#9-编写测试-Controller" class="headerlink" title="9. 编写测试 Controller"></a>9. 编写测试 Controller</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rk.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rk.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.rk.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUser</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-测试结果"><a href="#10-测试结果" class="headerlink" title="10. 测试结果"></a>10. 测试结果</h1><p>链接：<a href="http://localhost:8080/queryUser">http://localhost:8080/queryUser</a></p><p>结果：</p><img src="../../images/springboot/springboot0305.png">]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 配置文件</title>
      <link href="/SpringBoot-config.html"/>
      <url>/SpringBoot-config.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/springboot/springboot0200.png"></div><p id="div-border-left-red">Spring Boot 配置文件</p><span id="more"></span><hr><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><hr><p>SpringBoot 使用一个全局的配置文件，配置文件名是固定的；</p><ul><li><p>application.properties</p></li><li><p>application.yml</p></li></ul><p>配置文件的作用：修改 SpringBoot 自动配置的默认值；SpringBoot 在底层都给我们自动配置好；</p><p>YAML（YAML Ain’t Markup Language）:</p><ul><li><p>YAML  A Markup Language：是一个标记语言</p></li><li><p>YAML  isn’t Markup Language：不是一个标记语言</p></li></ul><p>标记语言：</p><ul><li>以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong> 文件；</li></ul><p>​YAML：<strong>以数据为中心</strong>，比 <code>json</code>、<code>xml</code> 等更适合做配置文件；</p><p>YAML：配置例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>​XML：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="YAML-语法"><a href="#YAML-语法" class="headerlink" title="YAML 语法"></a>YAML 语法</h1><hr><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><code>k:(空格)v</code>：表示一对键值对（空格必须有）；</p><p>以 <strong>空格</strong> 的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性和值也是大小写敏感。</p><h2 id="值的写法"><a href="#值的写法" class="headerlink" title="值的写法"></a>值的写法</h2><h3 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h3><p>​- <code>k: v</code>：字面量直接来写；</p><p>​- 字符串默认<strong>不用</strong>加上单引号或者双引号；</p><ul><li>​<code>&quot;&quot;</code>：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​name: &quot;zhangsan \n lisi&quot;</span><br><span class="line">输出：zhangsan</span><br><span class="line">lisi</span><br></pre></td></tr></table></figure><ul><li><code>&#39;&#39;</code>：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name: ‘zhangsan \n lisi’</span><br><span class="line">输出：</span><br><span class="line">zhangsan \n  lisi</span><br></pre></td></tr></table></figure><h3 id="对象、Map（属性和值）（键值对）"><a href="#对象、Map（属性和值）（键值对）" class="headerlink" title="对象、Map（属性和值）（键值对）"></a>对象、Map（属性和值）（键值对）</h3><p><code>k: v</code>：在下一行来写对象的属性和值的关系；注意缩进。</p><p>​对象还是 <code>k: v</code> 的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> &#123;<span class="attr">lastName:</span> <span class="string">zhangsan</span>,<span class="attr">age:</span> <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="数组（List、Set）"><a href="#数组（List、Set）" class="headerlink" title="数组（List、Set）"></a>数组（List、Set）</h3><p>用 <code>-</code> 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure><hr><h1 id="配置文件值注入"><a href="#配置文件值注入" class="headerlink" title="配置文件值注入"></a>配置文件值注入</h1><hr><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">lastName:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line">    <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="number">12</span>&#125;</span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>javaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后编写配置就有提示了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="properties-配置文件在-idea-中默认-utf-8-可能会乱码"><a href="#properties-配置文件在-idea-中默认-utf-8-可能会乱码" class="headerlink" title="properties 配置文件在 idea 中默认 utf-8 可能会乱码"></a>properties 配置文件在 idea 中默认 utf-8 可能会乱码</h2><p>设置：</p><div align="center"><img src="../../images/springboot/springboot0201.png" title="">idea 配置乱码</div><h2 id="Value-获取值和-ConfigurationProperties-获取值比较"><a href="#Value-获取值和-ConfigurationProperties-获取值比较" class="headerlink" title="@Value 获取值和 @ConfigurationProperties 获取值比较"></a>@Value 获取值和 @ConfigurationProperties 获取值比较</h2><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件 <code>yml</code> 还是 <code>properties</code> 他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用 <code>@Value</code>；</p><p>如果说，我们专门编写了一个 <code>javaBean</code> 来和配置文件进行映射，我们就直接使用 <code>@ConfigurationProperties</code>。</p><h2 id="配置文件注入值数据校验"><a href="#配置文件注入值数据校验" class="headerlink" title="配置文件注入值数据校验"></a>配置文件注入值数据校验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><h2 id="PropertySource-ImportResource-Bean"><a href="#PropertySource-ImportResource-Bean" class="headerlink" title="@PropertySource &amp; @ImportResource &amp; @Bean"></a>@PropertySource &amp; @ImportResource &amp; @Bean</h2><p>@<strong>PropertySource</strong>：加载指定的配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = &quot;person&quot;)默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效。</p><p>Spring Boot 里面没有 Spring 的配置文件，我们自己编写的配置文件，也不能自动识别。</p><p>想让 Spring 的配置文件生效，将其加载进来；使用 @<strong>ImportResource</strong> 标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations = &#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 导入Spring的配置文件让其生效</span></span><br></pre></td></tr></table></figure><p>不来编写 Spring 的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.springboot.service.HelloService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot 推荐给容器中添加组件的方式；推荐使用<strong>全注解</strong>的方式</p><p>1、配置类 <strong>@Configuration</strong> ——&gt; Spring 配置文件</p><p>2、使用**@Bean**给容器中添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HelloService <span class="title function_">helloService02</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;配置类@Bean给容器中添加组件了...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h1><hr><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="type">int</span>&#125;、$&#123;random.<span class="type">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="type">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="type">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h2 id="占位符获取之前配置的值，如果没有可以使用-指定默认值"><a href="#占位符获取之前配置的值，如果没有可以使用-指定默认值" class="headerlink" title="占位符获取之前配置的值，如果没有可以使用 指定默认值"></a>占位符获取之前配置的值，如果没有可以使用 指定默认值</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="attr">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="attr">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="attr">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="attr">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="attr">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="attr">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="attr">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure><hr><h1 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h1><hr><h2 id="多-Profile-文件"><a href="#多-Profile-文件" class="headerlink" title="多 Profile 文件"></a>多 Profile 文件</h2><p>我们在主配置文件编写的时候，文件名可以是 <code>application-&#123;profile&#125;.properties/yml</code></p><p>默认使用 <code>application.properties</code> 的配置。</p><h2 id="yml-支持多文档块方式"><a href="#yml-支持多文档块方式" class="headerlink" title="yml 支持多文档块方式"></a>yml 支持多文档块方式</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><h2 id="激活指定-profile"><a href="#激活指定-profile" class="headerlink" title="激活指定 profile"></a>激活指定 profile</h2><p>​1、在<code>配置文件</code>中指定  <code>spring.profiles.active=dev</code></p><p>​2、<code>命令行</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；</span><br></pre></td></tr></table></figure><p>​可以直接在测试的时候，配置传入命令行参数：</p><div align="center"><img src="../../images/springboot/springboot0202.png" title="">配置传入命令行参数</div><p>​3、<code>虚拟机</code>参数（JVM）；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active=dev</span><br></pre></td></tr></table></figure><div align="center"><img src="../../images/springboot/springboot0203.png" title="">配置虚拟机参数</div><hr><h1 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h1><hr><p>Spring boot 启动会扫描以下位置的 <code>application.properties</code> 或者 <code>application.yml</code> 文件作为 Spring boot 的默认配置文件。</p><ul><li><p>file:<code>./config/</code></p></li><li><p>file:<code>./</code></p></li><li><p>classpath:<code>/config/</code></p></li><li><p>classpath:<code>/</code></p></li></ul><p>其中 <code>file</code> 表示当前项目文件路径下（<code>项目/</code>），<code>classpath</code> 表示类路径（<code>项目/src/main/resources</code>）。</p><p>优先级 <em><strong>由高到底</strong></em>，高优先级的配置会覆盖低优先级的配置；</p><p>Spring Boot 会从这四个位置全部加载主配置文件；<strong>互补配置</strong></p><p><em>我们还可以通过 <code>spring.config.location</code> 来改变默认的配置文件位置</em></p><p>项目打包好以后，我们可以使用<code>命令行参数</code>的形式，启动项目的时候来<code>指定配置文件的新位置</code>，<code>指定的配置文件</code>和<code>默认加载的这些配置文件</code>共同起作用形成<code>互补配置</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=D:/application.properties</span><br></pre></td></tr></table></figure><hr><h1 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a>外部配置加载顺序</h1><hr><p>Spring Boot 也可以从以下位置加载配置,优先级<code>从高到低</code>；<code>高优先级的配置覆盖低优先级的配置</code>，所有的配置会形成<code>互补配置</code>。</p><p>1） <strong>命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087  --server.context-path=/abc</span><br></pre></td></tr></table></figure><p>多个配置用空格分开； <code>--配置项=值</code></p><p>2） 来自 <code>java:comp/env</code> 的 <code>JNDI</code> 属性</p><p>3） Java 系统属性（<code>System.getProperties()</code>）</p><p>4） 操作系统环境变量</p><p>5） <code>RandomValuePropertySource</code> 配置的 <code>random.*</code> 属性值</p><p><em><strong>由 jar 包外向 jar 包内进行寻找；</strong></em></p><p><em><strong>优先加载带 profile 的配置</strong></em></p><p>6） jar 包外部的 <code>application-&#123;profile&#125;.properties</code> 或 <code>application.yml</code> (带 <code>spring.profile</code>) 配置文件 <strong>★</strong></p><p>7） jar 包内部的 <code>application-&#123;profile&#125;.properties</code> 或 <code>application.yml</code> (带 <code>spring.profile</code>) 配置文件 <strong>★</strong></p><p><em><strong>再来加载不带profile</strong></em></p><p>8） jar 包外部的 <code>application.properties</code> 或 <code>application.yml</code> (不带 <code>spring.profile</code>) 配置文件 <strong>★</strong></p><p>9） jar 包内部的 <code>application.properties</code> 或 <code>application.yml</code> (不带 <code>spring.profile</code>) 配置文件 <strong>★</strong></p><p>10） <code>@Configuration</code> 注解类上的外部配置文件 <code>@PropertySource</code> </p><p>11） 通过 <code>SpringApplication.setDefaultProperties</code> 指定的默认属性。</p><p>所有支持的配置加载来源参考官方文档：</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config">参考官方文档</a></p><h1 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h1><p>配置文件到底能写什么？怎么写？自动配置原理是什么？</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties">配置文件能配置的属性参照</a></p><h2 id="自动配置原理："><a href="#自动配置原理：" class="headerlink" title="自动配置原理："></a><strong>自动配置原理：</strong></h2><p>1）、SpringBoot 启动的时候加载主配置类，开启了自动配置功能 <em><strong>@EnableAutoConfiguration</strong></em></p><p><strong>2）、@EnableAutoConfiguration 作用：</strong></p><ul><li><p>利用 <code>EnableAutoConfigurationImportSelector</code> 给容器中导入一些组件？</p></li><li><p>可以查看 <code>selectImports()</code> 方法的内容；</p></li><li><p><code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</code> 获取候选的配置。</p></li><li><p><code>SpringFactoriesLoader.loadFactoryNames()</code>，扫描所有 jar 包类路径下（<code>META-INF/spring.factories</code>），把扫描到的这些文件的内容包装成 <code>properties</code> 对象，从 properties 中获取到 <code>EnableAutoConfiguration.class</code> 类（类名）对应的值，然后把他们添加在容器中.</p></li></ul><p><em><strong>将类路径下  META-INF&#x2F;spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；</strong></em></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></span><br></pre></td></tr></table></figure><p>每一个这样的 <code>xxxAutoConfiguration</code> 类都是容器中的一个组件，都加入到容器中；用他们来做自动配置。</p><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以 <strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong> 为例解释自动配置原理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HttpEncodingProperties.class)</span>  <span class="comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span>  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpEncodingAutoConfiguration</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(CharacterEncodingFilter.class)</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line"><span class="keyword">public</span> CharacterEncodingFilter <span class="title function_">characterEncodingFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderedCharacterEncodingFilter</span>();</span><br><span class="line">filter.setEncoding(<span class="built_in">this</span>.properties.getCharset().name());</span><br><span class="line">filter.setForceRequestEncoding(<span class="built_in">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">filter.setForceResponseEncoding(<span class="built_in">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>一但这个配置类生效，这个配置类就会给容器中添加各种组件，这些组件的属性是从对应的 <code>properties</code> 类中获取的，这些类里面的每一个属性又是和配置文件绑定的。</p><p>5）、所有在配置文件中能配置的属性都是在 <code>xxxxProperties</code> 类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span>  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpEncodingProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_CHARSET</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>精髓：</strong></p><ul><li><p>1）、SpringBoot 启动会加载大量的自动配置类</p></li><li><p>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</p></li><li><p>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</p></li><li><p>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</p></li></ul><p><code>xxxxAutoConfigurartion</code>：是做自动配置的类，会给容器中添加组件。</p><p><code>xxxxProperties</code>：封装配置文件中相关的属性。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="Conditional-派生注解（Spring-注解版原生的-Conditional-作用）"><a href="#Conditional-派生注解（Spring-注解版原生的-Conditional-作用）" class="headerlink" title="@Conditional 派生注解（Spring 注解版原生的 @Conditional 作用）"></a>@Conditional 派生注解（Spring 注解版原生的 @Conditional 作用）</h3><p>作用：必须是 <code>@Conditional</code> 指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional 扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的 java 版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定 Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定 Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足 SpEL 表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的 Bean，或者这个 Bean 是首选 Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是 web 环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是 web 环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI 存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p><em><strong>我们可以通过启用 debug&#x3D;true 属性；来让控制台打印自动配置报告</strong></em>，这样我们就可以很方便的知道哪些自动配置类生效；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required class <span class="string">&#x27;org.springframework.web.servlet.DispatcherServlet&#x27;</span>; <span class="meta">@ConditionalOnMissingClass</span> did not find unwanted <span class="title function_">class</span> <span class="params">(OnClassCondition)</span></span><br><span class="line">      - <span class="meta">@ConditionalOnWebApplication</span> (required) found <span class="title function_">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">Negative matches:（没有启动，没有匹配成功的自动配置类）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   ActiveMQAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required classes <span class="string">&#x27;javax.jms.ConnectionFactory&#x27;</span>, <span class="string">&#x27;org.apache.activemq.ActiveMQConnectionFactory&#x27;</span> (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required classes <span class="string">&#x27;org.aspectj.lang.annotation.Aspect&#x27;</span>, <span class="string">&#x27;org.aspectj.lang.reflect.Advice&#x27;</span> (OnClassCondition)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 快速入门</title>
      <link href="/SpringBoot-abc.html"/>
      <url>/SpringBoot-abc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/springboot/springboot0100.png"></div><p id="div-border-left-red">Spring Boot 快速入门</p><span id="more"></span><hr><h1 id="SpringBoot-简介"><a href="#SpringBoot-简介" class="headerlink" title="SpringBoot 简介"></a>SpringBoot 简介</h1><hr><blockquote><p>简化 <code>Spring</code> 应用开发的一个框架；</p><p>整个 <code>Spring</code> 技术栈的一个大整合；</p><p><code>J2EE</code> 开发的一站式解决方案；</p></blockquote><p><strong>优点：</strong></p><ul><li><p>快速创建独立运行的 <code>Spring</code> 项目以及与主流框架集成</p></li><li><p>使用嵌入式的 <code>Servlet</code> 容器，应用无需打成 <code>war</code> 包</p></li><li><p><code>starters</code> 自动依赖与版本控制</p></li><li><p>大量的自动配置，简化开发，也可修改默认值</p></li><li><p>无需配置 <code>XML</code>，无代码生成，开箱即用</p></li><li><p>准生产环境的运行时应用监控</p></li><li><p>与云计算的天然集成</p></li></ul><hr><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><hr><p>2014 年，martin fowler 发表了一篇关于微服务的文章。</p><p>微服务：是一种架构风格（服务微化）</p><p>一个应用应该是一组小型服务；可以通过 <code>HTTP</code> 的方式进行互通；</p><p>单体应用：ALL IN ONE</p><p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元。</p><p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa">详细参照微服务文档</a></p><hr><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><hr><h2 id="环境约束："><a href="#环境约束：" class="headerlink" title="环境约束："></a>环境约束：</h2><ul><li><p><code>jdk1.8</code>：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_131”</p></li><li><p><code>maven3.x</code>：maven 3.3以上版本；Apache Maven 3.6.1</p></li><li><p><code>IntelliJ IDEA 2018</code>：IntelliJ IDEA 2018.3.6 x64</p></li><li><p><code>SpringBoot 2.1.7.RELEASE</code>：2.1.7；</p></li></ul><h2 id="统一环境；"><a href="#统一环境；" class="headerlink" title="统一环境；"></a>统一环境；</h2><h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给 maven 的 <code>settings.xml</code> 配置文件的 <code>profiles</code> 标签添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合 <code>maven</code> 进来；</p><div align="center"><img src="../../images/springboot/springboot0101.png" title="">idea 设置</div><h1 id="4、Spring-Boot-入门程序（HelloWorld）"><a href="#4、Spring-Boot-入门程序（HelloWorld）" class="headerlink" title="4、Spring Boot 入门程序（HelloWorld）"></a>4、Spring Boot 入门程序（HelloWorld）</h1><p>一个功能：</p><p>浏览器发送 <code>hello</code> 请求，服务器接受请求并处理，响应 <code>Hello World</code> 字符串；</p><h2 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h2><h2 id="2、导入-spring-boot-相关的依赖"><a href="#2、导入-spring-boot-相关的依赖" class="headerlink" title="2、导入 spring boot 相关的依赖"></a>2、导入 spring boot 相关的依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、编写一个主程序；启动-Spring-Boot-应用"><a href="#3、编写一个主程序；启动-Spring-Boot-应用" class="headerlink" title="3、编写一个主程序；启动 Spring Boot 应用"></a>3、编写一个主程序；启动 Spring Boot 应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个 Spring Boot 应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldMainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、编写相关的-Controller、Service"><a href="#4、编写相关的-Controller、Service" class="headerlink" title="4、编写相关的 Controller、Service"></a>4、编写相关的 Controller、Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h2><h2 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将这个应用打成 <code>jar</code> 包，直接使用 <code>java -jar</code> 的命令进行执行；</p><hr><h1 id="Hello-World-探究"><a href="#Hello-World-探究" class="headerlink" title="Hello World 探究"></a>Hello World 探究</h1><hr><h2 id="POM-文件"><a href="#POM-文件" class="headerlink" title="POM 文件"></a>POM 文件</h2><h3 id="父项目"><a href="#父项目" class="headerlink" title="父项目"></a>父项目</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 他的父项目是 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 他来真正管理 Spring Boot 应用里面的所有依赖版本；--&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Boot 的版本仲裁中心；</p><p>以后我们导入依赖默认是不需要写版本；（<em><strong>没有在 dependencies 里面管理的依赖自然需要声明版本号</strong></em>）</p><h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-<code>web</code>：</p><p><code>spring-boot-starter</code>：spring-boot 场景启动器；帮我们导入了 web 模块正常运行所依赖的组件；</p><p>Spring Boot 将所有的功能场景都抽取出来，做成一个个的 <code>starters</code> （启动器），只需要在项目里面引入这些 starter 相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器。</p><h2 id="主程序类，主入口类"><a href="#主程序类，主入口类" class="headerlink" title="主程序类，主入口类"></a>主程序类，主入口类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldMainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@<strong>SpringBootApplication</strong>: Spring Boot 应用标注在某个类上说明这个类是 Spring Boot 的主配置类，Spring Boot 就应该运行这个类的 <code>main</code> 方法来启动 Spring Boot 应用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p>@<strong>SpringBootConfiguration</strong>: Spring Boot 的配置类；</p><ul><li><p>标注在某个类上，表示这是一个 Spring Boot 的配置类；</p></li><li><p>@<strong>Configuration</strong>:配置类上来标注这个注解；</p></li><li><p>配置类 —–  配置文件；配置类也是容器中的一个组件；<code>@Component</code></p></li></ul><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p>以前我们需要配置的东西，Spring Boot 会帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉 SpringBoot 开启自动配置功能；这样自动配置才能生效；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(EnableAutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><p>​@<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​@<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​Spring 的底层注解 <code>@Import</code>，给容器中导入一个组件；导入的组件由 <code>AutoConfigurationPackages.Registrar.class</code>；</p><p><code>将主配置类（@SpringBootApplication 标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；</code></p><p>​@<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p><p>​给容器中导入组件？</p><p>​<strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​会给容器中导入非常多的自动配置类（<code>xxxAutoConfiguration</code>）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；</p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p><p><code>​SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</code></p><p><code>Spring Boot在启动的时候从类路径下的 META-INF/spring.factories 中获取 EnableAutoConfiguration 指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；</code>以前我们需要自己配置的东西，自动配置类都帮我们配置了；</p><p><code>J2EE</code> 的整体整合解决方案和自动配置都在 <code>spring-boot-autoconfigure-2.1.7.RELEASE.jar</code>；</p><hr><h1 id="使用-Spring-Initializer-快速创建Spring-Boot项目"><a href="#使用-Spring-Initializer-快速创建Spring-Boot项目" class="headerlink" title="使用 Spring Initializer 快速创建Spring Boot项目"></a>使用 Spring Initializer 快速创建Spring Boot项目</h1><hr><h2 id="IDEA：使用-Spring-Initializer快速创建项目"><a href="#IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="IDEA：使用 Spring Initializer快速创建项目"></a>IDEA：使用 Spring Initializer快速创建项目</h2><p>IDE 都支持使用 Spring 的项目创建向导快速创建一个 Spring Boot 项目；</p><p>选择我们需要的模块；向导会联网创建 Spring Boot 项目；</p><p>默认生成的 Spring Boot 项目；</p><ul><li><p>主程序已经生成好了，我们只需要编写自己的业务逻辑就行了</p></li><li><p>resources 文件夹中目录结构</p><ul><li><code>static</code>：保存所有的静态资源； <code>js css  images</code>；</li><li><code>templates</code>：保存所有的模板页面；（Spring Boot 默认 jar 包使用嵌入式的 Tomcat，默认<code>不支持 JSP 页面</code>）；可以使用模板引擎（<code>freemarker</code>、<code>thymeleaf</code>）；</li><li><code>application.properties</code>：Spring Boot 应用的<code>配置文件</code>；可以修改一些默认设置；</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到任凯的个人博客~</title>
      <link href="/notice.html"/>
      <url>/notice.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div style="text-align:center"><span id="inline-red">因求职和写毕业论文，精力不足，停更大半年！</span></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebGIS：Tomcat 离线部署 ArcGIS API for JavaScript（v4.9）</title>
      <link href="/WebGIS-tomcat-arcgis_js_api49.html"/>
      <url>/WebGIS-tomcat-arcgis_js_api49.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/webgis/0100.png"></div><span id="more"></span><h1 id="下载-API-和-SDK-文件"><a href="#下载-API-和-SDK-文件" class="headerlink" title="下载 API 和 SDK 文件"></a>下载 API 和 SDK 文件</h1><p>下载地址：<a href="https://developers.arcgis.com/downloads/apis-and-sdks?product=javascript">https://developers.arcgis.com/downloads/apis-and-sdks?product=javascript</a></p><ul><li>注：需要登录。</li></ul><p>选择自己需要的版本下载对应的 API 和 SDK 包。这里以 4.9 版本为例。</p><img src="../../images/webgis/0101.png"><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="Tomcat-下解压"><a href="#Tomcat-下解压" class="headerlink" title="Tomcat 下解压"></a>Tomcat 下解压</h2><p>Tomcat 服务器 <code>webapps</code> 文件夹下建立一个你的项目文件夹用来放置 api 和 sdk 。</p><p>例如我新建一个 <code>api49</code> 文件夹：<code>D:\apache-tomcat-7.0.52\webapps\api49</code></p><p>将下载的 api 和 sdk 解压到这个目录下（目录结构如下图）：</p><img src="../../images/webgis/0102.png"><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>注：Tomcat 默认端口为：<code>localhost:8080</code></p><ol><li>找到 <code>D:\apache-tomcat-7.0.52\webapps\api49\arcgis_js_api\library\4.9\init.js</code> 文件，将 <code>[HOSTNAME_AND_PATH_TO_JSAPI]</code> 修改为 <code>/localhost:8080/api49/arcgis_js_api/library/4.9/</code> 。注意把原来的 <code>https</code> 改为 <code>http</code> 。</li></ol><p>即 <code>init.js</code> 里面变为：<code>baseUrl:&quot;http://localhost:8080/api49/arcgis_js_api/library/4.9/dojo&quot;</code></p><ol start="2"><li>找到 <code>D:\apache-tomcat-7.0.52\webapps\api49\arcgis_js_api\library\4.9\dojo\dojo.js</code> 文件，将 <code>[HOSTNAME_AND_PATH_TO_JSAPI]</code> 修改为 <code>/localhost:8080/api49/arcgis_js_api/library/4.9/</code> 。注意把原来的 <code>https</code> 改为 <code>http</code> 。</li></ol><p>即 <code>dojo.js</code> 里面变为：<code>baseUrl:&quot;http://localhost:8080/api49/arcgis_js_api/library/4.9/dojo&quot;</code></p><h2 id="测试部署"><a href="#测试部署" class="headerlink" title="测试部署"></a>测试部署</h2><p>在 <code>api49</code> 目录下新建一个 <code>test.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1, maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Map<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/api49/arcgis_js_api/library/4.9/dijit/themes/claro/claro.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/api49/arcgis_js_api/library/4.9/esri/css/main.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#viewDiv</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/api49/arcgis_js_api/library/4.9/dojo/dojo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> myMap, view;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">require</span>([</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;esri/Basemap&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;esri/layers/TileLayer&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;esri/Map&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;esri/views/MapView&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;dojo/domReady!&quot;</span></span></span><br><span class="line"><span class="language-javascript">      ], <span class="keyword">function</span> (<span class="params">Basemap, TileLayer, <span class="built_in">Map</span>, MapView</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// --------------------------------------------------------------------</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// If you do not have public Internet access then use the Basemap class</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// and point this URL to your own locally accessible cached service.</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Otherwise you can just use one of the named hosted ArcGIS services.</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// https://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// --------------------------------------------------------------------</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> <span class="title class_">TileLayer</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>: <span class="string">&quot;https://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> customBasemap = <span class="keyword">new</span> <span class="title class_">Basemap</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">baseLayers</span>: [layer],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">title</span>: <span class="string">&quot;Custom Basemap&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>: <span class="string">&quot;myBasemap&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        myMap = <span class="keyword">new</span> <span class="title class_">Map</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">basemap</span>: customBasemap</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        view = <span class="keyword">new</span> <span class="title class_">MapView</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">center</span>: [-<span class="number">111.87</span>, <span class="number">40.57</span>], <span class="comment">// long, lat</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">container</span>: <span class="string">&quot;viewDiv&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">map</span>: myMap,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">zoom</span>: <span class="number">6</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;claro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;viewDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动 Tomcat 服务器，浏览器访问：<code>http://localhost:8080/api49/test.html</code></p><p>若显示下图，则说明部署成功！</p><img src="../../images/webgis/0103.png">]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 SSH 框架整合</title>
      <link href="/JavaWeb-SSH01.html"/>
      <url>/JavaWeb-SSH01.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/ssh0100.png"></div><p id="div-border-left-blue">SSH 框架整合</p><span id="more"></span><hr><h1 id="SSH-框架整合的环境准备"><a href="#SSH-框架整合的环境准备" class="headerlink" title="SSH 框架整合的环境准备"></a>SSH 框架整合的环境准备</h1><hr><h2 id="SSH-三大框架需要的-jar包"><a href="#SSH-三大框架需要的-jar包" class="headerlink" title="SSH 三大框架需要的 jar包"></a>SSH 三大框架需要的 jar包</h2><h3 id="Struts2-框架"><a href="#Struts2-框架" class="headerlink" title="Struts2 框架"></a>Struts2 框架</h3><blockquote><p><code>struts-2.3.24\apps\struts2-blank\WEB-INF\lib\*.jar</code>————Struts2 需要的所有 jar 包<br><code>struts2-spring-plugin-2.3.24.jar</code>————Struts2 整合 Spring 的插件包</p></blockquote><h3 id="Hibernate-框架"><a href="#Hibernate-框架" class="headerlink" title="Hibernate 框架"></a>Hibernate 框架</h3><blockquote><p><code>hibernate-release-5.0.7.Final\lib\required\*.jar</code>————Hibernate 框架需要的 jar 包<br><code>slf4j-api-1.6.1.jar</code>————日志接口<br><code>slf4j-log4j12-1.7.2.jar</code>————日志实现<br><code>mysql-connector-java-5.1.7-bin.jar</code>————MySQL 的驱动包</p></blockquote><h3 id="Spring-框架"><a href="#Spring-框架" class="headerlink" title="Spring 框架"></a>Spring 框架</h3><blockquote><p><code>IoC</code> 核心包（6个）<br><code>AOP</code> 核心包（4个）<br><code>JDBC</code> 模板和<code>事务</code>核心包（2个）<br>Spring 整合 <code>JUnit</code> 测试包<br>Spring 整合 <code>Hibernate</code> 核心包<br>Spring 整合 <code>Struts2</code> 核心包</p></blockquote><h2 id="SSH-三大框架需要的配置文件"><a href="#SSH-三大框架需要的配置文件" class="headerlink" title="SSH 三大框架需要的配置文件"></a>SSH 三大框架需要的配置文件</h2><h3 id="Struts2-框架-1"><a href="#Struts2-框架-1" class="headerlink" title="Struts2 框架"></a>Struts2 框架</h3><ul><li>在 <code>web.xml</code> 中配置核心的过滤器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 Struts2 框架核心的过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>src</code> 目录下创建 <code>struts.xml</code>，用来配置 <code>Action</code></li></ul><h3 id="Hibernate-框架-1"><a href="#Hibernate-框架-1" class="headerlink" title="Hibernate 框架"></a>Hibernate 框架</h3><ul><li>在 <code>src</code> 目录创建 <code>hibernate.cfg.xml</code> 配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 必须配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql:///ssh01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span>541638<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可选配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置C3P0的连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.provider_class&quot;</span>&gt;</span>org.hibernate.c3p0.internal.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 映射配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;com/renkaigis/domain/Customer.hbm.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>JavaBean</code> 所在的包下编写 <code>映射的配置文件</code>：<code>JavaBean类名.hbm.xml</code></li></ul><h3 id="Spring-框架-1"><a href="#Spring-框架-1" class="headerlink" title="Spring 框架"></a>Spring 框架</h3><ul><li>在 <code>web.xml</code> 配置整合 WEB 的监听器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 Spring 框架整合 WEB 的监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在 <code>src</code> 目录下创建 <code>applicationContext.xml</code></p></li><li><p>在 <code>src</code> 目录下加入 <code>log4j.proerties</code></p></li></ul><hr><h1 id="Spring-框架整合-Struts2-框架"><a href="#Spring-框架整合-Struts2-框架" class="headerlink" title="Spring 框架整合 Struts2 框架"></a>Spring 框架整合 Struts2 框架</h1><hr><h2 id="表单访问-Action"><a href="#表单访问-Action" class="headerlink" title="表单访问 Action"></a>表单访问 Action</h2><ul><li>导入 <code>CRM</code> 项目的 UI 页面，找到添加客户的页面，修改 form 表单，访问 Action。</li></ul><h2 id="编写-CustomerAction-接收请求，在-struts-xml-中完成-Action-的配置"><a href="#编写-CustomerAction-接收请求，在-struts-xml-中完成-Action-的配置" class="headerlink" title="编写 CustomerAction 接收请求，在 struts.xml 中完成 Action 的配置"></a>编写 CustomerAction 接收请求，在 struts.xml 中完成 Action 的配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--先配置包结构--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;crm&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置客户的 Action--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;customer_*&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.web.action.CustomerAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&#123;1&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模型驱动封装数据"><a href="#模型驱动封装数据" class="headerlink" title="模型驱动封装数据"></a>模型驱动封装数据</h2><p>编写好客户的 JavaBean，在 Action 中使用模型驱动来封装数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的控制层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> <span class="keyword">implements</span> <span class="title class_">ModelDriven</span>&lt;Customer&gt; &#123;</span><br><span class="line">    <span class="comment">// 不要忘记自己手动 new</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WEB 层：保存客户…&quot;</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在-Action-中获取到-service（开发不会使用，因为麻烦）"><a href="#在-Action-中获取到-service（开发不会使用，因为麻烦）" class="headerlink" title="在 Action 中获取到 service（开发不会使用，因为麻烦）"></a>在 Action 中获取到 service（开发不会使用，因为麻烦）</h2><p>可以通过 <code>WebApplicationContextUtils.getWebApplicationContext(ServletActionContext.getServletContext());</code> 来获取，但是这种方式编写代码太麻烦了！</p><h2 id="Spring-整合-Struts2-框架的第一种方式（Action-由-Struts2-框架来创建）"><a href="#Spring-整合-Struts2-框架的第一种方式（Action-由-Struts2-框架来创建）" class="headerlink" title="Spring 整合 Struts2 框架的第一种方式（Action 由 Struts2 框架来创建）"></a>Spring 整合 Struts2 框架的第一种方式（Action 由 Struts2 框架来创建）</h2><ul><li>因为导入的 <code>struts2-spring-plugin-2.3.24.jar</code> 包自带一个配置文件 struts-plugin.xml ，该配置文件中有如下代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.objectFactory&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>开启一个常量，如果该常量开启，那么下面的常量就可以使用</p><ul><li><p><code>struts.objectFactory.spring.autoWire = name</code>，该常量是可以让 <code>Action</code> 的类来自动装配 <code>Bean</code> 对象！</p></li><li><p><code>CustomerService.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提供 service 的成员属性，提供 set 方法</span></span><br><span class="line"><span class="keyword">private</span> CustomerService customerService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustomerService</span><span class="params">(CustomerService customerService)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.customerService = customerService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-整合-Struts2-框架的第二种方式（Action-由-Spring-框架来创建）（强烈推荐）"><a href="#Spring-整合-Struts2-框架的第二种方式（Action-由-Spring-框架来创建）（强烈推荐）" class="headerlink" title="Spring 整合 Struts2 框架的第二种方式（Action 由 Spring 框架来创建）（强烈推荐）"></a>Spring 整合 Struts2 框架的第二种方式（Action 由 Spring 框架来创建）（强烈推荐）</h2><ul><li><p>把具体的 <code>Action</code> 类配置到 <code>applicatonContext.xml</code> 的配置文件中，但是注意 <code>struts.xml</code> 需要做修改：</p></li><li><p><code>applicationContext.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置客户模块--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--强调：配置 Aciton，必须是多例的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customerAction&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.web.action.CustomerAction&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;customerService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;customerService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customerService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.service.CustomerServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>struts.xml</code> 中的修改，把全路径修改成 <code>ID 值</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;crm&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置客户的 Action，如果 Action 是由 Spring 框架来管理，class 标签只需要去编写 id 值就ok了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;customer_*&quot;</span> <span class="attr">class</span>=<span class="string">&quot;customerAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&#123;1&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第二种方式需要有两个注意的地方</p><blockquote><p><code>Spring</code> 框架默认生成 <code>CustomerAction</code> 是单例的，而 <code>Struts2</code> 框架是<code>多例</code>的。所以需要配置 <code>scope=&quot;prototype&quot;</code><br><code>CustomerService</code> 现在必须自己手动注入了。</p></blockquote></li></ul><hr><h1 id="Spring-框架整合-Hibernate-框架"><a href="#Spring-框架整合-Hibernate-框架" class="headerlink" title="Spring 框架整合 Hibernate 框架"></a>Spring 框架整合 Hibernate 框架</h1><hr><h2 id="Spring-框架整合-Hibernate-框架（有配置文件）"><a href="#Spring-框架整合-Hibernate-框架（有配置文件）" class="headerlink" title="Spring 框架整合 Hibernate 框架（有配置文件）"></a>Spring 框架整合 Hibernate 框架（有配置文件）</h2><p>（带有 <code>hibernate.cfg.xml</code> 的配置文件。<code>强调：不能加绑定当前线程的配置</code>）</p><h3 id="编写-CustomerDaoImpl-的代码，加入配置并且在-CustomerServiceImpl-中完成注入"><a href="#编写-CustomerDaoImpl-的代码，加入配置并且在-CustomerServiceImpl-中完成注入" class="headerlink" title="编写 CustomerDaoImpl 的代码，加入配置并且在 CustomerServiceImpl 中完成注入"></a>编写 <code>CustomerDaoImpl</code> 的代码，加入配置并且在 <code>CustomerServiceImpl</code> 中完成注入</h3><p><code>CustomerDaoImpl.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">CustomerDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Customer customer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;持久层：保存客户…&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CustomerServiceImpl.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CustomerService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustomerDao</span><span class="params">(CustomerDao customerDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerDao = customerDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Customer customer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层：保存客户…&quot;</span>);</span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现步骤：<code>Action</code> 调用 <code>Service</code> ，<code>Service</code> 调用 <code>Dao</code></p><h3 id="编写映射的配置文件"><a href="#编写映射的配置文件" class="headerlink" title="编写映射的配置文件"></a>编写映射的配置文件</h3><p><code>Customer.hbm.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;com.renkaigis.domain.Customer&quot;</span> <span class="attr">table</span>=<span class="string">&quot;cst_customer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;cust_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_user_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_user_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_create_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_create_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_source&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_source&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_industry&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_industry&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_level&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_level&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_linkman&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_linkman&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_phone&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_mobile&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_mobile&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>hibernate.cfg.xml</code> 的配置文件中引入映射的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 映射配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;com/renkaigis/domain/Customer.hbm.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-applicationContext-xml-中配置加载-hibernate-cfg-xml"><a href="#在-applicationContext-xml-中配置加载-hibernate-cfg-xml" class="headerlink" title="在 applicationContext.xml 中配置加载 hibernate.cfg.xml"></a>在 <code>applicationContext.xml</code> 中配置加载 <code>hibernate.cfg.xml</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--编写 Bean，名称都是固定的，加载 hibernate.cfg.xml 配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:hibernate.cfg.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Dao-继承-HibernateDaoSupport-的工具类"><a href="#Dao-继承-HibernateDaoSupport-的工具类" class="headerlink" title="Dao 继承 HibernateDaoSupport 的工具类"></a>Dao 继承 <code>HibernateDaoSupport</code> 的工具类</h3><p>在 <code>CustomerDaoImpl</code> 中想完成数据的添加，Spring 框架提供了一个 <code>HibernateDaoSupport</code> 的工具类，以后 <code>DAO</code> 都可以继承该类！</p><p><code>CustomerDaoImpl.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">CustomerDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Customer customer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;持久层：保存客户…&quot;</span>);</span><br><span class="line">        <span class="comment">// 把数据保存到数据库</span></span><br><span class="line">        <span class="built_in">this</span>.getHibernateTemplate().save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>applicationContext.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以后开发：Dao 都需要继承 HibernateDaoSupport，注入 sessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customerDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.dao.CustomerDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="开启事务的配置"><a href="#开启事务的配置" class="headerlink" title="开启事务的配置"></a>开启事务的配置</h3><ul><li>先配置事务管理器，注意现在使用的是 <code>Hibernate</code> 框架，所以需要使用 <code>Hibernate</code> 框架的事务管理器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开启注解事务</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务的注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>Service</code> 类中添加事务注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CustomerService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustomerDao</span><span class="params">(CustomerDao customerDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerDao = customerDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Customer customer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层：保存客户…&quot;</span>);</span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-框架整合-Hibernate-框架（无配置文件）"><a href="#Spring-框架整合-Hibernate-框架（无配置文件）" class="headerlink" title="Spring 框架整合 Hibernate 框架（无配置文件）"></a>Spring 框架整合 Hibernate 框架（无配置文件）</h2><p>（不带有 <code>hibernate.cfg.xml</code> 的配置文件）</p><h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3><p>要不带有 <code>hibernate.cfg.xml</code> 的配置文件，则需要将 <code>hibernate.cfg.xml</code> 中的配置移植到 <code>applicationContext.xml</code> 中。具体操作如下：</p><h4 id="Hibernate-配置文件中的配置"><a href="#Hibernate-配置文件中的配置" class="headerlink" title="Hibernate 配置文件中的配置"></a>Hibernate 配置文件中的配置</h4><ul><li>数据库连接基本参数（4 大参数）</li><li>Hibernate 相关的属性</li><li>连接池</li><li>映射文件</li></ul><h4 id="开始进行配置"><a href="#开始进行配置" class="headerlink" title="开始进行配置"></a>开始进行配置</h4><ul><li>先配置连接池相关的信息</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 C3P0 连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///ssh01&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;541638&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>修改 <code>LocalSessionFactoryBean</code> 的属性配置，因为已经没有了 <code>hibernate.cfg.xml</code> 配置文件，所以需要修改该配置，注入连接池：</p>  <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">      <property name="dataSource" ref="dataSource"/>  </bean></li><li><p>继续在 <code>LocalSessionFactoryBean</code> 中配置，使用 <code>hibernateProperties</code> 属性继续来配置其他的属性，注意值是 <code>properties</code> 属性文件：</p></li></ul><p><code>applicationContext.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--LocalSessionFactoryBean 加载配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载方言，加载可选项--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernateProperties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载映射配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappingResources&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>com/renkaigis/domain/Customer.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="延迟加载问题"><a href="#延迟加载问题" class="headerlink" title="延迟加载问题"></a>延迟加载问题</h2><h3 id="no-session-异常"><a href="#no-session-异常" class="headerlink" title="no session 异常"></a>no session 异常</h3><p>使用延迟加载的时候，在 WEB 层查询对象的时候程序会抛出异常！</p><ul><li><p>原因是延迟加载还没有发生 SQL 语句，在业务层 session 对象就已经销毁了，所以查询到的 JavaBean 对象已经变成了托管态对象！</p></li><li><p>注意：一定要先删除 <code>javassist-3.11.0.GA.jar</code> 包（jar包冲突了）</p></li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决办法非常简单，Spring 框架提供了一个过滤器，让 <code>session</code> 对象在 WEB 层就创建，在 WEB 层销毁。只需要配置该过滤器即可。</p><ul><li>但是：要注意需要在 struts2 的<code>核心过滤器之前</code>进行配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解决延迟加载的问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="终极版-SSH-整合"><a href="#终极版-SSH-整合" class="headerlink" title="终极版 SSH 整合"></a>终极版 SSH 整合</h1><hr><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 Spring 框架整合 WEB 的监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 解决延迟加载的问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 Struts2 框架核心的过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="struts-xml"><a href="#struts-xml" class="headerlink" title="struts.xml"></a>struts.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">struts</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;crm&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置客户的 Action--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;customer_*&quot;</span> <span class="attr">class</span>=<span class="string">&quot;customerAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&#123;1&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-xml"><a href="#application-xml" class="headerlink" title="application.xml"></a>application.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 C3P0 连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///ssh01&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;541638&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--LocalSessionFactoryBean 加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载方言，加载可选项--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernateProperties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载映射配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappingResources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>com/renkaigis/domain/Customer.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--先配置平台事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启事务的注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置客户模块--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--强调：配置 Aciton，必须是多例的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customerAction&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.web.action.CustomerAction&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;customerService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;customerService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customerService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.service.CustomerServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;customerDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;customerDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以后开发：Dao 都需要继承 HibernateDaoSupport，注入 sessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customerDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.dao.CustomerDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">### direct log messages to stdout ###</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.err</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line">### direct messages to file mylog.log ###</span><br><span class="line">log4j.appender.file=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.file.File=c\:mylog.log</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line">### set log levels - for more verbose logging change &#x27;info&#x27; to &#x27;debug&#x27; ###</span><br><span class="line"></span><br><span class="line">log4j.rootLogger=info, stdout</span><br></pre></td></tr></table></figure><h2 id="WEB-项目"><a href="#WEB-项目" class="headerlink" title="WEB 项目"></a>WEB 项目</h2><h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><p><code>CustomerAction.java</code> ，继承 <code>ActionSupport</code> 类，使用 <code>模型驱动</code> 封装数据（记得手动 new，手动实例化 <code>JavaBean</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ModelDriven;</span><br><span class="line"><span class="keyword">import</span> com.renkaigis.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.renkaigis.service.CustomerService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的控制层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> <span class="keyword">implements</span> <span class="title class_">ModelDriven</span>&lt;Customer&gt; &#123;</span><br><span class="line">    <span class="comment">// 不要忘记自己手动 new</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供 service 的成员属性，提供 set 方法</span></span><br><span class="line">    <span class="keyword">private</span> CustomerService customerService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustomerService</span><span class="params">(CustomerService customerService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerService = customerService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WEB 层：保存客户…&quot;</span>);</span><br><span class="line">        customerService.save(customer);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><p><code>CustomerServiceImpl.java</code>，添加事务注解，处理业务逻辑，调用持久层。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.renkaigis.dao.CustomerDao;</span><br><span class="line"><span class="keyword">import</span> com.renkaigis.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CustomerService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustomerDao</span><span class="params">(CustomerDao customerDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerDao = customerDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Customer customer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层：保存客户…&quot;</span>);</span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Customer customer)</span> &#123;</span><br><span class="line">        customerDao.update(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p><code>CustomerDaoImpl.java</code>，继承 <code>HibernateDaoSupport</code> 类，使用 <code>Hibernate</code> 模板类实现 Java 类与数据库之间的转换和访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.renkaigis.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.hibernate5.support.HibernateDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">CustomerDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Customer customer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;持久层：保存客户…&quot;</span>);</span><br><span class="line">        <span class="comment">// 把数据保存到数据库</span></span><br><span class="line">        <span class="built_in">this</span>.getHibernateTemplate().save(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Customer customer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getHibernateTemplate().update(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Spring 事务管理</title>
      <link href="/JavaWeb-Spring05.html"/>
      <url>/JavaWeb-Spring05.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/spring0500.png"></div><p id="div-border-left-blue">Spring 事务管理</p><span id="more"></span><hr><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><hr><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>事务：指的是逻辑上的一组操作，组成这个事务的各个执行单元，要么一起成功，要么一起失败！</p><h2 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h2><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><h2 id="安全性问题"><a href="#安全性问题" class="headerlink" title="安全性问题"></a>安全性问题</h2><p>如果不考虑隔离性,引发安全性问题</p><ul><li><p>读问题:</p><blockquote><p>脏读<br>不可重复读<br>虚读</p></blockquote></li><li><p>写问题:</p><blockquote><p>丢失更新</p></blockquote></li></ul><h2 id="如何解决安全性问题"><a href="#如何解决安全性问题" class="headerlink" title="如何解决安全性问题"></a>如何解决安全性问题</h2><blockquote><p>读问题解决，设置数据库隔离级别</p></blockquote><blockquote><p>写问题解决可以使用 <code>悲观锁</code> 和 <code>乐观锁</code> 的方式解决</p></blockquote><hr><h1 id="Spring-框架的事务管理"><a href="#Spring-框架的事务管理" class="headerlink" title="Spring 框架的事务管理"></a>Spring 框架的事务管理</h1><hr><h2 id="Spring-框架的事务管理相关的类和-API"><a href="#Spring-框架的事务管理相关的类和-API" class="headerlink" title="Spring 框架的事务管理相关的类和 API"></a>Spring 框架的事务管理相关的类和 API</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol><li><code>PlatformTransactionManager</code>接口————平台事务管理器。（真正管理事务的类）。该接口有具体的实现类，根据不同的持久层框架，需要选择不同的实现类！</li><li><code>TransactionDefinition</code>接口————事务定义信息。（事务的隔离级别，传播行为，超时，只读）</li><li><code>TransactionStatus</code>接口————事务的状态</li></ol><p>总结：上述对象之间的关系：平台事务管理器真正管理事务对象。根据事务定义的信息 <code>TransactionDefinition</code> 进行事务管理，在管理事务中产生一些状态，将状态记录到 <code>TransactionStatus</code> 中。</p><h3 id="PlatformTransactionManager-接口中实现类和常用的方法"><a href="#PlatformTransactionManager-接口中实现类和常用的方法" class="headerlink" title="PlatformTransactionManager 接口中实现类和常用的方法"></a>PlatformTransactionManager 接口中实现类和常用的方法</h3><ol><li><p>接口的实现类</p><blockquote><p>如果使用的 Spring 的 <code>JDBC</code> 模板或者 <code>MyBatis</code> 框架，需要选择 <code>DataSourceTransactionManager</code> 实现类<br>如果使用的是 <code>Hibernate</code> 的框架，需要选择 <code>HibernateTransactionManager</code> 实现类</p></blockquote></li><li><p>该接口的常用方法</p><blockquote><p><code>void commit(TransactionStatus status)</code><br><code>TransactionStatus getTransaction(TransactionDefinition definition)</code><br><code>void rollback(TransactionStatus status)</code></p></blockquote></li></ol><h3 id="TransactionDefinition-接口中实现类和常用的方法"><a href="#TransactionDefinition-接口中实现类和常用的方法" class="headerlink" title="TransactionDefinition 接口中实现类和常用的方法"></a>TransactionDefinition 接口中实现类和常用的方法</h3><ol><li><p>事务隔离级别的常量</p><blockquote><p>static int ISOLATION_DEFAULT————采用数据库的默认隔离级别<br>static int ISOLATION_READ_UNCOMMITTED<br>static int ISOLATION_READ_COMMITTED<br>static int ISOLATION_REPEATABLE_READ<br>static int ISOLATION_SERIALIZABLE </p></blockquote></li><li><p>事务的传播行为常量（不用设置，<code>使用默认值</code>）</p></li></ol><ul><li>事务的传播行为：解决的是业务层之间的方法调用！<blockquote><p>PROPAGATION_REQUIRED（默认值）————A 中有事务，使用 A 中的事务。如果没有，B 就会开启一个新的事务，将 A 包含进来。（保证 A，B 在同一个事务中），默认值！<br>PROPAGATION_SUPPORTS————A 中有事务，使用 A 中的事务。如果 A 中没有事务，那么 B 也不使用事务。<br>PROPAGATION_MANDATORY————A 中有事务，使用 A 中的事务。如果 A 没有事务，抛出异常。</p><p>PROPAGATION_REQUIRES_NEW（记）————A 中有事务，将 A 中的事务挂起。B 创建一个新的事务。（保证 A，B 没有在一个事务中）<br>PROPAGATION_NOT_SUPPORTED————A 中有事务，将 A 中的事务挂起。<br>PROPAGATION_NEVER————A 中有事务，抛出异常。</p><p>PROPAGATION_NESTED（记）————嵌套事务。当 A 执行之后，就会在这个位置设置一个保存点。如果 B 没有问题，执行通过。如果 B 出现异常了，运行客户根据需求回滚（选择回滚到保存点或者是最初始状态）</p></blockquote></li></ul><h2 id="搭建事务管理转账案例的环境"><a href="#搭建事务管理转账案例的环境" class="headerlink" title="搭建事务管理转账案例的环境"></a>搭建事务管理转账案例的环境</h2><p>（强调：简化开发，以后 <code>DAO</code> 可以继承 <code>JdbcDaoSupport</code> 类）</p><h3 id="步骤一：创建-WEB-工程，引入需要的-jar-包"><a href="#步骤一：创建-WEB-工程，引入需要的-jar-包" class="headerlink" title="步骤一：创建 WEB 工程，引入需要的 jar 包"></a>步骤一：创建 WEB 工程，引入需要的 jar 包</h3><blockquote><p>IoC 的 6 个包<br>AOP 的 4 个包<br>C3P0 的 1 个包<br>MySQL 的驱动包<br>JDBC 模板 2 个包<br>整合 JUnit 测试包</p></blockquote><h3 id="步骤二：引入配置文件"><a href="#步骤二：引入配置文件" class="headerlink" title="步骤二：引入配置文件"></a>步骤二：引入配置文件</h3><ul><li><p>引入配置文件</p><blockquote><p>引入 <code>log4j.properties</code></p></blockquote></li><li><p>引入 <code>applicationContext.xml</code></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="步骤三：创建对应的包结构和类"><a href="#步骤三：创建对应的包结构和类" class="headerlink" title="步骤三：创建对应的包结构和类"></a>步骤三：创建对应的包结构和类</h3><ul><li>com.itheima.demo2<blockquote><p>AccountService<br>AccountServlceImpl<br>AccountDao<br>AccountDaoImpl</p></blockquote></li></ul><h3 id="步骤四：引入-Spring-的配置文件，将类配置到-Spring-中"><a href="#步骤四：引入-Spring-的配置文件，将类配置到-Spring-中" class="headerlink" title="步骤四：引入 Spring 的配置文件，将类配置到 Spring 中"></a>步骤四：引入 Spring 的配置文件，将类配置到 Spring 中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="步骤五：在业务层注入-DAO-在-DAO-中注入-JDBC-模板"><a href="#步骤五：在业务层注入-DAO-在-DAO-中注入-JDBC-模板" class="headerlink" title="步骤五：在业务层注入 DAO ,在 DAO 中注入 JDBC 模板"></a>步骤五：在业务层注入 DAO ,在 DAO 中注入 JDBC 模板</h3><p>（强调：简化开发，DAO 可以继承 <code>JdbcDaoSupport</code> 类）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="步骤六：编写-DAO-和-Service-中的方法"><a href="#步骤六：编写-DAO-和-Service-中的方法" class="headerlink" title="步骤六：编写 DAO 和 Service 中的方法"></a>步骤六：编写 DAO 和 Service 中的方法</h3><p><code>Service</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountDao</span><span class="params">(AccountDao accountDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(String out, String in, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        <span class="comment">// 先扣钱</span></span><br><span class="line">        accountDao.outMoney(out, money);</span><br><span class="line">        <span class="comment">// 后加钱</span></span><br><span class="line">        accountDao.inMoney(in, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DAO</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line">    <span class="comment">// 扣钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outMoney</span><span class="params">(String out, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getJdbcTemplate().update(<span class="string">&quot;update t_account set money = money - ? where name = ?&quot;</span>, money, out);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inMoney</span><span class="params">(String in, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getJdbcTemplate().update(<span class="string">&quot;update t_account set money = money + ? where name = ?&quot;</span>, money, in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤七：编写测试程序"><a href="#步骤七：编写测试程序" class="headerlink" title="步骤七：编写测试程序"></a>步骤七：编写测试程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line">        accountService.pay(<span class="string">&quot;小关&quot;</span>, <span class="string">&quot;小西&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-框架事务管理的分类"><a href="#Spring-框架事务管理的分类" class="headerlink" title="Spring 框架事务管理的分类"></a>Spring 框架事务管理的分类</h2><ol><li><p>Spring 的编程式事务管理（不推荐使用）</p><blockquote><p>通过手动编写代码的方式完成事务的管理（不推荐）</p></blockquote></li><li><p>Spring 的<code>声明式事务管理</code>（底层采用 <code>AOP</code> 的技术）</p><blockquote><p>通过一段配置的方式完成事务的管理（重点掌握<code>注解</code>的方式）</p></blockquote></li></ol><h3 id="Spring-框架事务管理之编程式事务管理（了解）"><a href="#Spring-框架事务管理之编程式事务管理（了解）" class="headerlink" title="Spring 框架事务管理之编程式事务管理（了解）"></a>Spring 框架事务管理之编程式事务管理（了解）</h3><p>说明：Spring 为了简化事务管理的代码：提供了模板类 <code>TransactionTemplate</code>，所以手动编程的方式来管理事务，只需要使用该模板类即可！</p><h4 id="步骤一：配置一个事务管理器"><a href="#步骤一：配置一个事务管理器" class="headerlink" title="步骤一：配置一个事务管理器"></a>步骤一：配置一个事务管理器</h4><p>Spring 使用 <code>PlatformTransactionManager</code> 接口来管理事务，所以需要使用到他的实现类！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤二：配置事务管理的模板"><a href="#步骤二：配置事务管理的模板" class="headerlink" title="步骤二：配置事务管理的模板"></a>步骤二：配置事务管理的模板</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--手动编码，提供了模板类，使用该类管理事务比较简单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.transaction.support.TransactionTemplate&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤三：在需要进行事务管理的类中，注入事务管理的模板"><a href="#步骤三：在需要进行事务管理的类中，注入事务管理的模板" class="headerlink" title="步骤三：在需要进行事务管理的类中，注入事务管理的模板"></a>步骤三：在需要进行事务管理的类中，注入事务管理的模板</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionTemplate&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤四：在业务层使用模板管理事务"><a href="#步骤四：在业务层使用模板管理事务" class="headerlink" title="步骤四：在业务层使用模板管理事务"></a>步骤四：在业务层使用模板管理事务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountDao</span><span class="params">(AccountDao accountDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入事务的模板类</span></span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTransactionTemplate</span><span class="params">(TransactionTemplate transactionTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.transactionTemplate = transactionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(String out, String in, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        transactionTemplate.execute(<span class="keyword">new</span> <span class="title class_">TransactionCallbackWithoutResult</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doInTransactionWithoutResult</span><span class="params">(TransactionStatus transactionStatus)</span> &#123;</span><br><span class="line">                accountDao.outMoney(out, money);</span><br><span class="line">                <span class="comment">// 模拟异常</span></span><br><span class="line">                <span class="comment">// int a = 10 / 0;</span></span><br><span class="line">                accountDao.inMoney(in, money);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-框架事务管理之声明式事务管理"><a href="#Spring-框架事务管理之声明式事务管理" class="headerlink" title="Spring 框架事务管理之声明式事务管理"></a>Spring 框架事务管理之声明式事务管理</h3><p>即通过配置文件来完成事务管理（AOP 思想）</p><ul><li>声明式事务管理又分成两种方式<blockquote><p>基于 AspectJ 的 XML 方式（重点掌握）<br>基于 AspectJ 的注解方式（重点掌握）</p></blockquote></li></ul><h4 id="Spring-框架事务管理之基于-AspectJ-的-XML-方式（重点掌握）"><a href="#Spring-框架事务管理之基于-AspectJ-的-XML-方式（重点掌握）" class="headerlink" title="Spring 框架事务管理之基于 AspectJ 的 XML 方式（重点掌握）"></a>Spring 框架事务管理之基于 AspectJ 的 XML 方式（重点掌握）</h4><h5 id="步骤一：恢复转账开发环境"><a href="#步骤一：恢复转账开发环境" class="headerlink" title="步骤一：恢复转账开发环境"></a>步骤一：恢复转账开发环境</h5><h5 id="步骤二：引入-AOP-的开发包"><a href="#步骤二：引入-AOP-的开发包" class="headerlink" title="步骤二：引入 AOP 的开发包"></a>步骤二：引入 AOP 的开发包</h5><h5 id="步骤三：配置事务管理器"><a href="#步骤三：配置事务管理器" class="headerlink" title="步骤三：配置事务管理器"></a>步骤三：配置事务管理器</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤四：配置事务增强"><a href="#步骤四：配置事务增强" class="headerlink" title="步骤四：配置事务增强"></a>步骤四：配置事务增强</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--先配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop:advisor，是 Spring 框架提供的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;pay&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>name</code>：绑定事务的方法名，可以使用通配符，可以配置多个。<br><code>propagation</code>：传播行为<br><code>isolation</code>：隔离级别<br><code>read-only</code>：是否只读<br><code>timeout</code>：超时信息<br><code>rollback-for</code>：发生哪些异常回滚<br><code>no-rollback-for</code>：发生哪些异常不回滚</p></blockquote><h5 id="步骤五：配置-AOP-的切面"><a href="#步骤五：配置-AOP-的切面" class="headerlink" title="步骤五：配置 AOP 的切面"></a>步骤五：配置 AOP 的切面</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 AOP：如果是自己编写的 AOP，使用 aop:aspect 配置，使用的是 Spring 提供的通知用 aop:advisor--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public * com.renkaigis.demo3.AccountServiceImpl.pay(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果是自己编写的切面，使用 <code>&lt;aop:aspect&gt;</code> 标签，如果是系统提供的，使用 <code>&lt;aop:advisor&gt;</code> 标签。</p><h5 id="步骤六：编写测试类"><a href="#步骤六：编写测试类" class="headerlink" title="步骤六：编写测试类"></a>步骤六：编写测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line">        accountService.pay(<span class="string">&quot;小关&quot;</span>, <span class="string">&quot;小西&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-框架事务管理之基于-AspectJ-的注解方式"><a href="#Spring-框架事务管理之基于-AspectJ-的注解方式" class="headerlink" title="Spring 框架事务管理之基于 AspectJ 的注解方式"></a>Spring 框架事务管理之基于 AspectJ 的注解方式</h4><p><strong>（重点掌握，最简单的方式）</strong></p><h5 id="步骤一：恢复转账的开发环境"><a href="#步骤一：恢复转账的开发环境" class="headerlink" title="步骤一：恢复转账的开发环境"></a>步骤一：恢复转账的开发环境</h5><h5 id="步骤二：配置事务管理器"><a href="#步骤二：配置事务管理器" class="headerlink" title="步骤二：配置事务管理器"></a>步骤二：配置事务管理器</h5><p>同上。</p><h5 id="步骤三：开启注解事务"><a href="#步骤三：开启注解事务" class="headerlink" title="步骤三：开启注解事务"></a>步骤三：开启注解事务</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务的注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤四：在业务层上添加一个注解：-Transactional"><a href="#步骤四：在业务层上添加一个注解：-Transactional" class="headerlink" title="步骤四：在业务层上添加一个注解：@Transactional"></a>步骤四：在业务层上添加一个注解：@Transactional</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transactional 类上添加注解，类中的方法全部就都有了事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountDao</span><span class="params">(AccountDao accountDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(String out, String in, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        accountDao.outMoney(out, money);</span><br><span class="line">        <span class="comment">// 模拟异常</span></span><br><span class="line">        <span class="comment">// int a = 10 / 0;</span></span><br><span class="line">        accountDao.inMoney(in, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤五：编写测试类"><a href="#步骤五：编写测试类" class="headerlink" title="步骤五：编写测试类"></a>步骤五：编写测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext3.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line">        accountService.pay(<span class="string">&quot;小关&quot;</span>, <span class="string">&quot;小西&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Spring JDBC 模板技术</title>
      <link href="/JavaWeb-Spring04.html"/>
      <url>/JavaWeb-Spring04.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/spring0400.png"></div><p id="div-border-left-blue">Spring JDBC 模板技术</p><span id="more"></span><hr><h1 id="Spring-框架的-JDBC-模板技术"><a href="#Spring-框架的-JDBC-模板技术" class="headerlink" title="Spring 框架的 JDBC 模板技术"></a>Spring 框架的 JDBC 模板技术</h1><hr><h2 id="Spring-框架的-JDBC-模板技术概述"><a href="#Spring-框架的-JDBC-模板技术概述" class="headerlink" title="Spring 框架的 JDBC 模板技术概述"></a>Spring 框架的 JDBC 模板技术概述</h2><ol><li><p>Spring 框架中提供了很多持久层的模板类来简化编程，使用模板类编写程序会变的简单。</p></li><li><p>提供了 <code>JDBC</code> 模板，Spring 框架提供的</p><blockquote><p><code>JdbcTemplate</code>类</p></blockquote></li><li><p>Spring 框架可以整合 <code>Hibernate</code> 框架，也提供了模板类</p><blockquote><p><code>HibernateTemplate</code>类</p></blockquote></li></ol><h2 id="演示-JDBC-的模板类"><a href="#演示-JDBC-的模板类" class="headerlink" title="演示 JDBC 的模板类"></a>演示 JDBC 的模板类</h2><h3 id="步骤一：创建数据库的表结构"><a href="#步骤一：创建数据库的表结构" class="headerlink" title="步骤一：创建数据库的表结构"></a>步骤一：创建数据库的表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database spring04;</span><br><span class="line">use spring04;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_account(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="步骤二：引入开发的-jar-包"><a href="#步骤二：引入开发的-jar-包" class="headerlink" title="步骤二：引入开发的 jar 包"></a>步骤二：引入开发的 jar 包</h3><ul><li>先引入 <code>IoC</code> 基本的 jar 包（6个），还有1个 <code>test</code> 的包</li><li>再引入 <code>Spring-aop</code> 的 jar 包（1个）</li><li>最后引入 <code>JDBC模板</code> 需要的 jar 包：<blockquote><p>MySQL 数据库的驱动包：<code>mysql-connector-java-5.1.7-bin.jar</code><br><code>Spring-jdbc.jar</code><br>事务管理：<code>Spring-tx.jar</code></p></blockquote></li></ul><p><em>一共 11 个包。</em></p><h3 id="步骤三：编写测试代码（自己来-new-对象的方式）"><a href="#步骤三：编写测试代码（自己来-new-对象的方式）" class="headerlink" title="步骤三：编写测试代码（自己来 new 对象的方式）"></a>步骤三：编写测试代码（自己来 new 对象的方式）</h3><p>new 对象的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示模板类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Spring 框架提供了内置的连接池，不想使用内置，整合其他的连接池</span></span><br><span class="line">        <span class="type">DriverManagerDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///spring04&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;541638&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建模板类</span></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        <span class="comment">// 设置连接池</span></span><br><span class="line">        template.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 完成操作</span></span><br><span class="line">        template.update(<span class="string">&quot;insert into t_account values (null,?,?)&quot;</span>, <span class="string">&quot;小西&quot;</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Spring-框架来管理模板类"><a href="#使用-Spring-框架来管理模板类" class="headerlink" title="使用 Spring 框架来管理模板类"></a>使用 Spring 框架来管理模板类</h2><p>现在应该把这些类交给 Spring 框架来管理。</p><h3 id="Spring-框架管理开源的连接池"><a href="#Spring-框架管理开源的连接池" class="headerlink" title="Spring 框架管理开源的连接池"></a>Spring 框架管理开源的连接池</h3><h4 id="步骤一：Spring-配置内置的连接池"><a href="#步骤一：Spring-配置内置的连接池" class="headerlink" title="步骤一：Spring 配置内置的连接池"></a>步骤一：Spring 配置内置的连接池</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内置的连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///spring04&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;541638&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤二：Spring-管理模板类"><a href="#步骤二：Spring-管理模板类" class="headerlink" title="步骤二：Spring 管理模板类"></a>步骤二：Spring 管理模板类</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 JDBC 的模板类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤三：编写测试程序"><a href="#步骤三：编写测试程序" class="headerlink" title="步骤三：编写测试程序"></a>步骤三：编写测试程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 JDBC 的模板类，使用 IoC 的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1_1</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;insert into t_account values (null,?,?)&quot;</span>, <span class="string">&quot;小关&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-框架管理开源的连接池-1"><a href="#Spring-框架管理开源的连接池-1" class="headerlink" title="Spring 框架管理开源的连接池"></a>Spring 框架管理开源的连接池</h3><h4 id="管理-DBCP-连接池"><a href="#管理-DBCP-连接池" class="headerlink" title="管理 DBCP 连接池"></a>管理 DBCP 连接池</h4><ul><li><p>先引入 DBCP 的 2 个 jar 包</p><blockquote><p>com.springsource.org.apache.commons.dbcp-1.2.2.osgi.jar<br>com.springsource.org.apache.commons.pool-1.5.3.jar</p></blockquote></li><li><p>编写配置文件：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 DBCP 连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///spring04&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;541638&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法类似。</p><h4 id="管理-C3P0-连接池"><a href="#管理-C3P0-连接池" class="headerlink" title="管理 C3P0 连接池"></a>管理 C3P0 连接池</h4><ul><li><p>先引入 C3P0 的 jar 包</p><blockquote><p>com.springsource.com.mchange.v2.c3p0-0.9.1.2.jar</p></blockquote></li><li><p>编写配置文件：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 C3P0 连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///spring04&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;541638&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法类似。</p><h2 id="Spring-框架的-JDBC-模板的简单操作"><a href="#Spring-框架的-JDBC-模板的简单操作" class="headerlink" title="Spring 框架的 JDBC 模板的简单操作"></a>Spring 框架的 JDBC 模板的简单操作</h2><h3 id="增删改查的操作"><a href="#增删改查的操作" class="headerlink" title="增删改查的操作"></a>增删改查的操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 JDBC 的模板类，使用 IoC 的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1_1</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;insert into t_account values (null,?,?)&quot;</span>, <span class="string">&quot;小关&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run2</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update t_account set name = ? where id = ? &quot;</span>, <span class="string">&quot;小马&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run3</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;delete from t_account where id = ? &quot;</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试查询：通过主键查询一条记录</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> jdbcTemplate.queryForObject(<span class="string">&quot;select * from t_account where id = ?&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanMapper</span>(), <span class="number">1</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有的数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run5</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">&quot;select * from t_account&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanMapper</span>());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自己手动封装数据（一行一行封装数据）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BeanMapper</span> <span class="keyword">implements</span> <span class="title class_">RowMapper</span>&lt;Account&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">mapRow</span><span class="params">(ResultSet rs, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">        account.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        account.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        account.setMoney(rs.getDouble(<span class="string">&quot;money&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询部分所需要的 JavaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(Double money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> + <span class="string">&quot;id=&quot;</span> + id + <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, money=&quot;</span> + money + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Spring AOP 面向切面编程</title>
      <link href="/JavaWeb-Spring03.html"/>
      <url>/JavaWeb-Spring03.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/spring0300.png"></div><p id="div-border-left-blue">Spring AOP 面向切面编程</p><span id="more"></span><hr><h1 id="Spring-框架核心功能之-AOP-技术"><a href="#Spring-框架核心功能之-AOP-技术" class="headerlink" title="Spring 框架核心功能之 AOP 技术"></a>Spring 框架核心功能之 AOP 技术</h1><hr><h2 id="AOP-的概述"><a href="#AOP-的概述" class="headerlink" title="AOP 的概述"></a>AOP 的概述</h2><h3 id="什么是-AOP-的技术？"><a href="#什么是-AOP-的技术？" class="headerlink" title="什么是 AOP 的技术？"></a>什么是 AOP 的技术？</h3><ul><li>在软件业，AOP 为 Aspect Oriented Programming 的缩写，意为：<code>面向切面编程</code>。</li><li>AOP 是一种编程范式，隶属于软工范畴，指导开发者如何组织程序结构。</li><li>AOP 最早由 AOP 联盟的组织提出的，制定了一套规范。Spring 将 AOP 思想引入到框架中，必须遵守 AOP 联盟的规范。</li><li>通过<code>预编译方式和运行期动态代理</code>实现程序功能的统一维护的一种技术。</li><li>AOP 是 <code>OOP 的延续</code>，是软件开发中的一个热点，也是 Spring 框架中的一个重要内容，是函数式编程的一种衍生范型。</li><li>利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<code>耦合度降低</code>，提高程序的<code>可重用性</code>，同时提高了开发的效率。</li></ul><ol start="2"><li>AOP：面向切面编程。(思想————解决 <code>OOP</code> 遇到一些问题)</li><li>AOP 采取横向抽取机制，取代了传统纵向继承体系重复性代码（性能监视、事务管理、安全检查、缓存）</li></ol><h3 id="为什么要学习-AOP"><a href="#为什么要学习-AOP" class="headerlink" title="为什么要学习 AOP"></a>为什么要学习 AOP</h3><ul><li>可以在不修改源代码的前提下，对程序进行增强！</li></ul><h2 id="Spring-框架的-AOP-的底层实现"><a href="#Spring-框架的-AOP-的底层实现" class="headerlink" title="Spring 框架的 AOP 的底层实现"></a>Spring 框架的 AOP 的底层实现</h2><h3 id="代理方式"><a href="#代理方式" class="headerlink" title="代理方式"></a>代理方式</h3><p>Srping 框架的 AOP 技术底层也是采用的代理技术，代理的方式提供了两种</p><ul><li><p>基于 <code>JDK</code> 的动态代理</p><blockquote><p>必须是面向接口的，只有实现了具体接口的类才能生成代理对象  </p></blockquote></li><li><p>基于 <code>CGLIB</code> 动态代理</p><blockquote><p>对于没有实现了接口的类，也可以产生代理，产生这个类的子类的方式</p></blockquote></li></ul><p>Spring 的传统 AOP 中根据类是否实现接口，来采用不同的代理方式</p><ul><li><p>如果实现类接口，使用 <code>JDK</code> 动态代理完成 AOP</p></li><li><p>如果没有实现接口，采用 <code>CGLIB</code> 动态代理完成 AOP</p></li></ul><h3 id="JDK-的动态代理（代码了解，理解原理）"><a href="#JDK-的动态代理（代码了解，理解原理）" class="headerlink" title="JDK 的动态代理（代码了解，理解原理）"></a>JDK 的动态代理（代码了解，理解原理）</h3><p>使用 <code>Proxy</code> 类来生成代理对象的一些代码如下：</p><p><strong>注意</strong>：得有接口才能使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 JDK 的方式生成代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxyUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title function_">getProcy</span><span class="params">(UserDao dao)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 Proxy 生成代理对象</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserDao) Proxy.newProxyInstance(dao.getClass().getClassLoader(), dao.getClass().getInterfaces(), <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="comment">// 代理对象方法一执行，invoke 方法就会执行一次</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">// 代理增强方法</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;save&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;记录日志…&quot;</span>);</span><br><span class="line">                    <span class="comment">// 开启事务</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 提交事务</span></span><br><span class="line">                <span class="comment">// 让 dao 类的 save 或者 update 方法正常的执行下去</span></span><br><span class="line">                <span class="keyword">return</span> method.invoke(dao, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="comment">// 原始的调用方式</span></span><br><span class="line">        dao.save();</span><br><span class="line">        dao.update();</span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用工具类，获取到代理对象</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">procy</span> <span class="operator">=</span> MyProxyUtils.getProcy(dao);</span><br><span class="line">        <span class="comment">// 调用代理对象的方法</span></span><br><span class="line">        procy.save();</span><br><span class="line">        procy.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CGLIB-的代理技术（了解）"><a href="#CGLIB-的代理技术（了解）" class="headerlink" title="CGLIB 的代理技术（了解）"></a>CGLIB 的代理技术（了解）</h3><ul><li>引入 <code>CBLIB</code> 的开发包<blockquote><p>如果想使用 <code>CGLIB</code> 的技术来生成代理对象，那么需要引入 <code>CGLIB</code> 的开发的 <code>jar</code> 包，在 <code>Spring</code> 框架核心包中已经引入了 <code>CGLIB</code> 的开发包了。所以直接引入 <code>Spring</code> 核心开发包即可！</p></blockquote></li></ul><h4 id="编写相关的代码"><a href="#编写相关的代码" class="headerlink" title="编写相关的代码"></a>编写相关的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCglibUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 CGLIB 方式生成代理对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BookDaoImpl <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">// 设置父类</span></span><br><span class="line">        enhancer.setSuperclass(BookDaoImpl.class);</span><br><span class="line">        <span class="comment">// 设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">            <span class="comment">// 代理对象的方法执行，回调函数就会执行</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;save&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;记录日志…&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 生成代理对象</span></span><br><span class="line">        <span class="type">BookDaoImpl</span> <span class="variable">proxy</span> <span class="operator">=</span> (BookDaoImpl) enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 使用 CGLIB 生成代理对象</span></span><br><span class="line"><span class="type">BookDaoImpl</span> <span class="variable">proxy</span> <span class="operator">=</span> MyCglibUtils.getProxy();</span><br><span class="line">proxy.save();</span><br><span class="line">proxy.update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Spring-基于-AspectJ-的-AOP-的开发"><a href="#Spring-基于-AspectJ-的-AOP-的开发" class="headerlink" title="Spring 基于 AspectJ 的 AOP 的开发"></a>Spring 基于 AspectJ 的 AOP 的开发</h1><hr><h2 id="AOP-的相关术语"><a href="#AOP-的相关术语" class="headerlink" title="AOP 的相关术语"></a>AOP 的相关术语</h2><ol><li><code>Joinpoint(连接点)</code>————所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点</li><li><code>Pointcut(切入点)</code>————所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义</li><li><code>Advice(通知/增强)</code>————所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知.通知分为前置通知,后置通知,异常通知,最终通知,环绕通知(切面要完成的功能)</li><li><code>Introduction(引介)</code>————引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field</li><li><code>Target(目标对象)</code>————代理的目标对象</li><li><code>Weaving(织入)</code>————是指把增强应用到目标对象来创建新的代理对象的过程</li><li><code>Proxy（代理）</code>————一个类被 AOP 织入增强后，就产生一个结果代理类</li><li><code>Aspect(切面)</code>————是切入点和通知的结合，需要自己来编写和配置的</li></ol><p>具体点就是：</p><blockquote><p>连接点：UserDaoImpl 中的所有方法都可以称为连接点。<br>切入点：拦截哪些方法（对哪些方法进行增强）。<br>通知&#x2F;增强：具体做什么功能，比如记录日志。<br>目标对象：UserDaoImpl 称为目标对象。<br>织入：把增强添加到目标对象，生成代理对象的过程。<br>代理：生成的代理对象。<br>切面：切入点 + 通知，组合称为切面。通知需要自己来编写，切入点需要配置。</p></blockquote><h2 id="AspectJ-的-XML-方式完成-AOP-开发"><a href="#AspectJ-的-XML-方式完成-AOP-开发" class="headerlink" title="AspectJ 的 XML 方式完成 AOP 开发"></a>AspectJ 的 XML 方式完成 AOP 开发</h2><h3 id="第一个案例"><a href="#第一个案例" class="headerlink" title="第一个案例"></a>第一个案例</h3><h4 id="步骤一：创建-JavaWEB-项目，引入具体的开发的-jar-包"><a href="#步骤一：创建-JavaWEB-项目，引入具体的开发的-jar-包" class="headerlink" title="步骤一：创建 JavaWEB 项目，引入具体的开发的 jar 包"></a>步骤一：创建 JavaWEB 项目，引入具体的开发的 jar 包</h4><ul><li><p>先引入 Spring 框架开发的基本开发包（6个）</p></li><li><p>再引入 Spring 框架的 AOP 的开发包（4个）</p></li><li><ul><li>Spring 的传统 <code>AOP</code> 的开发的包<blockquote><p>spring-aop-4.2.4.RELEASE.jar<br>com.springsource.org.aopalliance-1.0.0.jar</p></blockquote></li></ul></li><li><ul><li><code>aspectJ</code> 的开发包<blockquote><p>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar<br>spring-aspects-4.2.4.RELEASE.jar</p></blockquote></li></ul></li></ul><h4 id="步骤二：创建-Spring-的配置文件，引入具体的-AOP-的-schema-约束"><a href="#步骤二：创建-Spring-的配置文件，引入具体的-AOP-的-schema-约束" class="headerlink" title="步骤二：创建 Spring 的配置文件，引入具体的 AOP 的 schema 约束"></a>步骤二：创建 Spring 的配置文件，引入具体的 AOP 的 schema 约束</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤三：创建包结构，编写具体的接口和实现类"><a href="#步骤三：创建包结构，编写具体的接口和实现类" class="headerlink" title="步骤三：创建包结构，编写具体的接口和实现类"></a>步骤三：创建包结构，编写具体的接口和实现类</h4><ul><li>com.renkaigis.demo4<blockquote><p>CustomerDao– 接口<br>CustomerDaoImpl– 实现类</p></blockquote></li></ul><h4 id="步骤四：将目标类配置到-Spring-中"><a href="#步骤四：将目标类配置到-Spring-中" class="headerlink" title="步骤四：将目标类配置到 Spring 中"></a>步骤四：将目标类配置到 Spring 中</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置客户的 dao--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customerDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo4.CustomerDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤五：定义切面类"><a href="#步骤五：定义切面类" class="headerlink" title="步骤五：定义切面类"></a>步骤五：定义切面类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类：切入点 + 通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspectXml</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知（具体的增强）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;记录日志…&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤六：在配置文件中定义切面类"><a href="#步骤六：在配置文件中定义切面类" class="headerlink" title="步骤六：在配置文件中定义切面类"></a>步骤六：在配置文件中定义切面类</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspectXml&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo4.MyAspectXml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤七：在配置文件中完成aop的配置"><a href="#步骤七：在配置文件中完成aop的配置" class="headerlink" title="步骤七：在配置文件中完成aop的配置"></a>步骤七：在配置文件中完成aop的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入切面类，配置切面类的切入点 + 通知（类型）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspectXml&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置前置通知，save 方法执行之前，增强的方法会执行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义通知类型：切面类的方法和切入点的表达式 execution(public void com.renkaigis.demo4.CustomerDaoImpl.save()) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.renkaigis.demo4.CustomerDaoImpl.save())&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="完成测试"><a href="#完成测试" class="headerlink" title="完成测试"></a>完成测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 AOP 功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;customerDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span>&#123;</span><br><span class="line">        customerDao.save();</span><br><span class="line">        customerDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切入点的表达式"><a href="#切入点的表达式" class="headerlink" title="切入点的表达式"></a>切入点的表达式</h3><p>在配置切入点的时候，需要定义表达式，重点的格式如下：<code>execution(public * *(..))</code>，具体展开如下：</p><ul><li><p>切入点表达式的格式如下：</p><blockquote><p>execution([修饰符] 返回值类型 包名.类名.方法名(参数))</p></blockquote></li><li><p>修饰符可以省略不写，不是必须要出现的。</p></li><li><p>返回值类型是不能省略不写的，根据你的方法来编写返回值。可以使用 <code>*</code> 代替。</p></li><li><p>包名例如：com.renkaigis.demo4.BookDaoImpl</p><blockquote><p>首先 com 是不能省略不写的，但是可以使用 <code>*</code> 代替<br>中间的包名可以使用 <code>*</code> 号代替<br>如果想省略中间的包名可以使用 <code>*..*</code> </p></blockquote></li><li><p>类名也可以使用 <code>*</code> 号代替，也有类似的写法：<code>*DaoImpl</code></p></li><li><p>方法也可以使用 <code>*</code> 号代替，<code>save*()</code></p></li><li><p>参数如果是一个参数可以使用 <code>*</code> 号代替，如果想代表任意参数使用 <code>..</code></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspectXml&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--切入点的表达式：--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1. execution() 固定的，不能不写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.renkaigis.demo4.CustomerDaoImpl.save())&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2. pulbic 可以省略不写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(void com.renkaigis.demo4.CustomerDaoImpl.save())&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3. void，返回值写 * 表示任意的返回值，返回值类型不能不写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.renkaigis.demo4.CustomerDaoImpl.save())&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--4. 包名可以使用 * 来代替，com.renkaigis.*，简写 *..*，不能不写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* *..*.CustomerDaoImpl.save())&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--5. 类名也可以使用 * 号代替，也有类似的写法：*DaoIml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* *..*.*DaoImpl.save())&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--6. 方法也可以使用 * 号代替，save*()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* *..*.*DaoImpl.save*())&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--7. 方法的参数：可以使用 * 号代替，如果想代表任意参数使用 .. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* *..*.*DaoImpl.save*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="AOP的通知类型"><a href="#AOP的通知类型" class="headerlink" title="AOP的通知类型"></a>AOP的通知类型</h3><ol><li><p>前置通知</p><blockquote><p>在目标类的方法执行之前执行。<br>配置文件信息：<code>&lt;aop:after method=&quot;before&quot; pointcut-ref=&quot;myPointcut3&quot;/&gt;</code><br>应用：可以对方法的参数来做校验</p></blockquote></li><li><p>最终通知</p><blockquote><p>在目标类的方法执行之后执行，如果程序出现了异常，最终通知也会执行。<br>配置文件信息：<code>&lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;myPointcut3&quot;/&gt;</code><br>应用：例如像释放资源</p></blockquote></li><li><p>后置通知</p><blockquote><p>方法正常执行后的通知。出现异常，不会执行。<br>配置文件信息：<code>&lt;aop:after-returning method=&quot;afterReturning&quot; pointcut-ref=&quot;myPointcut2&quot;/&gt;</code><br>应用：可以修改方法的返回值</p></blockquote></li><li><p>异常抛出通知</p><blockquote><p>在抛出异常后通知<br>配置文件信息：<code>&lt;aop:after-throwing method=&quot;afterThorwing&quot; pointcut-ref=&quot;myPointcut3&quot;/&gt;</code><br>应用：包装异常的信息</p></blockquote></li><li><p>环绕通知</p><blockquote><p>方法的执行前后执行。<br>配置文件信息：<code>&lt;aop:around method=&quot;around&quot; pointcut-ref=&quot;myPointcut2&quot;/&gt;</code><br>要注意：目标的方法默认不执行，需要使用 ProceedingJoinPoint 对来让目标对象的方法执行。</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 环绕通知：方法执行之前和方法执行之后进行通知</span></span><br><span class="line"><span class="comment">* 默认的情况下，目标对象的方法不能执行，需要手动让目标对象的方法执行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;环绕通知1…&quot;</span>);</span><br><span class="line"><span class="comment">// 手动让目标对象的方法执行</span></span><br><span class="line">joinPoint.proceed();</span><br><span class="line">System.out.println(<span class="string">&quot;环绕通知2…&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring框架的AOP技术之注解方式"><a href="#Spring框架的AOP技术之注解方式" class="headerlink" title="Spring框架的AOP技术之注解方式"></a>Spring框架的AOP技术之注解方式</h2><h3 id="第一个案例-1"><a href="#第一个案例-1" class="headerlink" title="第一个案例"></a>第一个案例</h3><h4 id="步骤一：创建-JavaWEB-项目，引入具体的开发的-jar-包-1"><a href="#步骤一：创建-JavaWEB-项目，引入具体的开发的-jar-包-1" class="headerlink" title="步骤一：创建 JavaWEB 项目，引入具体的开发的 jar 包"></a>步骤一：创建 JavaWEB 项目，引入具体的开发的 jar 包</h4><p>同上。</p><h4 id="步骤二：创建-Spring-的配置文件，引入具体的-AOP-的-schema-约束-1"><a href="#步骤二：创建-Spring-的配置文件，引入具体的-AOP-的-schema-约束-1" class="headerlink" title="步骤二：创建 Spring 的配置文件，引入具体的 AOP 的 schema 约束"></a>步骤二：创建 Spring 的配置文件，引入具体的 AOP 的 schema 约束</h4><p>同上。</p><p>这里我引入一个<strong>最全的约束</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤三：创建包结构，编写具体的接口和实现类-1"><a href="#步骤三：创建包结构，编写具体的接口和实现类-1" class="headerlink" title="步骤三：创建包结构，编写具体的接口和实现类"></a>步骤三：创建包结构，编写具体的接口和实现类</h4><ul><li>com.renkaigis.demo5<blockquote><p>CustomerDao————接口<br>CustomerDaoImpl————实现类</p></blockquote></li></ul><h4 id="步骤四：将目标类配置到-Spring-中-1"><a href="#步骤四：将目标类配置到-Spring-中-1" class="headerlink" title="步骤四：将目标类配置到 Spring 中"></a>步骤四：将目标类配置到 Spring 中</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置客户的 dao--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customerDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo4.CustomerDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤四：将目标类配置到-Spring-中-2"><a href="#步骤四：将目标类配置到-Spring-中-2" class="headerlink" title="步骤四：将目标类配置到 Spring 中"></a>步骤四：将目标类配置到 Spring 中</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置目标对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customerDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo5.CustomerDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤五：定义切面类-1"><a href="#步骤五：定义切面类-1" class="headerlink" title="步骤五：定义切面类"></a>步骤五：定义切面类</h4><h5 id="添加切面和通知的注解"><a href="#添加切面和通知的注解" class="headerlink" title="添加切面和通知的注解"></a>添加切面和通知的注解</h5><ul><li><p><code>@Aspect</code>————定义切面类的注解</p></li><li><p>通知类型（<code>注解的参数是切入点的表达式</code>）</p><blockquote><p>@Before————前置通知<br>@AfterReturing————后置通知<br>@Around————环绕通知<br>@After————最终通知<br>@AfterThrowing————异常抛出通知</p></blockquote></li></ul><h5 id="具体的代码如下"><a href="#具体的代码如下" class="headerlink" title="具体的代码如下"></a>具体的代码如下</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解方式的切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspectAnno</span> &#123;</span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public * com.renkaigis.demo5.CustomerDaoImpl.save())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;记录日志…&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤六：在配置文件中定义切面类-1"><a href="#步骤六：在配置文件中定义切面类-1" class="headerlink" title="步骤六：在配置文件中定义切面类"></a>步骤六：在配置文件中定义切面类</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspectAnno&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo5.MyAspectAnno&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤七：在配置文件中开启自动代理"><a href="#步骤七：在配置文件中开启自动代理" class="headerlink" title="步骤七：在配置文件中开启自动代理"></a>步骤七：在配置文件中开启自动代理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤八：完成测试"><a href="#步骤八：完成测试" class="headerlink" title="步骤八：完成测试"></a>步骤八：完成测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AOP 注解方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;customerDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span>&#123;</span><br><span class="line">        customerDao.save();</span><br><span class="line">        customerDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><h3 id="通知类型-1"><a href="#通知类型-1" class="headerlink" title="通知类型"></a>通知类型</h3><ul><li><code>@Before</code>————前置通知</li><li><code>@AfterReturing</code>————后置通知</li><li><code>@Around</code>————环绕通知（目标对象方法默认不执行的，需要手动执行）</li><li><code>@After</code>————最终通知</li><li><code>@AfterThrowing</code>————异常抛出通知</li></ul><h3 id="配置通用的切入点"><a href="#配置通用的切入点" class="headerlink" title="配置通用的切入点"></a>配置通用的切入点</h3><ul><li>使用 <code>@Pointcut</code> 定义通用的切入点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspectAnno</span> &#123;</span><br><span class="line">    <span class="comment">// 引入自定义切入点</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;MyAspectAnno.fn()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;记录日志…&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义切入点，<span class="doctag">@Pointcut</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public * com.renkaigis.demo5.CustomerDaoImpl.save())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Spring IoC 控制反转及整合 JUnit 单元测试</title>
      <link href="/JavaWeb-Spring02.html"/>
      <url>/JavaWeb-Spring02.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/spring0200.png"></div><p id="div-border-left-blue">Spring IoC 控制反转 & 整合 JUnit 单元测试。</p><span id="more"></span><hr><h1 id="Spring-框架-IoC-功能之配置文件方式"><a href="#Spring-框架-IoC-功能之配置文件方式" class="headerlink" title="Spring 框架 IoC 功能之配置文件方式"></a>Spring 框架 IoC 功能之配置文件方式</h1><hr><h2 id="Spring-框架中-标签的配置"><a href="#Spring-框架中-标签的配置" class="headerlink" title="Spring 框架中 &lt;bean&gt; 标签的配置"></a>Spring 框架中 <code>&lt;bean&gt;</code> 标签的配置</h2><h3 id="id-属性和-name-属性的区别"><a href="#id-属性和-name-属性的区别" class="headerlink" title="id 属性和 name 属性的区别"></a>id 属性和 name 属性的区别</h3><ul><li><p><code>id</code>————Bean 起个名字，在约束中采用 ID 的约束，唯一</p><blockquote><p>取值要求：必须以字母开始，可以使用字母、数字、连字符、下划线、句话、冒号id：不能出现特殊字符</p></blockquote></li><li><p><code>name</code>————Bean 起个名字，没有采用 ID 的约束（了解）</p><blockquote><p>取值要求：name 允许出现特殊字符，如果 <code>&lt;bean&gt;</code> 没有 id 的话，name 可以当做 id 使用<br>Spring 框架在整合 <code>Struts1</code> 的框架的时候，<code>Struts1</code> 的框架的访问路径是以 <code>/</code> 开头的，例如：<code>/bookAction</code></p></blockquote></li></ul><h3 id="class-属性"><a href="#class-属性" class="headerlink" title="class 属性"></a>class 属性</h3><p>Bean 对象的全路径：<code>com.renkaigis.demo1.UserServiceImpl</code></p><h3 id="scope-属性"><a href="#scope-属性" class="headerlink" title="scope 属性"></a>scope 属性</h3><p>scope 属性代表 Bean 的作用范围</p><blockquote><p>singleton————单例（默认值）<br><code>prototype</code>————多例，在 Spring 框架整合 <code>Struts2</code> 框架的时候，Action 类也需要交给 Spring 做管理，配置把 <code>Action 类配置成多例</code>！！<br>request————应用在 Web 项目中，每次 HTTP 请求都会创建一个新的 Bean<br>session————应用在 Web 项目中，同一个 HTTP Session 共享一个 Bean<br>globalsession————应用在 Web 项目中，多服务器间的 session</p></blockquote><h3 id="Bean-对象的创建和销毁的两个属性配置（了解）"><a href="#Bean-对象的创建和销毁的两个属性配置（了解）" class="headerlink" title="Bean 对象的创建和销毁的两个属性配置（了解）"></a>Bean 对象的创建和销毁的两个属性配置（了解）</h3><p>Spring 初始化 bean 或销毁 bean 时，有时需要作一些处理工作，因此 spring 可以在创建和销毁 bean 的时候调用 bean 的两个生命周期方法</p><ul><li><p>init-method————当 bean 被载入到容器的时候调用 <code>init-method</code> 属性指定的方法</p></li><li><p>destroy-method————当bean从容器中删除的时候调用 <code>destroy-method</code> 属性指定的方法</p></li></ul><p>想查看 destroy-method 的效果，有如下条件</p><blockquote><p>① <code>scope = &quot;singleton&quot;</code>有效<br>② web 容器中会自动调用，但是 main 函数或测试用例需要手动调用（需要使用 <code>ClassPathXmlApplicationContext</code> 的 <code>close()</code> 方法）</p></blockquote><h2 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h2><p><code>IoC</code> 和 <code>DI</code> 的概念</p><ul><li>IoC————Inverse of Control，控制反转，将对象的创建权反转给 Spring！！</li><li>DI————Dependency Injection，依赖注入，在 Spring 框架负责创建 Bean 对象时，动态的将依赖对象注入到 Bean 组件中！！</li></ul><p><code>DI（依赖注入）</code>：</p><ul><li>例如：如果 <code>UserServiceImpl</code> 的实现类中有一个属性，那么使用 Spring 框架的 <code>IoC</code> 功能时，可以通过依赖注入把该属性的值传入进来！！</li><li>具体的配置如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo1.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小风&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-框架的属性注入"><a href="#Spring-框架的属性注入" class="headerlink" title="Spring 框架的属性注入"></a>Spring 框架的属性注入</h3><p>对于类成员变量，常用的注入方式有两种</p><ul><li>构造函数注入</li><li>属性 <code>setter</code> 方法注入</li></ul><h4 id="构造方法的注入方式"><a href="#构造方法的注入方式" class="headerlink" title="构造方法的注入方式"></a>构造方法的注入方式</h4><ul><li>编写 Java 类，提供构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car1</span><span class="params">(String cname, Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cname = cname;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car1&#123;&quot;</span> + <span class="string">&quot;cname=&#x27;&quot;</span> + cname + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, price=&quot;</span> + price + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--演示构造方法注入的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.Car1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;奇瑞QQ&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">Car1</span> <span class="variable">c1</span> <span class="operator">=</span> (Car1) ac.getBean(<span class="string">&quot;car1&quot;</span>);</span><br><span class="line">System.out.println(c1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="setter-方法的注入方式"><a href="#setter-方法的注入方式" class="headerlink" title="setter 方法的注入方式"></a>setter 方法的注入方式</h4><ul><li><p>编写 Java 的类，提供属性和对应的 set 方法即可</p></li><li><p>编写配置文件</p></li><li><p>如果 Java 类的属性是另一个 Java 的类，那么需要怎么来注入值呢？</p><blockquote><p><code>&lt;property name=&quot;name&quot; rel=&quot;具体的Bean的ID或者name的值&quot;/&gt;</code></p></blockquote></li><li><p>例如：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.Person&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;美美&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;car2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-2-5-版本：p-名称空间的注入（了解）"><a href="#Spring-2-5-版本：p-名称空间的注入（了解）" class="headerlink" title="Spring 2.5 版本：p 名称空间的注入（了解）"></a>Spring 2.5 版本：p 名称空间的注入（了解）</h3><h4 id="先引入-p-名称空间"><a href="#先引入-p-名称空间" class="headerlink" title="先引入 p 名称空间"></a>先引入 p 名称空间</h4><ul><li>在 <code>schema</code> 的名称空间中加入该行：<code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></li></ul><h4 id="使用-p-名称空间的语法"><a href="#使用-p-名称空间的语法" class="headerlink" title="使用 p 名称空间的语法"></a>使用 p 名称空间的语法</h4><ul><li>p:属性名 &#x3D; “”</li><li>p:属性名-ref &#x3D; “”</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--采用 p 名称空间注入的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.Car1&quot;</span> <span class="attr">p:cname</span>=<span class="string">&quot;保时捷&quot;</span> <span class="attr">p:price</span>=<span class="string">&quot;1000000&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-3-0-版本：SpEL注入方式（了解）"><a href="#Spring-3-0-版本：SpEL注入方式（了解）" class="headerlink" title="Spring 3.0 版本：SpEL注入方式（了解）"></a>Spring 3.0 版本：SpEL注入方式（了解）</h3><p>SpEL：Spring Expression Language 是 Spring 的表达式语言，有一些自己的语法。</p><ul><li>语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;SpEL&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpEL的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo4.Person&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;&#x27;小风&#x27;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;car2&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数组，集合（List-Set-Map），Properties-等的注入"><a href="#数组，集合（List-Set-Map），Properties-等的注入" class="headerlink" title="数组，集合（List,Set,Map），Properties 等的注入"></a>数组，集合（List,Set,Map），Properties 等的注入</h3><h4 id="数组和-List-集合"><a href="#数组和-List-集合" class="headerlink" title="数组和 List 集合"></a>数组和 List 集合</h4><p>如果是数组或者List集合，注入配置文件的方式是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示集合注入的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">    <span class="keyword">private</span> String[] arrs;</span><br><span class="line">    <span class="comment">// 集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArrs</span><span class="params">(String[] arrs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arrs = arrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> + <span class="string">&quot;arrs=&quot;</span> + Arrays.toString(arrs) + <span class="string">&quot;, list=&quot;</span> + list + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo3.User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注入数组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;arrs&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>嘿嘿<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注入集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>天哪<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>god<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试注入数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) ac.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试注入集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) ac.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h4><p>如果是 Set 集合，注入的配置文件方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注入 set 集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Map-集合"><a href="#Map-集合" class="headerlink" title="Map 集合"></a>Map 集合</h4><p>如果是 Map 集合，注入的配置方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注入 map--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小瓜&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;bbb&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小宗&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="properties-属性文件"><a href="#properties-属性文件" class="headerlink" title="properties 属性文件"></a>properties 属性文件</h4><p>如果是 <code>properties</code> 属性文件的方式，注入的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注入属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-配置文件分开管理（了解）"><a href="#Spring-配置文件分开管理（了解）" class="headerlink" title="Spring 配置文件分开管理（了解）"></a>Spring 配置文件分开管理（了解）</h2><p>例如：在 src 的目录下又多创建了一个配置文件，现在是两个核心的配置文件，那么加载这两个配置文件的方式有两种！</p><ul><li>主配置文件中引入其他的配置文件:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext2.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>工厂创建的时候直接加载多个配置文件:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>,<span class="string">&quot;applicationContext2.xml&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="Spring-框架-IoC-功能之注解方式"><a href="#Spring-框架-IoC-功能之注解方式" class="headerlink" title="Spring 框架 IoC 功能之注解方式"></a>Spring 框架 IoC 功能之注解方式</h1><hr><h2 id="Spring框架-IoC-之注解方式快速入门"><a href="#Spring框架-IoC-之注解方式快速入门" class="headerlink" title="Spring框架 IoC 之注解方式快速入门"></a>Spring框架 IoC 之注解方式快速入门</h2><h3 id="步骤一：导入注解开发所有需要的-jar-包"><a href="#步骤一：导入注解开发所有需要的-jar-包" class="headerlink" title="步骤一：导入注解开发所有需要的 jar 包"></a>步骤一：导入注解开发所有需要的 jar 包</h3><ul><li><p>引入IoC容器必须的6个jar包</p><blockquote><p>spring-beans-4.2.4.RELEASE.jar<br>spring-context-4.2.4.RELEASE.jar<br>spring-core-4.2.4.RELEASE.jar<br>spring-expression-4.2.4.RELEASE.jar<br>com.springsource.org.apache.commons.logging-1.1.1.jar<br>com.springsource.org.apache.log4j-1.2.15.jar</p></blockquote></li><li><p>多引入一个：Spring框架的AOP的jar包，<code>spring-aop的jar包</code></p></li></ul><h3 id="步骤二：创建对应的包结构，编写-Java-的类"><a href="#步骤二：创建对应的包结构，编写-Java-的类" class="headerlink" title="步骤二：创建对应的包结构，编写 Java 的类"></a>步骤二：创建对应的包结构，编写 Java 的类</h3><ul><li>UserService————接口</li><li>UserServiceImpl————具体的实现类</li></ul><h3 id="步骤三：引入约束"><a href="#步骤三：引入约束" class="headerlink" title="步骤三：引入约束"></a>步骤三：引入约束</h3><p>在 src 的目录下，创建 <code>applicationContext.xml</code> 的配置文件，然后<code>引入约束</code>。注意：因为现在想使用注解的方式，那么引入的约束发生了变化。</p><ul><li>需要引入context的约束，具体的约束如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="步骤四：在-applicationContext-xml-配置文件中开启组件扫描"><a href="#步骤四：在-applicationContext-xml-配置文件中开启组件扫描" class="headerlink" title="步骤四：在 applicationContext.xml 配置文件中开启组件扫描"></a>步骤四：在 <code>applicationContext.xml</code> 配置文件中开启组件扫描</h3><ul><li>Spring的注解开发：组件扫描</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解的扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.renkaigis.demo1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：可以采用如下配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这样是扫描com.renkaigis包下所有的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.renkaigis&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="步骤五：在-UserServiceImpl-的实现类上添加注解"><a href="#步骤五：在-UserServiceImpl-的实现类上添加注解" class="headerlink" title="步骤五：在 UserServiceImpl 的实现类上添加注解"></a>步骤五：在 <code>UserServiceImpl</code> 的实现类上添加注解</h3><ul><li>@Component(value&#x3D;”userService”)– 相当于在XML的配置方式中 <bean id="userService" class="..."></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span>(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="comment"> * 等价于</span></span><br><span class="line"><span class="comment"> * &lt;bean id=&quot;userService&quot; class=&quot;com.renkaigis.demo1.UserServiceImpl&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Spring!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤六：编写测试代码"><a href="#步骤六：编写测试代码" class="headerlink" title="步骤六：编写测试代码"></a>步骤六：编写测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">us</span> <span class="operator">=</span> (UserService) ac.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">us.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-框架中-Bean-管理的常用注解"><a href="#Spring-框架中-Bean-管理的常用注解" class="headerlink" title="Spring 框架中 Bean 管理的常用注解"></a>Spring 框架中 Bean 管理的常用注解</h2><h3 id="类注解"><a href="#类注解" class="headerlink" title="类注解"></a>类注解</h3><ul><li><p><code>@Component</code>：组件。（作用在类上）</p></li><li><p>Spring 中提供 <code>@Component</code> 的三个衍生注解：（功能目前来讲是一致的）</p><blockquote><p><code>@Controller</code>————作用在WEB层<br><code>@Service</code>————作用在业务层<br><code>@Repository</code>————作用在持久层      </p></blockquote></li><li><p>说明：这三个注解是为了让标注类本身的用途清晰，Spring在后续版本会对其增强</p></li></ul><h3 id="属性注解"><a href="#属性注解" class="headerlink" title="属性注解"></a>属性注解</h3><p>属性注入的注解（说明：使用注解注入的方式,可以不用提供 <code>set</code> 方法）</p><ul><li>如果是注入的普通类型，可以使用 value 注解<blockquote><p><code>@Value</code>————用于注入普通类型</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Value(value = &quot;小美&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Spring!&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果注入的是对象类型，使用如下注解</p><blockquote><p><code>@Autowired</code>————默认按类型进行自动装配，寻找实现类。缺点：实现类多的话就出错了</p></blockquote></li><li><p>如果想按名称注入</p><blockquote><p><code>@Qualifier</code>————强制使用名称注入</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 按类型自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;ud&quot;)</span> <span class="comment">// 按名称注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Spring!&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Resource</code>————相当于 <code>@Autowired</code> 和 <code>@Qualifier</code> 一起使用<blockquote><p>强调：<code>@Resource</code> 是 Java 提供的注解<br>属性使用 <code>name</code>属性</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;ud&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><h2 id="Bean-的作用范围和生命周期的注解"><a href="#Bean-的作用范围和生命周期的注解" class="headerlink" title="Bean 的作用范围和生命周期的注解"></a>Bean 的作用范围和生命周期的注解</h2><h3 id="Bean-的作用范围注解"><a href="#Bean-的作用范围注解" class="headerlink" title="Bean 的作用范围注解"></a>Bean 的作用范围注解</h3><ul><li>注解为 <code>@Scope(value = &quot;prototype&quot;)</code>，作用在<code>类</code>上。值如下：<blockquote><p><code>singleton</code>————单例，默认值<br><code>prototype</code>————多例</p></blockquote></li></ul><h3 id="Bean-的生命周期的配置（了解）"><a href="#Bean-的生命周期的配置（了解）" class="headerlink" title="Bean 的生命周期的配置（了解）"></a>Bean 的生命周期的配置（了解）</h3><ul><li>注解如下：<blockquote><p><code>@PostConstruct</code>————相当于 <code>init-method</code><br><code>@PreDestroy</code>————相当于 <code>destroy-method</code></p></blockquote></li></ul><hr><h1 id="Spring-框架整合-JUnit-单元测试"><a href="#Spring-框架整合-JUnit-单元测试" class="headerlink" title="Spring 框架整合 JUnit 单元测试"></a>Spring 框架整合 JUnit 单元测试</h1><hr><p>为了简化了 <code>JUnit</code> 的测试，使用 Spring 框架也可以整合测试。</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>要求：必须先有 <code>JUnit</code> 的环境（即已经导入了 <code>JUnit4</code> 的开发环境）！！</p><ul><li><p>步骤一：在程序中引入：<code>spring-test.jar</code></p></li><li><p>步骤二：在具体的测试类上<code>添加注解</code></p><blockquote><p>@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration(“classpath:applicationContext.xml”)</p></blockquote></li></ul><p><em>以后不用再自己 new 工厂了，配置文件会自动加载：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo2</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;userService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Spring 快速入门</title>
      <link href="/JavaWeb-Spring01.html"/>
      <url>/JavaWeb-Spring01.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/spring0100.png"></div><p id="div-border-left-blue">Spring 快速入门。</p><span id="more"></span><hr><h1 id="Spring-框架的概述和入门"><a href="#Spring-框架的概述和入门" class="headerlink" title="Spring 框架的概述和入门"></a>Spring 框架的概述和入门</h1><hr><h2 id="什么是-Spring-框架"><a href="#什么是-Spring-框架" class="headerlink" title="什么是 Spring 框架"></a>什么是 Spring 框架</h2><h3 id="Spring-框架的概述"><a href="#Spring-框架的概述" class="headerlink" title="Spring 框架的概述"></a>Spring 框架的概述</h3><ul><li><p>Spring 是一个开放源代码的设计层面框架，他解决的是 <code>业务逻辑层</code> 和其他各层的松耦合问题。</p></li><li><p>Spring 是于 2003 年兴起的一个轻量级的 Java 开发框架，由 Rod Johnson 在其著作 《Expert One-On-One J2EE Development and Design》 中阐述的部分理念和原型衍生而来。</p></li><li><p>它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。</p></li><li><p>Spring 使用基本的 <code>JavaBean</code> 来完成以前只可能由 <code>EJB</code> 完成的事情。然而，Spring 的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何 Java 应用都可以从 Spring 中受益。</p></li><li><p>Spring 的核心是 <code>控制反转（IoC）</code> 和 <code>面向切面（AOP）</code>。简单来说，Spring 是一个分层的 <code>JavaSE/EEfull-stack（一站式）</code> 轻量级开源框架。</p></li><li><p>Java EE 开发分成三层结构</p><blockquote><p>WEB层———— Spring MVC<br>业务层———— Bean管理：（IoC）<br>持久层———— Spring 的 JDBC 模板。ORM 模板用于整合其他的持久层框架。</p></blockquote></li></ul><h2 id="Spring-框架的特点"><a href="#Spring-框架的特点" class="headerlink" title="Spring 框架的特点"></a>Spring 框架的特点</h2><ul><li><p>方便解耦，简化开发</p><blockquote><p>Spring 就是一个大工厂，可以将所有对象创建和依赖关系维护，交给 Spring 管理。</p></blockquote></li><li><p>AOP 编程的支持</p><blockquote><p>Spring 提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</p></blockquote></li><li><p>声明式事务的支持</p><blockquote><p>只需要通过配置就可以完成对事务的管理，而无需手动编程。</p></blockquote></li><li><p>方便程序的测试</p><blockquote><p>Spring 对 Junit4 支持，可以通过注解方便的测试 Spring 程序。</p></blockquote></li><li><p>方便集成各种优秀框架</p><blockquote><p>Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts2、Hibernate、MyBatis、Quartz等）的直接支持。</p></blockquote></li><li><p>降低 JavaEE API 的使用难度</p><blockquote><p>Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些 API 应用难度大大降低。</p></blockquote></li></ul><hr><h1 id="Spring-框架的-IoC-核心功能快速入门"><a href="#Spring-框架的-IoC-核心功能快速入门" class="headerlink" title="Spring 框架的 IoC 核心功能快速入门"></a>Spring 框架的 IoC 核心功能快速入门</h1><hr><h2 id="IoC-的功能"><a href="#IoC-的功能" class="headerlink" title="IoC 的功能"></a>IoC 的功能</h2><ul><li><p>IoC（Inverse of Control），<code>控制反转</code>，将对象的创建权反转给 Spring ！！</p></li><li><p>使用 IoC 可以解决的程序 <code>耦合性高</code> 的问题！！</p></li></ul><h2 id="IoC-快速入门"><a href="#IoC-快速入门" class="headerlink" title="IoC 快速入门"></a>IoC 快速入门</h2><h3 id="步骤一：下载-Spring-框架的开发包"><a href="#步骤一：下载-Spring-框架的开发包" class="headerlink" title="步骤一：下载 Spring 框架的开发包"></a>步骤一：下载 Spring 框架的开发包</h3><ul><li><p>官网：<a href="http://spring.io/">http://spring.io/</a></p></li><li><p>下载地址：<a href="http://repo.springsource.org/libs-release-local/org/springframework/spring">http://repo.springsource.org/libs-release-local/org/springframework/spring</a></p></li><li><p>解压：（Spring 目录结构）</p><blockquote><p><code>docs</code>———— API 和开发规范<br><code>libs</code>———— jar 包和源码<br><code>schema</code>———— 约束</p></blockquote></li></ul><h3 id="步骤二：创建-JavaWEB-项目，引入-Spring-的开发包"><a href="#步骤二：创建-JavaWEB-项目，引入-Spring-的开发包" class="headerlink" title="步骤二：创建 JavaWEB 项目，引入 Spring 的开发包"></a>步骤二：创建 JavaWEB 项目，引入 Spring 的开发包</h3><h4 id="引入Spring框架IoC核心功能需要的具体的jar包"><a href="#引入Spring框架IoC核心功能需要的具体的jar包" class="headerlink" title="引入Spring框架IoC核心功能需要的具体的jar包"></a>引入Spring框架IoC核心功能需要的具体的jar包</h4><ul><li>Spring 框架的 IoC 的功能，那么根据 Spring 框架的体系结构图能看到，只需要引入如下的 jar 包<blockquote><p><code>Beans</code><br><code>Core</code><br><code>Context</code><br><code>Expression Language</code></p></blockquote></li></ul><h4 id="Spring-框架也需要引入日志相关的-jar-包"><a href="#Spring-框架也需要引入日志相关的-jar-包" class="headerlink" title="Spring 框架也需要引入日志相关的 jar 包"></a>Spring 框架也需要引入日志相关的 jar 包</h4><ul><li>spring-framework-3.0.2.RELEASE-dependencies&#x2F;org.apache.commons&#x2F;com.springsource.org.apache.commons.logging&#x2F;1.1.1</li></ul><blockquote><p>com.springsource.org.apache.commons.logging-1.1.1.jar</p></blockquote><h4 id="引入-log4j-的jar包"><a href="#引入-log4j-的jar包" class="headerlink" title="引入 log4j 的jar包"></a>引入 log4j 的jar包</h4><ul><li>spring-framework-3.0.2.RELEASE-dependencies\org.apache.log4j\com.springsource.org.apache.log4j\1.2.15</li></ul><blockquote><p>com.springsource.org.apache.log4j-1.2.15.jar</p></blockquote><p><em>注意</em>：记得在 src 目录下导入 log4j 的属性文件 <code>log4j.properties</code></p><h3 id="步骤三：编写-Java-类"><a href="#步骤三：编写-Java-类" class="headerlink" title="步骤三：编写 Java 类"></a>步骤三：编写 Java 类</h3><p>创建对应的包结构，编写 Java 的类。</p><p><em>注意：</em>以后使用 Spring 框架做开发，都需要来编写接口与实现类！！</p><ul><li>com.renkaigis.demo1<blockquote><p>UserService———— 接口<br>UserServiceImpl———— 具体的实现类</p></blockquote></li></ul><h3 id="步骤四：编写配置文件-applicationContext-xml"><a href="#步骤四：编写配置文件-applicationContext-xml" class="headerlink" title="步骤四：编写配置文件 applicationContext.xml"></a>步骤四：编写配置文件 applicationContext.xml</h3><p>想把 UserServiceImpl 实现类的创建交给 <code>Spring</code> 框架来管理，需要创建 Spring 框架的配置文件，完成配置。</p><ul><li><p>在 src 目录下创建 <code>applicationContext.xml</code> 的配置文件，名称是可以任意的，但是一般都会使用默认名称！</p></li><li><p>引入 spring 的约束，需要先找到具体的约束头信息！</p></li><li><p>spring-framework-3.2.0.RELEASE\docs\spring-framework-reference\html\xsd-config.html</p></li><li><p>具体的约束如下：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>完成 UserService 的配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring的快速入门 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo1.UserServiceImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="步骤五：编写测试程序"><a href="#步骤五：编写测试程序" class="headerlink" title="步骤五：编写测试程序"></a>步骤五：编写测试程序</h3><p>采用 Spring 框架的 <code>工厂方式</code> 来获取到 UserService 接口的具体实现类！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 IoC 的程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原来的方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">usi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        usi.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 Spring 框架的方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建工厂，加载核心配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 从工厂中获取对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">us</span> <span class="operator">=</span> (UserService) ac.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用对象的方法执行</span></span><br><span class="line">        us.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Spring-框架中的工厂（了解）"><a href="#Spring-框架中的工厂（了解）" class="headerlink" title="Spring 框架中的工厂（了解）"></a>Spring 框架中的工厂（了解）</h2><h3 id="ApplicationContext-接口"><a href="#ApplicationContext-接口" class="headerlink" title="ApplicationContext 接口"></a>ApplicationContext 接口</h3><ul><li><p>使用 <code>ApplicationContext</code> 工厂的接口，使用该接口可以获取到具体的 <code>Bean</code> 对象。</p></li><li><p>启动服务器的时候即创建好了对象。</p></li><li><p>该接口下有两个具体的实现类：</p><blockquote><p>ClassPathXmlApplicationContext————加载<code>类路径</code>下的 Spring 配置文件<br>FileSystemXmlApplicationContext————加载本地磁盘下的 Spring 配置文件</p></blockquote></li></ul><h3 id="BeanFactory工厂（过时）"><a href="#BeanFactory工厂（过时）" class="headerlink" title="BeanFactory工厂（过时）"></a>BeanFactory工厂（过时）</h3><p>（是Spring框架早期的创建Bean对象的工厂接口）</p><ul><li><p>启动服务器的时候不会创建对象，只有在第一次调用的时候才会创建。</p></li><li><p>使用 <code>BeanFactory</code> 接口也可以获取到 Bean 对象</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">BeanFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>));</span><br><span class="line"><span class="type">UserService</span> <span class="variable">us</span> <span class="operator">=</span> (UserService) factory.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">us.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BeanFactory-和-ApplicationContext-的区别"><a href="#BeanFactory-和-ApplicationContext-的区别" class="headerlink" title="BeanFactory 和 ApplicationContext 的区别"></a><code>BeanFactory</code> 和 <code>ApplicationContext</code> 的区别</h3><ul><li><p>BeanFactory————BeanFactory 采取延迟加载，第一次 <code>1getBean</code> 时才会初始化 Bean</p></li><li><p>ApplicationContext————在加载 <code>applicationContext.xml</code> 时候就会创建具体的 Bean 对象的实例，还提供了一些其他的功能：</p><blockquote><p>事件传递<br>Bean 自动装配<br>各种不同应用层的 Context 实现</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 OGNL 表达式、Struts2 值栈与OGNL 特殊符号</title>
      <link href="/JavaWeb-Struts203.html"/>
      <url>/JavaWeb-Struts203.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/struts20300.png"></div><p id="div-border-left-blue">OGNL 表达式  &  Struts2 值栈  &  OGNL 特殊符号</p><span id="more"></span><hr><h1 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h1><hr><h2 id="OGNL表达式概述（了解）"><a href="#OGNL表达式概述（了解）" class="headerlink" title="OGNL表达式概述（了解）"></a>OGNL表达式概述（了解）</h2><ul><li><p>OGNL 是 <code>Object Graphic Navigation Language</code>（对象图导航语言）的缩写</p><blockquote><p>所谓对象图，即以任意一个对象为根，通过 OGNL 可以访问与这个对象关联的其它对象</p><p>通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。</p></blockquote></li><li><p>Struts2 框架使用 <code>OGNL</code> 作为默认的表达式语言</p><blockquote><p><code>OGNL</code> 是一种比 <code>EL</code> 强大很多倍的语言<br><code>xwork</code> 提供 <code>OGNL</code> 表达式<br><code>ognl-3.0.5.jar</code>  </p></blockquote></li><li><p>OGNL 提供五大类功能</p><blockquote><p>支持对象方法调用<br>支持类静态的方法调用和值访问<br>访问 OGNL 上下文（OGNLcontext）和 ActionContext<br>支持赋值操作和表达式串联<br>操作集合对象  </p></blockquote></li><li><p>测试的代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问对象的方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException&#123;</span><br><span class="line">    <span class="type">OgnlContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OgnlContext</span>();</span><br><span class="line">    <span class="comment">// 获取对象的方法</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Ognl.getValue(<span class="string">&quot;&#x27;helloworld&#x27;.length()&quot;</span>, context, context.getRoot());</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取OGNL上下文件的对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run3</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException&#123;</span><br><span class="line">    <span class="type">OgnlContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OgnlContext</span>();</span><br><span class="line">    context.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;美美&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取对象的方法</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Ognl.getValue(<span class="string">&quot;#name&quot;</span>, context, context.getRoot());</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从root栈获取值</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo3</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException&#123;</span><br><span class="line">    <span class="type">OgnlContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OgnlContext</span>();</span><br><span class="line">    <span class="type">Customer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">    c.setCust_name(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">    context.setRoot(c);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) Ognl.getValue(<span class="string">&quot;cust_name&quot;</span>, context, context.getRoot());</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己测试的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ognl.Ognl;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlContext;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示 OGNL 表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException &#123;</span><br><span class="line">        <span class="comment">// 上下文对象</span></span><br><span class="line">        <span class="type">OgnlContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OgnlContext</span>();</span><br><span class="line">        <span class="comment">// 获取到根对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">root</span> <span class="operator">=</span> context.getRoot();</span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        context.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;美美&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取值，注意表达式写法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> Ognl.getValue(<span class="string">&quot;#name&quot;</span>, context, root);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="comment">//Object value = Ognl.getValue(&quot;&#x27;haha&#x27;.length()&quot;, context, root);</span></span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在-Struts2-框架中使用-OGNL-表达式"><a href="#在-Struts2-框架中使用-OGNL-表达式" class="headerlink" title="在 Struts2 框架中使用 OGNL 表达式"></a>在 Struts2 框架中使用 OGNL 表达式</h2><p>1）. Struts2 引入了 <code>OGNL</code> 表达式，主要是在 <code>JSP</code> 页面中获取值栈中的值</p><p>2）. 具体在 Struts2 中怎么使用呢？如下步骤</p><blockquote><p>需要先在 JSP 页面中引入 <code>Struts2</code> 的标签库</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;s&quot;</span> uri=<span class="string">&quot;/struts-tags&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>Struts2</code> 提供的标签中的标签</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;OGNL表达式&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>3）. 在 JSP 页面使用 <code>OGNL</code> 表达式</p><blockquote><p>访问对象方法</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;&#x27;hello&#x27;.length()&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="Struts2-框架的值栈"><a href="#Struts2-框架的值栈" class="headerlink" title="Struts2 框架的值栈"></a>Struts2 框架的值栈</h1><hr><h2 id="值栈的概述"><a href="#值栈的概述" class="headerlink" title="值栈的概述"></a>值栈的概述</h2><ul><li><p>值栈就相当于 <code>Struts2</code> 框架的数据的中转站，向值栈存入一些数据。从值栈中获取到数据。</p></li><li><p><code>ValueStack</code> 是 struts2 提供一个接口，实现类 <code>OgnlValueStack</code> —- 值栈对象 （<code>OGNL</code> 是从值栈中获取数据的 ）</p></li><li><p><code>Action</code> 是多例的，有一个请求，创建 <code>Action</code> 实例，创建一个 <code>ActionContext</code> 对象，代表的是 <code>Action</code> 的上下文对象，还会创建一个 <code>ValueStack</code> 对象。</p></li><li><p>每个 <code>Action</code> 实例都有一个 <code>ValueStack</code> 对象 （一个请求对应一个 <code>ValueStack</code> 对象 ）</p></li><li><p>在其中保存当前 <code>Action</code> 对象和其他相关对象</p></li><li><p>Struts 框架把 <code>ValueStack</code> 对象保存在名为 <code>“struts.valueStack”</code> 的请求属性中，<code>request</code> 中 （值栈对象是 <code>request</code> 一个属性）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不常用</span></span><br><span class="line"><span class="type">ValueStack</span> <span class="variable">vs</span> <span class="operator">=</span> (ValueStack)request.getAttribute(<span class="string">&quot;struts.valueStack&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="值栈的内部结构"><a href="#值栈的内部结构" class="headerlink" title="值栈的内部结构"></a>值栈的内部结构</h2><h3 id="值栈由两部分组成"><a href="#值栈由两部分组成" class="headerlink" title="值栈由两部分组成"></a>值栈由两部分组成</h3><ul><li><p>值栈由以下两部分组成：</p><blockquote><p><strong>root</strong>  ———— Struts 把动作和相关对象压入 <code>ObjectStack</code> 中–<code>List</code><br><strong>context</strong>  ———— Struts 把各种各样的映射关系(一些 <code>Map</code> 类型的对象) 压入 <code>ContextMap</code> 中</p></blockquote></li><li><p>Struts 会默认把下面这些映射压入 <code>ContextMap</code>（context）中</p></li><li><p>注意：<code>request</code> 代表的是 <code>Map</code> 集合的 <code>key</code> 值，<code>value</code> 的值其实也是一个 <code>Map</code> 集合。</p><blockquote><p><strong>parameters</strong>：该 Map 中包含当前请求的请求参数  ?name&#x3D;xxx&amp;password&#x3D;123<br><strong>request</strong>：该 Map 中包含当前 <code>request</code> 对象中的所有属性<br><strong>session</strong>：该 Map 中包含当前 <code>session</code> 对象中的所有属性<br><strong>application</strong>：该 Map 中包含当前 <code>application</code>  对象中的所有属性<br><strong>attr</strong>：该 Map 按如下顺序来检索某个属性: <code>request</code>, <code>session</code>, <code>application</code></p></blockquote></li><li><p>ValueStack 中存在 <code>root</code> 属性 (CompoundRoot) 、 <code>context</code> 属性 （OgnlContext ）</p><blockquote><p><code>CompoundRoot</code> 就是 <code>ArrayList</code><br><code>OgnlContext</code> 就是 <code>Map</code>      </p></blockquote></li><li><p>context 对应 Map 引入 root 对象 </p><blockquote><p>context 中还存在 request、 session、application、 attr、 parameters 对象引用</p></blockquote></li></ul><p><em><strong>操作值栈默认指操作 root 元素</strong></em></p><h3 id="OGNL-获取值"><a href="#OGNL-获取值" class="headerlink" title="OGNL 获取值"></a>OGNL 获取值</h3><p>如果从 <code>root</code> 栈中获取值，OGNL 表达式默认情况下不能写 <code>#</code> 号：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;表达式&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>如果从 <code>context</code> 栈中获取值，OGNL 表达式默认需要加 <code>#</code> 号（访问 request、 session、application、 attr、 parameters 对象数据必须写）：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;#表达式&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="值栈的创建和-ActionContext-对象的关系"><a href="#值栈的创建和-ActionContext-对象的关系" class="headerlink" title="值栈的创建和 ActionContext 对象的关系"></a>值栈的创建和 ActionContext 对象的关系</h2><ul><li><p>值栈对象是 <code>请求时创建</code> 的</p></li><li><p><code>ActionContext</code> 是绑定到当前的线程上，那么在每个拦截器或者 <code>Action</code> 中获取到的 <code>ActionContext</code> 是同一个。</p></li><li><p><code>ActionContext</code> 中存在一个 <code>Map</code> 集合，该 <code>Map</code> 集合和 <code>ValueStack</code> 的 <code>context</code> 是同一个地址。</p></li><li><p><code>ActionContext</code> 中可以获取到 <code>ValueStack</code> 的引用，以后再开发，使用 <code>ActionContext</code> 来获取到值栈对象</p></li></ul><h2 id="获取值栈对象"><a href="#获取值栈对象" class="headerlink" title="获取值栈对象"></a>获取值栈对象</h2><ul><li>获得值栈对象，有三种方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ValueStack</span> <span class="variable">vs1</span> <span class="operator">=</span> (ValueStack) ServletActionContext.getRequest().getAttribute(<span class="string">&quot;struts.valueStack&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ValueStack</span> <span class="variable">vs2</span> <span class="operator">=</span> (ValueStack) ServletActionContext.getRequest().getAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY);</span><br></pre></td></tr></table></figure><p><strong>★重要</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取值栈对象，首先要获取 ActionContext 对象</span></span><br><span class="line"><span class="type">ValueStack</span> <span class="variable">vs3</span> <span class="operator">=</span> ActionContext.getContext().getValueStack();</span><br></pre></td></tr></table></figure><h2 id="向值栈中保存数据"><a href="#向值栈中保存数据" class="headerlink" title="向值栈中保存数据"></a>向值栈中保存数据</h2><p>向值栈保存数据 （主要针对 <code>root</code> 栈）</p><h3 id="push-方法"><a href="#push-方法" class="headerlink" title="push 方法"></a>push 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向栈顶压入对象</span></span><br><span class="line">valueStack.push(Object obj);</span><br></pre></td></tr></table></figure><ul><li><code>push</code> 方法的底层调用 <code>root</code> 对象的 <code>push</code> 方法（把元素添加到 0 位置）</li></ul><h3 id="set-方法"><a href="#set-方法" class="headerlink" title="set 方法"></a>set 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向栈顶压入 map 集合，把 key 和 obj 存入到 map 集合中</span></span><br><span class="line">valueStack.set(String key, Object obj);</span><br></pre></td></tr></table></figure><ul><li>源码获取 <code>map</code> 集合（<code>map</code> 有可能是已经存在的，有可能是新创建的），把 <code>map</code> 集合压入到栈顶，再把数据存入到 <code>map</code> 集合中。</li></ul><blockquote><p>在 jsp 中，通过 <code>&lt;s:debug/&gt;</code> 查看值栈的内容</p></blockquote><h2 id="从值栈中获取值"><a href="#从值栈中获取值" class="headerlink" title="从值栈中获取值"></a>从值栈中获取值</h2><h3 id="一些小细节"><a href="#一些小细节" class="headerlink" title="一些小细节"></a>一些小细节</h3><blockquote><p>访问 <code>root</code> 中的数据不需要 <code>#</code><br>访问 <code>context</code> 中的对象数据，要加 <code>#</code><br>如果向 <code>root</code> 中存入对象的话，优先使用 <code>push</code> 方法。<br>如果向 <code>root</code> 中存入集合的话，优先要使用 <code>set</code> 方法。</p></blockquote><h3 id="在-OgnlContext-中获取数据"><a href="#在-OgnlContext-中获取数据" class="headerlink" title="在 OgnlContext 中获取数据"></a>在 OgnlContext 中获取数据</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request:&lt;s:property value=<span class="string">&quot;#request.username&quot;</span>/&gt;</span><br><span class="line">session:&lt;s:property value=<span class="string">&quot;#session.username&quot;</span>/&gt;</span><br><span class="line">application:&lt;s:property value=<span class="string">&quot;#application.username&quot;</span>/&gt;</span><br><span class="line">attr:&lt;s:property value=<span class="string">&quot;#attr.username&quot;</span>/&gt;</span><br><span class="line">parameters:&lt;s:property value=<span class="string">&quot;#parameters.cid&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>前提 <code>struts.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;demo2&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--压栈和取值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;save&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.ValueStack1Action&quot;</span> <span class="attr">method</span>=<span class="string">&quot;save&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/demo2/vs.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>注意：</em>jsp 中首先要引入标签库 <code>&lt;%@taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt;</code>，在 jsp 中使用 <code>&lt;s:debug&gt;&lt;/s:debug&gt;</code> 可以查看值栈的内容。</p><p>以下代码演示 <code>压栈和取值</code>：</p><h4 id="push-字符串"><a href="#push-字符串" class="headerlink" title="push 字符串"></a>push 字符串</h4><p><code>Action</code> 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取值栈</span></span><br><span class="line"><span class="type">ValueStack</span> <span class="variable">vs</span> <span class="operator">=</span> ActionContext.getContext().getValueStack();</span><br><span class="line"><span class="comment">// 压栈</span></span><br><span class="line">vs.push(<span class="string">&quot;小灰&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br></pre></td></tr></table></figure><p><code>jsp</code> 代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--获取栈顶的值--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">&quot;[0].top&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="set-字符串"><a href="#set-字符串" class="headerlink" title="set 字符串"></a>set 字符串</h4><p><code>Action</code> 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vs.set(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;小瓜&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>jsp</code> 代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--栈顶是 map 集合，通过 key 来获取值--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">&quot;[0].top.msg&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="获取对象（push）"><a href="#获取对象（push）" class="headerlink" title="获取对象（push）"></a>获取对象（push）</h4><p>首先需要创建一个 JavaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renkaigis.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Action</code> 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 User 对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小雷&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="comment">// 压栈</span></span><br><span class="line">vs.push(user);</span><br></pre></td></tr></table></figure><p><code>jsp</code> 代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--栈顶放 user 对象--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">&quot;[0].top.username&quot;</span>/&gt;</span><br><span class="line">&lt;%--[<span class="number">0</span>].top 是可以省略的--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">&quot;username&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="获取对象（set）"><a href="#获取对象（set）" class="headerlink" title="获取对象（set）"></a>获取对象（set）</h4><p><code>Action</code> 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vs.set(<span class="string">&quot;user&quot;</span>, user);</span><br></pre></td></tr></table></figure><p><code>jsp</code> 代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;[0].top.user.username&quot;</span>/&gt;</span><br><span class="line">&lt;%--省略关键字--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">&quot;user.username&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="List-集合（push）"><a href="#List-集合（push）" class="headerlink" title="List 集合（push）"></a>List 集合（push）</h4><p><code>Action</code> 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;User&gt; ulist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">ulist.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;123&quot;</span>));</span><br><span class="line">ulist.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;456&quot;</span>));</span><br><span class="line">ulist.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;789&quot;</span>));</span><br><span class="line"><span class="comment">// 把 ulist 压栈</span></span><br><span class="line">vs.push(ulist);</span><br></pre></td></tr></table></figure><p><code>jsp</code> 代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;[0].top[0].username&quot;</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">&quot;[0].top[1].username&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="List-集合（set）"><a href="#List-集合（set）" class="headerlink" title="List 集合（set）"></a>List 集合（set）</h4><p><code>Action</code> 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vs.set(<span class="string">&quot;ulist&quot;</span>, ulist);</span><br></pre></td></tr></table></figure><p><code>jsp</code> 代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;ulist[0].username&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--迭代的标签</span><br><span class="line">    属性：</span><br><span class="line">        vaule   表示要迭代的集合，需要从值栈中获取</span><br><span class="line">        <span class="keyword">var</span>     迭代过程中，遍历的对象（可写可不写）</span><br><span class="line">            * <span class="keyword">var</span> 编写上，把迭代产生的对象默认压入到 context 栈中，取值要加 #</span><br><span class="line">            * <span class="keyword">var</span> 不编写，默认把迭代产生的对象压入到 root 栈中</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;s:iterator value=<span class="string">&quot;ulist&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">    &lt;s:property value=<span class="string">&quot;#user.username&quot;</span>/&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--不编写 <span class="keyword">var</span>--%&gt;</span><br><span class="line">&lt;s:iterator value=<span class="string">&quot;ulist&quot;</span>&gt;</span><br><span class="line">    &lt;s:property value=<span class="string">&quot;username&quot;</span>/&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure><h4 id="从-context-栈中获取值"><a href="#从-context-栈中获取值" class="headerlink" title="从 context 栈中获取值"></a>从 context 栈中获取值</h4><p>底层已经封装了 request、session 等对象，操作的就是 map 集合</p><h5 id="request"><a href="#request" class="headerlink" title="request"></a>request</h5><p><code>Action</code> 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ServletActionContext.getRequest();</span><br><span class="line">request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;小鬼&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>jsp</code> 代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;#request.msg&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h5 id="session"><a href="#session" class="headerlink" title="session"></a>session</h5><p><code>Action</code> 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;小卡&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>jsp</code> 代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;#session.msg&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h5 id="parameters"><a href="#parameters" class="headerlink" title="parameters"></a>parameters</h5><p>路径传值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:9090/save.action?id=10</span></span><br></pre></td></tr></table></figure><p><code>jsp</code> 代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;#parameters.id&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h5 id="attr"><a href="#attr" class="headerlink" title="attr"></a>attr</h5><p>attr 从最小域开始找</p><p><code>jsp</code> 代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;#attr.msg&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="EL-表达式也能获取到值栈中的数据"><a href="#EL-表达式也能获取到值栈中的数据" class="headerlink" title="EL 表达式也能获取到值栈中的数据"></a>EL 表达式也能获取到值栈中的数据</h2><h3 id="EL-获取值栈的值"><a href="#EL-获取值栈的值" class="headerlink" title="EL 获取值栈的值"></a>EL 获取值栈的值</h3><p>获取上面的 ulist：</p><ol><li><p>首先导包：<code>jstl.jar</code>、<code>standard.jar</code></p></li><li><p>引标签库：<code>&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--在 jsp 页面上使用 EL 和 JSTL 标签库来取值--%&gt;</span><br><span class="line">&lt;c:forEach items=&quot;$&#123;ulist&#125;&quot; var=&quot;user&quot;&gt;</span><br><span class="line">    $&#123;user.username&#125; -- $&#123;user.password&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h3 id="为什么-EL-也能访问值栈中的数据？"><a href="#为什么-EL-也能访问值栈中的数据？" class="headerlink" title="为什么 EL 也能访问值栈中的数据？"></a>为什么 EL 也能访问值栈中的数据？</h3><p>因为 Struts2 底层使用了装饰者模式，对 <code>getAttribute()</code> 方法进行了增强。</p><p><code>StrutsPreparedAndExecuteFilter</code> 的 <code>doFilter</code> 代码中 <code>request = prepare.wrapRequest(request);</code></p><blockquote><p>对 <code>Request</code>对象进行了包装<br><code>StrutsRequestWrapper</code> 增强了 <code>request</code> 的 <code>getAttribute()</code> 方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> <span class="built_in">super</span>.getAttribute(s);</span><br><span class="line"><span class="keyword">if</span> (attribute == <span class="literal">null</span>) &#123;</span><br><span class="line">attribute = stack.findValue(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>访问 <code>request</code> 范围的数据时，如果数据找不到，会去值栈中找<br><code>request</code> 对象具备访问值栈数据的能力（查找 <code>root</code> 的数据）</p></blockquote><hr><h1 id="OGNL-表达式的特殊符号"><a href="#OGNL-表达式的特殊符号" class="headerlink" title="OGNL 表达式的特殊符号"></a>OGNL 表达式的特殊符号</h1><hr><h2 id="符号的用法-★"><a href="#符号的用法-★" class="headerlink" title="# 符号的用法 ★"></a># 符号的用法 ★</h2><h3 id="获得-contextMap-中的数据"><a href="#获得-contextMap-中的数据" class="headerlink" title="获得 contextMap 中的数据"></a>获得 contextMap 中的数据</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;#request.name&quot;</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">&quot;#session.name&quot;</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">&quot;#application.name&quot;</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">&quot;#attr.name&quot;</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">&quot;#parameters.id&quot;</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">&quot;#parameters.name&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="可以构建一个-map-集合"><a href="#可以构建一个-map-集合" class="headerlink" title="# 可以构建一个 map 集合"></a># 可以构建一个 map 集合</h3><p>以构建表单为例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;编写表单&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    性别：&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span>/&gt;男&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span>/&gt;女</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;使用 Struts2 UI 标签方式&lt;/h3&gt;</span><br><span class="line">&lt;s:form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    性别：&lt;s:radio name=<span class="string">&quot;sex&quot;</span> list=<span class="string">&quot;&#123;&#x27;男&#x27;,&#x27;女&#x27;&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>#</code> 构建 map 集合：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;编写表单&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    性别：&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;男&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> value=<span class="string">&quot;2&quot;</span>/&gt;女</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;使用 Struts2 UI 标签方式&lt;/h3&gt;</span><br><span class="line">&lt;s:form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    性别：&lt;s:radio name=<span class="string">&quot;sex&quot;</span> list=<span class="string">&quot;#&#123;&#x27;1&#x27;:&#x27;男&#x27;,&#x27;2:&#x27;:&#x27;女&#x27;&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure><h2 id="符号的用法"><a href="#符号的用法" class="headerlink" title="% 符号的用法"></a>% 符号的用法</h2><h3 id="强制字符串解析成-OGNL-表达式"><a href="#强制字符串解析成-OGNL-表达式" class="headerlink" title="强制字符串解析成 OGNL 表达式"></a>强制字符串解析成 OGNL 表达式</h3><blockquote><p>例如：在 <code>request</code> 域中存入值，然后在文本框（<code>&lt;s:textfield&gt;</code>）中取值，现在到 <code>value</code> 上。</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:textfield value=<span class="string">&quot;%&#123;#request.msg&#125;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="中的值用-‘’-引起来，此时不再是-ognl-表达式，而是普通的字符串"><a href="#中的值用-‘’-引起来，此时不再是-ognl-表达式，而是普通的字符串" class="headerlink" title="{ } 中的值用 ‘’ 引起来，此时不再是 ognl 表达式，而是普通的字符串"></a>{ } 中的值用 ‘’ 引起来，此时不再是 ognl 表达式，而是普通的字符串</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">&quot;%&#123;&#x27;#request.msg&#x27;&#125;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="符号的用法-1"><a href="#符号的用法-1" class="headerlink" title="$ 符号的用法"></a>$ 符号的用法</h2><ul><li>在配置文件中可以使用 OGNL 表达式，例如：文件下载的配置文件。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;download1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.DownloadAction&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;stream&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;contentType&quot;</span>&gt;</span>$&#123;contentType&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;contentDisposition&quot;</span>&gt;</span>attachment;filename=$&#123;downFilename&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Struts2 中的 Servlet API、封装数据、拦截器</title>
      <link href="/JavaWeb-Struts202.html"/>
      <url>/JavaWeb-Struts202.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/struts20200.png"></div><p id="div-border-left-blue">Servlet API、封装数据、拦截器。</p><span id="more"></span><hr><h1 id="Struts2-框架中-Servlet-API-的使用"><a href="#Struts2-框架中-Servlet-API-的使用" class="headerlink" title="Struts2 框架中 Servlet API 的使用"></a>Struts2 框架中 Servlet API 的使用</h1><hr><h2 id="Servlet-的-API"><a href="#Servlet-的-API" class="headerlink" title="Servlet 的 API"></a>Servlet 的 API</h2><p>在 <code>Action</code> 类中也可以获取到 <code>Servlet</code> 一些常用的 <code>API</code></p><ul><li>案例需求：提供 <code>JSP</code> 的表单页面的数据，在 <code>Action</code> 中使用 <code>Servlet</code> 的 <code>API</code> 接收到，然后保存到三个域对象中，最后再显示到 <code>JSP</code> 的页面上。</li></ul><p>提供 JSP 注册的页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123; pageContext.request.contextPath &#125;/xxx.action&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="完全解耦合的方式"><a href="#完全解耦合的方式" class="headerlink" title="完全解耦合的方式"></a>完全解耦合的方式</h3><p>为了避免与 <code>Servlet API</code> 耦合在一起，方便 Action 类做单元测试，Struts2 对 <code>HttpServletRequest</code>、<code>HttpSession</code> 和 <code>ServletContext</code> 进行了封装，构造了三个 Map 对象来替代这三种对象，在 Action 中，直接使用 <code>HttpServletRequest</code>、<code>HttpSession</code>、<code>ServletContext</code> 对应的 Map 对象来保存和读取数据。</p><p>要获得这三个Map对象，可以使用 <code>com.opensymphony.xwork2.ActionContext类</code></p><p><code>ActionContext</code> ： <code>请求上下文</code></p><p>常用的方法如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static ActionContext getContext()  -- 获取 ActionContext 对象实例</span><br><span class="line">java.util.Map&lt;java.lang.String,java.lang.Object&gt; getParameters()  -- 获取请求参数，相当于 request.getParameterMap();</span><br><span class="line">java.util.Map&lt;java.lang.String,java.lang.Object&gt; getSession()  -- 获取的代表 session 域的 Map 集合，就相当于操作 session 域。</span><br><span class="line">java.util.Map&lt;java.lang.String,java.lang.Object&gt; getApplication() -- 获取代表 application 域的 Map 集合</span><br><span class="line">void put(java.lang.String key, java.lang.Object value)  -- 注意：向 request 域中存入值。</span><br></pre></td></tr></table></figure><h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><p><strong>Demo1Action.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完全解耦合的方式，使用 Servlet 的 API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1Action</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 完全解耦合的方式</span></span><br><span class="line">        <span class="type">ActionContext</span> <span class="variable">context</span> <span class="operator">=</span> ActionContext.getContext();</span><br><span class="line">        <span class="comment">// 获取到请求的参数，封装所有请求的参数</span></span><br><span class="line">        Map&lt;String, Object&gt; map = context.getParameters();</span><br><span class="line">        <span class="comment">// 遍历获取数据</span></span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="comment">// 通过 Key，来获取到值</span></span><br><span class="line">            String[] vals = (String[]) map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;:&quot;</span> + Arrays.toString(vals));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向 request 域中存入值</span></span><br><span class="line">        context.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;小天&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取其他 map 集合，并存入数据</span></span><br><span class="line">        context.getSession().put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        context.getApplication().put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;小红&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JSP 输入页面：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>完全解耦合方式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123; pageContext.request.contextPath &#125;/demo1Action.action&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>JSP 跳转页面：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 EL 表达式获取值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">$&#123;requestScope.msg&#125;</span><br><span class="line">$&#123;sessionScope.msg&#125;</span><br><span class="line">$&#123;applicationScope.msg&#125;</span><br></pre></td></tr></table></figure><p><code>struts.xml 配置文件：</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;demo1&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--完全解耦合的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;demo1Action&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo1.Demo1Action&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="案例结果："><a href="#案例结果：" class="headerlink" title="案例结果："></a>案例结果：</h4><p>输入信息：</p><img src="../../images/javaweb/struts20201.png"><p>跳转并取值：</p><img src="../../images/javaweb/struts20202.png"><p>控制台输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">password:[12345]</span><br><span class="line">username:[renkai]</span><br></pre></td></tr></table></figure><h3 id="使用原生-Servlet-的-API-的方式"><a href="#使用原生-Servlet-的-API-的方式" class="headerlink" title="使用原生 Servlet 的 API 的方式"></a>使用原生 Servlet 的 API 的方式</h3><p>直接访问 <code>Servlet API</code> 将使 <code>Action</code> 类与 <code>Servlet API</code> 耦合在一起，<code>Servlet API</code> 对象均由 <code>Servlet</code> 容器来构造，与这些对象绑定在一起，测试过程中就必须有 <code>Servlet</code> 容器，这样不便于 <code>Action</code> 类的测试，但有时候，确实需要访问这些对象，<code>Struts2</code> 同样提供了直接访问 <code>ServletAPI</code> 对象的方式。</p><p>要直接获取 <code>Servlet API</code> 对象可以使用 <code>org.apache.struts2.ServletActionContext</code> 类，该类是 <code>ActionContext</code> 类的子类。</p><ul><li>具体的方法如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request=ServletActionContext.getRequest();</span><br><span class="line">HttpSession session=request.getSession();</span><br><span class="line">session.setAttribute(<span class="string">&quot;xxx&quot;</span>,xxx);</span><br><span class="line">HttpServletResponse response=ServletActionContext.getResponse();</span><br><span class="line">HttpServletContext application=ServletActionContext.getApplication();</span><br></pre></td></tr></table></figure><h4 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h4><p><strong>Demo2Action.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原生 Servlet API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2Action</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取到 request 对象</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ServletActionContext.getRequest();</span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;天天&quot;</span>);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;美美&quot;</span>);</span><br><span class="line">        ServletActionContext.getServletContext().setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;园园&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 response 对象，可以使用输出流，输出内容</span></span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> ServletActionContext.getResponse();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JSP 输入页面：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>ServletCActionContext 类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123; pageContext.request.contextPath &#125;/demo2Action.action&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>JSP 跳转页面：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 EL 表达式获取值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">$&#123;requestScope.msg&#125;</span><br><span class="line">$&#123;sessionScope.msg&#125;</span><br><span class="line">$&#123;applicationScope.msg&#125;</span><br></pre></td></tr></table></figure><p><code>struts.xml 配置文件：</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--原生 Servlet API 方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;demo2Action&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo1.Demo2Action&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="案例结果：-1"><a href="#案例结果：-1" class="headerlink" title="案例结果："></a>案例结果：</h4><p>输入信息：</p><img src="../../images/javaweb/struts20203.png"><p>跳转并取值：</p><img src="../../images/javaweb/struts20204.png"><hr><h1 id="结果类型的跳转"><a href="#结果类型的跳转" class="headerlink" title="结果类型的跳转"></a>结果类型的跳转</h1><hr><p>结果页面存在两种方式</p><h2 id="全局结果页面"><a href="#全局结果页面" class="headerlink" title="全局结果页面"></a>全局结果页面</h2><p>条件：如果 <code>&lt;package&gt;</code> 包中的一些 <code>action</code> 都返回 <code>success</code>，并且返回的页面都是同一个 <code>JSP</code> 页面，这样就可以配置全局的结果页面。</p><p>全局结果页面针对的 <code>当前包</code> 中的所有的 <code>Action</code>，但是如果局部还有结果页面，会 <code>优先局部</code> 的。使用的标签是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;demo1&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置全局的结果页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="局部结果页面"><a href="#局部结果页面" class="headerlink" title="局部结果页面"></a>局部结果页面</h2><p>也就是之前一直所使用的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结果页面的类型"><a href="#结果页面的类型" class="headerlink" title="结果页面的类型"></a>结果页面的类型</h2><ul><li>结果页面使用 <code>&lt;result&gt;</code> 标签进行配置，包含两个属性</li></ul><blockquote><p><code>name</code>– 逻辑视图的名称</p><p><code>type</code>– 跳转的类型，需要掌握一些常用的类型。常见的结果类型去 <code>struts-default.xml</code> 中查找。</p></blockquote><ul><li><code>dispatcher</code>– 转发，<code>type的默认值</code>。<code>Action---&gt;JSP</code></li><li><code>redirect</code>– 重定向。<code>Action---&gt;JSP</code></li><li><code>chain</code>– 多个action之间跳转，从一个Action转发到另一个Action。<code>Action---Action</code></li><li><code>redirectAction</code>– 多个action之间跳转，从一个Action重定向到另一个Action。<code>Action---Action</code></li><li><code>stream</code>– 文件下载时候使用的</li></ul><hr><h1 id="Struts2-框架的数据封装"><a href="#Struts2-框架的数据封装" class="headerlink" title="Struts2 框架的数据封装"></a>Struts2 框架的数据封装</h1><hr><h2 id="数据的封装"><a href="#数据的封装" class="headerlink" title="数据的封装"></a>数据的封装</h2><ul><li>作为 <code>MVC</code> 框架，必须要负责解析 <code>HTTP</code> 请求参数，并将其封装到 <code>Model</code> 对象中</li><li>封装数据为开发提供了很多方便</li><li>Struts2 框架提供了很强大的数据封装的功能，<code>不再需要使用 Servlet 的 API 完成手动封装了</code>！</li></ul><p>Struts2 中提供了两类数据封装的方式：</p><h3 id="第一种方式：属性驱动"><a href="#第一种方式：属性驱动" class="headerlink" title="第一种方式：属性驱动"></a>第一种方式：属性驱动</h3><h4 id="提供对应属性的-set-方法进行数据的封装。"><a href="#提供对应属性的-set-方法进行数据的封装。" class="headerlink" title="提供对应属性的 set 方法进行数据的封装。"></a>提供对应属性的 <code>set</code> 方法进行数据的封装。</h4><ul><li><p>表单的哪些属性需要封装数据，那么在对应的 <code>Action</code> 类中提供该属性的 <code>set</code> 方法即可。</p></li><li><p>表单中的数据提交，最终找到 <code>Action</code> 类中的 <code>setXxx</code> 的方法，最后赋值给全局变量。</p></li><li><p>注意0：<code>Struts2</code> 的框架采用拦截器完成数据的封装。</p></li><li><p>注意1：这种方式不是特别好：因为属性特别多，提供特别多的set方法，而且还需要手动将数据存入到对象中。</p></li><li><p>注意2：这种情况下，<code>Action</code> 类就相当于一个 <code>JavaBean</code>，就没有体现出 <code>MVC</code> 的思想，<code>Action</code> 类又封装数据，又接收请求处理，耦合性较高。</p></li></ul><p><strong>Action:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="comment">// 只需要提供 set 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>struts.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;demo2&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性驱动的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;regist1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.Regist1Action&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>jsp页面</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;属性驱动的方式&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123; pageContext.request.contextPath &#125;/regist1.action&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">renkai 12 25</span><br></pre></td></tr></table></figure><h4 id="属性驱动：把数据封装到-JavaBean-对象中"><a href="#属性驱动：把数据封装到-JavaBean-对象中" class="headerlink" title="属性驱动：把数据封装到 JavaBean 对象中"></a>属性驱动：把数据封装到 JavaBean 对象中</h4><blockquote><p>在页面上，使用 <code>OGNL</code> 表达式进行数据封装。</p></blockquote><ul><li><p>在页面中使用 <code>OGNL</code> 表达式进行数据的封装，就可以直接把属性封装到某一个 <code>JavaBean</code> 的对象中。</p></li><li><p>在页面中定义一个 <code>JavaBean</code>，并且提供 <code>set</code> 方法：例如：<code>private User user;</code></p></li><li><p>页面中的编写发生了变化，需要使用 <code>OGNL</code> 的方式，表单中的写法：<code>&lt;input type=&quot;text&quot; name=&quot;user.username&quot;&gt;</code></p></li><li><p>注意：只提供一个 <code>set</code> 方法还不够，必须还需要提供 <code>user</code> 属性的 <code>get</code> 和 <code>set</code> 方法！！！</p></li></ul><p><strong>原理：</strong> 先调用 <code>get</code> 方法，判断一下是否有 <code>user</code> 对象的实例对象，如果没有，调用 <code>set</code> 方法把拦截器创建的对象注入进来。</p><p><strong>Action:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要提供 get 和 set 方法</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.user = user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>struts.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;demo2&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性驱动的方式，把数据封装到 JavaBean 的对象中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;regist2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.Regist2Action&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>jsp页面</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;属性驱动的方式（把数据封装到 JavaBean 的对象中）&lt;/h3&gt;</span><br><span class="line">&lt;%--页面的编写发生了变化，使用的是 OGNL 表达式的写法--%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123; pageContext.request.contextPath &#125;/regist2.action&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user.username&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;user.password&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user.age&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;username=&#x27;renkai&#x27;, password=&#x27;12&#x27;, age=25&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种方式：模型驱动"><a href="#第二种方式：模型驱动" class="headerlink" title="第二种方式：模型驱动"></a>第二种方式：模型驱动</h3><blockquote><p>使用模型驱动的方式，也可以把表单中的数据直接封装到一个 <code>JavaBean</code> 的对象中，并且表单的写法和之前的写法没有区别！</p><p>编写的页面不需要任何变化，正常编写 <code>name</code> 属性的值</p><p>模型驱动的编写步骤：</p></blockquote><ul><li><p>手动实例化 <code>JavaBean</code>，即：<code>private User user = new User();</code></p></li><li><p>必须实现 <code>ModelDriven&lt;T&gt;</code> 接口，实现 <code>getModel()</code> 的方法，在 <code>getModel()</code> 方法中返回 <code>user</code> 即可！！</p></li></ul><p><strong>Action:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模型驱动的方式</span></span><br><span class="line"><span class="comment"> * 需要实现 ModelDriven 接口</span></span><br><span class="line"><span class="comment"> * 必须要手动实例化对象（需要自己new好）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Regist3Action</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> <span class="keyword">implements</span> <span class="title class_">ModelDriven</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 必须要手动实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="comment">// 获取模型对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>struts.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;demo2&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--模型驱动的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;regist3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.Regist3Action&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>jsp页面</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;模型驱动的方式&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123; pageContext.request.contextPath &#125;/regist3.action&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;username=&#x27;renkai&#x27;, password=&#x27;12&#x27;, age=25&#125;</span><br></pre></td></tr></table></figure><h3 id="Struts2-把数据封装到集合中"><a href="#Struts2-把数据封装到集合中" class="headerlink" title="Struts2 把数据封装到集合中"></a>Struts2 把数据封装到集合中</h3><p>（默认采用的是属性驱动的方式）</p><h4 id="把数据封装到-List-集合中"><a href="#把数据封装到-List-集合中" class="headerlink" title="把数据封装到 List 集合中"></a>把数据封装到 List 集合中</h4><ul><li>因为 <code>Collection</code> 接口都会有下标值，所有页面的写法会有一些区别，注意：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;products[0].name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>Action</code> 中的写法，需要提供 <code>user</code> 的集合，并且提供 <code>get</code> 和 <code>set</code> 方法。</li></ul><p><strong>Action:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性驱动的方式，把数据封装到List集合中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Regist4Action</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;User&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>struts.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;demo2&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--把数据封装到List集合中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;regist4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.Regist4Action&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>jsp页面</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;向List集合封装数据（默认情况下，采用的是属性驱动的方式）&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123; pageContext.request.contextPath &#125;/regist4.action&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;list[0].username&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;list[0].password&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;list[0].age&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;list[1].username&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;list[1].password&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;list[1].age&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User&#123;username=&#x27;renkai&#x27;, password=&#x27;12&#x27;, age=25&#125;</span><br><span class="line">User&#123;username=&#x27;xiaomei&#x27;, password=&#x27;34&#x27;, age=22&#125;</span><br></pre></td></tr></table></figure><h4 id="把数据封装到-Ma-中"><a href="#把数据封装到-Ma-中" class="headerlink" title="把数据封装到 Ma 中"></a>把数据封装到 Ma 中</h4><ul><li><code>Map</code> 集合是键值对的形式，页面的写法</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;map[&#x27;one&#x27;].name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>里面的 <code>key</code> 值可以自定义。</p><ul><li>Action中提供 <code>map</code> 集合，并且提供 <code>get</code> 和 <code>set</code> 方法</li></ul><p><strong>Action:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性驱动的方式，把数据封装到map集合中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Regist5Action</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; map;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, User&gt; <span class="title function_">getMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMap</span><span class="params">(Map&lt;String, User&gt; map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>struts.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;demo2&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--把数据封装到map集合中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;regist5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo2.Regist5Action&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>jsp页面</strong>：这里的 <code>key</code> 值自定义。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;向map集合封装数据（默认情况下，采用的是属性驱动的方式）&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123; pageContext.request.contextPath &#125;/regist5.action&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;map[&#x27;one&#x27;].username&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;map[&#x27;one&#x27;].password&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;map[&#x27;one&#x27;].age&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;map[&#x27;two&#x27;].username&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;map[&#x27;two&#x27;].password&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;map[&#x27;two&#x27;].age&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;one=User&#123;username=&#x27;renkai&#x27;, password=&#x27;12&#x27;, age=25&#125;, two=User&#123;username=&#x27;xiaomei&#x27;, password=&#x27;34&#x27;, age=22&#125;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Struts2-的拦截器技术"><a href="#Struts2-的拦截器技术" class="headerlink" title="Struts2 的拦截器技术"></a>Struts2 的拦截器技术</h1><hr><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="拦截器概述"><a href="#拦截器概述" class="headerlink" title="拦截器概述"></a>拦截器概述</h3><ul><li><p>拦截器就是 <code>AOP</code>（Aspect-Oriented Programming，面向切面编程）的一种实现。（AOP是指用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。）</p></li><li><p>过滤器：过滤从客服端发送到服务器端请求的。</p></li><li><p>拦截器：对目标 <code>Action</code> 中的某些方法进行拦截。</p></li></ul><blockquote><p>拦截器不能拦截JSP</p><p>拦截 <code>Action</code> 中某些方法</p></blockquote><h3 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h3><p>1）拦截器是基于 <code>JAVA反射机制</code> 的，而过滤器是基于 <code>函数回调</code> 的<br>2）过滤器依赖于Servlet容器，而拦截器不依赖于Servlet容器<br>3）拦截器 <code>只能对Action请求</code> 起作用（Action中的方法），而过滤器可以对 <code>几乎所有的请求</code> 起作用（CSS JSP JS）。</p><ul><li>拦截器 采用 <code>责任链</code> 模式</li></ul><blockquote><p>在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链</p><p>责任链每一个节点，都可以继续调用下一个节点，也可以阻止流程继续执行</p></blockquote><ul><li>在 struts2 中可以定义很多个拦截器，将多个拦截器按照特定顺序组成拦截器栈（顺序调用栈中的每一个拦截器 ）</li></ul><p><strong>Struts2 框架的核心是拦截器</strong></p><h2 id="自定义拦截器和配置"><a href="#自定义拦截器和配置" class="headerlink" title="自定义拦截器和配置"></a>自定义拦截器和配置</h2><h3 id="编写拦截器"><a href="#编写拦截器" class="headerlink" title="编写拦截器"></a>编写拦截器</h3><p>需要实现 <code>Interceptor</code> 接口，实现接口中的三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">doIntercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 获取session对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) ServletActionContext.getRequest().getSession().getAttribute(<span class="string">&quot;existUser&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 说明，没有登录，后面就不会执行了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> invocation.invoke(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p><strong>注意：</strong> <em>只要引用了自己的拦截器，Struts2 框架默认栈的拦截器就不执行了，必须要手动引入默认栈。</em></p><p>需要在 <code>struts.xml</code> 中进行拦截器的配置，配置一共有两种方式</p><h4 id="第一种方式：直接引入"><a href="#第一种方式：直接引入" class="headerlink" title="第一种方式：直接引入"></a>第一种方式：直接引入</h4><ul><li>在 <code>&lt;package&gt;</code> 包中定义拦截器，出现在 <code>&lt;package&gt;</code> 包的上方</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">&quot;DemoInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.interceptor.DemoInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在某个 <code>action</code> 中引入拦截器：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;userAction&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo3.UserAction&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只要是引用自己的拦截器，默认栈的拦截器就不执行了，必须要手动引入默认栈 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">&quot;DemoInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">&quot;defaultStack&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二种方式：定义拦截器栈"><a href="#第二种方式：定义拦截器栈" class="headerlink" title="第二种方式：定义拦截器栈"></a>第二种方式：定义拦截器栈</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">&quot;DemoInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.interceptor.DemoInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义拦截器栈 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">&quot;myStack&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">&quot;DemoInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">&quot;defaultStack&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;userAction&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.demo3.UserAction&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只要是引用自己的拦截器，默认栈的拦截器就不执行了，必须要手动引入默认栈 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">&quot;DemoInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">&quot;defaultStack&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Struts2 快速入门</title>
      <link href="/JavaWeb-Struts201.html"/>
      <url>/JavaWeb-Struts201.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/struts20100.png"></div><p id="div-border-left-blue">Struts2 快速入门。</p><span id="more"></span><hr><h1 id="Struts2-框架的概述"><a href="#Struts2-框架的概述" class="headerlink" title="Struts2 框架的概述"></a>Struts2 框架的概述</h1><hr><h2 id="Struts2-框架由来"><a href="#Struts2-框架由来" class="headerlink" title="Struts2 框架由来"></a>Struts2 框架由来</h2><ul><li><p><code>Struts2</code> 是 <code>Struts1</code> 的下一代产品，是在 <code>struts1</code> 和 <code>WebWork</code> 的技术基础上进行了合并的全新的 <code>Struts2</code> 框架。</p></li><li><p>其全新的 <code>Struts2</code> 的体系结构与 <code>Struts1</code> 的体系结构差别巨大。</p></li><li><p><code>Struts2</code> 以 <code>WebWork</code> 为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与 <code>ServletAPI</code> 完全脱离开，所以 <code>Struts2</code> 可以理解为 <code>WebWork</code> 的更新产品。</p></li><li><p>虽然从 <code>Struts1</code> 到 <code>Struts2</code> 有着太大的变化，但是相对于 <code>WebWork</code> ，<code>Struts2</code> 的变化很小。</p></li></ul><h2 id="Struts2-设计模型"><a href="#Struts2-设计模型" class="headerlink" title="Struts2 设计模型"></a>Struts2 设计模型</h2><p><strong>Struts2 是一个基于 MVC 设计模式的 Web 层框架</strong></p><ul><li><p><code>MVC</code> 和 JavaEE 的三层结构</p></li><li><p><code>MVC</code> 设计模式：是由一些网站的开发人员提出来的（<code>Model View Controller</code>）</p></li><li><p>JavaEE 三层结构：SUN 公司为 EE 开发划分的结构</p></li></ul><h2 id="常见的Web层的框架"><a href="#常见的Web层的框架" class="headerlink" title="常见的Web层的框架"></a>常见的Web层的框架</h2><ul><li><p>Struts1</p></li><li><p>Struts2 <strong>★</strong></p></li><li><p>Webwork</p></li><li><p>SpringMVC <strong>★</strong></p></li></ul><h2 id="Web层框架的特点"><a href="#Web层框架的特点" class="headerlink" title="Web层框架的特点"></a>Web层框架的特点</h2><ul><li><p>都是一个特点，<code>前端控制器模式</code></p></li><li><p>记住：<code>前端控制器（核心的控制器）</code></p></li><li><p><code>Struts2</code> 框架前端的控制器就是 <code>过滤器</code></p></li></ul><hr><h1 id="Struts2-快速入门"><a href="#Struts2-快速入门" class="headerlink" title="Struts2 快速入门"></a>Struts2 快速入门</h1><hr><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="创建-WEB-项目"><a href="#创建-WEB-项目" class="headerlink" title="创建 WEB 项目"></a>创建 <code>WEB</code> 项目</h3><p>编写 <code>JSP</code> 的页面，编写超链接，点击超链接发送请求，请求服务器，让服务器的方法去执行！！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Struts2的入门程序<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123; pageContext.request.contextPath &#125;/hello.action&quot;</span>&gt;</span>Struts2入门程序<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="下载-Struts2-的开发包"><a href="#下载-Struts2-的开发包" class="headerlink" title="下载 Struts2 的开发包"></a>下载 Struts2 的开发包</h3><ul><li><a href="https://struts.apache.org/">https://struts.apache.org/</a>– 官网地址</li></ul><h3 id="解压struts-2-3-24-all-zip包"><a href="#解压struts-2-3-24-all-zip包" class="headerlink" title="解压struts-2.3.24-all.zip包"></a>解压struts-2.3.24-all.zip包</h3><ul><li>解压后会看到有包和一些文件，大家需要掌握包相关的信息</li></ul><blockquote><p><code>apps</code>– Struts2 框架提供了一些应用<br><code>libs</code>– Struts2 框架开发的 jar 包<br><code>docs</code>– Struts2 框架开发文档<br><code>src</code>– Struts2 框架源码</p></blockquote><h3 id="引入需要开发的-jar-包"><a href="#引入需要开发的-jar-包" class="headerlink" title="引入需要开发的 jar 包"></a>引入需要开发的 jar 包</h3><ul><li><code>Struts2</code> 框架的开发 <code>jar</code> 包非常多，但是不是所有都是必须要引入的，有一些必须要导入的 <code>jar</code> 包，这些 <code>jar</code> 包可以从 <code>Struts2</code> 框架提供的<code>应用</code>中找到。</li><li>可以打开 <code>apps</code> 目录，然后找到 <code>struts2-blank.war</code> 应用。<code>war 包和 </code>zip&#96; 包的压缩格式是一样的，所以可以修改后缀名，解压。</li><li>找到解压后的应用，打开 <code>WEB-INF/lib</code> 目录下所以的 <code>jar</code> 包。复制到工程中，就可以了。</li></ul><h3 id="配置-Struts2-的前端控制器"><a href="#配置-Struts2-的前端控制器" class="headerlink" title="配置 Struts2 的前端控制器"></a>配置 Struts2 的前端控制器</h3><p>注意：这一步是必须要做的操作，这是 <code>Struts2</code> 核心的控制器。</p><ul><li><code>Struts2</code> 的前端控制器就是一个过滤器，那么过滤器相关知识咱们都学习过，需要在 <code>web.xml</code> 中进行配置。</li><li>前端控制器的类的路径和名称：<code>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</code></li><li>具体配置如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写-Action-类"><a href="#编写-Action-类" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h2><p><code>Action</code> 类是动作类，是 <code>Struts2</code> <code>处理请求</code>，<code>封装数据</code>，<code>响应页面</code>的<code>核心控制器</code>。需要自己编写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Struts2 框架都是用 Action 类处理用户的请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloAction</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Action 类中的方法签名是有要求的，必须这么做</span></span><br><span class="line"><span class="comment">     * public 共有的</span></span><br><span class="line"><span class="comment">     * 必须有返回值，必须 String 类型</span></span><br><span class="line"><span class="comment">     * 方法名称可以是任意的，但是不能有参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Struts2!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写-Struts-的配置文件"><a href="#编写-Struts-的配置文件" class="headerlink" title="编写 Struts 的配置文件"></a>编写 Struts 的配置文件</h2><ol><li><p>配置文件名称是 <code>struts.xml</code>（名称必须是 <code>struts.xml</code>）</p></li><li><p>在 <code>src</code> 下引入 <code>struts.xml</code> 配置文件（配置文件的路径必须是在 <code>src</code> 的目录下）</p></li><li><p>配置如下</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">struts</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置 Action--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.action.HelloAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;sayHello&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写跳转"><a href="#编写跳转" class="headerlink" title="编写跳转"></a>编写跳转</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.action.HelloAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;sayHello&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置跳转的页面，路径的写法。在 Struts2 框架中，不管是转发还是重定向，都不用写项目名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;OK&quot;</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结-Struts2-执行流程"><a href="#总结-Struts2-执行流程" class="headerlink" title="总结 Struts2 执行流程"></a>总结 Struts2 执行流程</h2><h3 id="执行的流程"><a href="#执行的流程" class="headerlink" title="执行的流程"></a>执行的流程</h3><ul><li><p>编写的页面，点击超链接，请求提交到服务器端。</p></li><li><p>请求会先经过 <code>Struts2</code> 的核心过滤器（<code>StrutsPrepareAndExecuteFilter</code>）</p></li></ul><blockquote><p>过滤器的功能是完成了一部分代码功能<br>就是一系列的拦截器执行了，进行一些处理工作。<br>可以在 <code>struts-default.xml</code> 配置文件中看到有很多的拦截器。</p></blockquote><ul><li>拦截器执行完后，会根据 <code>struts.xml</code> 的配置文件找到请求路径，找到具体的类，通过<code>反射</code>的方式让方法执行。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>JSP页面 –&gt; <code>StrutsPrepereAndExecuteFilter</code>过滤器 –&gt; 执行一系列拦截器（完成了部分代码） –&gt; 执行到目标 <code>Action</code> –&gt; 返回字符串 –&gt; 结果页面（<code>result</code>） –&gt; 页面跳转</li></ul><hr><h2 id="Struts2-框架配置文件加载的顺序"><a href="#Struts2-框架配置文件加载的顺序" class="headerlink" title="Struts2 框架配置文件加载的顺序"></a>Struts2 框架配置文件加载的顺序</h2><h3 id="Struts2-框架的核心是-StrutsPrepareAndExecuteFilter-过滤器"><a href="#Struts2-框架的核心是-StrutsPrepareAndExecuteFilter-过滤器" class="headerlink" title="Struts2 框架的核心是 StrutsPrepareAndExecuteFilter 过滤器"></a>Struts2 框架的核心是 <code>StrutsPrepareAndExecuteFilter</code> 过滤器</h3><h4 id="该过滤器有两个功能"><a href="#该过滤器有两个功能" class="headerlink" title="该过滤器有两个功能"></a>该过滤器有两个功能</h4><ul><li>Prepare– 预处理，加载核心的配置文件</li><li>Execute– 执行，让部分拦截器执行</li></ul><h4 id="StrutsPrepareAndExecuteFilter-过滤器会加载哪些配置文件呢？"><a href="#StrutsPrepareAndExecuteFilter-过滤器会加载哪些配置文件呢？" class="headerlink" title="StrutsPrepareAndExecuteFilter  过滤器会加载哪些配置文件呢？"></a><code>StrutsPrepareAndExecuteFilter</code>  过滤器会加载哪些配置文件呢？</h4><p>通过源代码可以看到具体加载的配置文件和加载配置文件的顺序</p><ul><li>init_DefaultProperties(); – 加载 <code>org/apache/struts2/default.properties</code></li><li>init_TraditionalXmlConfigurations();– 加载 <code>struts-default.xml</code>,<code>struts-plugin.xml</code>,<code>struts.xml</code></li><li>init_LegacyStrutsProperties();– 加载自定义的 <code>struts.properties</code></li><li>init_CustomConfigurationProviders();– 加载用户自定义配置提供者</li><li>init_FilterInitParameters() ;– 加载 <code>web.xml</code></li></ul><h4 id="重点了解的配置文件"><a href="#重点了解的配置文件" class="headerlink" title="重点了解的配置文件"></a>重点了解的配置文件</h4><ul><li>default.properties– 在 <code>org/apache/struts2/</code> 目录下，代表的是配置的是 <code>Struts2</code> 的常量的值</li><li>struts-default.xml– 在 <code>Struts2</code> 的核心包下，代表的是 <code>Struts2</code> 核心功能的配置（Bean、拦截器、结果类型等）</li><li>struts.xml– 重点中的重点配置，代表 <code>WEB</code> 应用的默认配置，在工作中，基本就配置它就可以了！！（可以配置常量）</li><li>web.xml– 配置前端控制器（可以配置常量）</li></ul><p>注意：</p><ul><li><p>前 3 个配置文件是 <code>struts2</code> 框架的默认配置文件，基本不用修改。</p></li><li><p>后 3 个配置文件可以允许自己修改 <code>struts2</code> 的常量。但是有一个特点：后加载的配置文件修改的常量的值，会覆盖掉前面修改的常量的值。</p></li></ul><h4 id="总结（重点掌握的配置文件）"><a href="#总结（重点掌握的配置文件）" class="headerlink" title="总结（重点掌握的配置文件）"></a>总结（重点掌握的配置文件）</h4><ul><li><p>先加载 <code>default.properties</code> 文件，在 <code>org/apache/struts2/default.properties</code> 文件，都是常量。</p></li><li><p>又加载 <code>struts-default.xml</code> 配置文件，在核心的 <code>jar</code> 包最下方，<code>struts2</code> 框架的核心功能都是在该配置文件中配置的。</p></li><li><p>再加载 <code>struts.xml</code> 的配置文件，在 <code>src</code> 的目录下，代表用户自己配置的配置文件</p></li><li><p>最后加载 <code>web.xml</code> 的配置文件</p></li><li><p>后加载的配置文件会覆盖掉之前加载的配置文件（在这些配置文件中可以配置常量）</p></li></ul><h4 id="注意一个问题"><a href="#注意一个问题" class="headerlink" title="注意一个问题"></a>注意一个问题</h4><p>哪些配置文件中可以配置常量？</p><ul><li><p>default.properties– 默认值，是不能修改的！！</p></li><li><p>struts.xml– 可以配置，开发中基本上都在该配置文件中配置常量</p></li><li><p>struts.properties– 可以配置，基本不会在该配置文件中配置</p></li><li><p>web.xml– 可以配置，基本不会在该配置文件中配置</p></li><li><p>后加载的配置文件会覆盖掉之前加载的配置！！</p></li></ul><hr><h1 id="struts-xml-配置文件"><a href="#struts-xml-配置文件" class="headerlink" title="struts.xml 配置文件"></a>struts.xml 配置文件</h1><hr><h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><h3 id="标签"><a href="#标签" class="headerlink" title="&lt;package&gt; 标签"></a><code>&lt;package&gt;</code> 标签</h3><p>如果要配置 <code>&lt;Action&gt;</code> 的标签，那么必须要先配置 <code>&lt;package&gt;</code> 标签，代表的包的概念</p><p>包含的属性:</p><ul><li>name– 包的名称，要求是唯一的，管理 <code>action </code>配置</li><li>extends– 继承，可以继承其他的包，只要继承了，那么该包就包含了其他包的功能，一般都是继承 <code>struts-default</code></li><li>namespace– 名称空间，一般与 <code>&lt;action&gt;</code> 标签中的 <code>name</code> 属性共同决定访问路径（通俗话：怎么来访问 <code>action</code>），常见的配置如下<blockquote><p>namespace&#x3D;”&#x2F;“– 根名称空间<br>namespace&#x3D;”&#x2F;aaa”– 带有名称的名称空间</p></blockquote></li><li>abstract– 抽象的。这个属性基本很少使用，值如果是 <code>true</code>，那么编写的包是被继承的</li></ul><h3 id="标签-1"><a href="#标签-1" class="headerlink" title="&lt;action&gt; 标签"></a><code>&lt;action&gt;</code> 标签</h3><p>代表配置 <code>action</code> 类，包含的属性</p><ul><li>name– 和 <code>&lt;package&gt;</code> 标签的 <code>namespace</code> 属性一起来决定访问路径的</li><li>class– 配置 <code>Action</code> 类的全路径（默认值是 <code>ActionSupport</code> 类）</li><li>method– <code>Action</code> 类中执行的方法，如果不指定，默认值是 <code>execute</code></li></ul><h3 id="标签-2"><a href="#标签-2" class="headerlink" title="&lt;result&gt; 标签"></a><code>&lt;result&gt;</code> 标签</h3><p><code>action</code>类中方法执行，返回的结果跳转的页面</p><ul><li>name– 结果页面逻辑视图名称</li><li>type– 结果类型（默认值是转发，也可以设置其他的值）</li></ul><h2 id="Struts2-配置常量"><a href="#Struts2-配置常量" class="headerlink" title="Struts2 配置常量"></a>Struts2 配置常量</h2><h3 id="Struts2-框架中的哪些配置文件中配置常量？"><a href="#Struts2-框架中的哪些配置文件中配置常量？" class="headerlink" title="Struts2 框架中的哪些配置文件中配置常量？"></a>Struts2 框架中的哪些配置文件中配置常量？</h3><p>struts.xml（必须要掌握，开发中基本上就在该配置文件中编写常量）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br></pre></td></tr></table></figure><p>web.xml</p><ul><li><p>在 <code>StrutsPrepareAndExecuteFilter</code> 配置文件中配置初始化参数</p></li><li><p>注意：后加载的配置的文件的常量会覆盖之前加载的常量！！</p></li></ul><h3 id="需要了解的常量"><a href="#需要了解的常量" class="headerlink" title="需要了解的常量"></a>需要了解的常量</h3><ul><li>struts.i18n.encoding&#x3D;UTF-8– 指定默认编码集，作用于 HttpServletRequest 的 setCharacterEncoding 方法 </li><li>struts.action.extension&#x3D;action,,– 该属性指定需要 Struts 2 处理的请求后缀，该属性的默认值是 action，即所有匹配 <code>*.action</code> 的请求都由 Struts2 处理。如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（,）隔开</li><li>struts.serve.static.browserCache&#x3D;true– 设置浏览器是否缓存静态内容,默认值为 <code>true</code> (生产环境下使用)，开发阶段最好关闭 </li><li>struts.configuration.xml.reload&#x3D;false– 当 struts 的配置文件修改后，系统是否自动重新加载该文件，默认值为 <code>false</code>(生产环境下使用) </li><li>struts.devMode &#x3D; false– 开发模式下使用，这样可以打印出更详细的错误信息</li></ul><h2 id="指定多个struts的配置文件（了解）"><a href="#指定多个struts的配置文件（了解）" class="headerlink" title="指定多个struts的配置文件（了解）"></a>指定多个struts的配置文件（了解）</h2><ol><li>在大部分应用里，随着应用规模的增加，系统中 <code>Action</code> 的数量也会大量增加，导致 <code>struts.xml</code> 配置文件变得非常臃肿。</li></ol><p>为了避免 <code>struts.xml</code> 文件过于庞大、臃肿，提高 <code>struts.xml</code> 文件的可读性，我们可以将一个 <code>struts.xml</code> 配置文件分解成多个配置文件，然后在 <code>struts.xml</code> 文件中包含其他配置文件。</p><ol start="2"><li>可以在 <code>&lt;package&gt;</code> 标签中，使用 <code>&lt;include&gt;</code> 标签来引入其他的 <code>struts_xx.xml</code> 的配置文件。例如：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;struts-part1.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;struts-part2.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>注意注意注意（重要的事情说三遍）：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;com/renkaigis/demo2/struts-part1.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Action-类的三种写法"><a href="#Action-类的三种写法" class="headerlink" title="Action 类的三种写法"></a>Action 类的三种写法</h2><h3 id="Action类就是一个POJO类"><a href="#Action类就是一个POJO类" class="headerlink" title="Action类就是一个POJO类"></a>Action类就是一个POJO类</h3><ul><li>什么是 POJO 类，<code>POJO（Plain Ordinary Java Object）</code>简单的 Java 对象，简单记：没有继承某个类，没有实现接口，就是 POJO 的类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是 POJO 类：没有任何继承和实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1Action</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * execute 是默认方法</span></span><br><span class="line"><span class="comment">     * return null; 不会进行跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Demo1Action 是一个 POJO 类…&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--POJO 类的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;demo1Action&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.action1.Demo1Action&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Action-类可以实现-Action-接口"><a href="#Action-类可以实现-Action-接口" class="headerlink" title="Action 类可以实现 Action 接口"></a>Action 类可以实现 Action 接口</h3><p>Action 接口中定义了 5 个常量，5 个常量的值对应的是 5 个逻辑视图跳转页面（跳转的页面还是需要自己来配置），还定义了一个方法，<code>execute</code> 方法。</p><p>需要掌握5个逻辑视图的常量</p><ul><li>SUCCESS– 成功</li><li>INPUT– 用于数据表单校验.如果校验失败,跳转 INPUT 视图</li><li>LOGIN– 登录</li><li>ERROR– 错误</li><li>NONE– 页面不转向</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现 Action 接口，Action 是框架提供的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2Action</span> <span class="keyword">implements</span> <span class="title class_">Action</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Demo2Action 实现了 Action 的接口…&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--实现 Action 接口的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;demo2Action&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.action1.Demo2Action&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Action-类可以去继承-ActionSupport-类"><a href="#Action-类可以去继承-ActionSupport-类" class="headerlink" title="Action 类可以去继承 ActionSupport 类"></a>Action 类可以去继承 ActionSupport 类</h3><p>（开发中这种方式使用最多）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写 Action 类继承 ActionSupport 类，ActionSupport 类已经实现了 Action 和一些其他的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3Action</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Demo3Action 继承了 ActionSupport 类…&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--继承 ActionSupport 类的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;demo3Action&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.action1.Demo3Action&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Action-的访问"><a href="#Action-的访问" class="headerlink" title="Action 的访问"></a>Action 的访问</h2><h3 id="传统的配置方式"><a href="#传统的配置方式" class="headerlink" title="传统的配置方式"></a>传统的配置方式</h3><p>通过 <code>&lt;action&gt;</code> 标签中的 <code>method</code> 属性，访问到 Action 中的具体的方法。</p><ul><li>传统的配置方式，配置更清晰更好理解！但是扩展需要修改配置文件等！</li></ul><h4 id="具体的实例如下："><a href="#具体的实例如下：" class="headerlink" title="具体的实例如下："></a>具体的实例如下：</h4><ul><li>页面代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">H3</span>&gt;</span>传统的配置文件的方式<span class="tag">&lt;/<span class="name">H3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;pageContext.request.contextPath&#125;/saveCust.action&quot;</span>&gt;</span>保存客户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;pageContext.request.contextPath&#125;/updCust.action&quot;</span>&gt;</span>修改客户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置文件的代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--传统方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;saveCust&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.action2.CustomerAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;save&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;updCust&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.action2.CustomerAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;update&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Action 的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写客户的 Action 类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存客户…&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改用户…&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通配符的访问方式"><a href="#通配符的访问方式" class="headerlink" title="通配符的访问方式"></a>通配符的访问方式</h3><p>（访问的路径和方法的名称必须要有某种联系）</p><p>通配符就是 <code>*</code> 代表任意的字符</p><ul><li>使用通配符的方式可以简化配置文件的代码编写，而且扩展和维护比较容易。</li></ul><h4 id="具体实例如下："><a href="#具体实例如下：" class="headerlink" title="具体实例如下："></a>具体实例如下：</h4><ul><li>页面代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">H3</span>&gt;</span>通配符配置文件的方式<span class="tag">&lt;/<span class="name">H3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;pageContext.request.contextPath&#125;/linkman_save.action&quot;</span>&gt;</span>保存联系人<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;pageContext.request.contextPath&#125;/linkman_update.action&quot;</span>&gt;</span>修改联系人<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置文件代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通配符的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;linkman_*&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.action2.LinkmanAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&#123;1&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;saveOK&quot;</span>&gt;</span>/demo2/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Action 的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用联系人来测试通配符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkmanAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存联系人…&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;saveOK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改联系人…&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体理解：在 JSP 页面发送请求，<code>http://localhost:9090/demo2/linkman_save.action</code>，配置文件中的 <code>linkman_*</code> 可以匹配该请求，<code>*</code> 就相当于变成了 <code>add</code>，<code>method</code> 属性的值使用 <code>&#123;1&#125;</code> 来代替，<code>&#123;1&#125;</code> 就表示的是第一个 <code>*</code> 号的位置！！所以 <code>method</code> 的值就等于了 <code>add</code>，那么就找到 <code>Action</code> 类中的 <code>add</code> 方法，那么 <code>add</code> 方法就执行了！</li></ul><h3 id="动态方法访问的方式"><a href="#动态方法访问的方式" class="headerlink" title="动态方法访问的方式"></a>动态方法访问的方式</h3><p>（有的开发中也会使用这种方式）</p><ul><li><p>如果想完成动态方法访问的方式，需要开启一个常量，<code>struts.enable.DynamicMethodInvocation = false</code>，把值设置成 <code>true</code>。</p></li><li><p>注意：不同的 <code>Struts2</code> 框架的版本，该常量的值不一定是 <code>true</code> 或者 <code>false</code>，需要自己来看一下。如果是 <code>false</code>，需要自己开启。</p></li><li><p>在 <code>struts.xml</code> 中开启该常量。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启动态方法访问 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.enable.DynamicMethodInvocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="具体实例如下：-1"><a href="#具体实例如下：-1" class="headerlink" title="具体实例如下："></a>具体实例如下：</h4><ul><li>页面的代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">H3</span>&gt;</span>动态方法访问的方式<span class="tag">&lt;/<span class="name">H3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;pageContext.request.contextPath&#125;/user!save.action&quot;</span>&gt;</span>保存用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;pageContext.request.contextPath&#125;/user!update.action&quot;</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置文件代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置动态方法访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.action2.UserAction&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Action的类的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存用户…&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改用户…&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>Struts2 框架主要以下几个步骤：</p><h3 id="编写-web-xml-前端控制器"><a href="#编写-web-xml-前端控制器" class="headerlink" title="编写 web.xml 前端控制器"></a>编写 <code>web.xml</code> 前端控制器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写-struts-xml-配置文件"><a href="#编写-struts-xml-配置文件" class="headerlink" title="编写 struts.xml 配置文件"></a>编写 <code>struts.xml</code> 配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.action2.LinkmanAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&#123;1&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;saveOK&quot;</span>&gt;</span>/demo2/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写-Action-类-1"><a href="#编写-Action-类-1" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h3><ul><li><p>一般继承 <code>ActionSupport</code> 类</p></li><li><p><code>&lt;action&gt;</code> 访问配置一般使用 <code>通配符</code> 的方式：</p></li></ul><p><code>name=&quot;user_*&quot; method=&quot;&#123;1&#125;&quot;</code></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世间安得双全法，不负如来不负卿</title>
      <link href="/novel-nverqing.html"/>
      <url>/novel-nverqing.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div><img src="../../images/novel/nverqing01.jpg"></div><div>图源微博：<a href="https://weibo.com/p/1005053965448819/home?from=page_100505&mod=TAB&is_all=1#place">青暮从山</a></div><span id="more"></span><hr/><h1 id="世间安得双全法，不负如来不负卿。"><a href="#世间安得双全法，不负如来不负卿。" class="headerlink" title="世间安得双全法，不负如来不负卿。"></a>世间安得双全法，不负如来不负卿。</h1><p>唐玄奘师徒四人取经之路历经千难万险，为的是求取至高无上的佛法佛理，凭的是普渡众生的苍生大义。</p><p>这一路，最难的不是遇到妖魔鬼怪，也不是碰到魔女画皮，更不是什么蝎子精蜘蛛精。</p><p>而是唐玄奘的心魔，或者说是情劫。</p><p>佛曰：色即是空，空即是色。</p><p>不惧大风大浪、高山戈壁，也不怕魑魅魍魉、鬼怪妖邪，最怕的是和尚没了取经的念头啊。</p><h2 id="（一）缘起"><a href="#（一）缘起" class="headerlink" title="（一）缘起"></a>（一）缘起</h2><p>却说这一日，碧空如洗，和风习习。</p><p>小船悠悠，师徒四人不知不觉就来到了西梁女国了。</p><p>唐玄奘虽也是见过大风大浪的人，可还是第一次来到一个只有女子的国度。</p><p>走在大街上，周围投射来新奇又热烈的目光，玄奘只觉得浑身不自在。</p><p>心中默念“阿弥陀佛”，一心只想着赶快换了通关文牒，离开这个是非之地。</p><p>女王听闻唐朝高僧觐见，闪凤目，簇蛾眉，仔细观看，果然一表非凡。</p><p>丰姿英伟，相貌轩昂。齿白如银砌，唇红口四方。顶平额阔天仓满，目秀眉清地阁长。两耳有轮真杰士，一身不俗是才郎。好个妙龄聪俊风流子，堪配西梁窈窕娘。<sup>[1]</sup></p><p>玄奘见到女王陛下，双手合十，恭敬的行礼：“贫僧唐三藏参见女王陛下”。</p><p>却见没有声响。</p><p>连忙继续“贫僧唐三藏参见女王陛下”。还是没有回应。</p><p>无奈只得再拜“贫僧唐三藏参见女王陛下”。玄奘却不知，这女王正细细端详着他的面庞出神，哪听得到他在说什么。</p><p>玄奘本想着通关文牒上加盖宝印是很简单的事，却没料想女王陛下让他与徒儿先到馆驿休息。</p><h2 id="（二）梦"><a href="#（二）梦" class="headerlink" title="（二）梦"></a>（二）梦</h2><blockquote><p>此部分对话皆来自<code>央视 86 版《西游记》第十六集《趣经女儿国》台词。</code><sup>[2]</sup></p></blockquote><p>夜里，檀香缭绕，女王独坐窗前，画笔下轻轻勾勒着，画上的人可不就是今天来的大唐高僧吗。</p><p>闻得太师唤她，女王连忙用绢布将画遮起来。</p><p>女王禁不住心下欣喜，同太师说道：“想我西梁女国，从未有过男子，今日有幸，天赐唐王御弟下降。我想这是千载难逢的机缘，愿以一国之富，招他为王，我为王后。”</p><p>深夜，女王倚着软塌，望着唐三藏的画像，渐渐陷入了沉睡。</p><p>这夜，她做了一个梦。</p><p>梦里，他为王，她为后。</p><p>梦里，他们策马驰骋。</p><p>梦里，他们相互依偎，同游御花园…</p><p>梦醒，却是一阵阵失落。</p><p>翌日，依着梦境，女王邀玄奘同游御花园。</p><p>女王莲步轻移，谈天说地，玄奘却一直恭恭敬敬，时刻与女王保持着距离。</p><p>“你看那戏水鸳鸯，如胶似漆，多么欢快，你说是吗？”</p><p>玄奘拱手道：“陛下看的真切，贫僧不曾留意。”</p><p>“御弟哥哥，为什么天地间的鸟呀、蝶呀，都要成对成双的呢？”</p><p>“这事自有天地以来便是如此。”</p><p>“御弟……哥哥……”</p><p>“陛下……”</p><p>女王眸中泛着微光，带着哭腔央求道：“不去取经行不行？”</p><p>“这……哎……”玄奘轻叹一声，不知如何回应。</p><p>只听女王叹道：“为什么世间还有像我们这样的孤男寡女，不能成双成对？”</p><p>玄奘连忙说，“陛下，贫僧许身佛门，正是为了解救芸芸众生，使世上不再有杀伐纷争，使人间不再有怨女旷夫。”</p><p>“既然御弟哥哥有如此情怀，那么眼前就有需要你解救的芸芸众生！”</p><p>女王无奈，你只知解救芸芸众生，却不救救我？</p><p>“哎……陛下，贫僧取经心切，还望陛下早日发放通关牒文。”</p><p>“今日且莫谈取经之事，御弟哥哥，你看这御花园中春光明媚，景色怡人，我再陪哥哥流连观赏一番，好吗？”</p><p>且看湖中鸳鸯戏水，桥上人成双成对。</p><p>女王看着玄奘，眸中柔情似水。</p><div align="center"><img src="../../images/novel/nverqing06.jpg"></div><h2 id="（三）情动"><a href="#（三）情动" class="headerlink" title="（三）情动"></a>（三）情动</h2><blockquote><p>此部分对话皆来自<code>央视 86 版《西游记》第十六集《趣经女儿国》台词。</code><sup>[2]</sup></p></blockquote><p>是夜，女王以“夜赏国宝”为由将玄奘请至自己的寝殿。</p><p>玄奘来到之后才恍然过来，急忙给女王解释道：“太师领贫僧夜赏国宝，不知为何闯到陛下寝宫？”</p><p>只闻帘后人温柔至极，“御弟哥哥，那就请观赏国宝吧！”</p><p>床帘徐徐展开，只见床上人斜倚塌前，薄纱缚身，丹唇轻启，头戴高簪珠翠，一副雍容华贵之姿。</p><p>玄奘闻言，又看到这一幕，耳红面赤，羞答答不敢抬头。</p><p>“难道在御弟哥哥眼里，我还算不得国宝吗？”</p><p>说着，女王捧起一盏烛火向玄奘走来。</p><p>玄奘早已慌得不知如何是好，不敢正面看她，却忍不住偷偷看她的背影。</p><p>“哥哥你看，这烛光也知人情，欲照今日之喜。”</p><p>“不知陛下喜从何来？”</p><p>“我身为女王，饱享荣华富贵，可是，从未享受过人间欢乐。今日哥哥到此，真乃天赐良缘。来日哥哥登上宝座，我为王后，从此双宿双飞，这不是万千之喜吗？”</p><p>玄奘目光移向别处，使自己快速镇静下来。“佛心四大皆空，贫僧尘念已绝，无缘消受人间富贵。阿弥陀佛…”</p><p>说完，紧闭双眼，不敢再多看一眼。</p><p>女王依旧巧笑嫣然，如若月里嫦娥到此一般，美得不可方物。</p><p>“你说四大皆空，却紧闭双眼。要是你睁开眼睛看看我，我不相信你两眼空空。”</p><p>玄奘眯着眼看了看，但又很快紧闭双眼，嘴中不停念叨着阿弥陀佛。</p><p>“不敢睁眼看我，还说什么四大皆空呢？”女王看着他颤抖的唇和额头的汗珠，笑意盈盈的反驳他。</p><p>玄奘无奈，睁开眼看向女王。</p><p>只见眼前人，眉如翠羽，肌似羊脂。脸衬桃花瓣，鬟堆金凤丝。秋波湛湛妖娆态，春笋纤纤妖媚姿。斜軃红绡飘彩艳，高簪珠翠显光辉。<sup>[3]</sup></p><p>这一眼看得他呆了很久很久，他的额头又一次布满了细密的汗珠。</p><p>玄奘连忙回过神来，眼睛移向别处，匆忙用袖子擦拭额头的汗，又念了句“阿弥陀佛”。</p><p>“哥哥，别闭上，睁开眼睛吧。”</p><p>“你就睁开眼睛吧。”</p><p>玄奘摇头，“我就是睁眼看你，又能怎样？”</p><p>“哥哥……”</p><p>说着，女王趴在玄奘肩上，拽着他的袈裟袖子，无限暧昧。</p><p>玄奘慌了，连忙起身将袖子从她手中拽出。却不想拉扯之间，对方突然放手，自己躺倒在了女王的床上。</p><p>玄奘欲起身，却见女王口中不停唤着“哥哥…哥哥…”，将他又一次推倒在床上。</p><p>玄奘想反抗，却手忙脚乱不知如何是好，时刻把持着尺度。</p><p>女王幽怨的看着他，“哥哥，你难道真的不喜欢我吗？”</p><p>玄奘犹豫了，他心里似云海翻涌，不知道怎么作答。只得偏过头去，不让女王看见自己的表情。</p><p>女王看着他的样子，更加贴近他，温言软语：“今夜良宵难得，你就答应了我吧”</p><p>玄奘长呼一口气，镇静如初，“女王陛下，贫僧已许身佛门，与大唐天子有诺在先，还望女王陛下放了贫僧西去。”</p><p>说着，顿了顿，玄奘缓缓转过头来，看着她的背影说道：“来世若有缘分……”</p><p>后面的话犹豫了很久说不出口，玄奘也许真的动了心吧。今世无缘，只能来世再续。</p><p>女王听闻，心中一喜，若论来世，谁又说的准呢。“我只想今生，不想来世。今生今世，我们俩是有缘分的。”</p><p>说着，头倚在玄奘肩上。</p><p>良辰美景，灯光烛影之间，两人你侬我侬。</p><p>玄奘欲拒还迎，虽故作镇静，但凡心已动，怎奈终究摆脱不了女王。</p><h2 id="（四）不负如来"><a href="#（四）不负如来" class="headerlink" title="（四）不负如来"></a>（四）不负如来</h2><p>却说唐玄奘被那蝎子精掳走，这妖精山洞中灯红酒绿，一副洞房的装扮。</p><p>同样是绝世美人儿，玄奘却对那蝎子精提不起一点兴趣。</p><p>即使她不是妖怪，即使她再怎么美艳动人，在玄奘眼中只有嫌弃。</p><p>玄奘一个出家人自然不懂自己心里的变化。</p><p>脑海里依旧浮现着女王的一颦一笑，极尽温柔，极尽欢乐。</p><p>玄奘不知道自己动没动情。</p><p>他自己不知道，他也不想知道。</p><p>面对一个『情』字，七情六欲皆无的玄奘居然选择了逃避。</p><p>他怕的是什么？什么王权富贵，什么戒律清规？</p><p>他怕的是，如果动情了，就负了如来；如果不动情，就辜负了“她”。</p><h2 id="（五）相见难，别亦难"><a href="#（五）相见难，别亦难" class="headerlink" title="（五）相见难，别亦难"></a>（五）相见难，别亦难</h2><p>待到临行女儿国之际，女王依依不舍的在通关文牒上盖上印章。</p><p>女王哀怨的看着玄奘，舍不得与他分离。身为女王，却留不住这个凡人。</p><p>那天，她一直送他到城外。</p><p>这一路上，两人没有说过一句话。</p><p>这段路，是女王走过的最长的路，也是女王最不想走完的一段路。</p><p>这段路，是玄奘走的最不舒服的一段路，虽有佳人在侧，却如鲠在喉。</p><p>直到城外，玄奘打破了沉默，“陛下，请留步！”。</p><p>女王看着她，欲语还休，怎诉这胸中蜜语万千。只怨今生无缘，道不尽声声珍重，默默地祝君一路平安。</p><p>女王唇齿轻咬，似乎是做了很大的一个决定，将关文递给眼前人。</p><p>玄奘接过关文，对女王拱手道：“多谢陛下。”</p><p>这里，玄奘行的是俗家礼，只因尘缘未了，只有等到来世…</p><p>奈何戒律清规，奈何天子之诺，奈何芸芸众生，玄奘纵有万般不舍，也只得策马扬鞭，西行而去。</p><p>她在城头似哭似笑，当着百官的面对着他的背影大喊：“御弟哥哥……”千言万语梗在胸中，无法诉说。</p><p>夕阳下，玄奘勒马回头，只看了一眼。遂又毅然决然扬鞭而去…</p><p>只留女王，孑然一人，孤立城头。</p><p>“唐玄奘，下辈子娶我可好？”</p><p>风沙漫天，看不见他的表情，也看不见她脸上的泪痕。</p><p>僧人不语，只余风声喧嚣。</p><div align="center"><img src="../../images/novel/nverqing02.jpg"></div><h2 id="（六）圆寂"><a href="#（六）圆寂" class="headerlink" title="（六）圆寂"></a>（六）圆寂</h2><p>玄奘走后的日子，女王日日思君不见君。从来不相信一见钟情的女王，居然败给了一个和尚。</p><p>佛门无尘缘。你许我来生，可你既已成佛，又何来来世？</p><p>女王只得在闭塞的女儿国内，努力打探着外界的消息，尤其是关于他的一点一滴。</p><p>听闻他取得真经，听闻他受万人朝拜。女王为他高兴，也为自己难过。</p><p>数十年的等待，如今女王已人老珠黄。若玄奘你回来，还会认得这个人吗。</p><p>女王不过是凡人，有七情六欲，也有生老病死。若说来生，谁还记得谁？</p><p>这天，有属下来报，白马寺玄奘法师圆寂。</p><p>如晴天霹雳般，女王瘫倒在塌，泪流满面。</p><p>颤颤巍巍的她来到御花园，看着湖中鸳鸯戏水，园中彩蝶翩翩，想起和御弟哥哥的那一幕幕。</p><p>宫中议论纷纷，隐约可以听到有宫女说道：</p><p>『 听说那唐朝和尚圆寂的时候，千佛诵经，万众朝宗，他走的时候只笑着留下一句：“好！” 』</p><div align="center"><img src="../../images/novel/nverqing05.jpg"></div><br><p>犹记得那日两人分别时，女王对着他的背影大喊：</p><p>“唐玄奘，下辈子娶我可好？”</p><h2 id="（七）成佛"><a href="#（七）成佛" class="headerlink" title="（七）成佛"></a>（七）成佛</h2><p>玄奘取得真经，回到白马寺，受万人敬仰。每日吃斋念佛，诵经以普度众生。</p><p>两耳不闻窗外事，但是他真的忘了那段情劫吗？</p><p>玄奘本乃金蝉子转世，圆寂后成佛，世称“旃檀功德佛”。</p><div align="center"><img src="../../images/novel/nverqing04.jpg"></div><br><p>前世的许诺玄奘还记得，但既身已成佛，心亦要剔除七情六欲。</p><p>佛不比前世的唐朝和尚，那时尚可动情，现在心止如死水。</p><p>佛曰：人生有八苦：生，老，病，死，爱别离，怨长久，求不得，放不下。</p><p>佛又曰：一切有为法，如梦幻泡影。如露亦如电，应作如是观。</p><p>果真是生劫易渡，情劫难了。</p><p>始于必经之劫，终于苍生大义。</p><hr><h1 id="女王"><a href="#女王" class="headerlink" title="女王"></a>女王</h1><blockquote class="blockquote-center">我做了一个梦，<br/>你蓄起了长发，<br/>我们一起慢慢变老。</blockquote><p>我不后悔遇见你。</p><p>我也不后悔遇见你之后爱上你。</p><p>我更不后悔守着你许诺的来世等了你数多载。</p><p>我身为一国之主，却留不住你这个凡人。</p><p>何以缘起，何以缘灭。若是没遇见，错过便是错过。</p><p>可是一旦遇见了，一旦动了情，又怎叫人放得下。</p><p>你心中只有众生和戒律清规，可是我心中却只有你。</p><p>一个人孤寂的等了你那么多年，最后等来了你圆寂的消息。</p><p>至此，我也就断了这世间的一切念想了。</p><p>这世间没了你，我要怎么活？</p><hr><h1 id="玄奘"><a href="#玄奘" class="headerlink" title="玄奘"></a>玄奘</h1><blockquote class="blockquote-center">世间安得双全法，不负如来不负卿。</blockquote><p>如果动情了，就负了如来；如果不动情，就辜负了“她”。</p><div align="center"><img src="../../images/novel/nverqing03.jpg"></div><br><p>我本是如来二弟子金蝉子，只因不听佛祖说法，轻漫佛法，转世为大唐高僧。奉观世音菩萨之命前往西天大雷音寺求取大乘佛法，普渡众生。</p><p>直到我来到西梁女国，见到了那位花颜月貌的女王。</p><p>我觉得我难逃此劫了……</p><p>不知道为什么，我不敢看她的眼睛，我也不敢和她多说话。</p><p>但是看到她明媚的笑我又会很欢喜，虽然极力控制着自己。</p><p>是否我这个出家人真的动了情？</p><p>我一直都在躲避这个问题，让自己不要去想，我以为不去想就会忘掉这一切。</p><p>那一夜，烛火摇曳，我差点就万劫不复。</p><p>多亏了蝎子精横插一脚，我想这便是佛祖派蝎子精来警告我的。</p><p>想起自己身负拯救苍生的使命，纵使千世万世无欲无情也在所不惜。</p><p>『 曾虑多情损梵行，入山又恐别倾城。世间安得双全法，不负如来不负卿。 』</p><p>终究没有负了如来，却负了你。</p><p>今世的你是什么身份，今世的你又在哪里。</p><p>也许有情，奈何缘浅。</p><!-- <hr># 番外 - 今生2004 年《艺术人生》，西游记剧组再聚首。女儿国王扮演者朱琳，上场后深情凝视着徐少华：“自女儿国一别，至今已经二十载…御弟哥哥，别来无恙。”岁月的车轮驶过，美丽的女王脸上已现皱纹，但仍姿色不减当年。虽然看似说的很随意，但语气明显颤抖着，极力压抑着。徐少华闻言，也当场红了眼眶。也许有情，奈何缘浅。 --><!-- <hr># 悟空多年后，身为斗战胜佛的我还会想起曾经西天取经所经历的每一道劫难。这是一个漫长的过程，这也是我的成佛之路。这一路上，记不得杀死了多少妖怪，也记不得被那和尚赶走过多少次。原本心性顽劣的齐天大圣，也渐渐磨去棱角，成了佛。要说取经路上，遇到再怎么强大的妖怪我都不怕。可是，我最怕的是，那和尚没了取经的念头。记得那是在西梁女国，和尚居然动了凡心，差点就……离开女儿国后，经常看到和尚一个人坐着发呆。夜里隐约能听到和尚说梦话的声音。我本是一石猴，不懂什么情情爱爱的。但我能感受到和尚经过女儿国一劫后确实变了。之后的他意志更为坚定，一步一个脚印誓要求取真经。无论遇到什么样的美女妖怪。女儿国或许是和尚最难过的一关吧！<hr> --><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><p><a href="https://www.bilibili.com/video/av5973539">B站 - 【西游记女儿国国王】之 浮生相思梦</a></p><p>文中所用图源于微博：<a href="https://weibo.com/p/1005053965448819/home?from=page_100505&mod=TAB&is_all=1#place">青暮从山</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">《西游记》第五十四回-法性西来逢女国，心猿定计脱烟花：女王闪凤目，簇蛾眉，仔细观看，果然一表非凡，你看他丰姿英伟，相貌轩昂。齿白如银砌，唇红口四方。顶平额阔天仓满，目秀眉清地阁长。两耳有轮真杰士，一身不俗是才郎。好个妙龄聪俊风流子，堪配西梁窈窕娘。<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">央视 86 版《西游记》第十六集《趣经女儿国》台词。<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">《西游记》第五十四回-法性西来逢女国，心猿定计脱烟花：猪八戒在旁，掬着嘴，饧眼观看那女王，却也袅娜，真个眉如翠羽，肌似羊脂。脸衬桃花瓣，鬟堆金凤丝。秋波湛湛妖娆态，春笋纤纤妖媚姿。斜軃红绡飘彩艳，高簪珠翠显光辉。说什么昭君美貌，果然是赛过西施。柳腰微展鸣金珮，莲步轻移动玉肢。月里嫦娥难到此，九天仙子怎如斯。宫妆巧样非凡类，诚然王母降瑶池。<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Novel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Hibernate 查询方式与策略优化</title>
      <link href="/JavaWeb-Hibernate05.html"/>
      <url>/JavaWeb-Hibernate05.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/hibernate0500.png"></div><p id="div-border-left-green">Hibernate 查询方式与策略优化</p><span id="more"></span><hr><h1 id="Hibernate-框架的查询方式"><a href="#Hibernate-框架的查询方式" class="headerlink" title="Hibernate 框架的查询方式"></a>Hibernate 框架的查询方式</h1><hr><ul><li>唯一标识 OID 的检索方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.get(对象.class,OID);</span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> session.get(Customer.class, <span class="number">1L</span>);</span><br></pre></td></tr></table></figure><ul><li>对象的导航的方式</li></ul><p>比如，查询客户下的联系人：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Customer.getLinkmans();</span><br></pre></td></tr></table></figure><ul><li>HQL 的检索方式</li></ul><p>（Hibernate Query Language）    – Hibernate 的查询语言</p><ul><li>QBC 的检索方式</li></ul><p>（Query By Criteria）    – 条件查询</p><ul><li>SQL 检索方式（了解）</li></ul><p>本地的SQL检索</p><h2 id="HQL-查询"><a href="#HQL-查询" class="headerlink" title="HQL 查询"></a>HQL 查询</h2><h3 id="HQL-概述"><a href="#HQL-概述" class="headerlink" title="HQL 概述**"></a>HQL 概述**</h3><h4 id="HQL-的介绍"><a href="#HQL-的介绍" class="headerlink" title="HQL 的介绍"></a>HQL 的介绍</h4><ul><li><code>HQL</code> (Hibernate Query Language) 是面向对象的查询语言, 它和 SQL 查询语言有些相似。</li><li>在 Hibernate 提供的各种检索方式中, HQL 是使用最广的一种检索方式</li></ul><h4 id="HQL-与-SQL-的关系"><a href="#HQL-与-SQL-的关系" class="headerlink" title="HQL 与 SQL 的关系"></a>HQL 与 SQL 的关系</h4><ul><li>HQL 查询语句是面向对象的，Hibernate 负责解析 HQL 查询语句，然后根据对象-关系映射文件中的映射信息，把 HQL 查询语句翻译成相应的 SQL 语句。</li><li>HQL 查询语句中的主体是域模型中的类及类的属性；</li><li>SQL 查询语句是与关系数据库绑定在一起的。SQL 查询语句中的主体是数据库表及表的字段。</li></ul><h3 id="HQL-的基本查询"><a href="#HQL-的基本查询" class="headerlink" title="HQL 的基本查询"></a>HQL 的基本查询</h3><h4 id="HQL-基本的查询格式"><a href="#HQL-基本的查询格式" class="headerlink" title="HQL 基本的查询格式"></a>HQL 基本的查询格式</h4><ul><li><p>支持 <code>方法链</code> 的编程，即直接调用 <code>list()</code> 方法</p></li><li><p>简单的代码如下</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.createQuery(<span class="string">&quot;from Customer&quot;</span>).list();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本查询的演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> session.createQuery(<span class="string">&quot;from Customer&quot;</span>);</span><br><span class="line">    List&lt;Customer&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用别名的方式"><a href="#使用别名的方式" class="headerlink" title="使用别名的方式"></a>使用别名的方式</h4><ul><li>可以使用别名的方式</li></ul><p>不能出现 <code>*</code>，即不能 <code>select * from Customer c</code> <strong>✖</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.createQuery(<span class="string">&quot;from Customer c&quot;</span>).list();</span><br><span class="line">session.createQuery(<span class="string">&quot;select c from Customer c&quot;</span>).list();</span><br></pre></td></tr></table></figure><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>排序查询和 SQL 语句中的排序的语法是一样的：</p><ul><li>升序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.createQuery(<span class="string">&quot;from Customer order by cust_id&quot;</span>).list();</span><br></pre></td></tr></table></figure><ul><li>降序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.createQuery(<span class="string">&quot;from Customer order by cust_id desc&quot;</span>).list();</span><br></pre></td></tr></table></figure><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>不论使用的是 MySQL 还是 Oracle，都可以使用 Hibernate 框架提供的分页方法。</p><ul><li>两个方法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setFirstResult(a);        <span class="comment">// 从哪条记录开始，如果查询是从第一条开始，值是 0</span></span><br><span class="line">setMaxResults(b);     <span class="comment">// 每页查询的记录条数</span></span><br></pre></td></tr></table></figure><ul><li>演示代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;LinkMan&gt; list = session.createQuery(<span class="string">&quot;from LinkMan&quot;</span>).setFirstResult(<span class="number">0</span>).setMaxResults().list();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">    <span class="comment">// 查询联系人</span></span><br><span class="line">    <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> session.createQuery(<span class="string">&quot;from Linkman l order by l.lkm_id&quot;</span>);</span><br><span class="line">    <span class="comment">// 分页查询，调用方法，查询第一页的数据 1-3 条</span></span><br><span class="line">    query.setFirstResult(<span class="number">0</span>);</span><br><span class="line">    query.setMaxResults(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Linkman&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span>(Linkman linkman:list)&#123;</span><br><span class="line">        System.out.println(linkman);</span><br><span class="line">    &#125;</span><br><span class="line">    tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul><li><p><code>setParameter(&quot;?号的位置，默认从0开始&quot;,&quot;参数的值&quot;);</code> 不用考虑参数的具体类型</p></li><li><p>按位置绑定参数的条件查询（指定下标值，默认从 0 开始）</p></li><li><p>按名称绑定参数的条件查询（HQL语句中的 ? 号换成 :名称 的方式）</p></li></ul><p>例如代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">    <span class="comment">// 查询联系人</span></span><br><span class="line">    <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> session.createQuery(<span class="string">&quot;from Linkman l where l.lkm_gender = ?&quot;</span>);</span><br><span class="line">    <span class="comment">// 传入值</span></span><br><span class="line">    <span class="comment">// query.setString(0, &quot;男&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Query query = session.createQuery(&quot;from Linkman l where l.lkm_id &gt; 2&quot;);</span></span><br><span class="line">    <span class="comment">// query.setLong(0, 2L);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的方法，不用判断具体的类型</span></span><br><span class="line">    query.setParameter(<span class="number">0</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    List&lt;Linkman&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Linkman linkman : list) &#123;</span><br><span class="line">        System.out.println(linkman);</span><br><span class="line">    &#125;</span><br><span class="line">    tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HQL-的投影查询"><a href="#HQL-的投影查询" class="headerlink" title="HQL 的投影查询"></a>HQL 的投影查询</h3><p>投影查询就是想查询某一字段的值或者某几个字段的值。</p><p>投影查询的案例：</p><ul><li>如果查询多个字段，例如下面这种方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object[]&gt; list = session.createQuery(<span class="string">&quot;select c.cust_name,c.cust_level from Customer c&quot;</span>).list();</span><br><span class="line"><span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">    System.out.println(Arrays.toString(objects));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果查询两个字段，也可以把这两个字段封装到对象中</li></ul><blockquote><p>先在持久化类中 <code>提供对应字段的构造方法</code>（不要忘了空的构造方法）<br>语句也要像下面一样发生改变</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">&quot;select new Customer(c.cust_name,c.cust_level) from Customer c&quot;</span>).list();</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">    System.out.println(customer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="聚合函数查询"><a href="#聚合函数查询" class="headerlink" title="聚合函数查询"></a>聚合函数查询</h3><p><code>count()</code>、<code>sum()</code>、<code>avg()</code>、<code>max()</code>、<code>min()</code>等。</p><h4 id="获取总的记录数"><a href="#获取总的记录数" class="headerlink" title="获取总的记录数"></a>获取总的记录数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"><span class="comment">// 也可以是 select count(*) from Customer</span></span><br><span class="line">List&lt;Number&gt; list = session.createQuery(<span class="string">&quot;select count(c) from Customer c&quot;</span>).list();</span><br><span class="line"><span class="comment">// 通过下标取值</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> list.get(<span class="number">0</span>).longValue();</span><br><span class="line">System.out.println(count);</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure><h4 id="获取某一列数据的和"><a href="#获取某一列数据的和" class="headerlink" title="获取某一列数据的和"></a>获取某一列数据的和</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">List&lt;Number&gt; list = session.createQuery(<span class="string">&quot;select sum(c.cust_id) from Customer c&quot;</span>).list();</span><br><span class="line"><span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> list.get(<span class="number">0</span>).longValue();</span><br><span class="line">System.out.println(count);</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure><h3 id="HQL-多表查询"><a href="#HQL-多表查询" class="headerlink" title="HQL 多表查询"></a>HQL 多表查询</h3><h4 id="多表的查询"><a href="#多表的查询" class="headerlink" title="多表的查询"></a>多表的查询</h4><p>HQL 语句和 SQL 语句的查询语法比较类似。</p><h5 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h5><ul><li>显示内连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customers c <span class="keyword">inner</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> c.cid <span class="operator">=</span> o.cno;</span><br></pre></td></tr></table></figure><ul><li>隐式内连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customers c,orders o <span class="keyword">where</span> c.cid <span class="operator">=</span> o.cno;</span><br></pre></td></tr></table></figure><h5 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h5><ul><li>左外连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customers c <span class="keyword">left</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> c.cid <span class="operator">=</span> o.cno;</span><br></pre></td></tr></table></figure><ul><li>右外连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customers c <span class="keyword">right</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> c.cid <span class="operator">=</span> o.cno;</span><br></pre></td></tr></table></figure><h4 id="迫切和非迫切"><a href="#迫切和非迫切" class="headerlink" title="迫切和非迫切"></a>迫切和非迫切</h4><ul><li><p>非迫切返回结果是 <code>Object[]</code></p></li><li><p>迫切连接返回的结果是对象，把客户的信息封装到客户的对象中，把订单的信息封装到客户的 <code>Set</code> 集合中。</p></li></ul><h4 id="内连接查询-1"><a href="#内连接查询-1" class="headerlink" title="内连接查询"></a>内连接查询</h4><ul><li>内连接使用 <code>inner join</code> ，默认返回的是 <code>Object</code> 数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内连接，数据默认返回的是数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认返回数组</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> session.createQuery(<span class="string">&quot;from Customer c inner join c.linkmans&quot;</span>);</span><br><span class="line">List&lt;Object[]&gt; list = query.list();</span><br><span class="line"><span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">System.out.println(Arrays.toString(objects));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>迫切内连接: <code>inner join fetch</code> ，返回的是实体对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内连接，数据默认返回的是数组</span></span><br><span class="line"><span class="comment"> * 把数据封装到对象中</span></span><br><span class="line"><span class="comment"> * 使用关键字：fetch 迫切连接，这样就会把数据封装到对象中</span></span><br><span class="line"><span class="comment"> * 此时数据会重复</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 fetch 迫切连接，封装数据</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> session.createQuery(<span class="string">&quot;from Customer c inner join fetch c.linkmans&quot;</span>);</span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决数据重复：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决数据的重复问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> session.createQuery(<span class="string">&quot;from Customer c inner join fetch c.linkmans&quot;</span>);</span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br><span class="line"><span class="comment">// 手动解决数据重复问题，编程中都使用这种方式来解决重复的问题</span></span><br><span class="line">Set&lt;Customer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(list);</span><br><span class="line"><span class="keyword">for</span> (Customer customer : set) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="左外连接查询"><a href="#左外连接查询" class="headerlink" title="左外连接查询"></a>左外连接查询</h4><ul><li><p>左外连接:封装成 <code>List&lt;Object[]&gt;</code></p></li><li><p>迫切左外连接</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">&quot;from Customer c left join fetch c.linkmans&quot;</span>).list();</span><br><span class="line">Set&lt;Customer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Customer&gt;(list);</span><br><span class="line"><span class="keyword">for</span> (Customer customer : set) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure><h2 id="QBC-查询"><a href="#QBC-查询" class="headerlink" title="QBC 查询"></a>QBC 查询</h2><p>QBC：<code>Query By Criteria</code>，按条件进行查询。</p><ul><li><p><code>Criteria</code>：代表一次查询；</p></li><li><p><code>Criterion</code>：代表一个查询条件；</p></li><li><p><code>Restrictions</code>：产生查询条件的工具类。</p></li></ul><h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><p>使用的是 <code>Criteria</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Customer&gt; list = session.createCriteria(Customer.class).list();</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">    System.out.println(customer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序查询-1"><a href="#排序查询-1" class="headerlink" title="排序查询"></a>排序查询</h3><ul><li><p>需要使用 <code>addOrder()</code> 的方法来设置参数，参数使用 <code>org.hibernate.criterion.Order</code> 对象。</p></li><li><p>具体代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"><span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> session.createCriteria(Linkman.class);</span><br><span class="line"><span class="comment">// 设置排序</span></span><br><span class="line"><span class="comment">// criteria.addOrder(Order.asc(&quot;lkm_id&quot;));</span></span><br><span class="line">criteria.addOrder(Order.desc(<span class="string">&quot;lkm_id&quot;</span>));</span><br><span class="line">List&lt;Linkman&gt; list = criteria.list();</span><br><span class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</span><br><span class="line">    System.out.println(linkman);</span><br><span class="line">&#125;</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure><h3 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h3><p><code>QBC</code> 的分页查询也是使用两个方法:</p><ul><li><p>setFirstResult();</p></li><li><p>setMaxResults();</p></li><li><p>代码如下;</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"><span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> session.createCriteria(Linkman.class);</span><br><span class="line"><span class="comment">// 设置排序</span></span><br><span class="line">criteria.addOrder(Order.desc(<span class="string">&quot;lkm_id&quot;</span>));</span><br><span class="line">criteria.setFirstResult(<span class="number">0</span>);</span><br><span class="line">criteria.setMaxResults(<span class="number">3</span>);</span><br><span class="line">List&lt;Linkman&gt; list = criteria.list();</span><br><span class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</span><br><span class="line">    System.out.println(linkman);</span><br><span class="line">&#125;</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure><h3 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h3><p><code>Criterion</code> 是查询条件的接口，<code>Restrictions</code> 类是 Hibernate 框架提供的工具类，使用该工具类来设置查询条件。</p><ul><li><p>条件查询使用 Criteria 接口的 <code>add</code> 方法，用来传入条件。</p></li><li><p>使用 <code>Restrictions</code> 的添加条件的方法，来添加条件，例如：</p></li></ul><table><thead><tr><th>方法</th><th align="center">含义</th></tr></thead><tbody><tr><td>Restrictions.eq</td><td align="center">相等</td></tr><tr><td>Restrictions.gt</td><td align="center">大于号</td></tr><tr><td>Restrictions.ge</td><td align="center">大于等于</td></tr><tr><td>Restrictions.lt</td><td align="center">小于</td></tr><tr><td>Restrictions.le</td><td align="center">小于等于</td></tr><tr><td>Restrictions.between</td><td align="center">在之间</td></tr><tr><td>Restrictions.like</td><td align="center">模糊查询</td></tr><tr><td>Restrictions.in</td><td align="center">范围</td></tr><tr><td>Restrictions.and</td><td align="center">并且</td></tr><tr><td>Restrictions.or</td><td align="center">或者</td></tr><tr><td>Restrictions.isNull</td><td align="center">查询某属性为空的值</td></tr></tbody></table><ul><li>测试代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"><span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> session.createCriteria(Linkman.class);</span><br><span class="line"><span class="comment">// 设置排序</span></span><br><span class="line">criteria.addOrder(Order.desc(<span class="string">&quot;lkm_id&quot;</span>));</span><br><span class="line"><span class="comment">// 设置查询条件</span></span><br><span class="line"><span class="comment">// Restrictions 提供静态的方法，拼接查询的条件</span></span><br><span class="line">criteria.add(Restrictions.or(Restrictions.eq(<span class="string">&quot;lkm_gender&quot;</span>, <span class="string">&quot;男&quot;</span>), Restrictions.gt(<span class="string">&quot;lkm_id&quot;</span>, <span class="number">3L</span>)));</span><br><span class="line">List&lt;Linkman&gt; list = criteria.list();</span><br><span class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</span><br><span class="line">    System.out.println(linkman);</span><br><span class="line">&#125;</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure><h3 id="聚合函数查询-1"><a href="#聚合函数查询-1" class="headerlink" title="聚合函数查询"></a>聚合函数查询</h3><p><code>Projection</code> 的聚合函数的接口，而 <code>Projections</code> 是 Hibernate 提供的工具类，使用该工具类设置聚合函数查询。</p><ul><li><p>使用 QBC 的聚合函数查询，需要使用 <code>criteria.setProjection()</code> 方法</p></li><li><p>具体的代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"><span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> session.createCriteria(Linkman.class);</span><br><span class="line">criteria.setProjection(Projections.rowCount());</span><br><span class="line">List&lt;Number&gt; list = criteria.list();</span><br><span class="line"><span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> list.get(<span class="number">0</span>).longValue();</span><br><span class="line">System.out.println(count);</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure><h3 id="离线条件查询"><a href="#离线条件查询" class="headerlink" title="离线条件查询"></a>离线条件查询</h3><p><strong>脱离 session，可以不使用 session 来创建。而是在 web 层创建对象。</strong></p><p>离线条件查询使用的是 <code>DetachedCriteria</code> 接口进行查询，离线条件查询对象在创建的时候，不需要使用 <code>Session</code> 对象，只是在查询的时候使用 <code>Session</code> 对象即可。</p><ul><li>创建离线条件查询对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DetachedCriteria</span> <span class="variable">criteria</span> <span class="operator">=</span> DetachedCriteria.forClass(Linkman.class);</span><br></pre></td></tr></table></figure><ul><li>具体的代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="type">DetachedCriteria</span> <span class="variable">criteria</span> <span class="operator">=</span> DetachedCriteria.forClass(Linkman.class);</span><br><span class="line"><span class="comment">// 设置查询条件</span></span><br><span class="line">criteria.add(Restrictions.eq(<span class="string">&quot;lkm_gender&quot;</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line">List&lt;Linkman&gt; list = criteria.getExecutableCriteria(session).list();</span><br><span class="line"><span class="keyword">for</span> (Linkman linkman : list) &#123;</span><br><span class="line">    System.out.println(linkman);</span><br><span class="line">&#125;</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure><h2 id="SQL-查询方式（了解）"><a href="#SQL-查询方式（了解）" class="headerlink" title="SQL 查询方式（了解）"></a>SQL 查询方式（了解）</h2><p>使用 Hibernate 框架一般不会使用 SQL 查询。</p><p>基本语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="type">SQLQuery</span> <span class="variable">sqlQuery</span> <span class="operator">=</span> session.createSQLQuery(<span class="string">&quot;select * from cst_linkman where lkm_gender = ?&quot;</span>);</span><br><span class="line">sqlQuery.setParameter(<span class="number">0</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="comment">// 通过方法设置，封装数据</span></span><br><span class="line">sqlQuery.addEntity(Linkman.class);</span><br><span class="line">List&lt;Linkman&gt; list = sqlQuery.list();</span><br><span class="line">System.out.println(list);</span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure><hr><h1 id="查询功能优化"><a href="#查询功能优化" class="headerlink" title="查询功能优化"></a>查询功能优化</h1><hr><p>没有好与坏之分，只有适合不适合，可根据需求自行优化。但一般都会使用默认的，除非有特殊需求。</p><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><p>延迟加载先获取到代理对象，当真正使用到该对象中的属性的时候，才会发送 SQL 语句，是 Hibernate 框架提升性能的方式。</p><h3 id="类级别的延迟加载"><a href="#类级别的延迟加载" class="headerlink" title="类级别的延迟加载"></a>类级别的延迟加载</h3><ul><li><p>Session 对象的 <code>get</code> 方法是没有延迟加载；</p></li><li><p>Session 对象的 <code>load</code> 方法默认就是 <code>延迟加载</code>；</p></li><li><p><code>Customer c1 = session.load(Customer.class, 1L);</code> 没有发送 SQL 语句，当使用该对象的属性时，才发送 SQL 语句。</p></li></ul><p>使类级别的延迟加载失效：</p><ul><li>在 <code>&lt;class&gt;</code> 标签上配置 <code>lazy=&quot;false&quot;</code></li></ul><p>或者：</p><ul><li><code>Hibernate.initialize(Object proxy);</code> 把对象先初始化一下。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hibernate.initialize(c1);</span><br></pre></td></tr></table></figure><h3 id="关联级别的延迟加载"><a href="#关联级别的延迟加载" class="headerlink" title="关联级别的延迟加载"></a>关联级别的延迟加载</h3><p>（查询某个客户，当查看该客户下的所有联系人是否是延迟加载）</p><ul><li>默认是延迟加载</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"><span class="type">Customer</span> <span class="variable">c</span> <span class="operator">=</span> session.get(Customer.class, <span class="number">1L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">System.out.println(c.getLinkmans().size()); <span class="comment">// 当查询客户下的联系人的时候才发送语句进行查询</span></span><br><span class="line">tr.commit();</span><br></pre></td></tr></table></figure><h3 id="关联级别延迟加载的策略"><a href="#关联级别延迟加载的策略" class="headerlink" title="关联级别延迟加载的策略"></a>关联级别延迟加载的策略</h3><p>查询策略：使用 Hibernate 查询一个对象的时候，查询其关联对象，应该如何查询，是 Hibernate 的一种优化手段！！</p><p>Hibernate 框架的检索策略解决的问题</p><h4 id="查询的时机"><a href="#查询的时机" class="headerlink" title="查询的时机"></a>查询的时机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Customer</span> <span class="variable">c1</span> <span class="operator">=</span> (Customer) session.get(Customer.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(c1.getLinkmans().size());</span><br></pre></td></tr></table></figure><ul><li><code>lazy</code> 属性解决查询的时机的问题，需要配置 <code>是否采用延迟加载</code>！！</li></ul><h4 id="查询的语句格式"><a href="#查询的语句格式" class="headerlink" title="查询的语句格式"></a>查询的语句格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">&quot;from Customer&quot;</span>).list();</span><br><span class="line"><span class="keyword">for</span>(Customer c : list)&#123;</span><br><span class="line">System.out.println(c.getLinkmans());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>fetch</code> 属性就可以解决 <code>查询语句的格式</code> 的问题！！</li></ul><h4 id="set-标签配置策略"><a href="#set-标签配置策略" class="headerlink" title="set 标签配置策略"></a>set 标签配置策略</h4><p>在 <code>&lt;set&gt;</code> 标签上使用 <code>fetch</code> 和 <code>lazy</code> 属性：</p><ul><li><code>fetch</code> 的取值– 控制 SQL 语句生成的格式</li></ul><blockquote><p><code>select</code>– 默认值。发送查询语句</p><p><code>join</code>– 连接查询。发送的是一条迫切左外连接！配置了 join，lazy 就失效了</p><p><code>subselect</code>– 子查询。发送一条子查询查询其关联对象。（需要使用 <code>list()</code> 方法进行测试）</p></blockquote><ul><li><code>lazy</code> 的取值– 查找关联对象的时候是否采用延迟!</li></ul><blockquote><p><code>true</code>– 默认。延迟</p><p><code>false</code>– 不延迟</p><p><code>extra</code>– 及其懒惰</p></blockquote><p><code>set</code> 标签上的默认值是 <code>fetch=&quot;select&quot;</code> 和 <code>lazy=&quot;true&quot;</code></p><p><strong>总结：</strong>Hibernate 框架都采用了默认值，开发中基本上使用的都是默认值。特殊情况再进行设置。</p><h4 id="many-to-one-标签配置策略"><a href="#many-to-one-标签配置策略" class="headerlink" title="many-to-one 标签配置策略"></a>many-to-one 标签配置策略</h4><p>在 <code>&lt;many-to-one&gt;</code> 标签上使用 <code>fetch</code> 和 <code>lazy</code> 属性</p><ul><li>fetch的取值– 控制SQL的格式.</li></ul><blockquote><p>select– 默认。发送基本select语句查询</p><p>join– 发送迫切左外连接查询</p></blockquote><ul><li>lazy的取值– 控制加载关联对象是否采用延迟</li></ul><blockquote><p>false– 不采用延迟加载。</p><p>proxy– 默认值。代理。现在是否采用延迟</p></blockquote><ul><li><p>由另一端的 <code>&lt;class&gt;</code> 上的 <code>lazy</code> 确定.如果这端的 <code>class</code> 上的 <code>lazy=&quot;true&quot;</code>。<code>proxy</code> 的值就是 <code>true</code>(延迟加载)。</p></li><li><p>如果 <code>class</code> 上 <code>lazy=&quot;false&quot;</code> ，<code>proxy</code> 的值就是 <code>false</code>(不采用延迟)</p></li></ul><p>在 <code>&lt;many-to-one&gt;</code> 标签上的默认值是 <code>fetch=&quot;select&quot;</code> 和 <code>proxy</code></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Hibernate 关联关系映射</title>
      <link href="/JavaWeb-Hibernate04.html"/>
      <url>/JavaWeb-Hibernate04.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/hibernate0400.png"></div><p id="div-border-left-green">Hibernate 关联关系映射</p><span id="more"></span><h1 id="Hibernate-一对多映射"><a href="#Hibernate-一对多映射" class="headerlink" title="Hibernate 一对多映射"></a>Hibernate 一对多映射</h1><p>以 <code>客户关系管理系统（CRM）</code> 为例：</p><h2 id="Java-WEB中一对多的设计及其建表原则"><a href="#Java-WEB中一对多的设计及其建表原则" class="headerlink" title="Java WEB中一对多的设计及其建表原则"></a>Java WEB中一对多的设计及其建表原则</h2><p>多方表建一个字段作为外键，指向一方表的主键。</p><h2 id="先导入SQL的建表语句"><a href="#先导入SQL的建表语句" class="headerlink" title="先导入SQL的建表语句"></a>先导入SQL的建表语句</h2><ul><li><p>创建数据库：<code>create database hibernate_03;</code></p></li><li><p>执行 SQL 语句进行建表：</p></li></ul><p>客户表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `cst_customer` (</span><br><span class="line">  `cust_id` <span class="type">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;客户编号(主键)&#x27;</span>,</span><br><span class="line">  `cust_name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户名称(公司名称)&#x27;</span>,</span><br><span class="line">  `cust_user_id` <span class="type">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;负责人id&#x27;</span>,</span><br><span class="line">  `cust_create_id` <span class="type">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人id&#x27;</span>,</span><br><span class="line">  `cust_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户信息来源&#x27;</span>,</span><br><span class="line">  `cust_industry` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户所属行业&#x27;</span>,</span><br><span class="line">  `cust_level` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户级别&#x27;</span>,</span><br><span class="line">  `cust_linkman` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人&#x27;</span>,</span><br><span class="line">  `cust_phone` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;固定电话&#x27;</span>,</span><br><span class="line">  `cust_mobile` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;移动电话&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`cust_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>联系人表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `cst_linkman` (</span><br><span class="line">  `lkm_id` <span class="type">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;联系人编号(主键)&#x27;</span>,</span><br><span class="line">  `lkm_name` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人姓名&#x27;</span>,</span><br><span class="line">  `lkm_cust_id` <span class="type">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户id&#x27;</span>,</span><br><span class="line">  `lkm_gender` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人性别&#x27;</span>,</span><br><span class="line">  `lkm_phone` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人办公电话&#x27;</span>,</span><br><span class="line">  `lkm_mobile` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人手机&#x27;</span>,</span><br><span class="line">  `lkm_email` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人邮箱&#x27;</span>,</span><br><span class="line">  `lkm_qq` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人qq&#x27;</span>,</span><br><span class="line">  `lkm_position` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人职位&#x27;</span>,</span><br><span class="line">  `lkm_memo` <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人备注&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`lkm_id`),</span><br><span class="line">  KEY `FK_cst_linkman_lkm_cust_id` (`lkm_cust_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK_cst_linkman_lkm_cust_id` <span class="keyword">FOREIGN</span> KEY (`lkm_cust_id`) <span class="keyword">REFERENCES</span> `cst_customer` (`cust_id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> ACTION <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> ACTION</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h2 id="编写客户和联系人的-JavaBean-程序"><a href="#编写客户和联系人的-JavaBean-程序" class="headerlink" title="编写客户和联系人的 JavaBean 程序"></a>编写客户和联系人的 JavaBean 程序</h2><p>（注意一对多的编写规则）</p><p><strong>一方 Set 集合，必须自己初始化；多方编写一个对象，不要自己 new ！</strong></p><ul><li>客户的 JavaBean 如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long cust_id;</span><br><span class="line">    <span class="keyword">private</span> String cust_name;</span><br><span class="line">    <span class="keyword">private</span> Long cust_user_id;</span><br><span class="line">    <span class="keyword">private</span> Long cust_create_id;</span><br><span class="line">    <span class="keyword">private</span> String cust_source;</span><br><span class="line">    <span class="keyword">private</span> String cust_industry;</span><br><span class="line">    <span class="keyword">private</span> String cust_level;</span><br><span class="line">    <span class="keyword">private</span> String cust_linkman;</span><br><span class="line">    <span class="keyword">private</span> String cust_phone;</span><br><span class="line">    <span class="keyword">private</span> String cust_mobile;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Set&lt;Linkman&gt; linkmans = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Linkman&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>联系人的 JavaBean 如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Linkman</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long lkm_id;</span><br><span class="line">    <span class="keyword">private</span> String lkm_name;</span><br><span class="line">    <span class="keyword">private</span> String lkm_gender;</span><br><span class="line">    <span class="keyword">private</span> String lkm_phone;</span><br><span class="line">    <span class="keyword">private</span> String lkm_mobile;</span><br><span class="line">    <span class="keyword">private</span> String lkm_email;</span><br><span class="line">    <span class="keyword">private</span> String lkm_qq;</span><br><span class="line">    <span class="keyword">private</span> String lkm_position;</span><br><span class="line">    <span class="keyword">private</span> String lkm_memo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写客户和联系人的映射配置文件"><a href="#编写客户和联系人的映射配置文件" class="headerlink" title="编写客户和联系人的映射配置文件"></a>编写客户和联系人的映射配置文件</h2><p>注意一对多的配置编写：</p><ul><li>多方：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.domain.Customer&quot;</span> <span class="attr">column</span>=<span class="string">&quot;lkm_cust_id&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>其中：</p><blockquote><p><code>name</code>：当前 JavaBean 中的属性<br><code>class</code>：属性的全路径<br><code>column</code>：外键的字段</p></blockquote><ul><li>一方：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一方--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">&quot;linkmans&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要出现两个子标签--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--外键的字段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;lkm_cust_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.domain.Linkman&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="客户的映射配置文件"><a href="#客户的映射配置文件" class="headerlink" title="客户的映射配置文件"></a>客户的映射配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;com.renkaigis.domain.Customer&quot;</span> <span class="attr">table</span>=<span class="string">&quot;cst_customer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;cust_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_user_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_user_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_create_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_create_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_source&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_source&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_industry&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_industry&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_level&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_level&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_linkman&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_linkman&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_phone&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_mobile&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_mobile&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">&quot;linkmans&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;lkm_cust_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.domain.Linkman&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="联系人的映射配置文件"><a href="#联系人的映射配置文件" class="headerlink" title="联系人的映射配置文件"></a>联系人的映射配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;com.renkaigis.domain.Linkman&quot;</span> <span class="attr">table</span>=<span class="string">&quot;cst_linkman&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;lkm_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;lkm_id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lkm_name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;lkm_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lkm_gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;lkm_gender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lkm_phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;lkm_phone&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lkm_mobile&quot;</span> <span class="attr">column</span>=<span class="string">&quot;lkm_mobile&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lkm_email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;lkm_email&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lkm_qq&quot;</span> <span class="attr">column</span>=<span class="string">&quot;lkm_qq&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lkm_position&quot;</span> <span class="attr">column</span>=<span class="string">&quot;lkm_position&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lkm_memo&quot;</span> <span class="attr">column</span>=<span class="string">&quot;lkm_memo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.domain.Customer&quot;</span> <span class="attr">column</span>=<span class="string">&quot;lkm_cust_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="保存客户和联系人的数据"><a href="#保存客户和联系人的数据" class="headerlink" title="保存客户和联系人的数据"></a>保存客户和联系人的数据</h2><h3 id="双向关联数据保存（麻烦）"><a href="#双向关联数据保存（麻烦）" class="headerlink" title="双向关联数据保存（麻烦）"></a>双向关联数据保存（麻烦）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试双向关联</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="type">Customer</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">c1.setCust_name(<span class="string">&quot;小虞&quot;</span>);</span><br><span class="line"><span class="type">Linkman</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Linkman</span>();</span><br><span class="line">l1.setLkm_name(<span class="string">&quot;小项&quot;</span>);</span><br><span class="line"><span class="type">Linkman</span> <span class="variable">l2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Linkman</span>();</span><br><span class="line">l2.setLkm_name(<span class="string">&quot;小羽&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向关联</span></span><br><span class="line">c1.getLinkmans().add(l1);</span><br><span class="line">c1.getLinkmans().add(l2);</span><br><span class="line"></span><br><span class="line">l1.setCustome1r(c1);</span><br><span class="line">l2.setCustomer(c1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存</span></span><br><span class="line">session.save(c1);</span><br><span class="line">session.save(l1);</span><br><span class="line">session.save(l2);</span><br><span class="line"></span><br><span class="line">tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="级联保存"><a href="#级联保存" class="headerlink" title="级联保存"></a>级联保存</h3><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>如果现在代码只插入其中的一方的数据</p><ul><li><p>如果只保存其中的一方的数据，那么程序会抛出异常。</p></li><li><p>如果想完成只保存一方的数据，并且把相关联的数据都保存到数据库中，那么需要配置级联！！</p></li><li><p>级联保存是方向性</p></li></ul><h4 id="级联保存效果"><a href="#级联保存效果" class="headerlink" title="级联保存效果"></a>级联保存效果</h4><ul><li><p>级联保存：保存一方同时可以把关联的对象也保存到数据库中！！</p></li><li><p>使用 <code>cascade=&quot;save-update&quot;</code></p></li></ul><p>注意：<strong>级联保存有方向性</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--客户级联联系人--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">&quot;linkmans&quot;</span> <span class="attr">cascade</span>=<span class="string">&quot;save-update&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;lkm_cust_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.domain.Linkman&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试级联关联</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="type">Customer</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">c1.setCust_name(<span class="string">&quot;小虞&quot;</span>);</span><br><span class="line"><span class="type">Linkman</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Linkman</span>();</span><br><span class="line">l1.setLkm_name(<span class="string">&quot;小项&quot;</span>);</span><br><span class="line"><span class="type">Linkman</span> <span class="variable">l2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Linkman</span>();</span><br><span class="line">l2.setLkm_name(<span class="string">&quot;小羽&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向关联</span></span><br><span class="line">c1.getLinkmans().add(l1);</span><br><span class="line">c1.getLinkmans().add(l2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存客户级联保存联系人</span></span><br><span class="line">session.save(c1);</span><br><span class="line"></span><br><span class="line">tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>相反的，要使用联系人去关联客户，那么需要在联系人的映射里面配置 <code>cascade=&quot;save_update&quot;</code>，这是只要保存了联系人，与其对应的客户也会保存或更新。</li></ul><h3 id="级联删除"><a href="#级联删除" class="headerlink" title="级联删除"></a>级联删除</h3><ul><li><p>1.数据库中删除含有外键的客户时，SQL 语句会报出错误的：<code>delete from customers where cid = 1;</code></p></li><li><p>2.如果使用 Hibernate 框架直接删除客户的时候，测试发现是可以删除的；</p></li><li><ul><li>Hibernate 框架删除有外键的信息是，会将外键先查出来置为 null，然后执行删除操作；</li></ul></li><li><p>3.上述的删除是普通的删除，那么也可以使用级联删除，注意：级联删除也是有方向性的！！（轻易不要使用）</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">cascade</span>=<span class="string">&quot;delete&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="级联的取值（cascade的取值）"><a href="#级联的取值（cascade的取值）" class="headerlink" title="级联的取值（cascade的取值）"></a>级联的取值（cascade的取值）</h3><ul><li><code>none</code>– 不使用级联</li><li><code>save-update</code>– 级联保存或更新</li><li><code>delete</code>– 级联删除</li><li><code>delete-orphan</code>– 孤儿删除(注意：只能应用在一对多关系)</li><li><code>all</code>– 除了 delete-orphan 的所有情况（包含save-update delete）</li><li><code>all-delete-orphan</code>– 包含了 delete-orphan 的所有情况（包含save-update delete delete-orphan）</li></ul><h3 id="孤儿删除（孤子删除）"><a href="#孤儿删除（孤子删除）" class="headerlink" title="孤儿删除（孤子删除）"></a>孤儿删除（孤子删除）</h3><p>只有在一对多的环境下才有孤儿删除</p><ul><li>在一对多的关系中，可以将一的一方认为是父方。将多的一方认为是子方。孤儿删除：在解除了父子关系的时候，将子方记录就直接删除。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">cascade</span>=<span class="string">&quot;delete-orphan&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试孤儿删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run3</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="type">Customer</span> <span class="variable">c1</span> <span class="operator">=</span> session.get(Customer.class, <span class="number">1L</span>);</span><br><span class="line"><span class="type">Linkman</span> <span class="variable">l1</span> <span class="operator">=</span> session.get(Linkman.class, <span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解除关系</span></span><br><span class="line">c1.getLinkmans().remove(l1);</span><br><span class="line"></span><br><span class="line">tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="放弃外键的维护"><a href="#放弃外键的维护" class="headerlink" title="放弃外键的维护"></a>放弃外键的维护</h2><h3 id="双方都维护外键的时候，会产生多余的-SQL-语句"><a href="#双方都维护外键的时候，会产生多余的-SQL-语句" class="headerlink" title="双方都维护外键的时候，会产生多余的 SQL 语句"></a>双方都维护外键的时候，会产生多余的 SQL 语句</h3><ul><li><p>想修改客户和联系人的关系，进行双向关联，双方都会维护外键，会产生多余的 SQL 语句。</p></li><li><p>产生的原因：session 的一级缓存中的快照机制，会让双方都更新数据库，产生了多余的 SQL 语句。</p></li></ul><h3 id="放弃外键维护"><a href="#放弃外键维护" class="headerlink" title="放弃外键维护"></a>放弃外键维护</h3><p>如果不想产生多余的 SQL 语句，那么需要一方来放弃外键的维护！</p><p>只有 <code>一方</code> 可以放弃，<code>多方</code> 没有哪个属性</p><ul><li>在 <code>&lt;set&gt;</code> 标签上配置一个 <code>inverse=&quot;true&quot;</code>，true：放弃，false：不放弃，默认值是false</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 放弃外键的维护 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">&quot;linkmans&quot;</span> <span class="attr">inverse</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;lkm_cust_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.domain.Linkman&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="cascade-和-inverse-的区别"><a href="#cascade-和-inverse-的区别" class="headerlink" title="cascade 和 inverse 的区别"></a>cascade 和 inverse 的区别</h3><ul><li><p><code>cascade</code> 用来级联操作（保存、修改和删除）;</p></li><li><p><code>inverse</code> 用来维护外键的。</p></li></ul><blockquote><p>一般情况下，在 <code>一方</code> 配置 <code>inverse</code> 放弃外键维护，在 <code>多方</code> 配置 <code>cascade</code> 来进行级联保存操作。</p></blockquote><hr><h1 id="Hibernate-多对多映射"><a href="#Hibernate-多对多映射" class="headerlink" title="Hibernate 多对多映射"></a>Hibernate 多对多映射</h1><hr><h2 id="多对多的建表原则"><a href="#多对多的建表原则" class="headerlink" title="多对多的建表原则"></a>多对多的建表原则</h2><ul><li><p>需要创建一个中间表，至少需要包含两个字段，作为这个表外键，分别指向两张表的主键。</p></li><li><p>两个外键一起叫联合主键。</p></li><li><p>使用 Hibernate 框架，只要编写两个 JavaBean，编写两个映射的配置文件，中间表会自动生成。</p></li></ul><h2 id="多对多-JavaBean-的编写"><a href="#多对多-JavaBean-的编写" class="headerlink" title="多对多 JavaBean 的编写"></a>多对多 JavaBean 的编写</h2><p>以用户和角色为例，一个用户可以有多个角色，一个角色可以被多个用户扮演。</p><h3 id="编写用户和角色的-JavaBean"><a href="#编写用户和角色的-JavaBean" class="headerlink" title="编写用户和角色的 JavaBean"></a>编写用户和角色的 JavaBean</h3><p>多对多都要用 <code>Set</code> 集合：</p><ul><li>用户的 JavaBean 代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Long user_id;</span><br><span class="line"><span class="keyword">private</span> String user_code;</span><br><span class="line"><span class="keyword">private</span> String user_name;</span><br><span class="line"><span class="keyword">private</span> String user_password;</span><br><span class="line"><span class="keyword">private</span> String user_state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Role&gt;();</span><br><span class="line"><span class="comment">// 省略 get / set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>角色的 JavaBean 代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Long role_id;</span><br><span class="line"><span class="keyword">private</span> String role_name;</span><br><span class="line"><span class="keyword">private</span> String role_memo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;User&gt;();</span><br><span class="line"><span class="comment">// 省略 get / set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户和角色的映射配置"><a href="#用户和角色的映射配置" class="headerlink" title="用户和角色的映射配置"></a>用户和角色的映射配置</h3><ul><li>用户的映射配置文件如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;com.renkaigis.domain.User&quot;</span> <span class="attr">table</span>=<span class="string">&quot;sys_user&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user_code&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_code&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user_name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user_password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user_state&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_state&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置多对多</span></span><br><span class="line"><span class="comment">name集合的名称</span></span><br><span class="line"><span class="comment">table中间表的名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">table</span>=<span class="string">&quot;sys_user_role&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前对象在中间表的外键名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">class集合中存入对象，对象的全路径</span></span><br><span class="line"><span class="comment">column集合中对象在中间表的外键的名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.domain.Role&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>角色的映射配置文件如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;com.renkaigis.domain.Role&quot;</span> <span class="attr">table</span>=<span class="string">&quot;sys_role&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;role_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;role_name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;role_memo&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_memo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">&quot;users&quot;</span> <span class="attr">table</span>=<span class="string">&quot;sys_user_role&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;role_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">&quot;com.renkaigis.domain.User&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>多对多进行双向关联的时候：<strong>必须有一方去放弃外键维护权</strong>。</p><p>否则会发生异常！</p><h3 id="级联保存-1"><a href="#级联保存-1" class="headerlink" title="级联保存"></a>级联保存</h3><h4 id="级联保存-2"><a href="#级联保存-2" class="headerlink" title="级联保存"></a>级联保存</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">cascade</span>=<span class="string">&quot;save-update&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="级联删除-1"><a href="#级联删除-1" class="headerlink" title="级联删除"></a>级联删除</h4><p>（在多对多中是很少使用的）</p><p><strong>开发中不用！</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">cascade</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="操作中间表"><a href="#操作中间表" class="headerlink" title="操作中间表"></a>操作中间表</h3><p>操作集合，就是操作中间表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 假设：张三用户，有2个角色，演员和导演，让张三没有演员这个角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"><span class="comment">// 获取用户和角色</span></span><br><span class="line"><span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> session.get(User.class, <span class="number">1L</span>);</span><br><span class="line"><span class="type">Role</span> <span class="variable">r2</span> <span class="operator">=</span> session.get(Role.class, <span class="number">2L</span>);</span><br><span class="line"><span class="comment">// 移除用户的某一个角色，那么中间表就会修改了</span></span><br><span class="line">u1.getRoles().remove(r2);</span><br><span class="line">tr.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Hibernate 持久化类、缓存与事务</title>
      <link href="/JavaWeb-Hibernate03.html"/>
      <url>/JavaWeb-Hibernate03.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/hibernate0300.png"></div><p id="div-border-left-green">Hibernate 持久化类、缓存与事务。</p><span id="more"></span><hr><h1 id="Hibernate-的持久化类"><a href="#Hibernate-的持久化类" class="headerlink" title="Hibernate 的持久化类"></a>Hibernate 的持久化类</h1><hr><h2 id="什么是持久化类"><a href="#什么是持久化类" class="headerlink" title="什么是持久化类"></a>什么是持久化类</h2><p>持久化类：就是一个 Java 类（自己编写的 JavaBean），这个 Java 类与表建立了映射关系就可以称为是持久化类。</p><ul><li>持久化类 &#x3D; JavaBean + xxx.hbm.xml</li></ul><h2 id="持久化类的编写规则"><a href="#持久化类的编写规则" class="headerlink" title="持久化类的编写规则"></a>持久化类的编写规则</h2><ul><li>提供一个无参数 public 访问控制符的构造器     – 底层需要进行反射。</li><li>提供一个标识属性，映射数据表主键字段       – 唯一标识 OID。数据库中通过主键，Java 对象通过地址确定对象，持久化类通过唯一标识 OID 确定记录。</li><li>所有属性提供 public 访问控制符的 set 或者 get 方法</li><li>标识属性应尽量使用基本数据类型的包装类型</li></ul><h2 id="区分自然主键和代理主键"><a href="#区分自然主键和代理主键" class="headerlink" title="区分自然主键和代理主键"></a>区分自然主键和代理主键</h2><p>创建表的时候</p><ul><li><p>自然主键：对象本身的一个属性。创建一个人员表，每个人都有一个身份证号（唯一的）。使用身份证号作为表的主键，自然主键。（开发中不会使用这种方式）</p></li><li><p>代理主键：不是对象本身的一个属性。创建一个人员表，为每个人员单独创建一个字段。用这个字段作为主键，代理主键。（开发中推荐使用这种方式）</p></li></ul><ol start="2"><li>创建表的时候尽量使用代理主键创建表</li></ol><h2 id="主键的生成策略"><a href="#主键的生成策略" class="headerlink" title="主键的生成策略"></a>主键的生成策略</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;com.renkaigis.domain.User&quot;</span> <span class="attr">table</span>=<span class="string">&quot;t_user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--主键的生成策略--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">length</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重要的是 <code>uuid</code> 和 <code>native</code></p><h3 id="increment"><a href="#increment" class="headerlink" title="increment"></a>increment</h3><p>适用于 short，int，long 作为主键。不是使用的数据库自动增长机制。</p><ul><li>Hibernate中提供的一种增长机制。</li><li>先进行查询：<code>select max(id) from user;</code></li><li>再进行插入：获得 <code>最大值 + 1</code>作为新的记录的主键。</li></ul><p>SQL 代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="built_in">max</span>(id) </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        t_user</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">insert</span> </span><br><span class="line">    <span class="keyword">into</span></span><br><span class="line">        t_user</span><br><span class="line">        (name, age, id) </span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (?, ?, ?)</span><br></pre></td></tr></table></figure><p><em>问题：</em> 不能在集群环境下或者有并发访问的情况下使用。</p><h3 id="identity"><a href="#identity" class="headerlink" title="identity"></a>identity</h3><p>适用于 short，int，long 作为主键。但是这个必须使用在有自动增长数据库中，采用的是数据库底层的自动增长机制。</p><ul><li>底层使用的是数据库的自动增长（auto_increment）。像 Oracle 数据库没有自动增长。</li></ul><h3 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h3><p>适用于 short，int，long 作为主键。底层使用的是序列的增长方式。</p><ul><li>Oracle 数据库底层没有自动增长，想自动增长需要使用序列。</li></ul><h3 id="uuid-★"><a href="#uuid-★" class="headerlink" title="uuid ★"></a>uuid <strong>★</strong></h3><p>适用于 char，varchar 类型的作为主键。</p><ul><li>使用随机的字符串作为主键。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 uuid 生成主键策略</span></span><br><span class="line"><span class="comment"> * Person 类有两个属性 String pname 和 String pid</span></span><br><span class="line"><span class="comment"> * Person.hbm.xml 如下编写：</span></span><br><span class="line"><span class="comment"> * &lt;id name=&quot;pid&quot; column=&quot;pid&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;generator class=&quot;uuid&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/id&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runUUID</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    p.setPname(<span class="string">&quot;老王&quot;</span>);</span><br><span class="line"></span><br><span class="line">    session.save(p);</span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看生成的 uuid 主键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_person;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> pid                              <span class="operator">|</span> pname  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> ff80808163ab33ae0163ab33b2370000 <span class="operator">|</span> 老王   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="native-★"><a href="#native-★" class="headerlink" title="native ★"></a>native <strong>★</strong></h3><p>本地策略。根据底层的数据库不同，自动选择适用于该种数据库的生成策略。（short，int，long）</p><ul><li><p>如果底层使用 MySQL 数据库：相当于 identity</p></li><li><p>如果底层使用 Oracle 数据库：相当于 sequence</p></li></ul><h3 id="assigned"><a href="#assigned" class="headerlink" title="assigned"></a>assigned</h3><p>主键的生成不用 Hibernate 管理了。必须手动设置主键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.setPid(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="Hibernate-持久化对象的状态"><a href="#Hibernate-持久化对象的状态" class="headerlink" title="Hibernate 持久化对象的状态"></a>Hibernate 持久化对象的状态</h1><hr><h2 id="持久化对象的状态"><a href="#持久化对象的状态" class="headerlink" title="持久化对象的状态"></a>持久化对象的状态</h2><p>Hibernate 为了管理持久化类：将持久化类分成了三个状态</p><ul><li><p>瞬时态：Transient  Object</p></li><li><ul><li>没有持久化标识 OID，没有被纳入到 Session 对象的管理。</li></ul></li><li><p>持久态：Persistent Object</p></li><li><ul><li>有持久化标识 OID，已经被纳入到 Session 对象的管理。</li></ul></li><li><p>脱管态：Detached Object</p></li><li><ul><li>有持久化标识 OID，没有被纳入到 Session 对象的管理。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久化对象的状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 瞬时态：没有 OID 的值，也没有被 session 管理，此时 user 对象是瞬时态对象</span></span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;空空&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时 user 中已经有 id 值了，默认的情况下，把 user 对象也保存到 session 的缓存中</span></span><br><span class="line">    session.save(user);</span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">    <span class="comment">// 此时，user 是持久化对象</span></span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    <span class="comment">// session 销毁，缓存没有了</span></span><br><span class="line">    session.close();</span><br><span class="line">    <span class="comment">// 此时 user 对象存在 id 值，但是 session 销毁了，缓存不存在了，session 不管理 user 对象了</span></span><br><span class="line">    <span class="comment">// user 是托管态对象</span></span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">    System.out.println(user.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        <span class="title function_">max</span><span class="params">(id)</span> </span><br><span class="line">    from</span><br><span class="line">        t_user</span><br><span class="line"><span class="number">2</span>           <span class="comment">// 此时的 user 有 id 值，并且被 session 管理，证明 user 是持久态对象</span></span><br><span class="line">Hibernate: </span><br><span class="line">    insert </span><br><span class="line">    into</span><br><span class="line">        <span class="title function_">t_user</span></span><br><span class="line">        <span class="params">(name, age, id)</span> </span><br><span class="line">    values</span><br><span class="line">        (?, ?, ?)</span><br><span class="line"><span class="number">2</span>           <span class="comment">// 此时 session 已经销毁，但是 user 还有 id 值，证明 user 是托管态对象</span></span><br><span class="line">空空</span><br></pre></td></tr></table></figure><h2 id="Hibernate-持久化对象状态的转换"><a href="#Hibernate-持久化对象状态的转换" class="headerlink" title="Hibernate 持久化对象状态的转换"></a>Hibernate 持久化对象状态的转换</h2><h3 id="瞬时态"><a href="#瞬时态" class="headerlink" title="瞬时态"></a>瞬时态</h3><ul><li>获得瞬时态的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>()</span><br></pre></td></tr></table></figure><ul><li>瞬时态对象转换持久态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save();</span><br><span class="line">或者</span><br><span class="line">saveOrUpdate();</span><br></pre></td></tr></table></figure><ul><li>瞬时态对象转换成脱管态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.setId(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="持久态"><a href="#持久态" class="headerlink" title="持久态"></a>持久态</h3><ul><li>获得持久态的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get();</span><br><span class="line">或者</span><br><span class="line">load();</span><br></pre></td></tr></table></figure><ul><li>持久态转换成瞬时态对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete();  <span class="comment">// 比较有争议的，进入特殊的状态（删除态：Hibernate 中不建议使用的）</span></span><br></pre></td></tr></table></figure><ul><li>持久态对象转成脱管态对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.close()/evict()/clear();</span><br></pre></td></tr></table></figure><h3 id="脱管态"><a href="#脱管态" class="headerlink" title="脱管态"></a>脱管态</h3><ul><li>获得托管态对象:不建议直接获得脱管态的对象.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>脱管态对象转换成持久态对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update();或者</span><br><span class="line">saveOrUpdate();或者</span><br><span class="line">lock();</span><br></pre></td></tr></table></figure><ul><li>脱管态对象转换成瞬时态对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.setId(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 持久态对象有自动更新数据库的能力！！</p><p>持久态对象自动更新数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久态对象自动更新数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// user 是持久态对象，有自动更新数据库的能力</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> session.get(User.class, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 重新设置名称</span></span><br><span class="line">    user.setName(<span class="string">&quot;天才&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// session.update(user);</span></span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码注释掉了 <code>session.update(user);</code> 方法，但是数据库依旧更新了，SQL 语句也正常执行了。</p><p>控制台输出结果（没调用 update，但是执行了 update 语句。原因是因为一级缓存的存在。）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        user0_.id <span class="keyword">as</span> id1_1_0_,</span><br><span class="line">        user0_.name <span class="keyword">as</span> name2_1_0_,</span><br><span class="line">        user0_.age <span class="keyword">as</span> age3_1_0_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        t_user user0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        user0_.id<span class="operator">=</span>?</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">update</span></span><br><span class="line">        t_user </span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">        name<span class="operator">=</span>?,</span><br><span class="line">        age<span class="operator">=</span>? </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        id<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><hr><h1 id="Hibernate-的一级缓存"><a href="#Hibernate-的一级缓存" class="headerlink" title="Hibernate 的一级缓存"></a>Hibernate 的一级缓存</h1><hr><h2 id="Session-对象的一级缓存（重点）"><a href="#Session-对象的一级缓存（重点）" class="headerlink" title="Session 对象的一级缓存（重点）"></a>Session 对象的一级缓存（重点）</h2><h3 id="什么是缓存？"><a href="#什么是缓存？" class="headerlink" title="什么是缓存？"></a>什么是缓存？</h3><p>其实就是一块内存空间，将数据源（数据库或者文件）中的数据存放到缓存中。再次获取的时候，直接从缓存中获取。可以提升程序的性能！</p><h3 id="Hibernate-框架提供了两种缓存"><a href="#Hibernate-框架提供了两种缓存" class="headerlink" title="Hibernate 框架提供了两种缓存"></a>Hibernate 框架提供了两种缓存</h3><p>一级缓存</p><ul><li>自带的不可卸载的。一级缓存的生命周期与 session 一致。一级缓存称为 session 级别的缓存。</li></ul><p>二级缓存（有更好的替代品）</p><ul><li>默认没有开启，需要手动配置才可以使用的。二级缓存可以在多个 session 中共享数据，二级缓存称为是 sessionFactory 级别的缓存。</li></ul><h3 id="Session-对象的缓存概述"><a href="#Session-对象的缓存概述" class="headerlink" title="Session 对象的缓存概述"></a>Session 对象的缓存概述</h3><ul><li><p>Session 接口中，有一系列的 java 的集合，这些 java 集合构成了 Session 级别的缓存（一级缓存），将对象存入到一级缓存中，session 没有结束生命周期，那么对象在 session 中存放着</p></li><li><p>内存中包含 Session 实例 –&gt; Session 的缓存（一些集合） –&gt; 集合中包含的是缓存对象！</p></li></ul><h3 id="证明一级缓存的存在，编写查询的代码即可证明"><a href="#证明一级缓存的存在，编写查询的代码即可证明" class="headerlink" title="证明一级缓存的存在，编写查询的代码即可证明"></a>证明一级缓存的存在，编写查询的代码即可证明</h3><ul><li>在同一个 Session 对象中两次查询，可以证明使用了缓存。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 证明一级缓存的存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;天行健&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存用户，user 已经存入到 session 的缓存中</span></span><br><span class="line">    <span class="comment">// id 是生成的 id</span></span><br><span class="line">    <span class="type">Serializable</span> <span class="variable">id</span> <span class="operator">=</span> session.save(user);</span><br><span class="line">    System.out.println(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取对象，不会看到 SQL 语句</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> session.get(User.class, id);</span><br><span class="line">    System.out.println(user2.getName());</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">insert</span> </span><br><span class="line">    <span class="keyword">into</span></span><br><span class="line">        t_user</span><br><span class="line">        (name, age) </span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (?, ?)</span><br><span class="line"><span class="number">4</span></span><br><span class="line">天行健</span><br></pre></td></tr></table></figure><p><strong>分析：</strong> 获取对象的时候没有查询的 SQL 语句执行，说明 session 是从缓存中获取对象的。证明 session 一级缓存的存在。</p><h3 id="Hibernate框架是如何做到数据发生变化时进行同步操作的呢？"><a href="#Hibernate框架是如何做到数据发生变化时进行同步操作的呢？" class="headerlink" title="Hibernate框架是如何做到数据发生变化时进行同步操作的呢？"></a>Hibernate框架是如何做到数据发生变化时进行同步操作的呢？</h3><ul><li><p>使用 get 方法查询 User 对象</p></li><li><p>然后设置 User 对象的一个属性，注意：没有做 update 操作。发现，数据库中的记录也改变了。</p></li><li><p>利用快照机制来完成的（SnapShot）</p></li></ul><h3 id="控制Session的一级缓存（了解）"><a href="#控制Session的一级缓存（了解）" class="headerlink" title="控制Session的一级缓存（了解）"></a>控制Session的一级缓存（了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Session.clear(); <span class="comment">// 清空缓存。</span></span><br><span class="line">Session.evict(Object entity); <span class="comment">// 从一级缓存中清除指定的实体对象。</span></span><br><span class="line">Session.flush(); <span class="comment">// 刷出缓存</span></span><br></pre></td></tr></table></figure><hr><h1 id="Hibernate中的事务与并发"><a href="#Hibernate中的事务与并发" class="headerlink" title="Hibernate中的事务与并发"></a>Hibernate中的事务与并发</h1><hr><h2 id="事务相关的概念"><a href="#事务相关的概念" class="headerlink" title="事务相关的概念**"></a>事务相关的概念**</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><ul><li>事务就是逻辑上的一组操作，组成事务的各个执行单元，操作要么全都成功，要么全都失败.</li><li>转账的例子：扣钱，加钱。两个操作组成了一个事情！</li></ul><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><ul><li>原子性– 事务不可分割。</li><li>一致性– 事务执行的前后数据的完整性保持一致。</li><li>隔离性– 一个事务执行的过程中，不应该受到其他的事务的干扰。</li><li>持久性– 事务一旦提交，数据就永久保持到数据库中。</li></ul><h3 id="如果不考虑隔离性：引发一些读的问题"><a href="#如果不考虑隔离性：引发一些读的问题" class="headerlink" title="如果不考虑隔离性：引发一些读的问题"></a>如果不考虑隔离性：引发一些读的问题</h3><ul><li><p>脏读– 一个事务读到了另一个事务未提交的数据。</p></li><li><p>不可重复读        – 一个事务读到了另一个事务已经提交的 update 数据，导致多次查询结果不一致。</p></li><li><p>虚读– 一个事务读到了另一个事务已经提交的 insert 数据，导致多次查询结构不一致。</p></li></ul><h3 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h3><p>通过设置数据库的隔离级别来解决上述读的问题</p><ul><li><p>未提交读：以上的读的问题都有可能发生。</p></li><li><p>已提交读：避免脏读，但是不可重复读，虚读都有可能发生。</p></li><li><p>可重复读：避免脏读，不可重复读。但是虚读是有可能发生。</p></li><li><p>串行化：以上读的情况都可以避免。</p></li></ul><p>如果想在 Hibernate 的框架中来设置隔离级别，需要在 <code>hibernate.cfg.xml</code> 的配置文件中通过标签来配置（默认隔离级别是 4）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.isolation&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过：<code>hibernate.connection.isolation = 4</code> 来配置，取值如下：</p><ul><li>1 — Read uncommitted isolation</li><li>2 — Read committed isolation</li><li>4 — Repeatable read isolation</li><li>8 — Serializable isolation</li></ul><h2 id="丢失更新的问题"><a href="#丢失更新的问题" class="headerlink" title="丢失更新的问题"></a>丢失更新的问题</h2><p>如果不考虑隔离性，也会产生写入数据的问题，这一类的问题叫丢失更新的问题。</p><p>例如：两个事务同时对某一条记录做修改，就会引发丢失更新的问题。</p><ul><li><p>A事务和B事务同时获取到一条数据，同时再做修改</p></li><li><p>如果A事务修改完成后，提交了事务</p></li><li><p>B事务修改完成后，不管是提交还是回滚，如果不做处理，都会对数据产生影响</p></li></ul><h3 id="丢失更新问题演示"><a href="#丢失更新问题演示" class="headerlink" title="丢失更新问题演示"></a>丢失更新问题演示</h3><p>更新前的数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">select</span> * from t_user;</span><br><span class="line">+----+-----------+------+</span><br><span class="line">| <span class="built_in">id</span> | name      | age  |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">|  1 | 天才      |   18 |</span><br><span class="line">|  2 | 空空      |   18 |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>假设 runA 方法和 runB() 方法同时对 t_user 表进行修改，同时查询到 id &#x3D; 1 的用户（需加断点），对其进行修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 丢失更新1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runA</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> session.get(User.class, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 修改 id = 1 的用户名为白蛇</span></span><br><span class="line">    user.setName(<span class="string">&quot;白蛇&quot;</span>);</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 丢失更新2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runB</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> session.get(User.class, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 修改 id = 1 的用户年龄为 88 </span></span><br><span class="line">    user.setAge(<span class="number">88</span>);</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析：假设 runA 方法先提交，那么数据库中的数据为：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">select</span> * from t_user;</span><br><span class="line">+----+-----------+------+</span><br><span class="line">| <span class="built_in">id</span> | name      | age  |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">|  1 | 白蛇      |   18 |</span><br><span class="line">|  2 | 空空      |   18 |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><blockquote><p>分析：runA 提交之后，runB 提交，则此时数据库中数据为：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">select</span> * from t_user;</span><br><span class="line">+----+-----------+------+</span><br><span class="line">| <span class="built_in">id</span> | name      | age  |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">|  1 | 天才      |   88 |</span><br><span class="line">|  2 | 空空      |   18 |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><blockquote><p>分析：最后数据库中的数据只是 runB 修改的结果，而 runA 修改的结果“丢失了”，这就是丢失更新的问题。</p></blockquote><h3 id="丢失更新解决方案"><a href="#丢失更新解决方案" class="headerlink" title="丢失更新解决方案"></a>丢失更新解决方案</h3><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>乐观锁采用 <code>版本号</code> 的机制来解决的。会给表结构添加一个字段 version &#x3D; 0 ，默认值是 0</p><ul><li><p>当 A 事务在操作完该条记录，提交事务时，会先检查版本号，如果发生版本号的值相同时，才可以提交事务。同时会更新版本号 version &#x3D; 1 。</p></li><li><p>当 B 事务操作完该条记录时，提交事务时，会先检查版本号，如果发现版本不同时，程序会出现错误。</p></li></ul><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>悲观锁采用的是数据库提供的一种锁机制，如果采用做了这种机制，在 SQL 语句的后面添加 for update 子句</p><ul><li>当 A 事务在操作该条记录时，会把该条记录锁起来，其他事务是不能操作这条记录的。</li><li>只有当 A 事务提交后，锁释放了，其他事务才能操作该条记录</li></ul><h3 id="使用-Hibernate-框架解决丢失更新的问题"><a href="#使用-Hibernate-框架解决丢失更新的问题" class="headerlink" title="使用 Hibernate 框架解决丢失更新的问题"></a>使用 Hibernate 框架解决丢失更新的问题</h3><h4 id="悲观锁-1"><a href="#悲观锁-1" class="headerlink" title="悲观锁"></a>悲观锁</h4><ul><li>使用session.get(Customer.class, 1,LockMode.UPGRADE); 方法</li></ul><h4 id="乐观锁-1"><a href="#乐观锁-1" class="headerlink" title="乐观锁"></a>乐观锁</h4><ul><li>在对应的 JavaBean 中添加一个属性，名称可以是任意的。例如：<code>private Integer version</code>; 并提供 <code>get</code> 和 <code>set</code> 方法。</li><li>在映射的配置文件中，提供 <code>&lt;version name=&quot;version&quot;/&gt;</code> 标签即可。</li><li>注意 version 标签的编写位置。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;com.renkaigis.domain.User&quot;</span> <span class="attr">table</span>=<span class="string">&quot;t_user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--乐观锁，使用 version 标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">name</span>=<span class="string">&quot;version&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">length</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="绑定本地的Session"><a href="#绑定本地的Session" class="headerlink" title="绑定本地的Session"></a>绑定本地的Session</h2><p>Hibernate 框架中，使用 session 对象开启事务，所以需要来传递 session 对象，框架提供了 ThreadLocal 的方式</p><ul><li>需要在 <code>hibernate.cfg.xml</code> 的配置文件中提供配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启绑定本地的 session--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.current_session_context_class&quot;</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>重新编写 <code>HibernateUtils</code> 的工具类，使用 SessionFactory 的 getCurrentSession() 方法，获取当前的 Session 对象。并且该 Session 对象不用手动关闭，线程结束了，会自动关闭。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务层开事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title function_">getCurrentSession</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 从 ThreadLocal 类中获取到 session 对象</span></span><br><span class="line">    <span class="keyword">return</span> FACTORY.getCurrentSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 想使用 <code>getCurrentSession()</code> 方法，必须要先配置才能使用。</p><h3 id="演示绑定本地-session"><a href="#演示绑定本地-session" class="headerlink" title="演示绑定本地 session"></a>演示绑定本地 session</h3><h4 id="web层"><a href="#web层" class="headerlink" title="web层"></a>web层</h4><p>浏览器端发送请求，同时新增两个用户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaveServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u1.setName(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u2.setName(<span class="string">&quot;测试2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UserService</span>().save(u1, u2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h4><p>业务层获取当前线程的 session，开启事务，调用 dao 保存用户，若发生异常则回滚。</p><p>线程结束后 session 自动关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User u1, User u2)</span> &#123;</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDao</span>();</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dao.save1(u1);</span><br><span class="line">            <span class="comment">// int a = 10 / 0;</span></span><br><span class="line">            dao.save2(u2);</span><br><span class="line">            tr.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 出现问题，回滚事务</span></span><br><span class="line">            tr.rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// session.close();</span></span><br><span class="line">            <span class="comment">// 以前需要自己释放资源</span></span><br><span class="line">            <span class="comment">// 现在 session 不用关闭，线程结束后 session 自动关闭。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><p>获取当前 session，与业务层 session 保持一致，进行保存操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save1</span><span class="params">(User u1)</span> &#123;</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line">        session.save(u1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save2</span><span class="params">(User u2)</span> &#123;</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getCurrentSession();</span><br><span class="line">        session.save(u2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 Servlet，数据添加完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">select</span> * from t_user;</span><br><span class="line">+----+---------+------+---------+</span><br><span class="line">| <span class="built_in">id</span> | name    | age  | version |</span><br><span class="line">+----+---------+------+---------+</span><br><span class="line">|  1 | 天才    |   88 |       1 |</span><br><span class="line">|  2 | 空空    |   18 |       0 |</span><br><span class="line">|  7 | 测试1   | NULL |       0 |</span><br><span class="line">|  8 | 测试2   | NULL |       0 |</span><br><span class="line">+----+---------+------+---------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Hibernate 配置及接口</title>
      <link href="/JavaWeb-Hibernate02.html"/>
      <url>/JavaWeb-Hibernate02.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/hibernate0200.png"></div><p id="div-border-left-green">Hibernate 配置文件与接口方法。</p><span id="more"></span><hr><h1 id="映射配置文件"><a href="#映射配置文件" class="headerlink" title="映射配置文件"></a>映射配置文件</h1><hr><p>映射文件，即类与表的映射配置文件，假设是 <code>Customer.hbm.xml</code></p><h2 id="标签"><a href="#标签" class="headerlink" title="&lt;class&gt;标签"></a><code>&lt;class&gt;标签</code></h2><table><thead><tr><th align="center">&lt;class&gt; 标签</th><th>用来将类与数据库表建立映射关系</th></tr></thead><tbody><tr><td align="center">name</td><td>类的全路径</td></tr><tr><td align="center">table</td><td>表名.(类名与表名一致,那么table属性也可以省略)</td></tr><tr><td align="center">catalog</td><td>数据库的名称，基本上都会省略不写</td></tr></tbody></table><h2 id="标签-1"><a href="#标签-1" class="headerlink" title="&lt;id&gt;标签"></a><code>&lt;id&gt;标签</code></h2><table><thead><tr><th align="center">&lt;id&gt; 标签</th><th>用来将类中的属性与表中的主键建立映射，id 标签就是用来配置主键的</th></tr></thead><tbody><tr><td align="center">name</td><td>类中属性名</td></tr><tr><td align="center">column</td><td>表中的字段名。（如果类中的属性名与表中的字段名一致,那么 column 可以省略。）</td></tr><tr><td align="center">length</td><td>字段的程度，如果数据库已经创建好了，那么 length 可以不写。如果没有创建好，生成表结构时，length 最好指定。</td></tr></tbody></table><h2 id="标签-2"><a href="#标签-2" class="headerlink" title="&lt;property&gt;标签"></a><code>&lt;property&gt;标签</code></h2><table><thead><tr><th align="center">&lt;property&gt; 标签</th><th>用来将类中的普通属性与表中的字段建立映射</th></tr></thead><tbody><tr><td align="center">name</td><td>类中属性名</td></tr><tr><td align="center">column</td><td>表中的字段名（如果类中的属性名与表中的字段名一致,那么column可以省略。）</td></tr><tr><td align="center">length</td><td>数据长度</td></tr><tr><td align="center">type</td><td>数据类型（一般都不需要编写，如果写需要按着规则来编写）<br/>Hibernate 的数据类型type&#x3D;”string”<br/>Java 的数据类型type&#x3D;”java.lang.String”<br/> 数据库字段的数据类型&lt;column name&#x3D;”name” sql-type&#x3D;”varchar”&#x2F;&gt;</td></tr></tbody></table><p><strong>注：</strong> 配置不需要那么麻烦，一般默认的就可以了。</p><hr><h1 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h1><hr><h2 id="核心配置文件的两种方式"><a href="#核心配置文件的两种方式" class="headerlink" title="核心配置文件的两种方式"></a>核心配置文件的两种方式</h2><h3 id="属性文件"><a href="#属性文件" class="headerlink" title="属性文件"></a>属性文件</h3><p>第一种方式是属性文件的形式，即 properties 的配置文件</p><p><code>hibernate.properties</code> 里面的编写规则如下：（key&#x3D;value）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hibernate.connection.driver_class=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>缺点：不能加载映射的配置文件，需要手动编写代码去加载</p><h3 id="xml-文件（★）"><a href="#xml-文件（★）" class="headerlink" title="xml 文件（★）"></a>xml 文件（<strong>★</strong>）</h3><p>第二种方式是 XML 文件的形式，开发基本都会选择这种方式（<strong>★</strong>）</p><p><code>hibernate.cfg.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span> &gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>格式比较清晰</li><li>编写有提示</li><li>可以在该配置文件中加载映射的配置文件（最主要的）</li></ul><h2 id="hibernate-cfg-xml-的配置文件详解"><a href="#hibernate-cfg-xml-的配置文件详解" class="headerlink" title="hibernate.cfg.xml 的配置文件详解"></a><code>hibernate.cfg.xml</code> 的配置文件详解</h2><h3 id="必须有的配置"><a href="#必须有的配置" class="headerlink" title="必须有的配置"></a>必须有的配置</h3><ul><li>数据库连接信息:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hibernate.connection.driver_class       -- 连接数据库驱动程序</span><br><span class="line">hibernate.connection.url        -- 连接数据库 URL</span><br><span class="line">hibernate.connection.username       -- 数据库用户名</span><br><span class="line">hibernate.connection.password       -- 数据库密码</span><br></pre></td></tr></table></figure><ul><li>方言:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hibernate.dialect       -- 操作数据库方言</span><br></pre></td></tr></table></figure><h3 id="可选的配置"><a href="#可选的配置" class="headerlink" title="可选的配置"></a>可选的配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* hibernate.show_sql        -- 显示 SQL，控制台输出 SQL 语句</span><br><span class="line">* hibernate.format_sql      -- 格式化控制台输出的 SQL 语句</span><br><span class="line"></span><br><span class="line">* hibernate.hbm2ddl.auto        -- 通过映射转成DDL语句</span><br><span class="line">    * create            -- 每次都会创建一个新的表。 ---测试的时候使用</span><br><span class="line">    * create-drop       -- 每次都会创建一个新的表，当执行结束之后，将创建的这个表删除。   ---测试的时候使用</span><br><span class="line">    * update★            -- 如果有表，使用原来的表。没有表，创建一个新的表。同时更新表结构。</span><br><span class="line">    * validate          -- 如果有表，使用原来的表。同时校验映射文件与表中字段是否一致如果不一致就会报错。</span><br></pre></td></tr></table></figure><h3 id="加载映射"><a href="#加载映射" class="headerlink" title="加载映射"></a>加载映射</h3><ul><li>如果是 XML 方式：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;com/renkaigis/domain/Customer.hbm.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="单表最基本的-Hibernate-配置文件"><a href="#单表最基本的-Hibernate-配置文件" class="headerlink" title="单表最基本的 Hibernate 配置文件"></a>单表最基本的 Hibernate 配置文件</h2><p><code>hibernate.cfg.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hibernate-configuration</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--记住：先配置 SessionFactory 标签，一个数据库对应一个 SessionFactory 标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--必须配置的参数有 5 个，4 大参数和数据库的方言--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql:///hibernate_01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库的方言--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--可选配置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--控制台显示 SQL 语句--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--格式化显示的 SQL 语句--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成数据库表结构--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--映射配置文件，需要引入映射的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;com/renkaigis/domain/Customer.hbm.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="Hibernate-常用的接口和类"><a href="#Hibernate-常用的接口和类" class="headerlink" title="Hibernate 常用的接口和类"></a>Hibernate 常用的接口和类</h1><hr><h2 id="Configuration-类和作用"><a href="#Configuration-类和作用" class="headerlink" title="Configuration 类和作用"></a>Configuration 类和作用</h2><h3 id="Configuration类"><a href="#Configuration类" class="headerlink" title="Configuration类"></a>Configuration类</h3><ul><li><p>Configuration 对象用于配置并且启动 Hibernate。</p></li><li><p>Hibernate 应用通过该对象来获得 <code>对象-关系映射</code> 文件中的元数据，以及动态配置 Hibernate 的属性，然后创建 SessionFactory 对象。</p></li></ul><p>简而言之：加载 Hibernate 的配置文件，可以获取 SessionFactory 对象。</p><h3 id="Configuration类的其他应用（了解）"><a href="#Configuration类的其他应用（了解）" class="headerlink" title="Configuration类的其他应用（了解）"></a>Configuration类的其他应用（了解）</h3><p>加载配置文件的种类，Hibernate 支持 xml 和 properties 类型的配置文件，在开发中基本都使用 XML 配置文件的方式。</p><ul><li>如果采用的是 properties 的配置文件，那么通过下面语句可以加载配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br></pre></td></tr></table></figure><p>但是需要自己手动加载映射文件</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.addResource(<span class="string">&quot;cn/itcast/domain/Student.hbm.xml&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>如果采用的 XML 的配置文件，通过下面语句可直接加载配置文件和映射文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>().configure();</span><br></pre></td></tr></table></figure><h2 id="SessionFactory-类-★"><a href="#SessionFactory-类-★" class="headerlink" title="SessionFactory 类 ★"></a>SessionFactory 类 ★</h2><p>SessionFactory 是工厂类，负责初始化 Hibernate，充当数据存储源，并负责创建 Session 对象。</p><h3 id="SessionFactory-类的特点"><a href="#SessionFactory-类的特点" class="headerlink" title="SessionFactory 类的特点"></a>SessionFactory 类的特点</h3><ul><li><p>由Configuration 通过加载配置文件创建该对象。</p></li><li><p>SessionFactory 对象中保存了当前的数据库配置信息和所有映射关系以及预定义的 SQL 语句。同时，SessionFactory 还负责维护 Hibernate 的二级缓存。</p></li><li><ul><li>预定义 SQL 语句</li></ul></li><li><ul><li><ul><li>使用 Configuration 类创建了 SessionFactory 对象时，已经在 SessionFacotry 对象中缓存了一些 SQL 语句；</li></ul></li></ul></li><li><ul><li><ul><li>常见的SQL语句是增删改查（通过主键来查询）；</li></ul></li></ul></li><li><ul><li><ul><li>这样做的目的是效率更高。</li></ul></li></ul></li><li><p>一个 SessionFactory 实例对应一个数据库，应用从该对象中获得 Session 实例。</p></li><li><p>SessionFactory 是 <code>线程安全</code> 的，意味着它的一个实例可以被应用的多个线程共享。</p></li><li><p>SessionFactory 是 <code>重量级</code> 的，意味着不能随意创建或销毁它的实例。如果只访问一个数据库，只需要创建一个 SessionFactory 实例，且在应用初始化的时候完成。</p></li><li><p>SessionFactory 需要一个较大的缓存，用来存放预定义的SQL语句及实体的映射信息。另外可以配置一个缓存插件，这个插件被称之为 Hibernate 的二级缓存，被多线程所共享。</p></li></ul><p>总之，一般应用使用一个 SessionFactory，最好是应用启动时就完成初始化。</p><h3 id="编写-HibernateUtils-的工具类"><a href="#编写-HibernateUtils-的工具类" class="headerlink" title="编写 HibernateUtils 的工具类"></a>编写 HibernateUtils 的工具类</h3><p>简化获取 Session 的方法，在服务器启动时就完成了初始化，加载了配置文件和映射文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HibernateUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Configuration cfg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SessionFactory factory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 给常量赋值 </span></span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        cfg = <span class="keyword">new</span> <span class="title class_">Configuration</span>().configure();</span><br><span class="line">        <span class="comment">// 生成factory对象</span></span><br><span class="line">        factory = cfg.buildSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取Session对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title function_">openSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 通过工具类获取 session 对象</span></span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">    Customer c=<span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">    c.setCust_name(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    session.save(c);</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session-接口"><a href="#Session-接口" class="headerlink" title="Session 接口"></a>Session 接口</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>Session 是在 Hibernate 中使用最频繁的接口。也被称之为 <code>持久化管理器</code>。它提供了和持久化有关的操作，比如添加、修改、删除、加载和查询实体对象；</li><li>Session 是应用程序与数据库之间交互操作的一个单线程对象，是 Hibernate 运作的中心；</li><li>Session 是线程不安全的；</li><li>所有持久化对象必须在 session 的管理下才可以进行持久化操作；</li><li>Session 对象有一个一级缓存，显式执行 flush 之前，所有的持久化操作的数据都缓存在 session 对象处；</li><li>持久化类与 Session 关联起来后就具有了持久化的能力。</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><code>不是线程安全</code> 的。应避免多个线程使用同一个 Session 实例；</li><li>Session 是 <code>轻量级</code> 的，它的创建和销毁不会消耗太多的资源。应为每次客户请求分配独立的 Session 实例；</li><li>Session 有一个缓存，被称之为 Hibernate 的一级缓存。每个 Session 实例都有自己的缓存。</li></ul><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><ul><li>save(obj)</li><li>delete(obj)</li><li>get(Class,id)</li><li>update(obj)</li><li>saveOrUpdate(obj)– 保存或者修改（如果没有数据，保存数据。如果有，修改数据）</li><li>createQuery() – HQL语句的查询的方式</li></ul><h4 id="get-Class-id"><a href="#get-Class-id" class="headerlink" title="get(Class,id)"></a>get(Class,id)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 get() 方法，获取查询，通过主键来查询一条记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 通过工具类获取 session 对象</span></span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两个参数：JavaBean 的 class 对象，主键的值</span></span><br><span class="line">    <span class="type">Customer</span> <span class="variable">c</span> <span class="operator">=</span> session.get(Customer.class, <span class="number">94L</span>);</span><br><span class="line">    System.out.println(c);</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Customer&#123;cust_id=94, cust_name=&#x27;测试&#x27;, cust_user_id=null, cust_create_id=null, cust_source=&#x27;null&#x27;, cust_industry=&#x27;null&#x27;, cust_level=&#x27;2&#x27;, cust_linkman=&#x27;null&#x27;, cust_phone=&#x27;110&#x27;, cust_mobile=&#x27;null&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="delete-obj"><a href="#delete-obj" class="headerlink" title="delete(obj)"></a>delete(obj)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 delete() 方法</span></span><br><span class="line"><span class="comment"> * 注意：删除或者修改，都要先查询在删除或者修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDel</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 通过工具类获取 session 对象</span></span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="type">Customer</span> <span class="variable">c</span> <span class="operator">=</span> session.get(Customer.class, <span class="number">94L</span>);</span><br><span class="line">    <span class="comment">// 删除客户</span></span><br><span class="line">    session.delete(c);</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        customer0_.cust_id <span class="keyword">as</span> cust_id1_0_0_,</span><br><span class="line">        customer0_.cust_name <span class="keyword">as</span> cust_nam2_0_0_,</span><br><span class="line">        customer0_.cust_user_id <span class="keyword">as</span> cust_use3_0_0_,</span><br><span class="line">        customer0_.cust_create_id <span class="keyword">as</span> cust_cre4_0_0_,</span><br><span class="line">        customer0_.cust_source <span class="keyword">as</span> cust_sou5_0_0_,</span><br><span class="line">        customer0_.cust_industry <span class="keyword">as</span> cust_ind6_0_0_,</span><br><span class="line">        customer0_.cust_level <span class="keyword">as</span> cust_lev7_0_0_,</span><br><span class="line">        customer0_.cust_linkman <span class="keyword">as</span> cust_lin8_0_0_,</span><br><span class="line">        customer0_.cust_phone <span class="keyword">as</span> cust_pho9_0_0_,</span><br><span class="line">        customer0_.cust_mobile <span class="keyword">as</span> cust_mo10_0_0_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        cst_customer customer0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        customer0_.cust_id<span class="operator">=</span>?</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">delete</span> </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        cst_customer </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        cust_id<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><h4 id="update-obj"><a href="#update-obj" class="headerlink" title="update(obj)"></a>update(obj)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 update() 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 通过工具类获取 session 对象</span></span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">    <span class="comment">// 查询客户</span></span><br><span class="line">    <span class="type">Customer</span> <span class="variable">c</span> <span class="operator">=</span> session.get(Customer.class, <span class="number">1L</span>);</span><br><span class="line">    <span class="comment">// 设置客户信息</span></span><br><span class="line">    c.setCust_level(<span class="string">&quot;中级&quot;</span>);</span><br><span class="line">    c.setCust_name(<span class="string">&quot;小徐&quot;</span>);</span><br><span class="line">    <span class="comment">// 修改</span></span><br><span class="line">    session.update(c);</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="saveOrUpdate-obj"><a href="#saveOrUpdate-obj" class="headerlink" title="saveOrUpdate(obj)"></a>saveOrUpdate(obj)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 SaveOrUpdate() 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveOrUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 通过工具类获取 session 对象</span></span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">    <span class="comment">// 查询客户</span></span><br><span class="line">    <span class="type">Customer</span> <span class="variable">c</span> <span class="operator">=</span> session.get(Customer.class, <span class="number">1L</span>);</span><br><span class="line">    <span class="comment">// 设置客户信息</span></span><br><span class="line">    <span class="comment">// c.setCust_id(7L); // 千万不能修改 id 值</span></span><br><span class="line">    c.setCust_name(<span class="string">&quot;小天&quot;</span>);</span><br><span class="line">    <span class="comment">// 修改</span></span><br><span class="line">    session.saveOrUpdate(c);</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="createQuery"><a href="#createQuery" class="headerlink" title="createQuery()"></a>createQuery()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 creatQuery() 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSel</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtils.getSession();</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">    <span class="comment">// 创建查询的接口</span></span><br><span class="line">    <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> session.createQuery(<span class="string">&quot;from Customer&quot;</span>);</span><br><span class="line">    <span class="comment">// 查询所有的数据 select * from 表</span></span><br><span class="line">    List&lt;Customer&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Customer customer :</span><br><span class="line">            list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tr.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Transaction-接口"><a href="#Transaction-接口" class="headerlink" title="Transaction 接口"></a>Transaction 接口</h2><p>Transaction 是事务的接口。</p><h3 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h3><ul><li>commit()– 提交事务</li><li>rollback()– 回滚事务</li></ul><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>Hibernate 框架默认情况下事务不自动提交.需要手动提交事务</li><li>如果没有开启事务，那么每个 Session 的操作，都相当于一个独立的事务</li></ul><h3 id="测试事务"><a href="#测试事务" class="headerlink" title="测试事务"></a>测试事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = HibernateUtils.getSession();</span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        tr = session.beginTransaction();</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        <span class="comment">// int a=10/0;</span></span><br><span class="line">        c.setCust_name(<span class="string">&quot;嘿嘿&quot;</span>);</span><br><span class="line">        session.save(c);</span><br><span class="line">        tr.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 回滚事务</span></span><br><span class="line">        tr.rollback();</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 Hibernate 快速入门</title>
      <link href="/JavaWeb-Hibernate01.html"/>
      <url>/JavaWeb-Hibernate01.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/hibernate0100.png"></div><p id="div-border-left-green">Hibernate 快速入门。</p><span id="more"></span><hr><h1 id="Hibernate框架的概述"><a href="#Hibernate框架的概述" class="headerlink" title="Hibernate框架的概述"></a>Hibernate框架的概述</h1><hr><ul><li><p>Hibernate 是一个开放源代码的对象关系映射（ORM）框架，它对 JDBC 进行了非常轻量级的对象封装，使得 Java 程序员可以随心所欲的使用对象编程思维来操纵数据库。 </p></li><li><p>Hibernate 可以应用在任何使用 JDBC 的场合，既可以在 Java 的客户端程序使用，也可以在 Servlet&#x2F;JSP 的 Web 应用中使用。</p></li><li><p>Hibernate  是轻量级 JavaEE 应用的持久层解决方案，是一个关系数据库 ORM 框架。</p></li></ul><p><strong>Hibernate是一个持久层的ORM框架！！！</strong></p><h2 id="ORM（对象关系映射）"><a href="#ORM（对象关系映射）" class="headerlink" title="ORM（对象关系映射）"></a>ORM（对象关系映射）</h2><p>ORM 映射：Object Relational Mapping</p><ul><li>O：面向对象领域的 Object （<code>JavaBean 对象</code>）</li><li>R：关系数据库领域的 Relational （<code>表的结构</code>）</li><li>M：映射 Mapping （<code>XML 的配置文件</code>）</li></ul><p>简而言之：Hibernate 使程序员通过操作对象的方式来操作数据库表记录。</p><h2 id="Hibernate-优点"><a href="#Hibernate-优点" class="headerlink" title="Hibernate 优点"></a>Hibernate 优点</h2><ul><li><p>Hibernate 对 JDBC 访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码；</p></li><li><p>Hibernate是一个基于 JDBC 的主流持久化框架，是一个优秀的 orm 实现，它很大程度的简化了 dao 层编码工作；</p></li><li><p>Hibernate 的性能非常好，因为它是一个轻量级框架。映射的灵活性很出色。它支持很多关系型数据库，从一对一到多对多的各种复杂关系。</p></li></ul><hr><h1 id="Hibernate-框架入门"><a href="#Hibernate-框架入门" class="headerlink" title="Hibernate 框架入门"></a>Hibernate 框架入门</h1><hr><h2 id="下载-Hibernate-运行环境"><a href="#下载-Hibernate-运行环境" class="headerlink" title="下载 Hibernate 运行环境"></a>下载 Hibernate 运行环境</h2><h3 id="下载对应的-jar-包"><a href="#下载对应的-jar-包" class="headerlink" title="下载对应的 jar 包"></a>下载对应的 jar 包</h3><p><a  href="http://sourceforge.net/projects/hibernate/files/hibernate-orm/5.0.7.Final/hibernate-release-5.0.7.Final.zip/download">点击下载 Hibernate 5.0.7</a></p><h3 id="Hibernate-目录结构"><a href="#Hibernate-目录结构" class="headerlink" title="Hibernate 目录结构"></a>Hibernate 目录结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">| --    documents      相关的文档</span><br><span class="line">| --    lib    jar包</span><br><span class="line">|       | -- jpa        sun 公司提供的 orm 框架的规范</span><br><span class="line">|       | -- required       必需要引入的包</span><br><span class="line">|       | -- optional       可选的包（c3p0 等）</span><br><span class="line">| --    project     提供的一些小项目（无关紧要）</span><br><span class="line">|       | -- etc       配置文件</span><br></pre></td></tr></table></figure><h2 id="创建表结构"><a href="#创建表结构" class="headerlink" title="创建表结构"></a>创建表结构</h2><p>建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> database hibernate_01;</span><br><span class="line">Use hibernate_01;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `cst_customer` (</span><br><span class="line">    `cust_id` <span class="type">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;客户编号(主键)&#x27;</span>,</span><br><span class="line">    `cust_name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户名称(公司名称)&#x27;</span>,</span><br><span class="line">    `cust_user_id` <span class="type">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;负责人id&#x27;</span>,</span><br><span class="line">    `cust_create_id` <span class="type">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人id&#x27;</span>,</span><br><span class="line">    `cust_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户信息来源&#x27;</span>,</span><br><span class="line">    `cust_industry` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户所属行业&#x27;</span>,</span><br><span class="line">    `cust_level` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户级别&#x27;</span>,</span><br><span class="line">    `cust_linkman` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人&#x27;</span>,</span><br><span class="line">    `cust_phone` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;固定电话&#x27;</span>,</span><br><span class="line">    `cust_mobile` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;移动电话&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`cust_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">94</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h2 id="搭建-Hibernate-的开发环境"><a href="#搭建-Hibernate-的开发环境" class="headerlink" title="搭建 Hibernate 的开发环境"></a>搭建 Hibernate 的开发环境</h2><p>创建WEB工程，引入 Hibernate 开发所需要的 jar 包</p><ul><li>MySQL 的驱动 jar 包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- mysql-connector-java-5.1.7-bin.jar</span><br></pre></td></tr></table></figure><ul><li><p>Hibernate 开发需要的 jar 包（<code>../hibernate-release-5.0.7.Final/lib/required/所有jar包</code>）</p></li><li><p>日志 jar 包</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- log4j-1.2.16.jar      // log for java，具体的日志实现</span><br><span class="line">- slf4j-api-1.6.1.jar   // log4j 规范，接口</span><br><span class="line">- slf4j-log4j12-1.7.2.jar // 整合的</span><br></pre></td></tr></table></figure><hr><h2 id="编写-JavaBean-实体类"><a href="#编写-JavaBean-实体类" class="headerlink" title="编写 JavaBean 实体类"></a>编写 JavaBean 实体类</h2><p><code>Customer</code> 类的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的JavaBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long cust_id;</span><br><span class="line">    <span class="keyword">private</span> String cust_name;</span><br><span class="line">    <span class="keyword">private</span> Long cust_user_id;</span><br><span class="line">    <span class="keyword">private</span> Long cust_create_id;</span><br><span class="line">    <span class="keyword">private</span> String cust_source;</span><br><span class="line">    <span class="keyword">private</span> String cust_industry;</span><br><span class="line">    <span class="keyword">private</span> String cust_level;</span><br><span class="line">    <span class="keyword">private</span> String cust_linkman;</span><br><span class="line">    <span class="keyword">private</span> String cust_phone;</span><br><span class="line">    <span class="keyword">private</span> String cust_mobile;</span><br><span class="line">    <span class="comment">// 省略get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建类与表结构的映射"><a href="#创建类与表结构的映射" class="headerlink" title="创建类与表结构的映射"></a>创建类与表结构的映射</h2><h3 id="在JavaBean所在的包下创建映射的配置文件"><a href="#在JavaBean所在的包下创建映射的配置文件" class="headerlink" title="在JavaBean所在的包下创建映射的配置文件"></a>在JavaBean所在的包下创建映射的配置文件</h3><ul><li><p>默认的命名规则为：<code>实体类名.hbm.xml</code></p></li><li><p>在 xml 配置文件中引入约束（引入的是 <code>hibernate3.0 的 dtd 约束</code>，不要引入 4 的约束）</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hibernate-mapping</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="如果不能上网，编写配置文件是没有提示的，需要自己来配置"><a href="#如果不能上网，编写配置文件是没有提示的，需要自己来配置" class="headerlink" title="如果不能上网，编写配置文件是没有提示的，需要自己来配置"></a>如果不能上网，编写配置文件是没有提示的，需要自己来配置</h3><h4 id="Eclipse："><a href="#Eclipse：" class="headerlink" title="Eclipse："></a>Eclipse：</h4><ul><li>先复制 <a href="http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd</a> –&gt; Window –&gt; preferences –&gt; 搜索xml –&gt; 选择xml catalog –&gt; 点击add –&gt; 选择 URI –&gt; 粘贴复制的地址 –&gt; 选择location，选择本地的 dtd 的路径</li></ul><h4 id="Idea：貌似不存在这样的问题"><a href="#Idea：貌似不存在这样的问题" class="headerlink" title="Idea：貌似不存在这样的问题"></a>Idea：貌似不存在这样的问题</h4><p>idea 很智能，能自己找到 jar 包下的 dtd 文件。</p><h3 id="编写映射的配置文件"><a href="#编写映射的配置文件" class="headerlink" title="编写映射的配置文件"></a>编写映射的配置文件</h3><p><strong>Customer.hbm.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hibernate-mapping</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--配置类和表结构的映射--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">class</span>  <span class="attr">name</span>=<span class="string">&quot;com.renkaigis.domain.Customer&quot;</span> <span class="attr">table</span>=<span class="string">&quot;cst_customer&quot;</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">         <span class="comment">&lt;!--配置 id</span></span><br><span class="line"><span class="comment">            见到 name 属性，JavaBean 的属性</span></span><br><span class="line"><span class="comment">            见到 column 属性，表结构的属性</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;cust_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_id&quot;</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--主键的生成策略--&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">         <span class="comment">&lt;!--配置其他属性--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_name&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_user_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_user_id&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_create_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_create_id&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_source&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_source&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_industry&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_industry&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_level&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_level&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_linkman&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_linkman&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_phone&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_mobile&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_mobile&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写-Hibernate-核心的配置文件"><a href="#编写-Hibernate-核心的配置文件" class="headerlink" title="编写 Hibernate 核心的配置文件**"></a>编写 Hibernate 核心的配置文件**</h2><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>在 src 目录下，创建名称为 hibernate.cfg.xml 的配置文件</p><h3 id="在XML中引入DTD约束"><a href="#在XML中引入DTD约束" class="headerlink" title="在XML中引入DTD约束"></a>在XML中引入DTD约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hibernate-configuration</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><p>打开：<code>../hibernate-release-5.0.7.Final/project/etc/hibernate.properties</code>，可以查看具体的配置信息</p><h4 id="必须配置的4大参数"><a href="#必须配置的4大参数" class="headerlink" title="必须配置的4大参数"></a>必须配置的4大参数</h4><p><strong>注：</strong> 前面的是属性的 name，后面是属性的 value 值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#hibernate.connection.driver_class com.mysql.jdbc.Driver</span><br><span class="line">#hibernate.connection.url jdbc:mysql:///hibernate_01</span><br><span class="line">#hibernate.connection.username root</span><br><span class="line">#hibernate.connection.password 123456</span><br></pre></td></tr></table></figure><h4 id="数据库的方言（必须配置的）"><a href="#数据库的方言（必须配置的）" class="headerlink" title="数据库的方言（必须配置的）"></a>数据库的方言（必须配置的）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#hibernate.dialect org.hibernate.dialect.MySQLDialect</span><br></pre></td></tr></table></figure><h4 id="可选的配置"><a href="#可选的配置" class="headerlink" title="可选的配置"></a>可选的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#hibernate.show_sql true</span><br><span class="line">#hibernate.format_sql true</span><br><span class="line">#hibernate.hbm2ddl.auto update</span><br></pre></td></tr></table></figure><h4 id="引入映射配置文件"><a href="#引入映射配置文件" class="headerlink" title="引入映射配置文件"></a>引入映射配置文件</h4><p>（必须要引入映射文件，框架需要加载映射文件）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;com/itheima/domain/Customer.hbm.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><p><strong>hibernate.cfg.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hibernate-configuration</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--记住：先配置 SessionFactory 标签，一个数据库对应一个 SessionFactory 标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--必须配置的参数有 5 个，4 大参数和数据库的方言--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql:///hibernate_01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库的方言--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--可选配置--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--映射配置文件，需要引入映射的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;com/renkaigis/domain/Customer.hbm.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写-Hibernate-入门代码"><a href="#编写-Hibernate-入门代码" class="headerlink" title="编写 Hibernate 入门代码"></a>编写 Hibernate 入门代码</h2><ul><li><ol><li>先加载配置文件</li></ol></li><li><ol start="2"><li>创建 SessionFactory 对象，生成 Session 对象</li></ol></li><li><ol start="3"><li>创建 Session 对象</li></ol></li><li><ol start="4"><li>开启事务</li></ol></li><li><ol start="5"><li>编写保存的代码</li></ol></li><li><ol start="6"><li>提交事物</li></ol></li><li><ol start="7"><li>释放资源</li></ol></li></ul><p>具体的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试保存客户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 先加载配置文件</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="comment">// 默认加载 src 目录下的 hibernate.cfg.xml 文件</span></span><br><span class="line">    config.configure();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建 SessionFactory 对象</span></span><br><span class="line">    <span class="type">SessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> config.buildSessionFactory();</span><br><span class="line">    <span class="comment">// 3. 创建 Session 对象</span></span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">    <span class="comment">// 4. 开启事务</span></span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tr</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 编写保存代码</span></span><br><span class="line">    Customer c=<span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">    c.setCust_name(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">    c.setCust_level(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    c.setCust_phone(<span class="string">&quot;110&quot;</span>);</span><br><span class="line">    <span class="comment">// 保存数据，操作对象就相当于操作数据库的表结构</span></span><br><span class="line">    session.save(c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 提交事务</span></span><br><span class="line">    tr.commit();</span><br><span class="line">    <span class="comment">// 7. 释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">    factory.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>1）. 下载 Hibernate 框架的开发包；</p></li><li><p>2）. 编写数据库和表结构；</p></li><li><p>3）. 创建 WEB 的项目，导入了开发的 jar 包；</p><ul><li>MySQL 驱动包、Hibernate 开发的必须要有的 jar 包、日志的 jar 包</li></ul></li><li><p>4）. 编写 JavaBean ，不要使用基本数据类型，使用包装类；</p></li><li><p>5）. 编写映射的配置文件（核心），先导入开发的约束，里面正常配置标签；</p></li><li><p>6）. 编写 hibernate 的核心的配置文件，里面的内容是固定的；</p></li><li><p>7）. 编写代码。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 之 idea 新建部署 JavaWeb 项目</title>
      <link href="/JavaWeb-idea-new-web-project.html"/>
      <url>/JavaWeb-idea-new-web-project.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/idea.png"  width="200px"></div><p id="div-border-left-purple">习惯了 Eclipse ，想用用逼格高点的 idea 发现处处碰壁，终于搞好了，记录一下！</p><span id="more"></span><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>新建项目 –&gt; Java EE –&gt; Web Application(<code>勾选 Create web.xml</code>)，点击 next，输入项目名和路径。</p><div align="center"><img src="../../images/javaweb/ideanewweb-01.png" title=""></div><h2 id="建-classes-和-lib-文件夹"><a href="#建-classes-和-lib-文件夹" class="headerlink" title="建 classes 和 lib 文件夹"></a>建 classes 和 lib 文件夹</h2><p>在 WEB-INF 目录下创建两个文件夹 <code>classes</code>、<code>lib</code>：</p><ul><li><p>classes：用来存放编译后输出的 <code>class</code> 文件</p></li><li><p>lib：用来存放项目所需的 <code>jar</code> 包</p></li></ul><h2 id="配置路径和-jar-包"><a href="#配置路径和-jar-包" class="headerlink" title="配置路径和 jar 包"></a>配置路径和 jar 包</h2><p>配置路径，File –&gt; Project Structure –&gt; Modules –&gt; Paths，选择 “Use module compile output path” -&gt; 将 Output path 和 Test output path 都选择刚刚创建的 classes 文件夹。</p><div align="center"><img src="../../images/javaweb/ideanewweb-02.png" title=""></div><p>接着选择 Dependencies –&gt;  将 Module SDK 选择为自己电脑上的 jdk –&gt; 点击右边的“+”号  –&gt; 选择 “1 Jars or Directories” –&gt; 选择刚刚创建的 lib 文件夹 –&gt; 选择 jar directory，OK 就可以了。</p><div align="center"><img src="../../images/javaweb/ideanewweb-05.png" title=""></div><div align="center"><img src="../../images/javaweb/ideanewweb-03.png" title=""></div><div align="center"><img src="../../images/javaweb/ideanewweb-04.png" title=""></div><h2 id="配置-Tomcat-服务器"><a href="#配置-Tomcat-服务器" class="headerlink" title="配置 Tomcat 服务器"></a>配置 Tomcat 服务器</h2><p>菜单 Run –&gt; Edit Configurations… –&gt; 点击 “+” 号 –&gt; 选择 “Tomcat Server” –&gt; 选择 “Local”，在如下界面输入自己的服务器名。</p><div align="center"><img src="../../images/javaweb/ideanewweb-06.png" title=""></div><div align="center"><img src="../../images/javaweb/ideanewweb-08.png" title=""></div><p>点击 “Application server” 后面的 “Configure…”，弹出 Application Servers 窗口，选择本地安装的 Tomcat 目录 –&gt; OK；</p><div align="center"><img src="../../images/javaweb/ideanewweb-07.png" title=""></div><p><code>HTTP port</code> 默认端口号是 8080，可以自己修改，也可以使用默认的。例如，我设为 <code>9090</code>，那么项目的访问路径就为：<code>http://localhost:9090</code></p><p>左下角显示警告，是因为没有部署项目，点击右边的 <code>Fix</code> ，弹出下图，部署自己的项目，点击 ➕ 号，选择自己的 web 项目。右边可以输入项目的访问路径，可以默认，也可以自己定义。</p><div align="center"><img src="../../images/javaweb/ideanewweb-09.png" title=""></div><ul><li><p>若默认，则项目访问路径为：<code>http://localhost:9090</code>(我的9090端口)</p></li><li><p>若自己定义名称 <code>test</code>，则项目访问路径为：<code>http://localhost:9090/test</code>(我的9090端口)</p></li></ul><h2 id="部署并运行项目"><a href="#部署并运行项目" class="headerlink" title="部署并运行项目"></a>部署并运行项目</h2><p>点击主界面上的 run 按钮，就可以启动服务器并运行自己的项目了。默认打开的是项目路径下的 <code>index.jsp</code>，可对他进行自定义编辑，看看自己的成果吧。</p><div align="center"><img src="../../images/javaweb/ideanewweb-10.png" title=""></div><div align="center"><img src="../../images/javaweb/ideanewweb-11.png" title=""></div>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 重新启动出错：MySQL is not running, but lock file (/var/lock/subsys/mysql) exists.</title>
      <link href="/mysqlerror00.html"/>
      <url>/mysqlerror00.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Linux 下：</p><p>运行 <code>service mysql status</code> 时出错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL is not running, but lock file (/var/lock/subsys/mysql) exists</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>解决方案：</strong> <code>rm -f /var/lock/subsys/mysql</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos65 /]<span class="comment"># rm -f /var/lock/subsys/mysql</span></span><br></pre></td></tr></table></figure><p>重新检查 mysql 状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos65 /]<span class="comment"># service mysql status</span></span><br></pre></td></tr></table></figure><p>若没有启动，可以重新启动 mysql 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos65 /]<span class="comment"># service mysql start</span></span><br><span class="line">Starting MySQL..</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 学习笔记（三）—— JSP</title>
      <link href="/JavaWeb03-jsp.html"/>
      <url>/JavaWeb03-jsp.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/0300.png" title="JSP"></div><span id="more"></span><h1 id="JSP-简介"><a href="#JSP-简介" class="headerlink" title="JSP 简介"></a>JSP 简介</h1><h2 id="JSP-概念"><a href="#JSP-概念" class="headerlink" title="JSP 概念"></a>JSP 概念</h2><p><code>JSP</code>（Java Server Pages），java 服务器页面，其根本是一个简化的 Servlet 设计，是一种动态网页技术标准。JSP 是在传统的网页 <code>HTML（标准通用标记语言的子集）文件(*.htm,*.html)</code>中插入 <code>Java 程序段</code>(Scriptlet)和 <code>JSP 标记</code>(tag)，从而形成 JSP 文件，后缀名为(<code>*.jsp</code>)。 用 JSP 开发的 Web 应用是跨平台的，既能在 Linux 下运行，也能在其他操作系统上运行。</p><p><code>JSP</code> 运行在服务器端，处理请求，生成动态的内容。对应的 java 和 class 文件在 tomcat 目录下的 work 目录下。</p><h2 id="JSP-执行流程"><a href="#JSP-执行流程" class="headerlink" title="JSP 执行流程"></a>JSP 执行流程</h2><ol><li>浏览器发送请求，访问 <code>jsp</code> 页面；</li><li>服务器接受请求，<code>jspSerlvet</code> 会帮我们查找对应的 <code>jsp</code> 文件；</li><li>服务器将 <code>jsp</code> 页面翻译成 <code>java</code> 文件；</li><li><code>jvm</code> 会将 <code>java</code> 编译成 <code>.class</code> 文件；</li><li>服务器运行 <code>class</code> 文件，生成动态的内容；</li><li>将内容发送给服务器；</li><li>服务器组成响应信息，发送给浏览器；</li><li>浏览器接受数据，解析展示。</li></ol><h2 id="JSP-脚本"><a href="#JSP-脚本" class="headerlink" title="JSP 脚本"></a>JSP 脚本</h2><ul><li><p>&lt;%   %&gt;：java 程序片段，生成在 jsp 的 service 方法中</p></li><li><p>&lt;%&#x3D;  %&gt;：输出表达式，生成在 jsp 的 service 方法中，相当于 java 中调用 out.print(..)</p></li><li><p>&lt;%!  %&gt;：声明成员，翻译成 servlet 内部的内容。</p></li></ul><h2 id="JSP-注释"><a href="#JSP-注释" class="headerlink" title="JSP 注释"></a>JSP 注释</h2><p>JSP 支持三种注释：<code>HTML</code> 注释、<code>Java</code> 注释、<code>JSP</code> 注释:</p><h1 id="JSP-指令"><a href="#JSP-指令" class="headerlink" title="JSP 指令"></a>JSP 指令</h1><h1 id="EL-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h1><h1 id="JSP-标注标签库（JSTL）"><a href="#JSP-标注标签库（JSTL）" class="headerlink" title="JSP 标注标签库（JSTL）"></a>JSP 标注标签库（JSTL）</h1>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 学习笔记（二）—— Request 与 Response</title>
      <link href="/JavaWeb02-request-response.html"/>
      <url>/JavaWeb02-request-response.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/0200.png" title="Request & Response"></div><span id="more"></span><h1 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h1><p><code>响应</code> 的作用是往浏览器写东西。包括响应行、响应头、响应体。</p><h2 id="操作-Response-对象"><a href="#操作-Response-对象" class="headerlink" title="操作 Response 对象"></a>操作 Response 对象</h2><h3 id="操作响应行"><a href="#操作响应行" class="headerlink" title="操作响应行"></a>操作响应行</h3><p>响应行的格式：协议&#x2F;版本  状态码  状态码说明</p><table><thead><tr><th align="center">状态码</th><th>说明</th></tr></thead><tbody><tr><td align="center">1xx</td><td>已发送请求</td></tr><tr><td align="center">2xx</td><td>已完成响应<br>200：正常响应</td></tr><tr><td align="center">3xx</td><td>还需浏览器进一步操作<br>302：重定向，配合响应头location<br>304：读缓存</td></tr><tr><td align="center">4xx</td><td>用户操作错误<br>404：用户操作错误<br>访问的方法不存在</td></tr><tr><td align="center">5xx</td><td>服务器错误<br>500：内部异常</td></tr></tbody></table><h4 id="设置状态码："><a href="#设置状态码：" class="headerlink" title="设置状态码："></a>设置状态码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//仅针对于上表的 1xx、2xx、3xx</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(<span class="type">int</span> 状态码)</span>:Sets the status code <span class="keyword">for</span> <span class="built_in">this</span> response. </span><br><span class="line"></span><br><span class="line"><span class="comment">//针对于 4xx 和 5xx【了解】</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sendError</span><span class="params">(<span class="type">int</span> 状态码)</span>:Sends an error response to the client using the specified status code and clearing the buffer.</span><br></pre></td></tr></table></figure><h3 id="操作响应头"><a href="#操作响应头" class="headerlink" title="操作响应头"></a>操作响应头</h3><p>格式：key&#x2F;value（value 可以是多个值）</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setHeader(String key,String value):设置字符串形式的响应头</span><br><span class="line">【了解】setIntHeader(String key,<span class="type">int</span> value):设值整型的响应头</span><br><span class="line">【了解】setDateHeader(String key,<span class="type">long</span> value):设值时间的响应头</span><br><span class="line"></span><br><span class="line">addHeader(String key,String value):添加字符串形式的响应头，之前设置过则追加，若没有设置过则设置</span><br><span class="line">【了解】addIntHeader(String key,<span class="type">int</span> value):添加整型的响应头</span><br><span class="line">【了解】addDateHeader(String key,<span class="type">long</span> value):添加时间的响应头</span><br></pre></td></tr></table></figure><h4 id="常用的响应头"><a href="#常用的响应头" class="headerlink" title="常用的响应头"></a>常用的响应头</h4><ul><li><p>location：重定向</p></li><li><p>refresh：定时刷新</p></li><li><p>content-type：设置文件的 mime 类型，设置响应流的编码及告诉浏览器用什么编码打开</p></li><li><p>content-disposition：文件下载</p></li></ul><h4 id="重定向与定时刷新"><a href="#重定向与定时刷新" class="headerlink" title="重定向与定时刷新"></a>重定向与定时刷新</h4><h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><ul><li>方式1：<strong>★★</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;/javaweb/test1&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>方式2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line">respooen.setHeader(<span class="string">&quot;location&quot;</span>,<span class="string">&quot;/day10/loc2&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="定时刷新"><a href="#定时刷新" class="headerlink" title="定时刷新"></a>定时刷新</h5><ul><li>方式1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置头 refresh</span></span><br><span class="line">response.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;秒数;url=跳转的路径&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>方式2：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;--! 设置html的meta标签 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;3;url=/javaweb/test1.html&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="操作响应体"><a href="#操作响应体" class="headerlink" title="操作响应体"></a>操作响应体</h3><p>响应体即页面上要展示的内容。</p><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Writer <span class="title function_">getWriter</span><span class="params">()</span>:字符流</span><br><span class="line">ServletOutputStream <span class="title function_">getOutputStream</span><span class="params">()</span>:字节流</span><br></pre></td></tr></table></figure><p><strong>注：</strong>自己写的东西用字符流,其他一概用字节流.</p><h4 id="处理响应中文乱码"><a href="#处理响应中文乱码" class="headerlink" title="处理响应中文乱码"></a>处理响应中文乱码</h4><ul><li>方式1：<strong>★</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>方式2：理解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><p><em>详细的介绍如下：</em></p><h5 id="处理字节流"><a href="#处理字节流" class="headerlink" title="处理字节流"></a>处理字节流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置浏览器默认打开编码</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//中文转成字节数组编码</span></span><br><span class="line">response.getOutputStream().write(<span class="string">&quot;上山打老虎&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><h5 id="处理字符流"><a href="#处理字符流" class="headerlink" title="处理字符流"></a>处理字符流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置response的缓冲区的编码</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//设置浏览器默认打开的编码.</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);<span class="comment">//相当于上面两句</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>两个流互斥</li><li>当响应完成之后，服务器会判断一下流是否已经关闭，若没有关闭，服务器会帮我们关闭。（底层使用的缓冲流）</li></ul><h2 id="扩展-文件下载"><a href="#扩展-文件下载" class="headerlink" title="扩展-文件下载"></a>扩展-文件下载</h2><h3 id="超链接方式"><a href="#超链接方式" class="headerlink" title="超链接方式"></a>超链接方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/javaweb/download/Notes.txt&quot;</span>&gt;</span>下载 Notes.txt<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若浏览器能解析该资源的mime类型，则打开；若不能解析，则下载。</p><h3 id="手动编码方式"><a href="#手动编码方式" class="headerlink" title="手动编码方式"></a>手动编码方式</h3><p>通过 <code>servlet</code> 完成。</p><h4 id="a-设置文件的-mime-类型"><a href="#a-设置文件的-mime-类型" class="headerlink" title="a.设置文件的 mime 类型"></a>a.设置文件的 mime 类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String mimeType=context.getMimeType(文件名);</span><br><span class="line">response.setContentType(mimeType);</span><br></pre></td></tr></table></figure><h4 id="b-设置下载头信息"><a href="#b-设置下载头信息" class="headerlink" title="b.设置下载头信息"></a>b.设置下载头信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span>+文件名称);</span><br></pre></td></tr></table></figure><h4 id="c-提供流"><a href="#c-提供流" class="headerlink" title="c.提供流"></a>c.提供流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.getOutputStream();</span><br></pre></td></tr></table></figure><ul><li>扩展-使用commons-io工具类，对拷流：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IOUtils.copy(is,os);</span><br></pre></td></tr></table></figure><h4 id="案例-文件下载"><a href="#案例-文件下载" class="headerlink" title="案例-文件下载"></a>案例-文件下载</h4><h5 id="1-在页面中提供一组下载的链接"><a href="#1-在页面中提供一组下载的链接" class="headerlink" title="1.在页面中提供一组下载的链接"></a>1.在页面中提供一组下载的链接</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.getWriter().println(<span class="string">&quot;&lt;h2&gt;手动编码方式下载&lt;/h2&gt;&quot;</span>);</span><br><span class="line">response.getWriter().println(<span class="string">&quot;&lt;a href=&#x27;/WEB10/downloadServlet?filename=a.bmp&#x27;&gt;a.bmp&lt;/a&gt;&lt;br/&gt;&quot;</span>);</span><br><span class="line">response.getWriter().println(<span class="string">&quot;&lt;a href=&#x27;/WEB10/downloadServlet?filename=WEB01.zip&#x27;&gt;WEB01.zip&lt;/a&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="2-编写-DownloadServlet"><a href="#2-编写-DownloadServlet" class="headerlink" title="2.编写 DownloadServlet"></a>2.编写 <code>DownloadServlet</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取下载文件的名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意中文乱码:</span></span><br><span class="line">filename = <span class="keyword">new</span> <span class="title class_">String</span>(filename.getBytes(<span class="string">&quot;iso8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//文件下载</span></span><br><span class="line"><span class="comment">//1.设置文件的mimeType</span></span><br><span class="line"><span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> context.getMimeType(filename);</span><br><span class="line">response.setContentType(mimeType);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.设置下载的头信息</span></span><br><span class="line"><span class="comment">//原始的</span></span><br><span class="line"><span class="comment">//response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot;+filename);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常见的浏览器将文件名称使用utf-8 不推荐 不兼容火狐</span></span><br><span class="line"><span class="comment">//response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot;+URLEncoder.encode(filename, &quot;utf-8&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1:通过 DownLoadUtils 工具类编码</span></span><br><span class="line"><span class="comment">//String _filename=DownLoadUtils.getName(request.getHeader(&quot;user-agent&quot;), filename);</span></span><br><span class="line"><span class="comment">//response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot;+_filename);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2:网络上的方式 (8成好使)</span></span><br><span class="line">response.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(filename.getBytes(<span class="string">&quot;gbk&quot;</span>), <span class="string">&quot;iso8859-1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.对拷流</span></span><br><span class="line"><span class="comment">//获取输入流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> context.getResourceAsStream(<span class="string">&quot;/download/&quot;</span> + filename);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取输出流</span></span><br><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*int len = -1;</span></span><br><span class="line"><span class="comment">byte[] b = new byte[1024];</span></span><br><span class="line"><span class="comment">while((len = is.read(b))!=-1)&#123;</span></span><br><span class="line"><span class="comment">    os.write(b, 0, len);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">is.close();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用commons-io工具类对拷流</span></span><br><span class="line">IOUtils.copy(is, os);</span><br><span class="line"></span><br><span class="line">os.close();</span><br><span class="line">is.close();</span><br></pre></td></tr></table></figure><p>其中，<code>DownLoadUtils</code> 如下进行封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownLoadUtils</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line"><span class="keyword">if</span> (agent.contains(<span class="string">&quot;MSIE&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">// IE浏览器</span></span><br><span class="line">filename = URLEncoder.encode(filename, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">filename = filename.replace(<span class="string">&quot;+&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">&quot;Firefox&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">// 火狐浏览器</span></span><br><span class="line"><span class="type">BASE64Encoder</span> <span class="variable">base64Encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>();</span><br><span class="line">filename = <span class="string">&quot;=?utf-8?B?&quot;</span> + base64Encoder.encode(filename.getBytes(<span class="string">&quot;utf-8&quot;</span>)) + <span class="string">&quot;?=&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 其它浏览器</span></span><br><span class="line">filename = URLEncoder.encode(filename, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> filename;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展-生成验证码"><a href="#扩展-生成验证码" class="headerlink" title="扩展-生成验证码"></a>扩展-生成验证码</h2><ul><li>编写 <code>CodeServlet</code>:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用java图形界面技术绘制一张图片</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">charNum</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">30</span> * <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建一张内存图片</span></span><br><span class="line"><span class="type">BufferedImage</span> <span class="variable">bufferedImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获得绘图对象</span></span><br><span class="line"><span class="type">Graphics</span> <span class="variable">graphics</span> <span class="operator">=</span> bufferedImage.getGraphics();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、绘制背景颜色</span></span><br><span class="line">graphics.setColor(Color.YELLOW);</span><br><span class="line">graphics.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、绘制图片边框</span></span><br><span class="line">graphics.setColor(Color.BLUE);</span><br><span class="line">graphics.drawRect(<span class="number">0</span>, <span class="number">0</span>, width - <span class="number">1</span>, height - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、输出验证码内容</span></span><br><span class="line">graphics.setColor(Color.RED);</span><br><span class="line">graphics.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;宋体&quot;</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机输出4个字符</span></span><br><span class="line"><span class="type">Graphics2D</span> <span class="variable">graphics2d</span> <span class="operator">=</span> (Graphics2D) graphics;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;ABCDEFGHGKLMNPQRSTUVWXYZ23456789&quot;</span>;</span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="comment">// session中要用到</span></span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> random.nextInt(<span class="number">32</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> String.valueOf(s.charAt(index));</span><br><span class="line">    msg += content;</span><br><span class="line">    <span class="type">double</span> <span class="variable">theta</span> <span class="operator">=</span> random.nextInt(<span class="number">45</span>) * Math.PI / <span class="number">180</span>;</span><br><span class="line">    <span class="comment">// 让字体扭曲</span></span><br><span class="line">    graphics2d.rotate(theta, x, <span class="number">18</span>);</span><br><span class="line">    graphics2d.drawString(content, x, <span class="number">18</span>);</span><br><span class="line">    graphics2d.rotate(-theta, x, <span class="number">18</span>);</span><br><span class="line">    x += <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、绘制干扰线</span></span><br><span class="line">graphics.setColor(Color.GRAY);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> random.nextInt(width);</span><br><span class="line">    <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> random.nextInt(width);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">y1</span> <span class="operator">=</span> random.nextInt(height);</span><br><span class="line">    <span class="type">int</span> <span class="variable">y2</span> <span class="operator">=</span> random.nextInt(height);</span><br><span class="line">    graphics.drawLine(x1, y1, x2, y2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">graphics.dispose();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片输出 ImageIO</span></span><br><span class="line">ImageIO.write(bufferedImage, <span class="string">&quot;jpg&quot;</span>, response.getOutputStream());</span><br></pre></td></tr></table></figure><ul><li>点击换一张验证码的 <code>js</code> 代码:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeImg</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="comment">//操作src属性</span></span><br><span class="line">    obj.<span class="property">src</span>=<span class="string">&quot;/day10/code?i=&quot;</span>+<span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下图：</p><img src="../../images/javaweb/0201.png"><h1 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h1><p><code>请求</code> 的作用是获取浏览器发送过来的数据。</p><h2 id="操作-Request-对象"><a href="#操作-Request-对象" class="headerlink" title="操作 Request 对象"></a>操作 Request 对象</h2><h3 id="操作请求行"><a href="#操作请求行" class="headerlink" title="操作请求行"></a>操作请求行</h3><p>请求行的格式：请求方式  请求资源  协议&#x2F;版本</p><h4 id="常用方法：HttpServletRequest"><a href="#常用方法：HttpServletRequest" class="headerlink" title="常用方法：HttpServletRequest"></a>常用方法：HttpServletRequest</h4><ul><li>【掌握】<strong>★</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getMethod</span><span class="params">()</span> <span class="comment">//获取请求方式</span></span><br><span class="line">String <span class="title function_">getRemoteAddr</span><span class="params">()</span> <span class="comment">//获取ip地址</span></span><br><span class="line">String <span class="title function_">getContextPath</span><span class="params">()</span> <span class="comment">//在 java 中获取项目名称  (/javaweb)</span></span><br></pre></td></tr></table></figure><ul><li>【了解】</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getRequestURI() <span class="comment">//获取的是 从项目名到参数之前的内容  /javaweb/regist</span></span><br><span class="line">getRequestURL() <span class="comment">//获取的带协议的完整路径   http://localhost/javaweb/regist</span></span><br><span class="line">String <span class="title function_">getQueryString</span><span class="params">()</span> <span class="comment">//get请求的所有参数   username=tom&amp;password=123</span></span><br><span class="line">String <span class="title function_">getProtocol</span><span class="params">()</span> <span class="comment">//获取协议和版本</span></span><br></pre></td></tr></table></figure><ul><li>例如：请求行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET  /day10/row?username=tom&amp;password=<span class="number">123</span>  HTTP/<span class="number">1.1</span></span><br></pre></td></tr></table></figure><h3 id="操作请求头"><a href="#操作请求头" class="headerlink" title="操作请求头"></a>操作请求头</h3><p>格式：key&#x2F;value（value 可以是多个值）</p><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li>【掌握】<strong>★</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getHeader</span><span class="params">(String key)</span> <span class="comment">//通过key获取指定的value(一个)</span></span><br></pre></td></tr></table></figure><ul><li>【了解】</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enumeration <span class="title function_">getHeaders</span><span class="params">(String name)</span> <span class="comment">//通过key获取指定的value(多个)</span></span><br><span class="line">Enumeration <span class="title function_">getHeaderNames</span><span class="params">()</span> <span class="comment">//获取所有的请求头的名称</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getIntHeader</span><span class="params">(String key)</span> <span class="comment">//获取整型的请求头</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">getDateHeader</span><span class="params">(String key)</span> <span class="comment">//获取时间的请求头</span></span><br></pre></td></tr></table></figure><ul><li>重要的请求头:</li></ul><blockquote><p>user-agent：浏览器内核 msie firefox chrome<br>referer：页面从那里来 防盗链</p></blockquote><h3 id="操作请求参数"><a href="#操作请求参数" class="headerlink" title="操作请求参数"></a>操作请求参数</h3><p>请求参数：username&#x3D;tom&amp;password&#x3D;123&amp;hobby&#x3D;drink&amp;hobby&#x3D;sleep</p><h4 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getParameter</span><span class="params">(String key)</span> <span class="comment">//获取一个值</span></span><br><span class="line">String[] getParameterValues(String key) <span class="comment">//通过一个key获取多个值</span></span><br><span class="line">Map&lt;String,String[]&gt; getParameterMap() <span class="comment">//获取所有的参数名称和值</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//value</span></span><br><span class="line">username:tom</span><br><span class="line"></span><br><span class="line"><span class="comment">//values</span></span><br><span class="line">hobby:[drink, sleep]</span><br><span class="line"></span><br><span class="line"><span class="comment">//map</span></span><br><span class="line">username::[tom]</span><br><span class="line">password::[<span class="number">123</span>]</span><br><span class="line">hobby::[drink, sleep]</span><br></pre></td></tr></table></figure><h3 id="请求的中文乱码"><a href="#请求的中文乱码" class="headerlink" title="请求的中文乱码"></a>请求的中文乱码</h3><ul><li><p>对于 <code>get</code> 请求：参数追加到地址栏，会使用 <code>utf-8</code> 编码，服务器（tomcat7）接受到请求之后，使用 <code>iso-8859-1</code> 解码，所以会出现乱码。</p></li><li><p>对于 <code>post</code> 请求：参数是放在请求体中，服务器获取请求体的时候使用 <code>iso-8859-1</code> 解码，也会出现乱码。</p></li></ul><p>通用的方法：缺点是需要一个一个设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(参数.getBytes(<span class="string">&quot;iso-8859-1&quot;</span>),<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>针对于 <code>post</code> 请求的方法：只需要将请求流的编码设置成 <code>utf-8</code> 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="域对象-request"><a href="#域对象-request" class="headerlink" title="域对象 request"></a>域对象 request</h2><table><thead><tr><th align="center">request 域</th><th>生命周期</th></tr></thead><tbody><tr><td align="center">创建</td><td>一次请求来的时候</td></tr><tr><td align="center">销毁</td><td>响应生成的时候</td></tr><tr><td align="center">作用</td><td>存放一次请求里面的数据</td></tr></tbody></table><ul><li>请求转发（也叫请求链、请求串）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;内部路径&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure><ul><li>作为域对象存取值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object o)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line"></span><br><span class="line">request.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="请求转发与重定向"><a href="#请求转发与重定向" class="headerlink" title="请求转发与重定向"></a>请求转发与重定向</h2><ul><li>重定向</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(String path);</span><br></pre></td></tr></table></figure><ul><li>请求转发</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(String path).forward(request,response);</span><br></pre></td></tr></table></figure><blockquote><p>重定向发送两次请求，请求转发一次请求</p><p>重定向地址栏发生改变，请求转发不变</p><p>重定向是从浏览器发送，请求转发是服务器内部</p><p>重定向不存在 <code>request</code> 域对象，请求转发可以使用 <code>request</code> 域对象</p><p>重定向是 <code>response</code> 的方法，请求转发是 <code>request</code> 的方法</p><p>重定向可以请求站外资源，请求转发不可以</p></blockquote><h2 id="扩展-编码解码"><a href="#扩展-编码解码" class="headerlink" title="扩展-编码解码"></a>扩展-编码解码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URLEncoder.encode(String s, <span class="string">&quot;utf-8&quot;</span>); <span class="comment">//指定编码</span></span><br><span class="line">URLDecoder.decode(String s8, <span class="string">&quot;iso8859-1&quot;</span>); <span class="comment">//指定解码</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    String s=<span class="string">&quot;天下&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用 utf-8 进行编码</span></span><br><span class="line">    String s8=URLEncoder.encode(s, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//System.out.println(s8);</span></span><br><span class="line">    <span class="comment">//对utf-8的字符串通过iso8859-1进行解码，则会出现乱码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">so</span> <span class="operator">=</span> URLDecoder.decode(s8, <span class="string">&quot;iso8859-1&quot;</span>);</span><br><span class="line">    System.out.println(so); <span class="comment">//乱码</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">byte</span>[] b = so.getBytes(<span class="string">&quot;iso-8859-1&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">_s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(b, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//上面的两句简写为：String _s=new String(so.getBytes(&quot;iso8859-1&quot;),&quot;utf-8&quot;);</span></span><br><span class="line">    System.out.println(_s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>整理的也许不全面，就这样吧！</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 学习笔记（一）—— HTTP 与 Servlet</title>
      <link href="/JavaWeb01-http-servlet.html"/>
      <url>/JavaWeb01-http-servlet.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/javaweb/0100.png" title="Http & Servlet"></div><span id="more"></span><h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><h2 id="HTTP-协议的概念"><a href="#HTTP-协议的概念" class="headerlink" title="HTTP 协议的概念"></a>HTTP 协议的概念</h2><p><code>超文本传输协议</code>（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。</p><p><strong>规定被约束的对象要遵守的规则！</strong></p><h2 id="HTTP-协议-1"><a href="#HTTP-协议-1" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><p>HTTP 协议规定：浏览器（客户端）向服务器发送何种格式的数据，服务器会处理数据，向浏览器（客户端）作出响应。（向客户端发送何种格式的数据）</p><p>HTTP 协议的特点:</p><ul><li><p>HTTP 协议遵守一个请求响应模型；</p></li><li><p>请求和响应必须成对出现；</p></li><li><p>必须先有请求后有响应；</p></li><li><p>HTTP 协议默认的端口：80</p></li></ul><h2 id="HTTP-协议的请求部分（Request）"><a href="#HTTP-协议的请求部分（Request）" class="headerlink" title="HTTP 协议的请求部分（Request）"></a>HTTP 协议的请求部分（Request）</h2><p>组成部分：<code>请求行</code>、<code>请求头</code>、<code>请求体</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//get 请求方式的抓包：</span><br><span class="line">GET /WEB09/demo1/subSucc.html?username=aaa&amp;password=123 HTTP/1.1</span><br><span class="line">Accept: text/html, application/xhtml+xml, */*</span><br><span class="line">X-HttpWatch-RID: 63397-10023</span><br><span class="line">Referer: http://localhost:8080/WEB09/demo1/demo1.html</span><br><span class="line">Accept-Language: zh-Hans-CN,zh-Hans;q=0.5</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//post 请求方式的抓包：</span><br><span class="line">POST /WEB09/demo1/subSucc.html HTTP/1.1</span><br><span class="line">Accept: text/html, application/xhtml+xml, */*</span><br><span class="line">X-HttpWatch-RID: 63397-10049</span><br><span class="line">Referer: http://localhost:8080/WEB09/demo1/demo1.html</span><br><span class="line">Accept-Language: zh-Hans-CN,zh-Hans;q=0.5</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Content-Length: 25</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">username=aaa&amp;password=123</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>请求行：请求信息的第一行，包含：<code>请求方式</code>、<code>请求路径</code>、<code>协议版本</code>。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /WEB09/demo1/subSucc.html?username=aaa&amp;password=123 HTTP/1.1</span><br></pre></td></tr></table></figure><p>请求方式：请求方式有很多种，常用的是 <code>GET</code> 和 <code>POST</code>。</p><p>GET 和 POST 区别：</p><ul><li>GET：请求参数会显示到地址栏；GET方式有大小的限制；GET方式没有请求体。</li><li>POST：请求参数不会显示到地址栏；在请求体中，POST没有大小限制；POST方式有请求体。</li></ul><p>只有表单设置为 <code>method=&quot;post&quot;</code> 才是 post 请求，其他的都是 get 请求</p><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>请求头：请求信息的第二行到空行结束。</p><p>格式：key：value（value可以是多个值）</p><p>常见的请求头:</p><table><thead><tr><th>请求头</th><th>描述</th></tr></thead><tbody><tr><td>Accept: text&#x2F;html,image&#x2F;bmp</td><td>支持数据类型<br>text&#x2F;html text&#x2F;css text&#x2F;javascript 大类型&#x2F;小类型 mime类型</td></tr><tr><td>Accept-Charset: ISO-8859-1</td><td>字符集</td></tr><tr><td>Accept-Encoding: gzip</td><td>支持压缩</td></tr><tr><td>Accept-Language:zh-cn</td><td>语言环境</td></tr><tr><td>Host: <a href="http://www.renkaigis.com/">www.renkaigis.com:80</a></td><td>访问主机</td></tr><tr><td>★ If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT</td><td>缓存文件的最后修改时间，和响应中一个头一起使用，完成本地缓存的查找</td></tr><tr><td>★ Referer: <a href="http://www.renkaigis.com/index.jsp">http://www.renkaigis.com/index.jsp</a></td><td>来自哪个页面、防盗链</td></tr><tr><td>★ User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 5.5; Windows NT 5.0)</td><td>获得客户端浏览器的信息。（文件下载：IE：URL编码，火狐：Base64）</td></tr><tr><td>Connection:Keep-Alive</td><td>链接状态</td></tr></tbody></table><h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><p>请求体：空行以下的内容。</p><p>只有post才有请求体，获取请求参数：<a href="http://xxxx/?username=tom&password=123">http://xxxx?username=tom&amp;password=123</a></p><p>格式：username&#x3D;tom&amp;password&#x3D;123</p><h2 id="HTTP-协议的响应部分（Response）"><a href="#HTTP-协议的响应部分（Response）" class="headerlink" title="HTTP 协议的响应部分（Response）"></a>HTTP 协议的响应部分（Response）</h2><p>组成部分：<code>响应行</code>、<code>响应头</code>、<code>响应体</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Apache-Coyote/1.1</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">ETag: W/&quot;147-1455670867735&quot;</span><br><span class="line">Last-Modified: Wed, 17 Feb 2016 01:01:07 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 147</span><br><span class="line">Date: Wed, 17 Feb 2016 01:17:06 GMT</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Java&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Java学习&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><p>响应行：响应信息的第一行。</p><p>格式：协议&#x2F;版本 状态码 状态码说明</p><p>例如：HTTP&#x2F;1.1 200 OK</p><p>状态码：</p><ul><li>200 正常响应成功</li><li>302 重定向</li><li>304 读缓存</li><li>404 用户操作资源不存在</li><li>500 服务器内部异常</li></ul><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>响应头：从响应信息的第二行到空行结束。</p><p>格式:key：value(value可以是多个值)</p><p>常见的响应头：</p><table><thead><tr><th>响应头</th><th>描述</th></tr></thead><tbody><tr><td>★ Location: <a href="http://www.it315.org/index.jsp">http://www.it315.org/index.jsp</a></td><td>跳转方向 和302一起使用的</td></tr><tr><td>Server:apache tomcat</td><td>服务器型号</td></tr><tr><td>Content-Encoding: gzip</td><td>数据压缩</td></tr><tr><td>Content-Length: 80</td><td>数据长度</td></tr><tr><td>Content-Language: zh-cn</td><td>语言环境</td></tr><tr><td>★ Content-Type: text&#x2F;html; charset&#x3D;GB2312</td><td>数据类型</td></tr><tr><td>★ Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT</td><td>最后的修改文件的事件.与 If-Modified-Since 一起使用</td></tr><tr><td>★ Refresh: 1;url&#x3D;<a href="http://www.it315.org/">http://www.it315.org</a></td><td>定时刷新</td></tr><tr><td>★ Content-Disposition: attachment; filename&#x3D;aaa.zip</td><td>下载</td></tr><tr><td>★ Set-Cookie:SS&#x3D;Q0&#x3D;5Lb_nQ;</td><td>path&#x3D;&#x2F;search</td></tr><tr><td>Expires: -1</td><td>缓存</td></tr><tr><td>Cache-Control: no-cache</td><td>缓存</td></tr><tr><td>Pragma: no-cache</td><td>缓存</td></tr><tr><td>Connection: Keep-Alive</td><td>连接</td></tr></tbody></table><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>响应体：页面上展示的内容。</p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>Servlet</code> 是运行在服务器端的一个 Java 小程序，动态的 web 开发技术，主要功能在于交互式地浏览和修改数据，生成动态 web 内容。</p><p><code>Servlet = Service + Applet</code></p><h2 id="Servlet-实现过程"><a href="#Servlet-实现过程" class="headerlink" title="Servlet 实现过程"></a>Servlet 实现过程</h2><ul><li><p>客户端发送请求至服务器端；</p></li><li><p>服务器将请求信息发送至 Servlet；</p></li><li><p>Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；</p></li><li><p>服务器将响应返回给客户端。</p></li></ul><h2 id="编写一个-Servlet-步骤"><a href="#编写一个-Servlet-步骤" class="headerlink" title="编写一个 Servlet 步骤"></a>编写一个 Servlet 步骤</h2><p>1、编写一个类:</p><ul><li><p>a. 继承 HttpServlet，</p></li><li><p>b. 重写 doGet 或者 doPost 方法；</p></li></ul><p>2、编写配置文件（<code>web-inf/web.xml</code>）:</p><ul><li><p>a. 注册 Servlet;</p></li><li><p>b. 绑定路径</p></li></ul><p>3、访问：<code>http://主机:端口号/项目名/路径</code></p><h3 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h3><p>格式:key&#x3D;value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sting value=request.getParameter(<span class="string">&quot;key&quot;</span>)</span><br></pre></td></tr></table></figure><p>例如: <a href="http://localhost/day09/hello?username=tom">http://localhost/day09/hello?username=tom</a></p><ul><li>request.getParameter(“username”) 就可以获取 tom 值</li></ul><h3 id="回写内容"><a href="#回写内容" class="headerlink" title="回写内容"></a>回写内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.getWriter().print(<span class="string">&quot;success&quot;</span>);</span><br></pre></td></tr></table></figure><p>处理响应数据中文乱码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>); <span class="comment">//建议放在方法中的第一行</span></span><br></pre></td></tr></table></figure><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p>配置文件路径：<code>web-inf/web.xml</code></p><ul><li>配置 Servlet 到 WEB 服务器。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet的名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet的类的全路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.demo1.DemoServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Servlet的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Servlet的名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet的访问路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletDemo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>url-pattern的配置: <strong>★</strong></p><ul><li><p>方式1：完全匹配  必须以<code>&quot;/&quot;</code>开始 例如: <code>/hello /a/b/c</code></p></li><li><p>方式2：目录匹配  必须<code>&quot;/&quot;</code>开始  以<code>&quot;*&quot;</code>结束   例如: <code>/a/*  /*</code></p></li><li><p>方式3：后缀名匹配 以<code>&quot;*&quot;</code>开始 以字符结尾 例如: <code>*.jsp  *.do  *.action</code></p></li></ul><p>优先级:</p><ul><li>完全匹配 &gt; 目录匹配 &gt; 后缀名匹配</li></ul><p>练习:</p><pre><code>有如下的一些映射关系：    Servlet1 映射到 /abc/*     Servlet2 映射到 /*    Servlet3 映射到 /abc     Servlet4 映射到 *.do 问题:当请求URL为“/abc/a.html”，“/abc/*”和“/*”都匹配，哪个servlet响应    Servlet引擎将调用Servlet1。当请求URL为“/abc”时，“/*”和“/abc”都匹配，哪个servlet响应    Servlet引擎将调用Servlet3。    当请求URL为“/abc/a.do”时，“/abc/*”和“*.do”都匹配，哪个servlet响应    Servlet引擎将调用Servlet1。当请求URL为“/a.do”时，“/*”和“*.do”都匹配，哪个servlet响应    Servlet引擎将调用Servlet2.当请求URL为“/xxx/yyy/a.do”时，“/*”和“*.do”都匹配，哪个servlet响应    Servlet引擎将调用Servlet2。</code></pre><h3 id="配置-Servlet-的启动时加载"><a href="#配置-Servlet-的启动时加载" class="headerlink" title="配置 Servlet 的启动时加载"></a>配置 Servlet 的启动时加载</h3><p>在 web.xml 中 <code>&lt;servlet&gt;</code> 标签中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作用：用来修改 servlet 的初始化时机</p><p>取值：正整数，值越大优先级越低</p><p>当我们的配置文件里面没有指定配置的话，会查找 tomcat 的 web.xml，若请求我们自己的项目处理不了,tomcat 的默认的 servlet 会帮我们处理信息。</p><h3 id="路径的写法"><a href="#路径的写法" class="headerlink" title="路径的写法"></a>路径的写法</h3><p>相对路径：</p><ul><li><p>当前路径    .&#x2F; 或者 什么都不写</p></li><li><p>上一级路径 ..&#x2F;</p></li></ul><p>绝对路径：(我们使用)</p><ul><li><p>带主机和协议的绝对路径（访问站外资源）</p></li><li><p><a href="http://www.itheima.com/xxxx">http://www.itheima.com/xxxx</a></p></li><li><p><a href="http://localhost/day09/hello">http://localhost:80/day09/hello</a></p></li><li><p>不带主机和协议的绝对路径</p></li><li><p>&#x2F;day09&#x2F;hello（经常使用）</p></li></ul><h2 id="Servlet-结构与方法"><a href="#Servlet-结构与方法" class="headerlink" title="Servlet 结构与方法"></a>Servlet 结构与方法</h2><h3 id="servlet的体系结构"><a href="#servlet的体系结构" class="headerlink" title="servlet的体系结构:"></a>servlet的体系结构:</h3><pre><code>Servlet:接口    |GenericServlet:抽象类    |HttpServlet:抽象类    |自定义servlet</code></pre><h3 id="Servlet-常用方法"><a href="#Servlet-常用方法" class="headerlink" title="Servlet 常用方法:"></a>Servlet 常用方法:</h3><ul><li><p><code>void init(ServletConfig config)</code>:初始化</p></li><li><p><code>void service(ServletRequest request,ServletResponse response)</code>:服务 处理业务逻辑</p></li><li><p><code>void destroy()</code>:销毁</p></li><li><p><code>ServletConfig getServletConfig()</code>:获取当前 servlet 的配置对象</p></li></ul><h3 id="GenericServlet-常用方法"><a href="#GenericServlet-常用方法" class="headerlink" title="GenericServlet 常用方法:"></a>GenericServlet 常用方法:</h3><p>除了 service 方法没有显示，其他都实现了</p><p>空参的 init()，若我们自己想对 servlet 进行初始化操作，重写这个 init() 方法即可</p><h3 id="HttpServlet-常用方法："><a href="#HttpServlet-常用方法：" class="headerlink" title="HttpServlet 常用方法："></a>HttpServlet 常用方法：</h3><p>service 做了实现，把参数强转，调用了重载的 service 方法</p><p>重载的 service 方法获取请求的方式，根据请求方式的不同调用相应 <code>doXxx()</code> 方法</p><p>doGet 和 doPost 方法</p><h2 id="Servlet-的生命周期"><a href="#Servlet-的生命周期" class="headerlink" title="Servlet 的生命周期"></a>Servlet 的生命周期</h2><p>生命周期指的是一个对象从创建到销毁的过程。</p><p>Servlet 的生命周期，指的是 Servlet 对象从创建到销毁的过程。</p><p><code>void init(ServletConfig config)</code>:初始化<br>     * 初始化方法<br>     * 执行者:服务器<br>     * 执行次数:一次<br>     * 执行时机:默认第一次访问的时候<br><code>void service(ServletRequest request,ServletResponse response)</code>:服务 处理业务逻辑<br>     * 服务<br>     * 执行者:服务器<br>     * 执行次数:请求一次执行一次<br>     * 执行时机:请求来的时候<br><code>void destroy()</code>:销毁<br>     * 销毁<br>     * 执行者:服务器<br>     * 执行次数:只执行一次<br>     * 执行时机:当servlet被移除的时候或者服务器正常关闭的时候</p><p>Serlvet是单实例多线程</p><blockquote><p>默认客户端第一次访问 Servlet 的时候，服务器创建一个 Servlet 对象，并调用 init 实现初始化操作。并调用一次 service 方法，每当请求来的时候，服务器创建一个线程，调用 service 方法执行自己的业务逻辑。当 Servlet 被移除的时候或者服务器正常关闭的时候，Servlet 对象就会被销毁，服务器调用 Servlet 的 destroy 方法实现销毁操作。</p></blockquote><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="常见的响应头——refresh"><a href="#常见的响应头——refresh" class="headerlink" title="常见的响应头——refresh"></a>常见的响应头——refresh</h2><p>refresh（定时刷新）</p><p>响应头格式:</p><p><code>refresh:秒数;url=跳转的路径</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置响应头：</span></span><br><span class="line"><span class="comment">//设置字符串形式的响应头</span></span><br><span class="line">response.setHeader(String key,String value);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//追加响应头，若之前设置过这个头，则追加；若没有设置过，则设置</span></span><br><span class="line">response.addHeader(String key,String value);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置定时刷新：</span></span><br><span class="line">response.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;3;url=/day0901/login.htm&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>另：</strong> 可以通过html页面中的一个标签设置头信息 <code>&lt;meta&gt;</code> 标签，跳转到指定路径。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5;url=/WEB09/succ.html&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p><code>ServletContext</code> ：全局管理者（上下文），是一个项目的引用，代表了当前项目。</p><p>当项目启动的时候，服务器会为每一个 web 项目创建一个 servletContext 对象。</p><p>当项目被移除的时候或者服务器关闭的时候 servletContext 销毁。</p><p>servletContext 接口是 Servlet 中最大的一个接口，呈现了 web 应用的 Servlet 视图。 ServletContext 实例是通过 getServletContext() 方法获得的，由于 HttpServlet 继承 GenericServlet 的关系，GenericServlet 类和 HttpServlet 类同时具有该方法。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h3><blockquote><ol><li>获取全局的初始化参数</li><li>共享资源(xxxAttribute)</li><li>获取文件资源</li><li>其他操作</li></ol></blockquote><h3 id="获取-servletcontext"><a href="#获取-servletcontext" class="headerlink" title="获取 servletcontext"></a>获取 servletcontext</h3><p>方式1：了解</p><blockquote><p>getServletConfig().getServletContext()</p></blockquote><p>方式2：</p><blockquote><p>getServletContext()</p></blockquote><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li>了解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getInitParameter</span><span class="params">(String key)</span><span class="comment">//通过名称获取指定的参数值</span></span><br><span class="line">Enumeration <span class="title function_">getInitParameterNames</span><span class="params">()</span><span class="comment">//获取所有的参数名称</span></span><br></pre></td></tr></table></figure><p>在根标签下有一个 <code>context-param</code> 子标签，用来存放初始化参数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>xxxAttribute（set,get）</p></li><li></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getRealPath</span><span class="params">(String path)</span><span class="comment">//获取文件部署到tomcat上的真实路径(带tomcat路径)</span></span><br><span class="line"></span><br><span class="line">getRealPath(<span class="string">&quot;/&quot;</span>)<span class="comment">//D:\javaTools\apache-tomcat-7.0.52\webapps\day09\</span></span><br><span class="line"></span><br><span class="line">InputStream <span class="title function_">getResourceAsStream</span><span class="params">(String path)</span><span class="comment">//以流的形式返回一个文件</span></span><br></pre></td></tr></table></figure><ol start="4"><li>获取文件的 mime 类型（大类型&#x2F;小类型）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getMimeType</span><span class="params">(String 文件名称)</span></span><br></pre></td></tr></table></figure><h3 id="域对象-★★★"><a href="#域对象-★★★" class="headerlink" title="域对象 ★★★"></a>域对象 ★★★</h3><p>servletcontext 可以被当成map集合。</p><p>常用方法:</p><blockquote><p>xxxAttribute()</p></blockquote><p>servletcontext 创建和销毁：</p><blockquote><p>当项目启动的时候服务器为每一个 web 项目创建一个 servletcontext 对象。<br>当项目被移除的时候或者服务器关闭的时候 servletcontext 销毁。</p></blockquote><p>存放:</p><blockquote><p>共享的数据</p></blockquote><h2 id="获取文件的路径"><a href="#获取文件的路径" class="headerlink" title="获取文件的路径"></a>获取文件的路径</h2><p>通过类加载器获取文件：2.txt 放在 classes 目录下无论是 java 项目还是 web 项目都可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类.class.getClassLoader().getResource(<span class="string">&quot;2.txt&quot;</span>).getPath();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS Engine 空间关系之判断点在面内</title>
      <link href="/ArcGIS-Engine-PointInPolygon.html"/>
      <url>/ArcGIS-Engine-PointInPolygon.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>做项目遇到的问题。寥寥几行代码轻松解决，记录一下。</p><span id="more"></span><p>几何对象之间的空间关系主要有<code>包含</code>、<code>相等</code>、<code>在内部</code>、<code>相交</code>等。矢量数据的空间关系运算需要用到 <code>IRelationalOperation</code> 接口，通过该接口的不同方法判定两个几何对象之间的关系是否存在。关系运算符用于比较两个几何体，并返回一个布尔类型值来说明某种控件关系是否存在。</p><h2 id="空间包含关系（Contains-Within）"><a href="#空间包含关系（Contains-Within）" class="headerlink" title="空间包含关系（Contains &amp; Within）"></a>空间包含关系（Contains &amp; Within）</h2><p>空间包含（Contains）表示当前几何对象包含输入几何对象。在内部（Within）表示当前几何对象在输入几何对象的内部。Contains 和 Within 是相对的关系，即 Contains 的反面就是 Within。</p><h2 id="交叉（Crosses）"><a href="#交叉（Crosses）" class="headerlink" title="交叉（Crosses）"></a>交叉（Crosses）</h2><p>交叉（Crosses）表示线和线或者线和面的边界之间有相交。</p><h2 id="相离（Disjoint）"><a href="#相离（Disjoint）" class="headerlink" title="相离（Disjoint）"></a>相离（Disjoint）</h2><p>相离（Disjoint）表示两个几何对象之间没有任何公共部分。</p><h2 id="重叠（Overlaps）"><a href="#重叠（Overlaps）" class="headerlink" title="重叠（Overlaps）"></a>重叠（Overlaps）</h2><p>重叠（Overlaps）表示两个同一维度的几何对象具有公共部分，并且公共部分和输入集合对象具有相同的维度。</p><h2 id="相等（Equals）"><a href="#相等（Equals）" class="headerlink" title="相等（Equals）"></a>相等（Equals）</h2><p>相等（Equals）表示两个几何对象具有相同的几何维度、顶点集合等。对于多边形和线几何类型，如果它们具有相等关系，则 SymmetricDifference 方法返回值为空。</p><h2 id="相接（Touches）"><a href="#相接（Touches）" class="headerlink" title="相接（Touches）"></a>相接（Touches）</h2><p>相接（Touches）表示两个几何对象的边界相交。如果两个几何对象相接，那么它们的交集不为空，但是集合对象的内部交集为空。</p><hr>IRelationalOperator的一些关系类型:<table><thead><tr><th align="center">关系类型</th><th>描述</th></tr></thead><tbody><tr><td align="center">Contains</td><td>判断一个图形是否包含另外一个图形</td></tr><tr><td align="center">Within</td><td>判断一个图形是否被另外一个图形所包含。</td></tr><tr><td align="center">Crosses</td><td>判断两个图形是否在维数较少的那个图形的内部相交</td></tr><tr><td align="center">Disjoint</td><td>判断两个图形间是否没有相同点</td></tr><tr><td align="center">Equals</td><td>判断两个图形是否是同一个类型并且在平面上的点是否是相同的位置。如果返回值为真，则它们应该包含（Contains）另外一个图形同时也被另外一个图形所包含(Within)。</td></tr><tr><td align="center">Overlaps</td><td>判断两个图形的交集是否和其中的一个图形拥有相同的维数，并且他们交集不能和其中任何一个图形相等。该方法只使用与两个Polyline 之间或者两个Polygon 之间。</td></tr><tr><td align="center">Touches</td><td>判断两个图形的边界是否相交，如果两个图形的交集不为空，但两个图形内部的交集为空，则返回值为真。</td></tr></tbody></table><p><strong>本文主要实现了判断点在面内（空间包含关系）</strong></p><p><strong>AE 代码见 Github：</strong><a href="https://github.com/renkaigis/PointInPolygon" target="_blank">PointInPolygon</a> (AE 版本 10.1，VS 版本 2017)</p><p>若代码不能运行，请添加如下引用：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.Carto;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.esriSystem;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geodatabase;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geoprocessing;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.AnalysisTools;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geoprocessor;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geometry;</span><br></pre></td></tr></table></figure><p>我主要实现了 <strong>判断点在面内</strong> 的方法，核心代码如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointInPolygonButton_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获得点图层</span></span><br><span class="line">    <span class="built_in">int</span> PointId = <span class="number">1</span>;</span><br><span class="line">    IFeatureLayer PointLayer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; axMapControl1.LayerCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        PointLayer = axMapControl1.get_Layer(i) <span class="keyword">as</span> IFeatureLayer;</span><br><span class="line">        <span class="keyword">if</span> (PointLayer <span class="keyword">is</span> IFeatureLayer &amp;&amp; PointLayer.FeatureClass.ShapeType == esriGeometryType.esriGeometryPoint)</span><br><span class="line">        &#123;</span><br><span class="line">            PointId = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (PointId == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;找不到质点图层，请重新加载&quot;</span>, <span class="string">&quot;提示&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得面图层</span></span><br><span class="line">    <span class="built_in">int</span> PolygonId = <span class="number">-1</span>;</span><br><span class="line">    IFeatureLayer PolygonLayer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; axMapControl1.LayerCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        PolygonLayer = axMapControl1.get_Layer(i) <span class="keyword">as</span> IFeatureLayer;</span><br><span class="line">        <span class="keyword">if</span> (PolygonLayer <span class="keyword">is</span> IFeatureLayer &amp;&amp; PolygonLayer.FeatureClass.ShapeType == esriGeometryType.esriGeometryPolygon)</span><br><span class="line">        &#123;</span><br><span class="line">            PolygonId = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (PolygonId == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;找不到边界图层，请重新加载&quot;</span>, <span class="string">&quot;提示&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PointLayer = axMapControl1.get_Layer(PointId) <span class="keyword">as</span> IFeatureLayer;</span><br><span class="line">    PolygonLayer = axMapControl1.get_Layer(PolygonId) <span class="keyword">as</span> IFeatureLayer;</span><br><span class="line"></span><br><span class="line">    IFeatureCursor PointFeatureCursor = PointLayer.Search(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    IFeature PointFeature = PointFeatureCursor.NextFeature();</span><br><span class="line"></span><br><span class="line">    IFeatureCursor PolygonFeatureCursor = PolygonLayer.Search(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    IFeature PolygonFeature = PolygonFeatureCursor.NextFeature();</span><br><span class="line"></span><br><span class="line">    IRelationalOperator pRelationalOperator = PolygonFeature.Shape <span class="keyword">as</span> IRelationalOperator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pRelationalOperator.Contains(PointFeature.Shape))</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;点在面内！&quot;</span>, <span class="string">&quot;恭喜你！&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;点在面外！&quot;</span>, <span class="string">&quot;很遗憾！&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><img src="../../images/arcgis/PointInPolygon1.png"><img src="../../images/arcgis/PointInPolygon2.png">]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArcGIS </tag>
            
            <tag> AE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS Engine 之 GP 工具实现矢量转栅格</title>
      <link href="/ArcGIS-Engine-PointToRaster.html"/>
      <url>/ArcGIS-Engine-PointToRaster.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>做项目遇到需要将矢量数据转换成栅格数据的问题，走了很多弯路，后来发现使用 GP 工具很轻松就解决了，记录一下。</p><span id="more"></span><p>ArcGIS 软件中 <code>ArcToolbox</code> 中的工具几乎都可以使用 GP 工具来完成。矢量转栅格的工具主要在 <code>ArcToolbox --&gt; Conversion Tools --&gt; To Raster</code> 下，包括 <code>Feature to Raster</code>、<code>Point to Raster</code>、<code>Polygon to Raster</code> 和 <code>Polyline to Raster</code>。其中 <code>Feature to Raster</code> 与其他三种效果相同。</p><p>ArcGIS 中 <code>Feature to Raster</code> 方法如下图所示：</p><img src="../../images/arcgis/PointToRaster1.png"><p>官方文档给出的工具语法如下：</p><ul><li>FeatureToRaster_conversion (in_features, field, out_raster, {cell_size})</li></ul><table><thead><tr><th align="center">Parameter</th><th>Explanation</th><th align="center">Data Type</th></tr></thead><tbody><tr><td align="center">in_features</td><td>The input feature dataset to be converted to a raster dataset.</td><td align="center">Feature Layer</td></tr><tr><td align="center">field</td><td>The field used to assign values to the output raster.<br>It can be any field of the input feature dataset’s attribute table.<br>If the Shape field of a point or multipoint dataset contains z or m values, then either of these can be used.</td><td align="center">Field</td></tr><tr><td align="center">out_raster</td><td>The output raster dataset to be created.<br>When not saving to a geodatabase, specify .tif for a TIFF file format, .img for an ERDAS IMAGINE file format, or no extension for an Esri Grid raster format.</td><td align="center">Raster Dataset</td></tr><tr><td align="center">cell_size<br>(Optional)</td><td>The cell size for the output raster dataset.<br>The default cell size is the shortest of the width or height of the extent of the input feature dataset, in the output spatial reference, divided by 250.</td><td align="center">Analysis Cell Size</td></tr></tbody></table><p><strong>AE 代码见 Github：</strong><a href="https://github.com/renkaigis/PointToRaster" target="_blank">PointToRaster</a> (AE 版本 10.1，VS 版本 2017)</p><p>若代码不能运行，请添加如下引用：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.Carto;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.esriSystem;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geodatabase;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geoprocessing;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.AnalysisTools;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.Geoprocessor;</span><br><span class="line"><span class="keyword">using</span> ESRI.ArcGIS.DataSourcesRaster;</span><br></pre></td></tr></table></figure><p>我主要实现了 <strong>点转栅格</strong> 的方法，核心代码如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">toRaster_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Geoprocessor gp = <span class="keyword">new</span> Geoprocessor();</span><br><span class="line">    gp.OverwriteOutput = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> pLayerId = <span class="number">-1</span>;</span><br><span class="line">    ILayer pLayer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; axMapControl1.LayerCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pLayer = axMapControl1.get_Layer(i);</span><br><span class="line">        <span class="comment">//if (pLayer is IFeatureLayer &amp;&amp; pLayer.Name == &quot;质点&quot;)</span></span><br><span class="line">        <span class="keyword">if</span> (pLayer <span class="keyword">is</span> IFeatureLayer)</span><br><span class="line">        &#123;</span><br><span class="line">            pLayerId = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pLayerId == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;找不到点图层，请重新加载&quot;</span>, <span class="string">&quot;提示&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ESRI.ArcGIS.ConversionTools.FeatureToRaster ptr = <span class="keyword">new</span> ESRI.ArcGIS.ConversionTools.FeatureToRaster();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得点图层</span></span><br><span class="line">        IFeatureLayer pfeatureLayer = axMapControl1.get_Layer(pLayerId) <span class="keyword">as</span> IFeatureLayer;</span><br><span class="line">        IFeatureClass feaureClass = pfeatureLayer.FeatureClass;</span><br><span class="line"></span><br><span class="line">        ptr.in_features = pfeatureLayer;</span><br><span class="line">        <span class="built_in">string</span> filepath = <span class="string">@&quot;d:\gis\&quot;</span>;</span><br><span class="line">        ptr.out_raster = filepath + pfeatureLayer.Name + <span class="string">&quot;.tif&quot;</span>; <span class="comment">// 将转换结果保存为tif格式</span></span><br><span class="line">        ptr.field = <span class="string">&quot;id&quot;</span>; <span class="comment">// 设置根据那个字段进行转换</span></span><br><span class="line">        ptr.cell_size = <span class="number">64</span>; <span class="comment">// 设置转换后的栅格像元大小</span></span><br><span class="line">        gp.Execute(ptr, <span class="literal">null</span>); <span class="comment">// 执行 GP 工具</span></span><br><span class="line"></span><br><span class="line">        MessageBox.Show(<span class="string">&quot;转换成功！&quot;</span>, <span class="string">&quot;恭喜你！&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载栅格</span></span><br><span class="line">        IWorkspaceFactory pWorkspaceFactory = <span class="keyword">new</span> RasterWorkspaceFactory();</span><br><span class="line">        IWorkspace pWorkspace = pWorkspaceFactory.OpenFromFile(filepath, <span class="number">0</span>);</span><br><span class="line">        IRasterWorkspace pRasterWorkspace = pWorkspace <span class="keyword">as</span> IRasterWorkspace;</span><br><span class="line">        IRasterDataset pRasterDataset = pRasterWorkspace.OpenRasterDataset(pfeatureLayer.Name + <span class="string">&quot;.tif&quot;</span>);</span><br><span class="line">        IRaster pRaster= pRasterDataset.CreateDefaultRaster();</span><br><span class="line">        IRasterLayer pRasterLayer = <span class="keyword">new</span> RasterLayerClass();</span><br><span class="line">        pRasterLayer.CreateFromRaster(pRaster);</span><br><span class="line">        ILayer layer = pRasterLayer <span class="keyword">as</span> ILayer;</span><br><span class="line">        axMapControl1.AddLayer(layer, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;转换失败！&quot;</span>, <span class="string">&quot;很遗憾！&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><img src="../../images/arcgis/PointToRaster2.png"><img src="../../images/arcgis/PointToRaster3.png"><p>经测试，该代码同样适用与 <code>面数据转换栅格</code>：</p><img src="../../images/arcgis/PointToRaster4.png"><img src="../../images/arcgis/PointToRaster5.png">]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArcGIS </tag>
            
            <tag> AE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018 要酷酷的</title>
      <link href="/2017-2018singledogsingledog.html"/>
      <url>/2017-2018singledogsingledog.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://image.renkaigis.com/living/2017end.jpg" width=500 height=500></div><p><span id="inline-red">本想写个年终总结的。</span></p><span id="more"></span><!-- 今年 11 月份昆明出差的时候，在西西弗书店看到了一本书，名字叫做《单身久了，就会变成狗》。一个书名，就触动了我的心，这是单身 24 年痛的领悟。每一个单身的人心里都有一个不可能的人，不是不想，而是不可能。我把问题都归咎于我太胖了，所以我要先努力的减肥，就算减不下去也要保持不要再胖！胖的我，自己都不喜欢，何况别人呢。本想写个年终总结，却跑题了。其实单不单的都无所谓，会有更好的等着你的。而前提是你要足够优秀才可以。看看自己，哪里有优秀的地方。2017 年中了王者农药的毒，努力的戒却戒不掉，立了很多戒毒的 flag 都不了了之了。我不曾想过我也会沉迷一款游戏，心里知道这是浪费时间浪费精力的，但却就是忍不住去玩。唯有卸载才能管得住自己。想变得更好，想会更多的语言，想独自写一个项目。于是，2017 年新建了一个 blog，开启了两个计划，这或许是督促我学习的最好方式吧。一直在南师，眼界狭小，可以对比的只有实验室成员或者班级同学或者往届师兄师姐们，却不知外面的世界有多少机遇和挑战。一次和武大学霸佳琳聊天，深深的刺激到了我，原来以前我们以为的并不是我们所以为的那样，于是捡起了扔下四个月的扇贝，我们成了“扇贝同桌”，我要追随着学霸的脚步，在学霸的监督下好好学习，提高自己。不仅仅是英语。仿佛她为我打开了一扇大门，虽然现在看来还很遥远，但我还是抱有一丝幻想的。***那么，既然总结就该有个总结的样吧：***# 学习对于学习，给自己定过很多目标，但有些早已忘却，有些还在坚持。有时候一件很小的事情，只要你坚持坐下去，回头来看，其实蛮骄傲的。我惟独缺乏的就是坚持，学习不能坚持，健身不能坚持，唯一能坚持的就是娱乐。每天都是晚上的时候悔恨这一天我怎么什么都没做啊，然后暗暗给自己定目标明天要干什么要什么，然后来了实验室之后就打开了视频、微博、音乐…这样自我抛弃的一个人，我拯救不了！2017 年，下载的学习视频没有看完，信誓旦旦买的书没看过几页，后悔都没有用了。2018 年，要找工作了，要写论文了，我看你怎么办！# 生活2017 还是蛮乐观的，一直是一个积极向上的小胖子。跑跑步，听听歌，打打游戏，生活的别提有多舒服了。但也难免会有“思考人生”的时候，悲观不是我应该拥有的，要扫除一切负面情绪。在年底，兴奋的是体重终于开始突破 80 kg，希望继续下降，最差也要保持着吧。只有瘦下来，我才有追求别人的资格吧。心里一直放不下一个人，经常会去看她有没有更新动态，她最近在听什么歌。每次想着自己怎么这么贱，她有什么好的，怎么就是放不下。但又反过来想想，幸亏追不到，不然……讲真，这样的女生还是不满意的。“时间带走了年少轻狂，让我们懂得了人走茶凉，看透了世间冷暖，爱情这东西，谁都拿的起，但未必谁都能放得下。”确实是放不下，也没有一点可能了。但我心里还是会留一个位置给你，直到我遇到我的女神。我会大胆的去追求。<hr><hr><hr> --><p>年末刷微博的时候，突然看到这幅漫画，瞬间泪奔。</p><p>2017 对我很好，他没有亏待我，是我自己不争气，辜负了 2017，浪费了 2017 的大好时光。</p><p>2017 再见，抱歉虚度了你，有太多抱怨不解难过与孤独，但都自己一个人撑过来。若是我有做的不好的地方，还请你宽容我，请原谅我这一年的放纵不羁，原谅最后的我没有给你一个满意的答卷。若是 2018 对我不好，我还是会想你的。</p><p>对于 2018 我不敢承诺什么，但是我还是要说：</p><p><strong>2018，请你对这个傻逼好点！拜托啦！</strong></p><div align="center"><img src="http://image.renkaigis.com/living/2017-2018.jpg"></div>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> living </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 泛型：T/K/V/E含义</title>
      <link href="/java-generic-means-TKVE.html"/>
      <url>/java-generic-means-TKVE.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p id="div-border-left-red">从 Java 5 之后，Java 引入了 “`参数化类型（parameterized type）`” 的概念，允许程序在创建集合时指定集合元素的类型。例如 `List<String>` ，这表明该 `List` 只能保存字符串类型的对象。Java 的参数化类型被称为 `泛型（Generic）`。</p><p>看了很多的泛型，T、K、V、E 的字眼层出不穷，却不知道是什么意思。网上查了一些资料，学习了！</p><span id="more"></span><h2 id="Java-泛型中的标记符含义："><a href="#Java-泛型中的标记符含义：" class="headerlink" title="Java 泛型中的标记符含义："></a>Java 泛型中的标记符含义：</h2><blockquote><p><code>？</code>：表示不确定的 java 类型。</p><p><code>T</code>：表示 java 类型。</p><p><code>K、V</code>：分别代表 java 键值中的 Key、Value。</p><p><code>E</code>：表示 enum 枚举。</p><p><code>Object</code>：java 中所有类的父类。</p></blockquote><p> jdk 中的 K，V，T，E 等泛型名称很多人以为是固定写法，其实这些名称是可以改的，比如改成 zhangsan，lisi 都可以，jdk 为了容易看懂，所以用 K 表示键，V 表示值，T 表示 type 类型，E 表示 enum 枚举，其实<strong>这四个都只是符号，都是表示泛型名称</strong>，T 全部可以换成 E，也可以换成 K，V，zhangsan，都没关系。 </p><h2 id="Object-跟这些标记符代表的-java-类型有什么区别呢？"><a href="#Object-跟这些标记符代表的-java-类型有什么区别呢？" class="headerlink" title="Object 跟这些标记符代表的 java 类型有什么区别呢？"></a>Object 跟这些标记符代表的 java 类型有什么区别呢？</h2><p>Object 是所有类的根类，任何类的对象都可以设置给该 Object 引用变量，使用的时候可能需要类型强制转换，但是用使用了泛型 T、E 等这些标识符后，在实际用之前类型就已经确定了，不需要再进行类型强制转换。</p><p> <strong>代码摘自网络：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">//T1,T2都是随便定义的东西，注意1:他们不会关联到其他类，只是在本类中通用，只是告诉我们new的时候要加入泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&lt;T1, T2&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Test</span>().getaa());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Test</span>&lt;String, String&gt; ().getbb(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Test</span>().getcc(Test.class);</span><br><span class="line">        <span class="comment">//注意下6:面这个HashMap的括号里面不能是T,E,T1,T2等不确定的东西,但可以是?</span></span><br><span class="line">        HashMap&lt;Object, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object, String&gt;();</span><br><span class="line">        List&lt;?&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T2 <span class="title function_">getaa</span><span class="params">()</span> &#123;    </span><br><span class="line">        <span class="comment">//注意2:T2将自动转型为String,这个不需要去担心</span></span><br><span class="line">        <span class="keyword">return</span> (T2) <span class="string">&quot;few&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">getbb</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        <span class="comment">//注意3:Class&lt;T&gt;前面缺少&lt;T&gt;将编译错误</span></span><br><span class="line">        System.out.println(x.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Class&lt;?&gt;  getcc(Class&lt;T&gt; a) &#123;</span><br><span class="line">        <span class="comment">//getcc前面的Class&lt;T&gt;前面缺少&lt;T&gt;将编译错误,注意4:Class&lt;?&gt;里面的问号可以换成T</span></span><br><span class="line">        System.out.println(a.getClass().getName());    </span><br><span class="line">        <span class="comment">//注意5:参数里面的Class&lt;T&gt;最大的好处是如果方法里面定义了泛型，可以自动获取类型值，比如如下的List&lt;T&gt;可以自动获取到a的类型，不必强调死</span></span><br><span class="line">        List&lt;T&gt; aa=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line">        System.out.println(aa);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">few</span><br><span class="line">java.lang.String</span><br><span class="line">java.lang.Class</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滇池实验——昆明之旅</title>
      <link href="/experiment-in-Kunming-Dianchi.html"/>
      <url>/experiment-in-Kunming-Dianchi.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center">于我而言，对这趟“滇池实验”充满着期待…第一次出差，第一次去云南，第一次坐飞机，第一次冲上云霄，……</div><div align="center"><span id="inline-red">内含多图，流量慎点！</span></div><span id="more"></span><div><p id="div-border-left-blue">讲真，从小到大第一次坐飞机，对一切都是陌生又期待的。<br>天生的贪玩属性，出差不仅要做好本职工作，还要好好地玩~</p><h1 id="飞机篇"><a href="#飞机篇" class="headerlink" title="飞机篇"></a>飞机篇</h1><blockquote><p>没坐过飞机的人看见什么都是充满新奇的~</p></blockquote><div align="center"><img src="http://image.renkaigis.com/living/kunming-fly (1).JPG"></div><img src="http://image.renkaigis.com/living/kunming-fly (2).JPG"><img src="http://image.renkaigis.com/living/kunming-fly (3).JPG"><img src="http://image.renkaigis.com/living/kunming-fly (4).JPG"><h1 id="工作篇"><a href="#工作篇" class="headerlink" title="工作篇"></a>工作篇</h1><blockquote><p>采水样，做实验，实地考察滇池，做汇报。工作先行，游玩次之~</p></blockquote><img src="http://image.renkaigis.com/living/kunming-work (1).JPG"><img src="http://image.renkaigis.com/living/kunming-work (2).JPG"><img src="http://image.renkaigis.com/living/kunming-work (3).JPG"><img src="http://image.renkaigis.com/living/kunming-work (4).JPG"><img src="http://image.renkaigis.com/living/kunming-work (5).JPG"><img src="http://image.renkaigis.com/living/kunming-work (6).JPG"><img src="http://image.renkaigis.com/living/kunming-work (8).JPG"><img src="http://image.renkaigis.com/living/kunming-work (9).JPG"><img src="http://image.renkaigis.com/living/kunming-work (10).JPG"><img src="http://image.renkaigis.com/living/kunming-work (11).JPG"><img src="http://image.renkaigis.com/living/kunming-work (12).JPG"><h1 id="海鸥篇"><a href="#海鸥篇" class="headerlink" title="海鸥篇"></a>海鸥篇</h1><blockquote><p>这么铺天盖地的海鸥还是第一次见，抑制不住的兴奋~</p></blockquote><img src="http://image.renkaigis.com/living/kunming-seagull (1).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (2).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (3).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (4).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (5).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (6).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (7).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (8).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (9).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (10).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (11).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (12).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (13).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (14).JPG"><img src="http://image.renkaigis.com/living/kunming-seagull (15).JPG"><h1 id="滇池篇"><a href="#滇池篇" class="headerlink" title="滇池篇"></a>滇池篇</h1><blockquote><p>讲真，滇池的水真的脏，真 · 青山绿水</p></blockquote><img src="http://image.renkaigis.com/living/kunming-dianchi (1).JPG"><img src="http://image.renkaigis.com/living/kunming-dianchi (2).JPG"><img src="http://image.renkaigis.com/living/kunming-dianchi (3).JPG"><img src="http://image.renkaigis.com/living/kunming-dianchi (4).JPG"><img src="http://image.renkaigis.com/living/kunming-dianchi (5).JPG"><img src="http://image.renkaigis.com/living/kunming-dianchi (6).JPG"><img src="http://image.renkaigis.com/living/kunming-dianchi (7).JPG"><img src="http://image.renkaigis.com/living/kunming-dianchi (8).JPG"><img src="http://image.renkaigis.com/living/kunming-dianchi (9).JPG"><img src="http://image.renkaigis.com/living/kunming-dianchi (10).JPG"><img src="http://image.renkaigis.com/living/kunming-dianchi (11).JPG"><img src="http://image.renkaigis.com/living/kunming-dianchi (12).JPG"><h1 id="风景篇"><a href="#风景篇" class="headerlink" title="风景篇"></a>风景篇</h1><blockquote><p>昆明的天气一直都那么好，随手一拍都是美美的照片</p><p>蓝蓝的天，白白的云，太阳直射，暖洋洋</p></blockquote><img src="http://image.renkaigis.com/living/kunming-scenery (2).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (4).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (5).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (6).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (7).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (8).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (9).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (10).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (11).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (12).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (13).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (14).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (15).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (16).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (17).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (18).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (19).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (20).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (21).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (22).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (23).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (24).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (25).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (26).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (27).JPG"><img src="http://image.renkaigis.com/living/kunming-scenery (28).JPG"><h1 id="文艺篇"><a href="#文艺篇" class="headerlink" title="文艺篇"></a>文艺篇</h1><blockquote><p>找到了一家西西弗书店，灯光及装饰都给人温暖的感觉</p><p>在矢量咖啡点上一杯咖啡，轻柔的音乐响起，无比惬意！</p><p>还去了猫的天空之城概念书店、花生书店。这两家店都太小了，远不如西西弗书店大气。尤其是不消费还赶人！！！</p></blockquote><img src="http://image.renkaigis.com/living/kunming-literature (1).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (2).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (3).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (4).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (5).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (6).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (7).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (8).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (9).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (10).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (17).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (11).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (12).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (14).JPG"><img src="http://image.renkaigis.com/living/kunming-literature (15).JPG"><h1 id="美食篇"><a href="#美食篇" class="headerlink" title="美食篇"></a>美食篇</h1><blockquote><p>云大附近的园西路，很多好吃的</p><p>海埂公园附近的小吃一条街</p><p>满足的两个吃货</p></blockquote><div align="center"><img src="http://image.renkaigis.com/living/kunming-foods (1).JPG"></div><img src="http://image.renkaigis.com/living/kunming-foods (2).JPG"><img src="http://image.renkaigis.com/living/kunming-foods (3).JPG"><img src="http://image.renkaigis.com/living/kunming-foods (4).JPG"><img src="http://image.renkaigis.com/living/kunming-foods (5).JPG"><img src="http://image.renkaigis.com/living/kunming-foods (6).JPG"><h1 id="人物篇"><a href="#人物篇" class="headerlink" title="人物篇"></a>人物篇</h1><blockquote><p>和师姐同游昆明，帮师姐拍了很多美美的照片</p><p>我自己的照片很少，满屏幕都是师姐的照片</p><p>哼😒等我瘦下来！</p></blockquote><div align="center"><img src="http://image.renkaigis.com/living/kunming-figure (1).JPG"></div><div align="center"><img src="http://image.renkaigis.com/living/kunming-figure (2).JPG"></div><div align="center"><img src="http://image.renkaigis.com/living/kunming-figure (3).JPG"></div><div align="center"><img src="http://image.renkaigis.com/living/kunming-figure (4).JPG"></div><div align="center"><img src="http://image.renkaigis.com/living/kunming-figure (5).JPG"></div><img src="http://image.renkaigis.com/living/kunming-figure (6).JPG"><img src="http://image.renkaigis.com/living/kunming-figure (7).JPG"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>昆明之旅很开心，很满足。</p><p>最重要的是，看到了和别人的差距，自我感觉别人的 web 平台做的真的很好，而我们的单机版系统不仅从界面还是可视化都感觉很 low。</p><p>后面滇池的项目得我接手了，继续学习，继续努力，远离农药，提高代码功底，像师姐学习！</p>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> living </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秦时明月之风林火山集结</title>
      <link href="/video-qsmoon-flhs.html"/>
      <url>/video-qsmoon-flhs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><img src="http://image.renkaigis.com/living/qsmoon-flhs.jpg" title="风 林 火 山"><span id="more"></span><blockquote class="blockquote-center">楚虽三户，<br>亡秦必楚！</blockquote><blockquote><p>想要成就霸王之业</p><p>你需要找到四个重要的人</p><p>这四个人就是传承兵道的</p><p><strong>风 林 火 山</strong></p></blockquote><br><div align="center"><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=j0544kg1vvg&auto=0" allowFullScreen="true" quality="high" width="560" height="315" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></div><br><p><b>秦时明月视频纯剪辑</b></p><ul><li><p>素材：秦时明月之君临天下（第19集-楚之军魂、第68集-一血一脉）</p></li><li><p>软件：Corel VideoStudio X9</p></li><li><p>插件：Xvid</p></li><li><p>分辨率：1920 × 1080</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 基础学习笔记</title>
      <link href="/css-basic-learning-notes.html"/>
      <url>/css-basic-learning-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/html-css-js/cssabc01.jpg"></div><div><p id="div-border-left-green">自学 CSS 基础笔记。</p></div><span id="inline-purple">笔记整理中，未完待续……</span><span id="more"></span><p><strong>CSS 重点内容：</strong></p><ul><li>选择器</li><li>浮动</li><li>盒子模型</li><li>定位</li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="CSS-概念"><a href="#CSS-概念" class="headerlink" title="CSS 概念"></a>CSS 概念</h2><ul><li><p>CSS（Cascading Style Sheet，可译为 <code>层叠样式表</code> 或 <code>级联样式表</code> ）是一组 <code>格式设置规则</code>，用于控制 Web 页面的外观。</p></li><li><p>通过使用CSS样式设置页面的格式，可将页面的 <code>内容与表现形式分离</code>。页面内容存放在HTML文档中，而用于定义表现形式的CSS规则则存放在另一个文件中或HTML文档的某一部分，通常为文件头部分。</p></li><li><p>将内容与表现形式分离，不仅可使 <code>维护站点的外观更加容易</code>，而且还可以使HTML文档代码更加简练， <code>缩短浏览器的加载时间</code> 。</p></li></ul><h2 id="可以用-CSS-做什么？"><a href="#可以用-CSS-做什么？" class="headerlink" title="可以用 CSS 做什么？"></a>可以用 CSS 做什么？</h2><ul><li><p>CSS 是一种 <code>样式表语言</code> ，用于 <code>为HTML文档定义布局</code> 。例如，CSS 涉及字体、颜色、边距、高度、宽度、背景图像、高级定位等方面。</p></li><li><p>HTML 可以用于为网站添加布局效果，但有可能被误用。而CSS则提供了更多选择，而且更为精确、完善。现在所有浏览器都支持CSS。</p></li><li><p>你可以制作自己的CSS样式表，为自己的网站增添花样。</p></li></ul><h2 id="CSS-和-HTML-的区别在哪里？"><a href="#CSS-和-HTML-的区别在哪里？" class="headerlink" title="CSS 和 HTML 的区别在哪里？"></a>CSS 和 HTML 的区别在哪里？</h2><p><strong><div align="center">HTML 用于结构化内容<br>CSS 用于格式化结构化的内容</div></strong></p><ul><li>CSS 以 html 为基础的。</li><li>CSS 主要设置的就是 html 标签中的属性样式，css进行网页布局。</li></ul><table><thead><tr><th align="center">结构</th><th>作用</th></tr></thead><tbody><tr><td align="center">HTML 结构层</td><td>负责从 <code>语义的角度</code> 搭建页面结构</td></tr><tr><td align="center">CSS 样式层</td><td>负责从 <code>审美的角度</code> 美化页面</td></tr><tr><td align="center">JavaScript 行为层</td><td>负责从 <code>交互的角度</code> 提升用户体验</td></tr></tbody></table><h2 id="采用CSS有哪些好处？"><a href="#采用CSS有哪些好处？" class="headerlink" title="采用CSS有哪些好处？"></a>采用CSS有哪些好处？</h2><blockquote><p>CSS 是 Web 设计界的一次革命。 CSS 的具体优点包括：</p></blockquote><ul><li>通过单个样式表控制多个文档的布局；</li><li>更精确的布局控制；</li><li>为不同的媒体类型（屏幕、打印等）采取不同的布局；</li><li>无数高级、先进的技巧…</li></ul><blockquote><p>采用CSS布局相对于传统的 TABLE 网页布局而具有以下4个显著优势：</p></blockquote><ul><li><p>表现和内容相分离</p></li><li><ul><li>将设计部分剥离出来放在一个独立样式文件中，HTML文件中只存放文本信息。这样的页面对搜索引擎更加友好。</li></ul></li><li><p>提高页面浏览速度</p></li><li><ul><li>对于同一个页面视觉效果，采用 CSS 布局的页面容量要比 TABLE 编码的页面文件容量小得多，前者一般只有后者的1&#x2F;2大小。浏览器就不用去编译大量冗长的标签。</li></ul></li><li><p>易于维护和改版</p></li><li><ul><li>你只要简单的修改几个 CSS 文件就可以重新设计整个网站的页面。</li></ul></li><li><p>使用CSS布局更符合现在的 W3C 标准</p></li><li><ul><li>W3C 组织并不是 ISO 国际标准组织的成员，而是自成一派的万维网联盟(World Wide Web Consortium)，又称 W3C 理事会，是 Web 技术领域最具权威和影响力的国际中立性技术标准机构。</li></ul></li></ul><h1 id="CSS-工作原理"><a href="#CSS-工作原理" class="headerlink" title="CSS 工作原理"></a>CSS 工作原理</h1><h2 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;属性:值; 属性:值;.... &#125;</span><br></pre></td></tr></table></figure><p>选择器：就是一个选择谁的过程。</p><p>参数说明：属性和属性值之间用 <code>冒号(:)</code> 隔开，定义多个属性时，属性之间用英文输入法下的 <code>分号(;)</code> 隔开。</p><table><thead><tr><th>属性</th><th>赋值</th><th>介绍</th></tr></thead><tbody><tr><td>color</td><td>color: red;</td><td>前景色（文字颜色）</td></tr><tr><td>font-size</td><td>font-size: 20px;</td><td>设置文字大小</td></tr><tr><td>width</td><td>width: 30px;</td><td>设置宽度</td></tr><tr><td>height</td><td>height: 30px;</td><td>设置高度</td></tr><tr><td>background-color</td><td>background-color: red;</td><td>设置背景颜色</td></tr><tr><td>text-align</td><td>text-align: center; left&#x2F;right</td><td>文字居中</td></tr><tr><td>text-indent</td><td>text-indent: 2em;</td><td>首行缩进</td></tr></tbody></table><p><strong>注意：</strong>text-align: center; 在块级元素中可以使文字居中显示</p><h2 id="CSS-书写位置介绍"><a href="#CSS-书写位置介绍" class="headerlink" title="CSS 书写位置介绍"></a>CSS 书写位置介绍</h2><h3 id="方法1：行内样式表（style属性）"><a href="#方法1：行内样式表（style属性）" class="headerlink" title="方法1：行内样式表（style属性）"></a>方法1：行内样式表（style属性）</h3><blockquote><p>为 HTML 应用 CSS 的一种方法是使用 HTML 属性 style 。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> 例子 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #FF0000;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:green;font-size:30px;&quot;</span>&gt;</span>这个页面背景是红色的!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法2：内部样式表（style元素）"><a href="#方法2：内部样式表（style元素）" class="headerlink" title="方法2：内部样式表（style元素）"></a>方法2：内部样式表（style元素）</h3><blockquote><p>为 HTML 应用 CSS 的另一种方法是采用 HTML 元素 style 。比如像这样：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>例子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: <span class="number">#FF0000</span>;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个页面是红色的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法3：外部样式表（引用一个样式表文件）"><a href="#方法3：外部样式表（引用一个样式表文件）" class="headerlink" title="方法3：外部样式表（引用一个样式表文件）"></a>方法3：外部样式表（引用一个样式表文件）</h3><p>更推荐采用这种引用<code>外部样式表</code>的方法。</p><blockquote><p>外部样式表就是一个扩展名为 css 的文本文件。跟其他文件一样，你可以把样式表文件放在Web服务器上或者本地硬盘上。</p></blockquote><blockquote><p>例如，比方说你的样式表文件名为 style.css ，它通常被存放于名为style的目录中。可以像下面的方法一样引用：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用外部样式表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style/style.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> </p><ul><li>要在href属性里给出样式表文件的地址。</li><li>这行代码必须被插入 HTML 代码的头部（header），即放在标签 <code>&lt;head&gt;</code> 和标签 <code>&lt;/head&gt;</code> 之间。就像这样：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style/style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ....</span><br></pre></td></tr></table></figure><p>这个链接告诉浏览器：在显示该 HTML 文件时，应使用给出的 CSS 文件进行布局。</p><p>这种方法的优越之处在于：多个 HTML 文档可以同时引用一个样式表。换句话说，可以用一个 CSS 文件来控制多个 HTML 文档的布局。</p><h3 id="CSS-书写方式之间的区别"><a href="#CSS-书写方式之间的区别" class="headerlink" title="CSS 书写方式之间的区别"></a>CSS 书写方式之间的区别</h3><p>内嵌式写法：</p><ul><li>代码可维护性较差，没有实现css代码与html结构的完全分离</li><li>影响的范围只有当前页面</li></ul><p>行内是写法：</p><ul><li>代码可维护性极差，css代码和html结构没有实现分离</li><li>影响的范围只有当前标签</li></ul><p>外联式写法：</p><ul><li>代码可维护性高，css与html结构完全分离</li><li>影响范围广，当前整个网页站点。</li></ul><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>选择器分类</p><blockquote><p>基础选择器</p></blockquote><ul><li>标签选择器</li><li>类选择器 （⭐⭐⭐⭐⭐）</li><li>id 选择器</li><li>通配符选择器</li></ul><blockquote><p>复合选择器</p></blockquote><ul><li>标签指定式选择器 （⭐⭐⭐⭐）</li><li>后代选择器 （⭐⭐⭐⭐⭐）</li><li>并集选择器</li></ul><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><p>标签：就是 html 中的标签</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;</span><br><span class="line">    属性: 值;</span><br><span class="line">    属性: 值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标签选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        &lt;!-- 设置 <span class="selector-tag">p</span> 标签的样式 --&gt;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red; </span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a><strong>补充</strong></h3><p>颜色的显示方式：</p><ul><li>直接设置对应颜色的名称</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color：red;</span><br></pre></td></tr></table></figure><ul><li>通过十六进制显示：以 # 开头，0-ff</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color: #2934de;</span><br></pre></td></tr></table></figure><ul><li>通过 rgb 方式显示：R：红色，0-255；G：绿色，0-255；B：蓝色，0-255</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color: rgb(4,255,20);</span><br></pre></td></tr></table></figure><ul><li>通过 rgba 显示：a 设置透明度（alpha），范围 0-1</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color: rgba(0,0,0,0.1);</span><br></pre></td></tr></table></figure><h2 id="类选择器（重点）"><a href="#类选择器（重点）" class="headerlink" title="类选择器（重点）"></a>类选择器（<strong>重点</strong>）</h2><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.自定义名称&#123;</span><br><span class="line">    属性: 值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：标签通过 <code>class</code> 属性调用类样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 类样式的定义 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        .fontcolor&#123;</span></span><br><span class="line"><span class="language-xml">            color: red;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 调用类选择器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;fontcolor&quot;</span>&gt;</span>类选择器例子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><p>谁调用谁改变，多个标签可以同时调用一个类样式</p><p>一个标签可以调用多个类样式（相当于人的名字）</p></blockquote><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 调用多个类样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;fontcolor fontsize&quot;</span>&gt;</span>调用多个类样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类的命名规范"><a href="#类的命名规范" class="headerlink" title="类的命名规范"></a>类的命名规范</h3><ul><li>不能以纯数字或者以数字开头定义类名</li><li>不推荐使用汉字定义类名</li><li>不能以特殊符号或者以特殊符号开头（“_”除外）定义类名</li><li>不建议使用标签名或者属性名定义类名</li></ul><p>常用的命名：</p><table><thead><tr><th>中文</th><th>英文</th></tr></thead><tbody><tr><td>头</td><td>header</td></tr><tr><td>内容</td><td>content&#x2F;container</td></tr><tr><td>尾</td><td>footer</td></tr><tr><td>导航</td><td>nav</td></tr><tr><td>侧栏</td><td>sidebar</td></tr><tr><td>栏目</td><td>column</td></tr><tr><td>页面外围控制整体布局宽度</td><td>wrapper</td></tr><tr><td>左右中</td><td>left&#x2F;right&#x2F;center</td></tr><tr><td>登陆条</td><td>loginbar</td></tr><tr><td>标志</td><td>logo</td></tr><tr><td>广告</td><td>banner</td></tr><tr><td>页面主体</td><td>main</td></tr><tr><td>热点</td><td>hot</td></tr><tr><td>新闻</td><td>news</td></tr><tr><td>下载</td><td>download</td></tr><tr><td>子导航</td><td>subnav</td></tr><tr><td>菜单</td><td>menu</td></tr><tr><td>子菜单</td><td>submenu</td></tr><tr><td>搜索</td><td>search</td></tr><tr><td>友情链接</td><td>friendlink</td></tr><tr><td>页脚</td><td>footer</td></tr><tr><td>版权</td><td>copyright</td></tr><tr><td>滚动</td><td>scroll</td></tr><tr><td>内容</td><td>content</td></tr></tbody></table><h2 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h2><h3 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#id名称&#123;</span><br><span class="line">    属性: 值;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：通过 id 属性调用样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p_color&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>不建议多个标签使用同一 id 选择器的样式（id 和 js 配合使用）</li><li>一个标签只能调用一个 id 样式</li></ul><h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><h3 id="用法-3"><a href="#用法-3" class="headerlink" title="用法"></a>用法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    属性: 值；</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul><li>将页面中的所有标签都选中，设置样式；</li><li>可以用来进行页面样式的初始化。</li></ul><h2 id="字体相关属性"><a href="#字体相关属性" class="headerlink" title="字体相关属性"></a>字体相关属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>设置文字颜色</td></tr><tr><td>font-size</td><td>设置文字大小</td></tr><tr><td>font-family</td><td>设置文字字体</td></tr><tr><td>font-weight</td><td>设置文字加粗</td></tr><tr><td>font-style</td><td>设置文字斜体</td></tr><tr><td>line-height</td><td>行高</td></tr></tbody></table><h3 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h3><ul><li>直接设置汉字</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    font-family: 微软雅黑;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>设置对应字体的英文</p></li><li><p>设置 unicode 编码</p></li></ul><table><thead><tr><th>字体名称</th><th>英文名称</th><th>unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\5B8B\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\65B0\5B8B\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\9ED1\4F53</td></tr><tr><td>微软雅黑</td><td>microsoft yahei</td><td>\5FAE\8F6F\96C5\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\6977\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\96B6\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\5E7C\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\534E\6587\7EC6\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\7EC6\660E\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\65B0\7EC6\660E\4F53</td></tr></tbody></table><ul><li>font-family 可以设置多个值：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    font-family: &quot;SimSun&quot;,&quot;Arial Narrow&quot;,&quot;微软雅黑&quot;,&quot;\5B8B\4F53&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h3><p>取值方式：</p><ul><li>直接设置数字，范围 100-900</li><li>bold  (字体加粗)   效果为 700-900</li><li>normal(文字字体正常显示)</li></ul><p><strong>注意：</strong>文字加粗显示，推荐使用 font-weight:700;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    font-weight: normal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文字加粗 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- font-weight: 900; --&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- font-weight: bold; --&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a>font-style</h3><ul><li><p>italic：文字斜体显示</p></li><li><p>normal：文字正常显示</p></li></ul><h3 id="font-属性联写"><a href="#font-属性联写" class="headerlink" title="font 属性联写"></a>font 属性联写</h3><p>用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font: font-style font-weight font-size/line-height font-family</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    font: italic 700 30px 宋体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>font属性联写必须有 <strong>font-size</strong> 和 <strong>font-family</strong> （其他属性可以不写）；</p></li><li><p>font-size 和 font-family 的 <strong>顺序不能换</strong>。</p></li></ul><h2 id="标签指定式选择器"><a href="#标签指定式选择器" class="headerlink" title="标签指定式选择器"></a>标签指定式选择器</h2><p>标签指定式选择器又称交集选择器，由两个选择器构成，其中第一个为标记选择器，第二个为 class 选择器或 id 选择器，两个选择器之间不能有空格。如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1.one</span><br><span class="line">或</span><br><span class="line">h1#two</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标签名.选择器名&#123;</span><br><span class="line">    属性:值;</span><br><span class="line">    属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点关系： 既……又……</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p.one&#123;</span><br><span class="line">    color: yellow;</span><br><span class="line">&#125; */</span><br><span class="line"></span><br><span class="line">div#div1&#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器用来选择元素或元素组的后代，其写法就是把外层标记写在前面，内层标记写在后面，中间用空格分隔。当标记发生嵌套时，内层标记就成为外层标记的后代。</p><p>用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选择器 + 空格 + 选择器&#123;</span><br><span class="line">    属性: 值；</span><br><span class="line">    属性: 值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>标签之间必须属于嵌套关系</li><li>选择器之间必须有空格</li></ul><p>关系：父与子</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>  <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*  p&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">                color: red;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            &#125; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*  div p&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">                color: red;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            &#125; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* .one p&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">                color: red;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span><span class="selector-class">.one</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            文字</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            文字</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;one&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;p&gt;</span></span><br><span class="line"><span class="comment">            幸福的p</span></span><br><span class="line"><span class="comment">            &lt;/p&gt;</span></span><br><span class="line"><span class="comment">         &lt;/div&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;p&gt;</span></span><br><span class="line"><span class="comment">            孤独的p</span></span><br><span class="line"><span class="comment">        &lt;/p&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>并集选择器是各个选择器通过逗号连接而成的，任何形式的选择器（包括标记选择器、class 类选择器、id 选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。</p><p>用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选择器,选择器,选择器&#123;</span><br><span class="line">    属性: 值;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用：将样式集体声明，css 样式初始化</p><p>特点：并集选择器之间必须用逗号隔开！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">div,p,span&#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>,<span class="selector-tag">p</span>,<span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>567<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>asdf<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-书写位置及-Html-标签分类"><a href="#CSS-书写位置及-Html-标签分类" class="headerlink" title="CSS 书写位置及 Html 标签分类"></a>CSS 书写位置及 Html 标签分类</h1><h2 id="CSS-书写位置"><a href="#CSS-书写位置" class="headerlink" title="CSS 书写位置"></a>CSS 书写位置</h2><h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span>  <span class="attr">rel</span>=<span class="string">”stylesheet”</span>  <span class="attr">href</span>=<span class="string">””</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>新建一个文件，后缀名以 <code>.css</code> 命名（css文件）</p></li><li><p>在 html 页面中通过 <code>&lt;link  rel=”stylesheet”  href=””&gt;</code> 标签将 css 文件引入.</p></li></ul><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>外部样式表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;1/1.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><p>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <code>&lt;style&gt;</code> 标签在文档头部定义内部样式表，就像这样:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内部样式表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联样式表"><a href="#内联样式表" class="headerlink" title="内联样式表"></a>内联样式表</h3><p>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。</p><p>要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;font-size: 30px;font-family: 华文宋体;font-weight: 900;&quot;</span>&gt;</span>p中的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS-书写方式之间的区别-1"><a href="#CSS-书写方式之间的区别-1" class="headerlink" title="CSS 书写方式之间的区别"></a>CSS 书写方式之间的区别</h3><ul><li>内嵌式写法：</li></ul><p>◆ 代码可维护性较差，没有实现 css 代码与 html 结构的完全分离</p><p>◆ 影响的范围只有当前页面</p><ul><li>行内式写法：</li></ul><p>◆ 代码可维护性极差，css 代码和 html 结构没有实现分离</p><p>◆ 影响的范围只有当前标签</p><ul><li>外联式写法：</li></ul><p>◆ 代码可维护性高，css 与 html 结构完全分离</p><p>◆ 影响范围广，当前整个网页站点。</p><h2 id="HTML-标签的分类"><a href="#HTML-标签的分类" class="headerlink" title="HTML 标签的分类"></a>HTML 标签的分类</h2><h3 id="块级标签"><a href="#块级标签" class="headerlink" title="块级标签"></a>块级标签</h3><p>例如：</p><p><code>div,p,h1-h6,ul,li,dl,dt,dd</code></p><p>特点：</p><ul><li><p>元素自己独占一行显示，不与其他元素待在同一行</p></li><li><p>可以设置宽度和高度</p></li><li><p>当嵌套一个块级元素，子元素如果不设置宽度，那么该子元素的宽度为父元素的宽度。</p></li></ul><h3 id="行级标签"><a href="#行级标签" class="headerlink" title="行级标签"></a>行级标签</h3><p>例如：</p><p><code>a，span,strong,u</code></p><p>特点：</p><ul><li><p>元素在一行上显示</p></li><li><p>不能直接设置宽度和高度</p></li></ul><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><p>例如：</p><p><code>img,input,textarea</code></p><p>特点：</p><ul><li><p>元素在一行上显示</p></li><li><p>可以设置宽度和高度</p></li></ul><h3 id="元素之间的转换"><a href="#元素之间的转换" class="headerlink" title="元素之间的转换"></a>元素之间的转换</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display:inline // 将元素转化为行内元素</span><br><span class="line">display:inline-block // 将元素转化行内块元素</span><br><span class="line">display:block // 将元素转化为块元素</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a&#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    /*  display: inline-block;   */  </span><br><span class="line">    /* 将行内元素转化为行内块元素 */</span><br><span class="line">    display: block;</span><br><span class="line">    /* 将行内元素转化为块元素 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    /* 将行内元素转化为行内元素 */</span><br><span class="line">    display: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML+CSS+JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 基础学习笔记</title>
      <link href="/html-basic-learning-notes.html"/>
      <url>/html-basic-learning-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="../../images/html-css-js/htmlabc01.jpg"></div><div><p id="div-border-left-blue">自学 html 基础笔记。</p></div><span id="more"></span><h1 id="Web-前端简单介绍"><a href="#Web-前端简单介绍" class="headerlink" title="Web 前端简单介绍"></a>Web 前端简单介绍</h1><p>web 前端包含：</p><ul><li>pc 端页面</li><li>移动端页面</li></ul><p>web 前端首先要解决用户体验的问题</p><h1 id="认识网页"><a href="#认识网页" class="headerlink" title="认识网页"></a>认识网页</h1><h2 id="网页的组成"><a href="#网页的组成" class="headerlink" title="网页的组成"></a>网页的组成</h2><p>网页主要由文字、图片和按钮等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及 Flash 等。</p><h2 id="Web-标准"><a href="#Web-标准" class="headerlink" title="Web 标准"></a>Web 标准</h2><p>1：w3c 万维网联盟组织：用来制定 web 标准的机构（组织）</p><p>2：web 标准：制作网页要遵循的规范</p><p>3：web 标准规范的分类：结构标准；表现标准；行为标准</p><ul><li>结构标准：html（用来制作网页的）</li><li>表现标准：css（对网页进行美化的）</li><li>行为标准：javascript（让网页动起来，具有生命力）</li></ul><p>4：web 标准总结：          </p><ul><li>结构标准：相当于人的身体 </li><li>表现标准：相当于人的衣服</li><li>行为标准：相当于人的动作</li></ul><h2 id="浏览器介绍"><a href="#浏览器介绍" class="headerlink" title="浏览器介绍"></a>浏览器介绍</h2><p>浏览器是网页运行的平台，常用的浏览器有 IE、火狐（Firefox）、谷歌（Chrome）、Safari 和 Opera 等。</p><p>浏览器内核：也就是浏览器所采用的渲染引擎，渲染引擎决定了浏览器如何显示网页的内 ，容以及页面的格式信息。</p><table><thead><tr><th align="center">IE</th><th align="center">Google&#x2F;Opera</th><th align="center">FireFox</th><th align="center">Safari</th></tr></thead><tbody><tr><td align="center">trident</td><td align="center">blink</td><td align="center">gecko</td><td align="center">webkit</td></tr></tbody></table><h2 id="浏览器与服务器"><a href="#浏览器与服务器" class="headerlink" title="浏览器与服务器"></a>浏览器与服务器</h2><p>1：浏览器向服务器发送请求（通过http协议）  </p><p>2：http协议：超文本传输协议，也就是浏览器和服务器端的网页传输数据的约束和规范</p><p>3：https：加密处理</p><p>4：url协议:平时我们写的网址就是 url 地址</p><p>url协议：规定 url 地址的格式</p><p>协议规定格式： scheme:&#x2F;&#x2F;host.domain:port&#x2F;path&#x2F;filename</p><blockquote><p>scheme: 定义因特网服务的类型。常见的就是http<br><br>host: 定义域主机（http 的默认主机是www）<br><br>domain: 定义因特网域名  比如：w3school.com.cn<br><br>:port  定义端口号（网页默认端口 :80）<br><br>path: 网页所在服务器上的路径<br><br>filename: 文件名称<br></p></blockquote><h1 id="认识-html"><a href="#认识-html" class="headerlink" title="认识 html"></a>认识 html</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>html (Hyper   Text    Markup   Language )   中文译为 <code>超文本标记语言</code>，主要是通过 html 标记对网页中的文本，图片，声音等内容进行描述。</p><p>HTML 之所以称为超文本标记语言，不仅是因为他通过标记描述网页内容，同时也由于文本中包含了所谓的 <code>超级链接</code>，通过超链接可以实现网页的跳转。从而构成了丰富多彩的 Web 页面。</p><h2 id="html-结构"><a href="#html-结构" class="headerlink" title="html 结构"></a>html 结构</h2><p><strong>基本结构如下：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;! Doctype html&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>各部分的含义：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文档类型 --&gt;</span></span><br><span class="line">&lt;! Doctype html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;html&gt;&lt;/html&gt;</code> 用于告知浏览器其自身是一个 HTML 文档，<code>&lt;/html&gt;</code> 标记标志着 HTML 文档的开始，<code>&lt;/html&gt;</code> 标记标志着 HTML 文档的结束，在他们之间的是文档的头部和主体内容。 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;html lang=&quot;en&quot;&gt; 向搜索引擎表示该页面是html语言，并且语言为英文网站 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>  <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个主要是给搜索引擎看的，搜索引擎不会去判断该站点是中文站还是英文站，所以这句话就是让搜索引擎知道，你的站点是中文站，对 html 页面本身不会有影响。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html文档头部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>主要用来封装其他位于文档头部的标记。一个 HTML 文档只能含有一对 <code>&lt;head&gt;</code> 标记，绝大多数文档头部包含的数据都不会真正作为内容显示在页面中。 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网页的标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;title&gt;</code> 标记用于定义HTML页面的标题，<code>&lt;title&gt;&lt;/title&gt;</code> 之间的内容将显示在浏即给网页取一个名字，必须位于 <code>&lt;head&gt;</code> 标记之内。一个HTML文档只能含有一对 <code>&lt;title&gt;&lt;/title&gt;</code> 标记，将显示在浏览器窗口的标题栏中。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html结构的主体部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;body&gt;</code> 标记用于定义 HTML 文档所要显示的内容，也称为主体标记。浏览器中显示的所有文本、图像、音频和视频等信息都必须位于 <code>&lt;body&gt;</code> 标记内，<code>&lt;body&gt;</code> 标记中的信息才是最终展示给用户看的。<br><br>一个HTML文档只能含有一对 <code>&lt;body&gt;</code> 标记，且 <code>&lt;body&gt;</code> 标记必须在 <code>&lt;html&gt;</code> 标记内，位于 <code>&lt;head&gt;</code> 头部标记之后。</p></blockquote><h2 id="标签的分类"><a href="#标签的分类" class="headerlink" title="标签的分类"></a>标签的分类</h2><p>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</p><ul><li>HTML 标签是由尖括号包围的关键词，比如 <code>&lt;html&gt;</code>；</li><li>HTML 标签通常是成对出现的，比如 <code>&lt;b&gt;</code> 和 <code>&lt;/b&gt;</code>；</li><li>标签对中的第一个标签是开始标签，第二个标签是结束标签；</li><li>开始和结束标签也被称为开放标签和闭合标签；</li></ul><h3 id="HTML标记—双标记"><a href="#HTML标记—双标记" class="headerlink" title="HTML标记—双标记"></a>HTML标记—双标记</h3><p>双标记也称体标记，是指由开始和结束两个标记符组成的标记。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标记名</span>&gt;</span><span class="tag">&lt;/<span class="name">标记名</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该语法中 <code>&lt;标记名&gt;</code> 表示该标记的作用开始，一般称为 <code>开始标记（start tag）</code>，<code>&lt;/标记名&gt;</code> 表示该标记的作用结束，一般称为 <code>结束标记（end tag）</code>。和开始标记相比，结束标记只是在前面加了一个关闭符 <code>/</code>。</p><h3 id="HTML标记—单标记"><a href="#HTML标记—单标记" class="headerlink" title="HTML标记—单标记"></a>HTML标记—单标记</h3><p>单标记也称空标记，只有开始标签没有结束标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标记名</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如： --&gt;</span></span><br><span class="line">&lt;! doctype html&gt;</span><br></pre></td></tr></table></figure><h2 id="标签关系"><a href="#标签关系" class="headerlink" title="标签关系"></a>标签关系</h2><ul><li>嵌套关系：类似父亲和儿子之间的关系</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>并列关系：类似与兄弟之间的关系</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="html-标签介绍"><a href="#html-标签介绍" class="headerlink" title="html 标签介绍"></a>html 标签介绍</h1><h2 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h2><h3 id="文本注释标签"><a href="#文本注释标签" class="headerlink" title="文本注释标签"></a>文本注释标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文本注释标签 Ctrl+/  --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本换行标签"><a href="#文本换行标签" class="headerlink" title="文本换行标签"></a>文本换行标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好<span class="tag">&lt;<span class="name">br</span>&gt;</span>我来自中国</span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br>你好<br>我来自中国</p><h3 id="横线标签"><a href="#横线标签" class="headerlink" title="横线标签"></a>横线标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code></p><hr><h2 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h2><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一行文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这也是一行文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><p>这是一行文字</p><p>这也是一行文字</p></p><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><blockquote><p>注意：标题标签只能取到数字 1-6 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是一个标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个标题3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是一个标题4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是一个标题5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是一个标题6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span>  <span class="attr">size</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>优美的文字<span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><font  size="10"  color="red">优美的文字</font> </p><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><h4 id="文字加粗显示"><a href="#文字加粗显示" class="headerlink" title="文字加粗显示"></a>文字加粗显示</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>该减肥了！<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><strong>该减肥了！</strong></p><h4 id="文字斜体"><a href="#文字斜体" class="headerlink" title="文字斜体"></a>文字斜体</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>这行字是斜的<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><em>这行字是斜的</em></p><h4 id="文字下横线"><a href="#文字下横线" class="headerlink" title="文字下横线"></a>文字下横线</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>文字下横线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>文字下横线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><ins>文字下横线</ins><br><u>文字下横线</u></p><h4 id="文字删除线"><a href="#文字删除线" class="headerlink" title="文字删除线"></a>文字删除线</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><del>删除线</del><br><s>删除线</s></p><h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">src</td><td>设置显示图片（图片名称或者图片路径）</td></tr><tr><td align="center">title</td><td>用来设置鼠标放在图片上显示的文字</td></tr><tr><td align="center">alt</td><td>当图片无法正常显示的时候，对图片的描述</td></tr><tr><td align="center">width</td><td>用来设置图片宽度</td></tr><tr><td align="center">height</td><td>用来设置图片的高度</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下图来自百度图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;www.baidu.com/imags/1.png&quot;</span> <span class="attr">title</span>=<span class="string">&quot;HTML&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;测试图片&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=363357286,1094270233&fm=27&gp=0.jpg" title="HTML" alt="测试图片" width="200" height="200"></p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><ul><li>当图片和文件（html）在同一个文件夹中时，src 属性中直接写上图片名称即可。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当图片在文件（html）的下一级目录中时，src 属性中写上图片所在的文件夹名 +“&#x2F;” + 图片名称</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1/1.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当图片在文件（html）的上一级目录中时，src 属性中写上 ..&#x2F;图片所在文件夹名 + “&#x2F;” + 图片名称</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../2/1.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>凡是带有 <code>磁盘路径</code> 的都是绝对路径，或者带有 <code>网站地址</code> 的也是绝对路径。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;D:\a\1.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;www.baidu.com/imags/1.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>在HTML中创建超链接非常简单，只需用 <code>&lt;a&gt;&lt;/a&gt;</code> 标记环绕需要被链接的对象即可，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">href</td><td>用于指定链接目标的 url 地址，当为 <code>&lt;a&gt;</code> 标记应用 <code>href</code> 属性时，它就具有了超链接的功能。</td></tr><tr><td align="center">target</td><td>用于指定链接页面的打开方式，其取值有 <code>_self</code> 和 <code>_blank</code> 两种，其中 <code>_self</code> 为默认值， <code>_blank</code> 为在新窗口中打开方式。</td></tr><tr><td align="center">在 <code>&lt;head&gt;</code> 标签中使用 <code>&lt;base&gt;</code> 标签可以设置网页整体链接的打开状态。</td><td></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.renkaigis.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>Kai&#x27;s Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><a href="http://www.baidu.com" target="_blank">百度</a><br><a href="http://www.renkaigis.com" target="_blank">Kai’s Blog</a></p><p><strong>注意:</strong></p><blockquote><p>（1）暂时没有确定链接目标时，通常将 <code>&lt;a&gt;</code> 标记的 href 属性值定义为“#”(即 <code>href=&quot;#&quot;</code> )，表示该链接暂时为一个空链接。</p><p>（2）不仅可以创建文本超链接，在网页中各种网页元素，如 <code>图像、表格、音频、视频</code> 等都可以添加超链接。</p></blockquote><h2 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h2><p>通过创建锚点链接，用户能够快速定位到目标内容。</p><p>创建锚点链接分为两步：</p><ul><li>使用 “ <code>&lt;a href=&quot;#id名&quot;&gt;</code> 链接文本 <code>&lt;/a&gt;</code> ” 创建链接文本；</li><li>使用相应的 id 名标注跳转目标的位置。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 例如在网页顶部写个你好 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;db&quot;</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 给 a 标签设置 href 属性 &quot;#id名称&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#db&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code></p><p id="db">你好</p><a href="#db">返回顶部</a><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><table><thead><tr><th align="center">特殊字符</th><th align="center">描述</th><th>字符的代码</th></tr></thead><tbody><tr><td align="center"></td><td align="center">空格符</td><td><code>&amp;nbsp;</code></td></tr><tr><td align="center">&lt;</td><td align="center">小于号</td><td><code>&amp;lt;</code></td></tr><tr><td align="center">&gt;</td><td align="center">大于号</td><td><code>&amp;gt;</code></td></tr><tr><td align="center">&amp;</td><td align="center">和号</td><td><code>&amp;amp;</code></td></tr><tr><td align="center">￥</td><td align="center">人民币</td><td><code>&amp;yen;</code></td></tr><tr><td align="center">©</td><td align="center">版权</td><td><code>&amp;copy;</code></td></tr><tr><td align="center">®</td><td align="center">注册商标</td><td><code>&amp;reg;</code></td></tr><tr><td align="center">°</td><td align="center">摄氏度</td><td><code>&amp;deg;</code></td></tr><tr><td align="center">±</td><td align="center">正负号</td><td><code>&amp;plusmn;</code></td></tr><tr><td align="center">×</td><td align="center">乘号</td><td><code>&amp;times;</code></td></tr><tr><td align="center">÷</td><td align="center">除号</td><td><code>&amp;divide;</code></td></tr><tr><td align="center">²</td><td align="center">平方（上标2）</td><td><code>&amp;sup2;</code></td></tr><tr><td align="center">³</td><td align="center">立方（上标3）</td><td><code>&amp;sup3;</code></td></tr></tbody></table><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表（ul）"><a href="#无序列表（ul）" class="headerlink" title="无序列表（ul）"></a>无序列表（ul）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  列表项</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">大家喜欢吃什么水果</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>水蜜桃<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>菠萝<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br>大家喜欢吃什么水果<ul><li>苹果</li><li>香蕉</li><li>菠萝</li></ul></p><p>属性：type</p><blockquote><p>（默认值）实心圆点：disc</p><p>实心方块：square</p><p>空心圆圈：circle</p></blockquote><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="有序列表（ol）"><a href="#有序列表（ol）" class="headerlink" title="有序列表（ol）"></a>有序列表（ol）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性：type</p><blockquote><p>A（ABCD排序），a（abcd排序），i（小写的罗马数字），I（大写的罗马数字）</p></blockquote><p>属性：start&#x3D;”3”，表示从第几个数开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">把大象放冰箱分几步？</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;a&quot;</span>  <span class="attr">start</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>打开冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象放进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>关上冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span> </span><br></pre></td></tr></table></figure><p><code>效果演示：</code></p><p>把大象放冰箱分几步？<ol type="a"  start="3"><li>打开冰箱门</li><li>把大象放进去</li><li>关上冰箱门</li></ol> </p><h2 id="自定义列表（dl）"><a href="#自定义列表（dl）" class="headerlink" title="自定义列表（dl）"></a>自定义列表（dl）</h2><p>自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span>  小标题</span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span>  列表项</span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般用于网页的底部，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>售后服务<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>收货地址<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>在线支付<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>联系客服<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code></p><dl><dt>售后服务</dt><dd>收货地址</dd><dd>在线支付</dd><dd>联系客服</dd></dl><h1 id="小补充"><a href="#小补充" class="headerlink" title="小补充"></a>小补充</h1><h2 id="页面背景音乐"><a href="#页面背景音乐" class="headerlink" title="页面背景音乐"></a>页面背景音乐</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;1.mp3&quot;</span> <span class="attr">hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性：</p><ul><li>src：设置音乐路径</li><li>hidden：隐藏播放按钮，true 隐藏，false 显示</li></ul><h2 id="页面滚动效果"><a href="#页面滚动效果" class="headerlink" title="页面滚动效果"></a>页面滚动效果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 中间的内容可以为 文字、图片，也可以是由程序生成的文字或图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">marquee</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>实例展示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">bgcolor</span>=<span class="string">&quot;blue&quot;</span> &gt;</span>我会滚动<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span> </span><br></pre></td></tr></table></figure><p><code>效果演示：</code></p><p><marquee bgcolor="pink">我会滚动</marquee> </p><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">height</td><td>设置高度</td></tr><tr><td align="center">width</td><td>设置宽度</td></tr><tr><td align="center">bgcolor</td><td>设置背景颜色</td></tr><tr><td align="center">behavior</td><td>设定滚动的方式：<br>alternate：表示在两端之间来回滚动；<br>scroll：表示由一端滚动到另一端，会重复；<br>slide：表示由一端滚动到另一端，不会重复。</td></tr><tr><td align="center">direction</td><td>设定滚动的时间：<br>down：向下滚动；<br>left：向左滚动；<br>right：向右滚动；<br>up：向上滚动。</td></tr><tr><td align="center">loop</td><td>设置滚动次数，-1 表示一直滚下去</td></tr></tbody></table><h1 id="Meta标签和Link标签"><a href="#Meta标签和Link标签" class="headerlink" title="Meta标签和Link标签"></a>Meta标签和Link标签</h1><h2 id="Meta-标签"><a href="#Meta-标签" class="headerlink" title="Meta 标签"></a>Meta 标签</h2><p>meta 的属性有两种：<code>name</code> 和 <code>http-equiv</code>。</p><h3 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h3><p>主要用于描述网页，对应于 content（网页内容）。</p><ul><li>1、用来说明网页使用的字符集，即编码格式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span>  <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2、用以说明生成工具（如Microsoft FrontPage 4.0）等；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">contect</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>3、向搜索引擎说明你的网页的关键词；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">contect</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>4、告诉搜索引擎你的站点的主要内容；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">contect</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>5、告诉搜索引擎你的站点的制作的作者；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span>  <span class="attr">name</span>=<span class="string">&quot;author&quot;</span>  <span class="attr">contect</span>=<span class="string">&quot;你的姓名&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>6、有时候会有一些站点内容，不希望被ROBOTS抓取而公开。为了解决这个问题，ROBOTS开发界提供了两个办法：一个是robots.txt，另一个是 <code>The Robots META</code> 标签。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span>   <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">contect</span>= <span class="string">&quot;all|none|index|noindex|follow|nofollow&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><blockquote><p><code>robots</code> 其中的属性说明如下：</p><p>设定为 <code>all</code>：文件将被检索，且页面上的链接可以被查询；</p><p>设定为 <code>none</code>：文件将不被检索，且页面上的链接不可以被查询；</p><p>设定为 <code>index</code>：文件将被检索；</p><p>设定为 <code>follow</code>：页面上的链接可以被查询；</p><p>设定为 <code>noindex</code>：文件将不被检索，但页面上的链接可以被查询；</p><p>设定为 <code>n</code>ofollow&#96;：文件将不被检索，页面上的链接可以被查询。</p></blockquote><h3 id="http-equiv-属性"><a href="#http-equiv-属性" class="headerlink" title="http-equiv 属性"></a>http-equiv 属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5;url=http://www.baidu.com&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>网页重定向，表示的是 <code>5</code> 秒后网页自动跳转到指定网址。</li></ul><h2 id="Link-标签"><a href="#Link-标签" class="headerlink" title="Link 标签"></a>Link 标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span>  <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>给网页 titile 中放置小图标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>   <span class="attr">href</span>=<span class="string">&quot;1.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入外部样式表</p><h1 id="表格（table）"><a href="#表格（table）" class="headerlink" title="表格（table）"></a>表格（table）</h1><h2 id="表格基本结构"><a href="#表格基本结构" class="headerlink" title="表格基本结构"></a>表格基本结构</h2><p>在 HTML 语言中，表格至少由 <code>&lt;TABLE&gt;</code> 标签、<code>&lt;TR&gt;</code> 标签和 <code>&lt;TD&gt;</code> 标签这 3 对标签组成。</p><p>1.<code>&lt;table&gt;</code><br><code>&lt;table&gt;...&lt;/table&gt;</code> 标签用于在HTML文档中创建表格。它包含表名和表格本身内容的代码。表格的基本单元是单元格，用 <code>&lt;td&gt;...&lt;/td&gt;</code> 标签定义。</p><p>2.<code>&lt;tr&gt;</code><br>表格行用 <code>&lt;tr&gt;</code> 标签定义，由单元格构成。多个行结合在一起就构成一个表格，这反映在用于创建表格的HTML语法中。表格的每一行都用 <code>&lt;tr&gt;</code> 标签表示，并用相应的 <code>&lt;/tr&gt;</code> 结束.</p><p>3.<code>&lt;td&gt;</code><br>表格的每一行又有若干表格单元格，用 <code>&lt;td&gt;...&lt;/td&gt;</code> 标签表示。td 是”表格数据(Table Data)”的英文缩写。<code>&lt;td&gt;</code> 标签定义一个列，嵌套于 <code>&lt;tr&gt;</code> 标签内。<br>border 属性是最常用的属性，可用于定义表格的单元格和结构。该属性指定边框的厚度，如果其值设置为零(0)，则不显示边框。</p><p><strong>基本语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性介绍：</strong></p><ul><li>bord：设置表格边框的厚度</li><li>width：设置表格宽度</li><li>height：设置表格高度</li><li>cellspacing：设置单元格之间的距离</li><li>cellpadding：文字距离单元格边框的距离</li><li>bgcolor&#x3D;”red”：设置背景颜色</li><li>align&#x3D;”center” | left | right：给 tr 或者 td 设置让文字居中，给 table 设置让表格居中</li></ul><table><thead><tr><th>属性名</th><th>含义</th><th>常用属性值</th></tr></thead><tbody><tr><td>border</td><td>设置边框，默认为0，没有边框</td><td>单位为 px 像素值</td></tr><tr><td>cellspacing</td><td>设置单元格与单元格之间的距离</td><td>单位为 px 像素值，默认为 2px</td></tr><tr><td>cellpadding</td><td>设置文字与单元格之间的距离</td><td>默认 1px</td></tr><tr><td>width</td><td>设置表格的宽度</td><td>单位 px</td></tr><tr><td>height</td><td>设置表格的高度</td><td>单位 px</td></tr><tr><td>align</td><td>设置表格在网页中的对其方式</td><td>left 左<br>rigth 右<br>center 居中</td></tr><tr><td>bgcolor</td><td>设置背景颜色</td><td>white，red，green等</td></tr></tbody></table><h2 id="设置表格表头，用法和-td-一样"><a href="#设置表格表头，用法和-td-一样" class="headerlink" title="设置表格表头，用法和 td 一样"></a>设置表格表头，用法和 td 一样</h2><p>表头一般位于表格的第一行或第一列，其文本加粗居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>码农<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code></p><table><tr><th>姓名</th><th>年龄</th><th>职业</th><th>籍贯</th></tr><tr><td>小明</td><td>18</td><td>码农</td><td>江苏</td></tr></table><h2 id="表格属性设置示例："><a href="#表格属性设置示例：" class="headerlink" title="表格属性设置示例："></a>表格属性设置示例：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;20&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>码农<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：（本应整个表格都是 bgcolor 的，这里显示有问题）</code></p><table border="1" width="200" height="300" cellspacing="0" cellpadding="20" bgcolor="pink"><tr><th>姓名</th><th>年龄</th><th>职业</th><th>籍贯</th></tr><tr><td>小明</td><td>18</td><td>码农</td><td>江苏</td></tr></table><h2 id="设置表格标题："><a href="#设置表格标题：" class="headerlink" title="设置表格标题："></a>设置表格标题：</h2><p>caption 标签必须紧随 table 标签之后。只能对每个表格定义一个标题。通常这个标题会被居中于表格之上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置表格标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span> <span class="tag">&lt;<span class="name">h3</span>&gt;</span>人员信息表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>码农<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code></p><table><caption> <h3>人员信息表</h3></caption><tr><th>姓名</th><th>年龄</th><th>职业</th><th>籍贯</th></tr><tr><td>小明</td><td>18</td><td>码农</td><td>江苏</td></tr></table><h2 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span>    头</span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>    身体</span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span>    脚</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在使用表格进行布局时，可以将表格划分为头部、主体和页脚，具体如下所示：</p><ul><li><code>&lt;thead&gt;&lt;/thead&gt;</code>：用于定义表格的头部，必须位于 <code>&lt;table&gt;&lt;/table&gt;</code> 标记中，一般包含网页的logo和导航等头部信息。</li><li><code>&lt;tbody&gt;&lt;/tbody&gt;</code>：用于定义表格的主体，位于 <code>&lt;table&gt;&lt;/table&gt;</code> 标记中 <code>&lt;thead&gt;&lt;/thead&gt;</code> 标记之后，一般包含网页中除头部和底部之外的其他内容。</li><li><code>&lt;tfoot&gt;&lt;/tfoot&gt;</code>：用于定义表格的页脚，位于 <code>&lt;table&gt;&lt;/table&gt;</code> 标记中 <code>&lt;tbody&gt;&lt;/tbody&gt;</code> 标记之后，一般包含网页底部的企业信息等。</li></ul><h2 id="补充知识：单元格的合并"><a href="#补充知识：单元格的合并" class="headerlink" title="补充知识：单元格的合并"></a>补充知识：单元格的合并</h2><h3 id="横向合并"><a href="#横向合并" class="headerlink" title="横向合并"></a>横向合并</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实例展示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实例展示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;th&gt;职业&lt;/th&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>码农<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code></p><table border="1" cellspacing="0" cellpadding="20"><tr><th>姓名</th><th colspan="2">年龄</th><th>籍贯</th></tr><tr><td>小明</td><td>18</td><td>码农</td><td>江苏</td></tr></table><h3 id="纵向合并"><a href="#纵向合并" class="headerlink" title="纵向合并"></a>纵向合并</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="comment">&lt;!-- 纵向合并 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;td&gt;&lt;/td&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实例展示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实例展示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>码农<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="comment">&lt;!-- 纵向合并 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小白<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;td&gt;前端&lt;/td&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code></p><table border="1" cellspacing="0" cellpadding="20"><tr><th>姓名</th><th>年龄</th><th>职业</th><th>籍贯</th></tr><tr><td>小明</td><td>18</td><td rowspan="2">程序猿</td><td>江苏</td></tr><tr><td>小白</td><td>21</td><td>北京</td></tr></table><h1 id="表单（form）"><a href="#表单（form）" class="headerlink" title="表单（form）"></a>表单（form）</h1><h2 id="表单介绍"><a href="#表单介绍" class="headerlink" title="表单介绍"></a>表单介绍</h2><p>表单的作用：主要负责数据采集功能。</p><p>对于表单构成中的表单控件、提示信息和表单域，对他们的具体解释如下：</p><ul><li>表单控件：包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</li><li>提示信息：一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</li><li>表单域：他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</li></ul><p><strong>基本语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;form_name&quot;</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get|post&quot;</span>&gt;</span>…<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性介绍：</strong></p><ul><li>Name ：定义表单的名称；</li><li>Action ：用来指定表单处理程序的位置（服务器端脚本处理程序）；</li><li>Method: 定义表单结果从浏览器传送到服务器的方式，默认参数为：get。</li></ul><blockquote><p>get数据提交：① 通过地址栏的方式进行数据提交，将用户输入的信息显出来；② get提交安全性差。</p><p>post提交：① 数据通过后台进行提交，不会将用户信息显示出来；② 安全性比较好。</p></blockquote><h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    …</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>容纳表单空间和提示信息的一个区域。</p><h2 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h2><h3 id="input-控件"><a href="#input-控件" class="headerlink" title="input 控件"></a>input 控件</h3><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">“控件类型”</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的语法中，<code>&lt;input&gt;</code> 标记为单标记，type属性为其最基本的属性，其取值有多种，用于指定不同的控件类型。除了type属性之外，<code>&lt;input&gt;</code> 标记还可以定义很多其他的属性，其常用属性如下表所示。</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>text<br>password<br>radio<br>checkbox<br>button<br>submit<br>reset<br>image<br>hidden<br>file</td><td>单行文本输入框<br>密码输入框<br>单选按钮<br>复选框<br>普通按钮<br>提交按钮<br>重置按钮<br>图像形式的提交按钮<br>隐藏域<br>文件域</td></tr><tr><td>name</td><td>由用户自定义</td><td>控件的名称</td></tr><tr><td>value</td><td>由用户自定义</td><td>input 控件中的默认文本值</td></tr><tr><td>size</td><td>正整数</td><td>input 控件在页面中的显示宽度</td></tr><tr><td>readonly</td><td>readonly</td><td>该控件内容为只读（不能编辑修改）</td></tr><tr><td>disabled</td><td>disabled</td><td>第一次加载页面时禁用该控件（显示为灰色）</td></tr></tbody></table><h4 id="文本输入框"><a href="#文本输入框" class="headerlink" title="文本输入框"></a>文本输入框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文本输入框 --&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>   <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br>用户名：<input type="text" maxlength="6"   name="username"  value="1234" ></p><p><strong>属性:</strong></p><ul><li>maxlength：设置文本输入框最多能输多少字符</li><li>readonly&#x3D;”readonly”：设置文本输入框为只读（不能编辑）</li><li>disabled+”disabled”：控件属于非激活状态</li><li>name&#x3D;”username”：给输入框设置名称</li><li>value：设置默认显示的值</li></ul><h4 id="密码输入框"><a href="#密码输入框" class="headerlink" title="密码输入框"></a>密码输入框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 密码输入框 --&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br>密码：<input type="password" name="pwd" value="123"></p><p>属性用法与文本输入框的用法一样。</p><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单选按钮 --&gt;</span></span><br><span class="line">性别：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xb&quot;</span>  <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xb&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nv&quot;</span> &gt;</span>女</span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br>性别：<input type="radio" name="xb"  checked="checked" value="nan">男  <input type="radio" name="xb" value="nv">女</p><p>注意：实现单选效果一定要给控件设置相同的名称</p><p><strong>属性：</strong></p><ul><li>checked&#x3D;”checked”：设置默认选中项</li></ul><h4 id="多选控件"><a href="#多选控件" class="headerlink" title="多选控件"></a>多选控件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">兴趣爱好：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>抽烟</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>喝酒</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>烫头</span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br>兴趣爱好：<input type="checkbox" checked="checked">抽烟<input type="checkbox">喝酒<input type="checkbox" checked="checked">烫头</p><p><strong>属性：</strong></p><ul><li>checked&#x3D;”checked”：设置默认选中项</li></ul><h4 id="图片上传控件"><a href="#图片上传控件" class="headerlink" title="图片上传控件"></a>图片上传控件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">头像：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br>头像：<input type="file"></p><h4 id="表单提交按钮"><a href="#表单提交按钮" class="headerlink" title="表单提交按钮"></a>表单提交按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单提交按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><input type="submit"  value="登录"></p><h4 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><input type="button"  value="普通按钮"></p><blockquote><p>注意：该按钮不能进行表单提交。通常和 js 代码配合使用。</p></blockquote><h4 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h4><p>清空所有表单数据，恢复到初始状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 重置按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><input type="reset"></p><h4 id="图片按钮"><a href="#图片按钮" class="headerlink" title="图片按钮"></a>图片按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 图片按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;按钮.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：该控件也可以进行表单的提交。</p></blockquote><h3 id="select-控件"><a href="#select-控件" class="headerlink" title="select 控件"></a>select 控件</h3><p>在 HTML 中，要想制作下拉菜单，就需要使用select控件。</p><h4 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">出生地：</span><br><span class="line">省：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>山东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>山西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>河南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>河北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>  <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br>出生地：省：<select multiple="multiple"><br>    <option>山东</option><br>    <option>山西</option><br>    <option>河南</option><br>    <option>河北</option><br>    <option  selected="selected">北京</option><br></select></p><p><strong>属性：</strong></p><ul><li>selected&#x3D;”selected”：设置默认选中项</li><li>multiple&#x3D;”multiple”：可以实现多选效果</li></ul><h4 id="下拉列表分组显示"><a href="#下拉列表分组显示" class="headerlink" title="下拉列表分组显示"></a>下拉列表分组显示</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">市(区)：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;北京市&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>西城区 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>东城区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>海淀区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>昌平区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;上海市&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>黄浦区 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>松江区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>浦东新区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>静安区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br>市(区)：<select id="name"><br>    <optgroup label="北京市"><br>        <option>西城区 </option><br>        <option>东城区</option><br>        <option>海淀区</option><br>        <option>昌平区</option><br>    </optgroup><br>    <optgroup label="上海市"><br>        <option>黄浦区 </option><br>        <option>松江区</option><br>        <option>浦东新区</option><br>        <option>静安区</option><br>    </optgroup><br></select></p><h3 id="textarea-控件"><a href="#textarea-控件" class="headerlink" title="textarea 控件"></a>textarea 控件</h3><p>如果需要输入大量的信息，就需要用到 <code>&lt;textarea&gt;&lt;/textarea&gt;</code> 标记。通过 textarea 控件可以轻松地创建多行文本输入框，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;每行中的字符数&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;显示的行数&quot;</span>&gt;</span></span><br><span class="line">    文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><ul><li>cols：相当于宽度</li><li>rows：相当于高度</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">自我介绍：</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br>自我介绍：</p><textarea cols="20" rows="5"></textarea><h2 id="组合表单"><a href="#组合表单" class="headerlink" title="组合表单"></a>组合表单</h2><p>fieldset 用于表单分组。<br><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>   <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code></p><fieldset>    <legend>用户注册</legend>        用户名：<input type="text" maxlength="6"   name="username"  value="" >        <br>        <br>        密码：<input type="password" name="pwd" value="123"></fieldset><h2 id="表单补充"><a href="#表单补充" class="headerlink" title="表单补充"></a>表单补充</h2><h3 id="判断网址"><a href="#判断网址" class="headerlink" title="判断网址"></a>判断网址</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 判断网址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><input type="url"><br><input type="submit"></p><h3 id="判断邮箱"><a href="#判断邮箱" class="headerlink" title="判断邮箱"></a>判断邮箱</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 判断邮箱 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><input type="email"><br><input type="submit"></p><h3 id="日期控件"><a href="#日期控件" class="headerlink" title="日期控件"></a>日期控件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日期控件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><input type="date"><br><input type="submit"></p><h3 id="时间控件"><a href="#时间控件" class="headerlink" title="时间控件"></a>时间控件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 时间控件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><input type="time"><br><input type="submit"></p><h3 id="带有-spinner-控件的数字字段"><a href="#带有-spinner-控件的数字字段" class="headerlink" title="带有 spinner 控件的数字字段"></a>带有 spinner 控件的数字字段</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 带有 spinner 控件的数字字段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><ul><li>step：表示每次加减的值（即步长）</li></ul><p><code>效果演示：</code><br><input type="number" step="5"><br><input type="submit"></p><h3 id="带有-slider-控件的数字字段"><a href="#带有-slider-控件的数字字段" class="headerlink" title="带有 slider 控件的数字字段"></a>带有 slider 控件的数字字段</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 带有 slider 控件的数字字段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><ul><li>max：最大值</li><li>min：最小值</li><li>step：每次加减的值（即步长）</li></ul><p><code>效果演示：</code><br><input type="range" max="100" min="30" step="5"><br><input type="submit"></p><h3 id="定义拾色器"><a href="#定义拾色器" class="headerlink" title="定义拾色器"></a>定义拾色器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义拾色器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>效果演示：</code><br><input type="color"><br><input type="submit"></p><h1 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h1><ul><li>标签语义化概念：</li></ul><blockquote><p>根据内容的结构化（内容语义化），选择合适的标签（代码语义化）</p></blockquote><ul><li>标签语义化意义：</li></ul><blockquote><p>1: 网页结构合理</p><p>2: 有利于 SEO :和搜索引擎建立良好沟通，有了良好的结构和语义你的网页内容自然容易被搜索引擎抓取；</p><p>3: 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）;</p><p>4: 便于团队开发和维护.</p></blockquote><ul><li>标签语义化（注意事项）</li></ul><blockquote><p>1：尽可能少的使用无语义的标签 div 和 span ；</p><p>2：在语义不明显时，既可以使用 div 或者 p 时，尽量用 p, 因为 p 在默认情况下有上下间距，对兼容特殊终端有利；</p><p>3：不要使用纯样式标签，如：b、font、u 等，改用 css 设置。</p><p>4：需要强调的文本，可以包含在 strong 或者 em 标签中。strong 默认样式是加粗（不要用b），em 是斜体（不用 i ）；</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我的 html 基础学习是跟着传智播客2016年的视频课程学习的，基础就这些内容，特别整理下来以加深记忆。内容或多或少会与网络上的内容有些许出入。总的来说 html 很简单，很容易上手。但这只是基础，html + css + javascript 才能做出真正漂亮的网页。</p><p>千里之行，始于足下，接下来的路，加油！</p>]]></content>
      
      
      <categories>
          
          <category> HTML+CSS+JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观建军90周年阅兵之感悟</title>
      <link href="/view-of-army-building-90th.html"/>
      <url>/view-of-army-building-90th.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p id="div-border-top-red">恰逢 <font color="#FF0000"><b>中国人民解放军建军 90 周年</b></font>  ，下一个百年会是什么样的盛况？十年后的今天，肯定特别隆重，中国军队更加现代化，中国的综合实力更加强胜。2017 年 7 月 30 日，一个小阅兵式，不比 2015 年的 9.3 阅兵，但也足以展示中国军队的强势！</p><div align="center"><img src="../../images/mine/army9001.jpg"></div><span id="more"></span><div align="center">2017 年 7 月 30 日 9 时，在朱日和训练基地隆重举行了庆祝建军 90 周年阅兵式。中共中央总书记、国家主席、中央军委主席习近平检阅部队并发表重要讲话。</div><br><div align="center"><img src="../../images/mine/army9002.jpg"><img src="../../images/mine/army9003.jpg"></div><div align="center">政治觉悟强、思想素质高的我专门观看了这场直播。看的真是个热血沸腾！尤其是国歌响起的时候，看到我们的军队气势如虹，中国已经不是以前的模样了！她那么年轻，又那么富有活力，最重要的是有一群铁骨铮铮的人的在守卫着她的每一寸土地和国民。</div><div align="center"><img src="../../images/mine/army9004.jpg"><img src="../../images/mine/army9005.jpg"><img src="../../images/mine/army9006.jpg"></div><div align="center">从 1927 到 2017 ，中国军队走过了漫长的岁月，中国军队日益强大。车牌 1927 和 2017 相互对接，是一种历史的传承。</div><div align="center">[《国歌》](http://music.163.com/#/song?id=25841337)<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=25841337&auto=0&height=66"></iframe></div><div align="center">国歌响起的刹那，热泪盈眶。每一个中国人都熟悉的一首歌，竟这样好听。习大大在主席台上也跟着音乐在哼唱着。</div><div align="center"><img src="../../images/mine/army9007.jpg"></div><div align="center">[《检阅进行曲》](http://music.163.com/#/song?id=395434)<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=395434&auto=0&height=66"></iframe></div><div align="center">习大大身着迷彩登上车牌 2017 的野战车的时候，《检阅进行曲》响起，一排排列队整齐的军队，一辆辆现代化的作战车辆，一架架直升机、空中梯队，严阵以待，等待着党和人民的检阅。</div><div align="center"><img src="../../images/mine/army9008.jpg"><img src="../../images/mine/army9009.jpg"><img src="../../images/mine/army9010.jpg"><img src="../../images/mine/army9011.jpg"><img src="../../images/mine/army9012.jpg"><img src="../../images/mine/army9013.jpg"><img src="../../images/mine/army9014.jpg"></div><div align="center">[《分列式进行曲》](http://music.163.com/#/song?id=395437)<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=395437&auto=0&height=66"></iframe></div><div align="center">这就是我们的军队，这是人民的军队。</div><blockquote class="blockquote-center">时至今日，兔子们已经把种花家变成了蓝星最牛的堂口之一，他走过骨血硝烟，走过繁花似锦，曾跌入泥潭，也能踏上云端。</blockquote><div align="center"><img src="../../images/mine/army9015.jpg"><img src="../../images/mine/army9016.jpg"><img src="../../images/mine/army9017.jpg"><img src="../../images/mine/army9018.jpg"><img src="../../images/mine/army9019.jpg"><img src="../../images/mine/army9020.jpg"><img src="../../images/mine/army9021.jpg"><img src="../../images/mine/army9022.jpg"><img src="../../images/mine/army9023.jpg"><img src="../../images/mine/army9024.jpg"><img src="../../images/mine/army9025.jpg"><img src="../../images/mine/army9026.jpg"></div><br/><div align="center"><font color="#FF0000"><b>每一只兔子都有一个大国梦。今生不悔入华夏，来世还愿种花家。</b></font></div><div align="center"><img src="../../images/mine/army9027.jpg"></div><div align="center"><font color="#FF0000"><font size="10"><b>『 幸福并感激着！ 』</b></font></font></div><br/>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome 浏览器设置 XX-Net 的方法（Windows）</title>
      <link href="/method-setup-XX-Net-Chrome-Windows.html"/>
      <url>/method-setup-XX-Net-Chrome-Windows.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div align="center"><img src="http://img.blog.csdn.net/20170727091437967" width=300 height=300></div><p id="div-border-left-yellow">本文详细介绍如何在一台 Windows 电脑上架设起 Chrome + XX-Net 的上网渠道。XX-Net 对于需要翻墙的用户来说非常方便。尤其是配置了自己的私有 appid 后，浏览外网毫无压力。在整个部署过程中可能有部分网页需要翻墙才可以进入，可以暂时使用 [Lantern](https://getlantern.org) 进行翻墙。Lantern 下载地址：<a id="download" href="http://or2dtuwv6.bkt.clouddn.com/lantern-installer.exe" target="_blank"><i class="fa fa-download">&nbsp;&nbsp;</i>Download Now</a></p><span id="more"></span><h1 id="下载安装-Chrome-浏览器"><a href="#下载安装-Chrome-浏览器" class="headerlink" title="下载安装 Chrome 浏览器"></a>下载安装 Chrome 浏览器</h1><ul><li>Chrome 下载地址：<br><a href="https://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html">https://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html</a><br>这一步很简单，直接跳过。</li></ul><h1 id="获取和运行-XX-Net"><a href="#获取和运行-XX-Net" class="headerlink" title="获取和运行 XX-Net"></a>获取和运行 XX-Net</h1><ul><li>打开链接，选择稳定版下载。<br><a href="https://github.com/XX-net/XX-Net/blob/master/code/default/download.md">https://github.com/XX-net/XX-Net/blob/master/code/default/download.md</a></li></ul><p><img src="http://img.blog.csdn.net/20170727091835863" alt="图2"></p><ul><li><p>下载完毕后解压缩文件夹，运行文件夹中 start.vbs 文件。</p></li><li><p>如果弹出管理员权限请求（用户账户控制），请允许。</p></li><li><p>首次运行可能会弹出防火墙警告，请允许访问。</p></li></ul><h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><h2 id="方法一：简单方法"><a href="#方法一：简单方法" class="headerlink" title="方法一：简单方法"></a>方法一：简单方法</h2><ul><li>启动 XX-Net 后，右下角会出现托盘图标。<code>右键单击托盘图标</code>，点击“<code>全局 PAC 智能代理</code>”即可。</li></ul><p><img src="http://img.blog.csdn.net/20170727091927371" alt="图3"></p><h2 id="方法二：安装和使用代理切换插件"><a href="#方法二：安装和使用代理切换插件" class="headerlink" title="方法二：安装和使用代理切换插件"></a>方法二：安装和使用代理切换插件</h2><ul><li>打开 XX-Net&#x2F;SwitchyOmega 文件夹；打开 Chrome 浏览器的扩展程序页面 <a href="chrome://extensions">chrome://extensions</a> 。把 <strong>SwitchyOmega.crx</strong> 文件拖放到浏览器扩展程序页面安装。如图:</li></ul><p><img src="http://img.blog.csdn.net/20170727092042617" alt="图4"></p><ul><li><p>此时。浏览器上方会出现对话框，点击<code>添加扩展程序</code>。</p></li><li><p>进入 SwitchOmega 页面，第一次进来，选择<code>跳过教程</code>；</p></li><li><p>点击界面左侧栏的<code>导入/导出</code>，选择<code>从备份文件恢复</code>：</p></li></ul><p><img src="http://img.blog.csdn.net/20170727092222780" alt="图5"></p><ul><li>点击从备份文件中恢复后，找到 XX-Net&#x2F;SwitchyOmega&#x2F;OmegaOptions.bak 文件，点击打开：</li></ul><p><img src="http://img.blog.csdn.net/20170727092258006" alt="图6"></p><ul><li>点击左侧栏“情景模式”下的 <code>XX-Net自动切换</code>；</li></ul><p><img src="http://img.blog.csdn.net/20170727092323294" alt="图7"></p><ul><li>下拉点击<code>立即更新情景模式</code></li></ul><p><img src="http://img.blog.csdn.net/20170727092351829" alt="图8"></p><ul><li>点击 Chrome 右上角的 SwitchOmega，切换成 “<code>XX-Net自动切换</code>”；</li></ul><p><img src="http://img.blog.csdn.net/20170727092555640" alt="图9"></p><ul><li>到此，浏览器端设置代理也就完成了，还需最后一步，把 XX-Net 切换为“<code>取消全局代理</code>”，就可以畅游网络了。</li></ul><p><img src="http://img.blog.csdn.net/20170727091927371" alt="图3"></p><ul><li>但是此时用的是 <strong>公共 APPID，因为资源有限，使用上存在限制，建议部署私有 APPID</strong>。</li></ul><h1 id="配置个人-APPID"><a href="#配置个人-APPID" class="headerlink" title="配置个人 APPID"></a>配置个人 APPID</h1><h2 id="登录-Google-账户"><a href="#登录-Google-账户" class="headerlink" title="登录 Google 账户"></a>登录 Google 账户</h2><ul><li><a href="https://www.google.com/ncr">https://www.google.com/ncr</a> (若无帐户，需注册)</li></ul><h2 id="创建-APPID"><a href="#创建-APPID" class="headerlink" title="创建 APPID"></a>创建 APPID</h2><ul><li>打开 <a href="https://console.cloud.google.com/start">https://console.cloud.google.com/start</a> ，点击<code>选择项目</code>，然后点击<code>创建项目</code>：</li></ul><p><img src="http://img.blog.csdn.net/20170727092829551" alt="图10"><br><img src="http://img.blog.csdn.net/20170727092900802" alt="图11"></p><ul><li>输入项目名称后，会自动帮你匹配可用ID，然后左击创建(请细读此教程底部说明)</li></ul><p><img src="http://img.blog.csdn.net/20170727092925410" alt="图12"></p><h2 id="设置-APPID-的-App-引擎"><a href="#设置-APPID-的-App-引擎" class="headerlink" title="设置 APPID 的 App 引擎"></a>设置 APPID 的 App 引擎</h2><ul><li>点击激活 <code>Google云端Shell</code>，点击<code>启动云端SHELL</code>进入Shell；</li></ul><p><img src="http://img.blog.csdn.net/20170727093012076" alt="图13"><br><img src="http://img.blog.csdn.net/20170727093426418" alt="图14"></p><ul><li>在页面底部输入 <code>gcloud config set project</code> 项目ID,按下键盘的enter键；</li></ul><p><img src="http://img.blog.csdn.net/20170727093040535" alt="图15"><br><img src="http://img.blog.csdn.net/20170727093116207" alt="图16"></p><ul><li>然后输入 <code>gcloud beta app create --region us-central</code> ，再按一次enter；</li></ul><p><img src="http://img.blog.csdn.net/20170727093526565" alt="图17"></p><ul><li>当底部出现 <code>Success! The app is now created. Please use &#39;gcloud app deploy&#39; to deploy your first app.</code> 时，创建 appid 成功。此时可以重复前面两步，创建更多的 appid；</li></ul><p><img src="http://img.blog.csdn.net/20170727093553434" alt="图18"></p><h2 id="部署服务器端"><a href="#部署服务器端" class="headerlink" title="部署服务器端"></a>部署服务器端</h2><ul><li><p>打开 XX-Net 的设置页：<a href="http://127.0.0.1:8085/">http://127.0.0.1:8085</a> ，切换到<code>部署服务端</code>；</p></li><li><p>输入AppID（多个APPID中间使用 <strong>|</strong> 隔开），“Show Debug Log”选择为 <code>On</code> ，点击 <code>开始部署</code> ；</p></li></ul><p><img src="http://img.blog.csdn.net/20170727093633625" alt="图19"></p><ul><li>弹出授权窗口，点击 <code>Allow</code>（<code>允许</code>），然后就会进行服务端的部署；</li></ul><p><img src="http://img.blog.csdn.net/20170727093813917" alt="图20"></p><ul><li><code>日志</code> 里面显示如下信息，则说明部署完成；</li></ul><p><img src="http://img.blog.csdn.net/20170727093921549" alt="图21"></p><ul><li>部署完成后，切换到 <code>配置</code> ，输入部署好的 APPID 后点击 <code>保存</code>。</li></ul><p><img src="http://img.blog.csdn.net/20170727093951803" alt="图22"></p><ul><li>切换到 <code>状态</code> 来确认部署的状态，如果一切正常，那么恭喜你，现在可以流畅的翻墙喽~~~</li></ul><p><img src="http://img.blog.csdn.net/20170727094020029" alt="图23"></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>每个 AppID 每天1G流量，一般每个 Google 帐户最多12个 AppID；</li><li>AppID 的数量只影响流量，不影响速度；</li><li>若部署过程中始终无法弹出窗口 , 建议使用ss部署服务端；</li><li>若部署一直失败，可以安装 Google Cloud SDK，gcloud init 设置代理，gcloud app deploy 上传 gae 文件夹，在 app.yaml 中不要指定 application 和 version。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Chrome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> XX-Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS Engine 地图操作基础——地图文档保存</title>
      <link href="/ArcGIS-Engine-map-basic-save-documents.html"/>
      <url>/ArcGIS-Engine-map-basic-save-documents.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p id="div-border-top-purple">在对地图文档进行修改后，经常需要对其进行保存。地图文档的保存分为直接保存和另存为两种。这里的保存仅仅只是修改地图文档文件记录的信息，并不会对数据进行更改。保存地图文档的一般格式是 \*.mxd 格式。<span id="more"></span><h1 id="地图文档保存"><a href="#地图文档保存" class="headerlink" title="地图文档保存"></a>地图文档保存</h1><p><strong>实例程序实现思路</strong></p><ul><li>(1) 地图文档的保存主要使用 IMapDocument 接口。首先使用 IMxdContents 接口读取已打开地图文档的内容，并使之替换 IMapDocument 接口的实例对象。</li><li>(2) 保存时使用 IMapDocument 接口的 Save 方法，函数原型为 public void Save(bool bUseRelativePaths, bool bCreateThumnbail)</li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>bUseRelativePaths</td><td>是否保存为相对路径（区别于绝对路径）</td></tr><tr><td>bCreateThumnbail</td><td>表示保存的地图在 ArcCatalog 中查看时是否显示缩略图</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存地图</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">SaveMap_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">string</span> <span class="variable">sMxdFileName</span> <span class="operator">=</span> mainMapControl.DocumentFilename;</span><br><span class="line">        <span class="type">IMapDocument</span> <span class="variable">pMapDocument</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapDocumentClass</span>();</span><br><span class="line">        <span class="keyword">if</span> (sMxdFileName!=<span class="literal">null</span> &amp;&amp; mainMapControl.CheckMxFile(sMxdFileName))</span><br><span class="line">        &#123;     </span><br><span class="line">            <span class="keyword">if</span> (pMapDocument.get_IsReadOnly(sMxdFileName))</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;本地图文档是只读的，不能保存!&quot;</span>);</span><br><span class="line">                pMapDocument.Close();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">SaveFileDialog</span> <span class="variable">pSaveFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SaveFileDialog</span>();</span><br><span class="line">            pSaveFileDialog.Title = <span class="string">&quot;请选择保存路径&quot;</span>;</span><br><span class="line">            pSaveFileDialog.OverwritePrompt = <span class="literal">true</span>;</span><br><span class="line">            pSaveFileDialog.Filter = <span class="string">&quot;ArcMap文档（*.mxd）|*.mxd|ArcMap模板（*.mxt）|*.mxt&quot;</span>;</span><br><span class="line">            pSaveFileDialog.RestoreDirectory = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (pSaveFileDialog.ShowDialog() == DialogResult.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                sMxdFileName = pSaveFileDialog.FileName;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pMapDocument.New(sMxdFileName);</span><br><span class="line">        pMapDocument.ReplaceContents(mainMapControl.Map as IMxdContents);</span><br><span class="line">        pMapDocument.Save(pMapDocument.UsesRelativePaths, <span class="literal">true</span>);</span><br><span class="line">        pMapDocument.Close();</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;保存地图文档成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="地图文档另存为"><a href="#地图文档另存为" class="headerlink" title="地图文档另存为"></a>地图文档另存为</h1><p><strong>实例程序实现思路</strong></p><ul><li>(1) 地图文档的另存为与保存的方法类似，保存前需判断保存的路径里是否存在相同的文件；</li><li>(2) 另存为需要用 IMapDocument 接口的 New 方法创建新的路径。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//地图另存为</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">btnSaveAsMap_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SaveFileDialog</span> <span class="variable">pSaveFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SaveFileDialog</span>();</span><br><span class="line">        pSaveFileDialog.Title = <span class="string">&quot;另存为&quot;</span>;</span><br><span class="line">        pSaveFileDialog.OverwritePrompt = <span class="literal">true</span>;</span><br><span class="line">        pSaveFileDialog.Filter = <span class="string">&quot;ArcMap文档（*.mxd）|*.mxd|ArcMap模板（*.mxt）|*.mxt&quot;</span>;</span><br><span class="line">        pSaveFileDialog.RestoreDirectory = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (pSaveFileDialog.ShowDialog() == DialogResult.OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">string</span> <span class="variable">sFilePath</span> <span class="operator">=</span> pSaveFileDialog.FileName;</span><br><span class="line"></span><br><span class="line">            <span class="type">IMapDocument</span> <span class="variable">pMapDocument</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapDocumentClass</span>();</span><br><span class="line">            pMapDocument.New(sFilePath);</span><br><span class="line">            pMapDocument.ReplaceContents(mainMapControl.Map as IMxdContents);</span><br><span class="line">            pMapDocument.Save(<span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">            pMapDocument.Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//也可以使用 ArcGIS Engine 中封装好的类库资源 ControlsSaveAsDocCommandClass 实现地图文档的另存为：</span></span><br><span class="line">    <span class="comment">//ICommand command = new ControlsSaveAsDocCommandClass();</span></span><br><span class="line">    <span class="comment">//command.OnCreate(mainMapControl.Object);</span></span><br><span class="line">    <span class="comment">//command.OnClick();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArcGIS </tag>
            
            <tag> AE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github 搭建个人博客（小白版图文教程）</title>
      <link href="/Hexo-Github-build-blog-so-easy.html"/>
      <url>/Hexo-Github-build-blog-so-easy.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p id="div-border-left-red">本人技术小白，折腾了两天时间，看遍了网上各种各样杂乱的教程，走了很多弯路，终于成功搭建出来了个人博客。等到结束的那一刻，心里很是开心。回想这一整个步骤，其实并不难，很简单就能掌握。有过经历，才知道好的教程的重要性。因而我将自己的经验分享出来~</p><center>![](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1497031713267&di=5c99dcb83022b7302b8c479e50fa82c4&imgtype=0&src=http%3A%2F%2Fwuchenxu.com%2F2015%2F11%2F04%2FStatic-Blog-hexo-github-1-Start%2Fhexo_github.png)<center><span id="more"></span><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>最近兴趣使然，想要搭建一个个人博客。每次看到别人拥有自己的个人主页都特别羡慕，一直想着自己有一个博客该有多好啊。就这样折腾了两天时间，看遍了网上各种各样杂乱的教程，走了很多弯路，终于成功搭建出来了。等到结束的那一刻，心里很是开心。回想这一整个步骤，其实并不难，很简单就能掌握。<br>由于自己是技术小白，很多大神写的教程看了依旧操作错误。多么希望有人能手把手的教你每一步做什么。<br>有过经历，才知道好的教程的重要性。因而我将自己建站的步骤详细记录下来，以供参考。希望后面想要建站的人不要走弯路了哦~</p><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h2 id="配置-Node-js-环境"><a href="#配置-Node-js-环境" class="headerlink" title="配置 Node.js 环境"></a>配置 Node.js 环境</h2><p>下载 <a href="http://nodejs.cn/download/">Node.js</a> 安装文件，根据自己电脑的位数，选择下载32位或者64位的：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a><br>然后安装下载的文件，保持默认设置就好了，一路点 Next ，很快就安装完成了。<br><img src="http://img.blog.csdn.net/20170609211621557" alt="图1"><br>接着检查一下 Node 是否安装好，打开运行窗口，输入 <code>cmd</code> ，打开命令行：<br><img src="http://img.blog.csdn.net/20170609211843372" alt="图2"></p><p>在命令行分别输入以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果出现下图界面，则说明 node 安装正确。可以进入下一步了。<br><img src="http://img.blog.csdn.net/20170609211856294" alt="图3"></p><h2 id="配置-Git-环境"><a href="#配置-Git-环境" class="headerlink" title="配置 Git 环境"></a>配置 Git 环境</h2><p>去官网下载 <a href="https://git-scm.com/downloads">Git</a> 安装文件:</p><ul><li><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul><p>接着进行安装，如下图，在 <code>Windows Explorer integration</code> 这一项及下边的两项都打上勾：<br><img src="http://img.blog.csdn.net/20170609212422267" alt="图4"><br><img src="http://img.blog.csdn.net/20170609212406832" alt="图5"></p><p>然后一直 Next 就可以了，安装完成后同样检查一下 Git 是否正确安装。<br><img src="http://img.blog.csdn.net/20170609212433173" alt="图6"></p><h2 id="Github账户的注册和代码库的创建"><a href="#Github账户的注册和代码库的创建" class="headerlink" title="Github账户的注册和代码库的创建"></a>Github账户的注册和代码库的创建</h2><p><a href="https://github.com/">Github</a>帐号注册，打开链接：<a href="https://github.com/%EF%BC%8C%E7%94%B3%E8%AF%B7%E4%B8%80%E4%B8%AA">https://github.com/，申请一个</a> Github 帐号；<br><img src="http://img.blog.csdn.net/20170609213100732" alt="图7"><br>注册好之后还需要确认邮箱，打开注册的邮箱，确认注册，然后进入下一步；<br>点击页面右上角自己的头像，点击下拉菜单的<code>New repository</code>，创建一个新的代码库：<br><img src="http://img.blog.csdn.net/20170609213209365" alt="图8"><br>代码库的名字最好与你的用户名相同，格式为 <code>yourname.github.io</code> ，比如我的用户名是 <code>renkaitest</code>，那我的代码库名即为 <code>renkaitest.github.io</code><br><img src="http://img.blog.csdn.net/20170609213228765" alt="图9"><br>创建成功后出现下图所示界面，点击右边的复制按钮，复制这个地址：<br><img src="http://img.blog.csdn.net/20170609213240443" alt="图10"></p><h2 id="配置-Github-pages"><a href="#配置-Github-pages" class="headerlink" title="配置 Github pages"></a>配置 Github pages</h2><p>随便找一个目录，右击鼠标，选择<code>Git Bash Here</code>，打开一个类似命令行的界面，输入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:<span class="comment">//github.com/username/username.github.io</span></span><br></pre></td></tr></table></figure><ul><li>clone 后面的链接即就是上一步复制的那个链接，比如我的就是下面的代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:<span class="comment">//github.com/renkaitest/renkaitest.github.io</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170609214138416" alt="图11"><br>然后输入 <strong><code>cd 你的代码库名</code></strong> ，例如 <code>cd renkaitest.github.io</code> ，也可以直接进入该目录下的一个名为 <code>renkaitest.github.io</code> 的文件夹。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd renkaitest.github.io</span><br></pre></td></tr></table></figure><ul><li>然后输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo <span class="string">&quot;Hello World&quot;</span> &gt; index.html</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170609214149934" alt="图12"><br>接着输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add --all</span><br><span class="line">$ git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br></pre></td></tr></table></figure><ul><li>这里会出现一个错误，是因为我们没有设置Git的 <code>user name</code> 和 <code>email</code> ，此时输入以下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">&quot;541638321@qq.com&quot;</span></span><br><span class="line">$ git config --global user.name <span class="string">&quot;renkaitest&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意：上面的 <code>name</code> 和 <code>email</code> 都要换成自己的邮箱和用户名</strong></li><li>此时继续执行以下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170609214201151" alt="图13"><br>下面 <code>push</code> 到你的代码库，输入代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><ul><li>可能会弹出以下界面让你登录，使用 Github 帐号登录即可。</li></ul><p><img src="http://img.blog.csdn.net/20170609214215276" alt="图14"><br><img src="http://img.blog.csdn.net/20170609214230716" alt="图15"><br>此时你的 Github Pages 已经配置好了，打开 <code>yourname.github,io</code> 这个网址就能看到你的博客了，yourname 替换成你自己的用户名。<br><img src="http://img.blog.csdn.net/20170609214253558" alt="图16"></p><h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><p>找一个目录，我是在 <code>d:\Hexo</code> 目录下，鼠标右击打开 <code>Git Bash Here</code>，输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170609214325905" alt="图17"><br>可能会看到一个 <strong>WARN</strong>，但是没关系的，进入下一步。<br>输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --save</span><br></pre></td></tr></table></figure><ul><li>等一段时间，他安装完之后检查一下是否安装成功，输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><ul><li>看到相关的版本信息则说明安装成功。</li></ul><h1 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h1><p>初始化 Hexo，首先需要找一个目录，这个目录即就是你的博客的所有文件存放的目录，最好路径不要太深，我选择的是 <code>D:\Hexo\blog</code> 。在这个路径下打开 <code>Git Bash Here</code> ，输入代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170609214343843" alt="图18"><br>然后输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>这里 npm 会自动帮你安装你需要的组件。<br>继续输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>生成博客。<br><img src="http://img.blog.csdn.net/20170609214354546" alt="图19"><br>输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>启动服务，会提示以下信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http:<span class="comment">//localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>在浏览器打开 <a href="http://localhost:4000/">http://localhost:4000/</a> ，将会看到自己的 hexo 博客：<br><img src="http://img.blog.csdn.net/20170609214409469" alt="图20"></p><h1 id="关联-Hexo-与-Github-Page"><a href="#关联-Hexo-与-Github-Page" class="headerlink" title="关联 Hexo 与 Github Page"></a>关联 Hexo 与 Github Page</h1><h2 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h2><p>如果你之前已经配置好git个人信息，请跳过这一个步骤，直接来到步骤2<br>设置Git的user name和email：（如果是第一次的话）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;renkaitset&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;541638321@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>生成密钥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;541638321@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170609214914554" alt="图21"><br>输入代码后一直按回车就好了，不用自己定义目录，生成的 <code>ssh</code> 会存放在 <code>C:\Users\用户名\.ssh</code> 目录下，如果找不到 <code>.ssh</code> 目录，请在文件夹选项中<strong>显示隐藏的项目</strong>。</p><h2 id="配置-SSH-密匙"><a href="#配置-SSH-密匙" class="headerlink" title="配置 SSH 密匙"></a>配置 SSH 密匙</h2><p>进入 Github 网页，点击右上角自己的头像，选择 <code>Settings</code> ：<br><img src="http://img.blog.csdn.net/20170609214925186" alt="图22"><br>配置 <code>SSH and GPG keys</code> ，点击 <code>New SSH key</code>：<br><img src="http://img.blog.csdn.net/20170609214937023" alt="图23"><br>用 txt 打开刚才生成的 Key，复制到下图所示区域，点击 <code>Add SSH key</code>：<br><img src="http://img.blog.csdn.net/20170609214946764" alt="图24"></p><h2 id="配置-Deployment"><a href="#配置-Deployment" class="headerlink" title="配置 Deployment"></a>配置 Deployment</h2><p>打开博客目录下的<strong>站点配置</strong>文件 <code>_config.yml</code> ，比如我的博客目录是 <code>D:\Hexo\blog</code>，找到该目录下的 <code>_config.yml</code>。打开他，在最末尾找到 <code>Deployment</code> ，然后按照如下修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git<span class="meta">@github</span>.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>上面的 <code>yourname</code> 都要替换成自己的用户名，以我的为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git<span class="meta">@github</span>.com:renkaitest/renkaitest.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这样就配置好了，接下来就可以写博客了。</p><h1 id="发布博文"><a href="#发布博文" class="headerlink" title="发布博文"></a>发布博文</h1><p>新建一篇博文，在博客存放的目录里面 <code>Git Bash Here</code> ，执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="title class_">post</span> <span class="string">&quot;我的第一篇博文&quot;</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170609214957601" alt="图25"><br>然后就会在电脑的目录下 <code>D:\Hexo\blog\source\_posts</code> 看到一个 <code>我的第一篇博文.md</code> 文件，使用 MarkDown 编辑这篇文章就可以了。<br>文章编辑好后，运行生成、部署命令。<br>但是此时还缺少一个扩展，因而不能部署，先要执行以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>如果没有执行这个命令，将会提醒：</p><blockquote><p>deloyer not found:git</p></blockquote><p>现在开始执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g   <span class="comment">// 生成</span></span><br><span class="line">$ hexo d   <span class="comment">// 部署</span></span><br></pre></td></tr></table></figure><p>也可以将这两个命令一起执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g    <span class="comment">//在部署前先生成</span></span><br></pre></td></tr></table></figure><p>若出现如下图所示的信息 <code>INFO  Deploy done: git</code> ，则表示部署成功，已经上传到你的代码库。<br><img src="http://img.blog.csdn.net/20170609215015570" alt="图26"><br>此时访问你的地址 <a href="https://yourname.github.io/">https://yourname.github.io</a> ，将会看到刚才写的文章了。<br><img src="http://img.blog.csdn.net/20170609215025796" alt="图27"><br><strong>注：我的主题是自己换过的，可能与你的显示结果有所不同，做到这一步，你已经成功搭建了自己的博客。已经大功告成了！恭喜你~</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以后发布博文，就是以下的步骤：</p><ul><li>写博文：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="title class_">post</span> <span class="string">&quot;博文名字&quot;</span></span><br></pre></td></tr></table></figure></li><li>生成博文：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></li><li>部署博文：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li>由于网络原因，进入你的网页可能不会立即显示最新的信息。过几分钟就好了~</li></ul>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS Engine 地图操作基础——数据加载</title>
      <link href="/ArcGIS-Engine-map-basic-load-data.html"/>
      <url>/ArcGIS-Engine-map-basic-load-data.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p id="div-border-top-green">数据加载是 ArcGIS Engine 中最基础的操作，AE 支持的数据广泛，包含矢量数据、栅格数据、CAD 数据、Excel数据等等，这些数据的加载有助于我们使用 AE 做进一步的数据处理与分析。<span id="more"></span><h1 id="加载地图文档"><a href="#加载地图文档" class="headerlink" title="加载地图文档"></a>加载地图文档</h1><p>地图文档可以是一个ArcMap文档（*.mxd）或者ArcMap模版（*.mxt）或ArcReader文件（*.pmf）。</p><p><strong>加载地图文档的方式有三种：</strong></p><ul><li><ol><li>使用 IMapControl 接口的 LoadMxFile 方法加载；</li></ol></li><li><ol start="2"><li>通过 IMapDocument 接口加载;</li></ol></li><li><ol start="3"><li>使用 ArcGIS Engine 中封装好的类库资源 ControlsOpenDocCommandClass 加载。</li></ol></li></ul><h2 id="LoadMxFile-方法加载地图文档文件"><a href="#LoadMxFile-方法加载地图文档文件" class="headerlink" title="LoadMxFile 方法加载地图文档文件"></a>LoadMxFile 方法加载地图文档文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">BtnLoadMxFile_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//加载数据前如果有数据则清空</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">OpenFileDialog</span> <span class="variable">pOpenFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenFileDialog</span>();</span><br><span class="line">        pOpenFileDialog.CheckFileExists = <span class="literal">true</span>;</span><br><span class="line">        pOpenFileDialog.Title = <span class="string">&quot;打开地图文档&quot;</span>;</span><br><span class="line">        pOpenFileDialog.Filter = <span class="string">&quot;ArcMap文档(*.mxd)|*.mxd;|ArcMap模板(*.mxt)|*.mxt|发布地图文件(*.pmf)|*.pmf|所有地图格式(*.mxd;*.mxt;*.pmf)|*.mxd;*.mxt;*.pmf&quot;</span>;</span><br><span class="line">        pOpenFileDialog.Multiselect = <span class="literal">false</span>;   <span class="comment">//不允许多个文件同时选择</span></span><br><span class="line">        pOpenFileDialog.RestoreDirectory = <span class="literal">true</span>;   <span class="comment">//存储打开的文件路径</span></span><br><span class="line">        <span class="keyword">if</span> (pOpenFileDialog.ShowDialog() == DialogResult.OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">string</span> <span class="variable">pFileName</span> <span class="operator">=</span> pOpenFileDialog.FileName;</span><br><span class="line">            <span class="keyword">if</span> (pFileName == <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mainMapControl.CheckMxFile(pFileName)) <span class="comment">//检查地图文档有效性</span></span><br><span class="line">            &#123;</span><br><span class="line">                ClearAllData();</span><br><span class="line">                mainMapControl.LoadMxFile(pFileName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(pFileName + <span class="string">&quot;是无效的地图文档!&quot;</span>, <span class="string">&quot;信息提示&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;打开地图文档失败&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关于 ClearAllData 函数:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ClearAllData</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mainMapControl.Map != <span class="literal">null</span> &amp;&amp; mainMapControl.Map.LayerCount &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//新建mainMapControl中Map</span></span><br><span class="line">        <span class="type">IMap</span> <span class="variable">dataMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapClass</span>();</span><br><span class="line">        dataMap.Name = <span class="string">&quot;Map&quot;</span>;</span><br><span class="line">        mainMapControl.DocumentFilename = string.Empty;</span><br><span class="line">        mainMapControl.Map = dataMap;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//新建EagleEyeMapControl中Map</span></span><br><span class="line">        <span class="type">IMap</span> <span class="variable">eagleEyeMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapClass</span>();</span><br><span class="line">        eagleEyeMap.Name = <span class="string">&quot;eagleEyeMap&quot;</span>;</span><br><span class="line">        EagleEyeMapControl.DocumentFilename = string.Empty;</span><br><span class="line">        EagleEyeMapControl.Map = eagleEyeMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IMapDocument-方法加载-Mxd-文档文件"><a href="#IMapDocument-方法加载-Mxd-文档文件" class="headerlink" title="IMapDocument 方法加载 Mxd 文档文件"></a>IMapDocument 方法加载 Mxd 文档文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">BtnIMapDocument_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">OpenFileDialog</span> <span class="variable">pOpenFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenFileDialog</span>();</span><br><span class="line">        pOpenFileDialog.CheckFileExists = <span class="literal">true</span>;</span><br><span class="line">        pOpenFileDialog.Title = <span class="string">&quot;打开地图文档&quot;</span>;</span><br><span class="line">        pOpenFileDialog.Filter = <span class="string">&quot;ArcMap文档(*.mxd)|*.mxd;|ArcMap模板(*.mxt)|*.mxt|发布地图文件(*.pmf)|*.pmf|所有地图格式(*.mxd;*.mxt;*.pmf)|*.mxd;*.mxt;*.pmf&quot;</span>;</span><br><span class="line">        pOpenFileDialog.Multiselect = <span class="literal">false</span>;</span><br><span class="line">        pOpenFileDialog.RestoreDirectory = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (pOpenFileDialog.ShowDialog() == DialogResult.OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">string</span> <span class="variable">pFileName</span> <span class="operator">=</span> pOpenFileDialog.FileName;</span><br><span class="line">            <span class="keyword">if</span> (pFileName == <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mainMapControl.CheckMxFile(pFileName)) <span class="comment">//检查地图文档有效性</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//将数据载入pMapDocument并与Map控件关联</span></span><br><span class="line">                <span class="type">IMapDocument</span> <span class="variable">pMapDocument</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapDocument</span>();<span class="comment">//using ESRI.ArcGIS.Carto;</span></span><br><span class="line">                pMapDocument.Open(pFileName, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="comment">//获取Map中激活的地图文档</span></span><br><span class="line">                mainMapControl.Map = pMapDocument.ActiveView.FocusMap;</span><br><span class="line">                mainMapControl.ActiveView.Refresh();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(pFileName + <span class="string">&quot;是无效的地图文档!&quot;</span>, <span class="string">&quot;信息提示&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;打开地图文档失败&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ControlsOpenDocCommandClass-加载地图"><a href="#ControlsOpenDocCommandClass-加载地图" class="headerlink" title="ControlsOpenDocCommandClass 加载地图"></a>ControlsOpenDocCommandClass 加载地图</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">BtncontrolsOpenDocCommandClass_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ICommand</span> <span class="variable">command</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ControlsOpenDocCommandClass</span>();</span><br><span class="line">    command.OnCreate(mainMapControl.Object);</span><br><span class="line">    command.OnClick();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="加载-Shapefile-数据"><a href="#加载-Shapefile-数据" class="headerlink" title="加载 Shapefile 数据"></a>加载 Shapefile 数据</h1><p>加载 Shapefile 数据的方式有两种：</p><ul><li><ol><li>通过工作空间加载；</li></ol></li><li><ol start="2"><li>通过 MapControl 空间的 AddShapefile 方法加载</li></ol></li></ul><h2 id="通过工作空间加载"><a href="#通过工作空间加载" class="headerlink" title="通过工作空间加载"></a>通过工作空间加载</h2><p><strong>实例程序实现思路：</strong></p><ul><li>(1) 创建 ShapefileWorkspaceFactory 实例 pWorkspaceFactory ，使用 IWorkspaceFactory 接口的 OpenFromFile 方法打开 pFeatureWorkspace 中存储的基于 Shapefile 的工作区。</li><li>(2) 创建 FeatureLayer 的实例 pFeatureLayer ，并定义数据集。</li><li>(3) 使用 IMap 接口的 AddLayer 方法加载 pFeatureLayer 到当前地图。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">AddShp_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//ClearAllData();</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">OpenFileDialog</span> <span class="variable">pOpenFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenFileDialog</span>();</span><br><span class="line">        pOpenFileDialog.CheckFileExists = <span class="literal">true</span>;</span><br><span class="line">        pOpenFileDialog.Title = <span class="string">&quot;打开Shape文件&quot;</span>;</span><br><span class="line">        pOpenFileDialog.Filter = <span class="string">&quot;Shape文件（*.shp）|*.shp&quot;</span>;</span><br><span class="line">        pOpenFileDialog.ShowDialog();</span><br><span class="line"></span><br><span class="line">        <span class="comment">////获取文件路径,此即为第二种方法</span></span><br><span class="line">        <span class="comment">//FileInfo pFileInfo = new FileInfo(pOpenFileDialog.FileName);</span></span><br><span class="line">        <span class="comment">//string pPath = pOpenFileDialog.FileName.Substring(0, pOpenFileDialog.FileName.Length - pFileInfo.Name.Length);</span></span><br><span class="line">        <span class="comment">//mainMapControl.AddShapeFile(pPath, pFileInfo.Name);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件路径</span></span><br><span class="line">        IWorkspaceFactory pWorkspaceFactory;</span><br><span class="line">        IFeatureWorkspace pFeatureWorkspace;</span><br><span class="line">        IFeatureLayer pFeatureLayer;</span><br><span class="line"></span><br><span class="line">        <span class="type">string</span> <span class="variable">pFullPath</span> <span class="operator">=</span> pOpenFileDialog.FileName;</span><br><span class="line">        <span class="keyword">if</span> (pFullPath == <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">pIndex</span> <span class="operator">=</span> pFullPath.LastIndexOf(<span class="string">&quot;\\&quot;</span>);</span><br><span class="line">        <span class="comment">//lastIndexOf是从字符串末尾开始检索，检索到子字符，则返回子字符在字符串中的位置，（位置从前向后数，最小位为0，也就是从第0位开始算起）未检测到则返回-1。</span></span><br><span class="line">        <span class="type">string</span> <span class="variable">pFilePath</span> <span class="operator">=</span> pFullPath.Substring(<span class="number">0</span>, pIndex); <span class="comment">//文件路径</span></span><br><span class="line">        <span class="type">string</span> <span class="variable">pFileName</span> <span class="operator">=</span> pFullPath.Substring(pIndex + <span class="number">1</span>); <span class="comment">//文件名</span></span><br><span class="line">        <span class="comment">/*substring(参数)是java中截取字符串的一个方法</span></span><br><span class="line"><span class="comment">        有两种传参方式</span></span><br><span class="line"><span class="comment">        一种是 public String substring(int beginIndex)</span></span><br><span class="line"><span class="comment">        返回一个新的字符串，它是此字符串的一个子字符串。该子字符串从指定索引处的字符开始，直到此字符串末尾。</span></span><br><span class="line"><span class="comment">        另一种是 public String substring(int beginIndex, int endIndex)</span></span><br><span class="line"><span class="comment">        返回一个新字符串，它是此字符串的一个子字符串。该子字符串从指定的 beginIndex 处开始，直到索引 endIndex - 1 处的字符。因此，该子字符串的长度为 endIndex-beginIndex。 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化ShapefileWorkspaceFactory工作空间，打开Shape文件</span></span><br><span class="line">        pWorkspaceFactory = <span class="keyword">new</span> <span class="title class_">ShapefileWorkspaceFactory</span>();</span><br><span class="line">        pFeatureWorkspace = (IFeatureWorkspace)pWorkspaceFactory.OpenFromFile(pFilePath, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//创建并实例化要素集</span></span><br><span class="line">        <span class="type">IFeatureClass</span> <span class="variable">pFeatureClass</span> <span class="operator">=</span> pFeatureWorkspace.OpenFeatureClass(pFileName);</span><br><span class="line">        pFeatureLayer = <span class="keyword">new</span> <span class="title class_">FeatureLayer</span>();</span><br><span class="line">        pFeatureLayer.FeatureClass = pFeatureClass;</span><br><span class="line">        pFeatureLayer.Name = pFeatureLayer.FeatureClass.AliasName;<span class="comment">//获取别名</span></span><br><span class="line"></span><br><span class="line">        ClearAllData();    <span class="comment">//新增删除数据</span></span><br><span class="line"></span><br><span class="line">        mainMapControl.Map.AddLayer(pFeatureLayer);<span class="comment">//加载图层</span></span><br><span class="line">        mainMapControl.ActiveView.Refresh();</span><br><span class="line">        <span class="comment">//同步鹰眼.可有可无</span></span><br><span class="line">        SynchronizeEagleEye();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;图层加载失败！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过-MapControl-空间的-AddShapefile-方法加载"><a href="#通过-MapControl-空间的-AddShapefile-方法加载" class="headerlink" title="通过 MapControl 空间的 AddShapefile 方法加载"></a>通过 MapControl 空间的 AddShapefile 方法加载</h2><blockquote><p>调用该方法需要传入两个参数，分别是文件路径和不带扩展名的文件名。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">AddShp2_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">OpenFileDialog</span> <span class="variable">pOpenFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenFileDialog</span>();</span><br><span class="line">    pOpenFileDialog.CheckFileExists = <span class="literal">true</span>;</span><br><span class="line">    pOpenFileDialog.Title = <span class="string">&quot;打开Shape文件&quot;</span>;</span><br><span class="line">    pOpenFileDialog.Filter = <span class="string">&quot;Shape文件（*.shp）|*.shp&quot;</span>;</span><br><span class="line">    pOpenFileDialog.ShowDialog();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件路径</span></span><br><span class="line">    <span class="type">FileInfo</span> <span class="variable">pFileInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInfo</span>(pOpenFileDialog.FileName);<span class="comment">//FileInfo需要using system.IO</span></span><br><span class="line">    <span class="type">string</span> <span class="variable">pPath</span> <span class="operator">=</span> pOpenFileDialog.FileName.Substring(<span class="number">0</span>, pOpenFileDialog.FileName.Length - pFileInfo.Name.Length);</span><br><span class="line">    mainMapControl.AddShapeFile(pPath, pFileInfo.Name);</span><br><span class="line">    <span class="comment">// 调用该方法需要传入两个参数，分别是文件路径和不带扩展名的文件名。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="加载栅格数据"><a href="#加载栅格数据" class="headerlink" title="加载栅格数据"></a>加载栅格数据</h1><p><strong>实例程序实现思路：</strong></p><p>在加载栅格文件时，需引用 ESRI.ArcGIS.DataSourcesRaster 命名空间。</p><ul><li>(1) 用 IWorkspaceFactory 接口的 OpenFromFile 方法获得栅格文件的工作区； </li><li>(2) 用 IRasterWorkspace 接口的 OpenRasterDataset 方法获得栅格文件的数据集，实例化栅格文件对象，并对栅格数据集是否具有金字塔进行判断（这里栅格文件如果不具有金字塔则创建金字塔，可以提高大数据量图像的显示效率）；</li><li>(3) 创建 RasterLayer 类的实例 pRasterLayer ，并定义其数据集；</li><li>(4) 使用 MapControl 控件的 AllLayer 方法将 pRasterLayer 添加至当前地图。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">AddRaster_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">OpenFileDialog</span> <span class="variable">pOpenFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenFileDialog</span>();</span><br><span class="line">    pOpenFileDialog.CheckFileExists = <span class="literal">true</span>;</span><br><span class="line">    pOpenFileDialog.Title = <span class="string">&quot;打开Raster文件&quot;</span>;</span><br><span class="line">    pOpenFileDialog.Filter = <span class="string">&quot;栅格文件 (*.*)|*.bmp;*.tif;*.jpg;*.img|(*.bmp)|*.bmp|(*.tif)|*.tif|(*.jpg)|*.jpg|(*.img)|*.img&quot;</span>;</span><br><span class="line">    pOpenFileDialog.ShowDialog();</span><br><span class="line"></span><br><span class="line">    <span class="type">string</span> <span class="variable">pRasterFileName</span> <span class="operator">=</span> pOpenFileDialog.FileName;</span><br><span class="line">    <span class="keyword">if</span> (pRasterFileName == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">string</span> <span class="variable">pPath</span> <span class="operator">=</span> System.IO.Path.GetDirectoryName(pRasterFileName);</span><br><span class="line">    <span class="type">string</span> <span class="variable">pFileName</span> <span class="operator">=</span> System.IO.Path.GetFileName(pRasterFileName);</span><br><span class="line"></span><br><span class="line">    <span class="type">IWorkspaceFactory</span> <span class="variable">pWorkspaceFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RasterWorkspaceFactory</span>();</span><br><span class="line">    <span class="type">IWorkspace</span> <span class="variable">pWorkspace</span> <span class="operator">=</span> pWorkspaceFactory.OpenFromFile(pPath, <span class="number">0</span>);</span><br><span class="line">    <span class="type">IRasterWorkspace</span> <span class="variable">pRasterWorkspace</span> <span class="operator">=</span> pWorkspace as IRasterWorkspace;</span><br><span class="line">    <span class="type">IRasterDataset</span> <span class="variable">pRasterDataset</span> <span class="operator">=</span> pRasterWorkspace.OpenRasterDataset(pFileName);</span><br><span class="line">    <span class="comment">//影像金字塔判断与创建</span></span><br><span class="line">    IRasterPyramid3 pRasPyrmid;</span><br><span class="line">    pRasPyrmid = pRasterDataset as IRasterPyramid3;</span><br><span class="line">    <span class="keyword">if</span> (pRasPyrmid != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(pRasPyrmid.Present))</span><br><span class="line">        &#123;</span><br><span class="line">            pRasPyrmid.Create(); <span class="comment">//创建金字塔</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    IRaster pRaster;</span><br><span class="line">    pRaster = pRasterDataset.CreateDefaultRaster();</span><br><span class="line">    IRasterLayer pRasterLayer;</span><br><span class="line">    pRasterLayer = <span class="keyword">new</span> <span class="title class_">RasterLayerClass</span>();</span><br><span class="line">    pRasterLayer.CreateFromRaster(pRaster);</span><br><span class="line">    mainMapControl.Map.AddLayer(pLayer);<span class="comment">//加载shp文件时是这样弄得，经过尝试这样也是可以的，具体有什么区别不可知</span></span><br><span class="line">    <span class="comment">//mainMapControl.AddLayer(pLayer, 0);//这是书上的源代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="加载-CAD-数据"><a href="#加载-CAD-数据" class="headerlink" title="加载 CAD 数据"></a>加载 CAD 数据</h1><p>对于 ArcGIS Engine 来说，有两种不同的方式使用 CAD 数据：① 作为要素图层，以矢量数据来使用；② 作为地图背景，以栅格数据来使用。对于前者， ArcGIS Engine 使用与 FeatureLayer 一样的方法来管理，对于后者则采用 CadLayer 对象来管理。</p><h2 id="CAD-文件作为矢量图层加载"><a href="#CAD-文件作为矢量图层加载" class="headerlink" title="CAD 文件作为矢量图层加载"></a>CAD 文件作为矢量图层加载</h2><h3 id="分图层加载"><a href="#分图层加载" class="headerlink" title="分图层加载"></a>分图层加载</h3><p><strong>实例程序实现思路：</strong></p><ul><li>(1) CAD 图可以分为点、线、面、标注，它们可以分别被加载到 MapControl 中。与加载其他数据一样，首先定义一个工作空间，用 CadWorkspaceFactoryClass 实例化工作空间，并打开相应的工作空间； </li><li>(2) 创建 FeatureLayer 的实例，定义数据集，使用 IMap 接口的 AddLayer 方法将要素图层添加至当前地图。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">AddCADByLayer_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    IWorkspaceFactory pWorkspaceFactory;</span><br><span class="line">    IFeatureWorkspace pFeatureWorkspace;</span><br><span class="line">    IFeatureLayer pFeatureLayer;</span><br><span class="line">    IFeatureClass pFeatureClass;</span><br><span class="line"></span><br><span class="line">    <span class="type">OpenFileDialog</span> <span class="variable">pOpenFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenFileDialog</span>();</span><br><span class="line">    pOpenFileDialog.Filter = <span class="string">&quot;CAD(*.dwg)|*.dwg&quot;</span>;</span><br><span class="line">    pOpenFileDialog.Title = <span class="string">&quot;打开CAD数据文件&quot;</span>;</span><br><span class="line">    pOpenFileDialog.ShowDialog();</span><br><span class="line"></span><br><span class="line">    <span class="type">string</span> <span class="variable">pFullPath</span> <span class="operator">=</span> pOpenFileDialog.FileName;</span><br><span class="line">    <span class="keyword">if</span> (pFullPath == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名和文件路径</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pIndex</span> <span class="operator">=</span> pFullPath.LastIndexOf(<span class="string">&quot;\\&quot;</span>);</span><br><span class="line">    <span class="type">string</span> <span class="variable">pFilePath</span> <span class="operator">=</span> pFullPath.Substring(<span class="number">0</span>, pIndex);</span><br><span class="line">    <span class="type">string</span> <span class="variable">pFileName</span> <span class="operator">=</span> pFullPath.Substring(pIndex + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    pWorkspaceFactory = <span class="keyword">new</span> <span class="title class_">CadWorkspaceFactory</span>();</span><br><span class="line">    pFeatureWorkspace = (IFeatureWorkspace)pWorkspaceFactory.OpenFromFile(pFilePath, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//加载CAD文件中的线文件</span></span><br><span class="line">    pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + <span class="string">&quot;:polyline&quot;</span>);</span><br><span class="line">    <span class="comment">//pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + &quot;:polygon&quot;);//打开多边形</span></span><br><span class="line">    <span class="comment">//pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + &quot;:point&quot;);//打开点</span></span><br><span class="line">    <span class="comment">//pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + &quot;:multipatch&quot;);//打开多面体</span></span><br><span class="line">    <span class="comment">//pFeatureClass = pFeatureWorkspace.OpenFeatureClass(pFileName + &quot;:annotation&quot;);//打开标注是这样吗？自己尝试失败，打开的是点，什么鬼？搞不懂。。。</span></span><br><span class="line">    pFeatureLayer = <span class="keyword">new</span> <span class="title class_">FeatureLayerClass</span>();</span><br><span class="line">    pFeatureLayer.Name = pFileName;</span><br><span class="line">    pFeatureLayer.FeatureClass = pFeatureClass;</span><br><span class="line"></span><br><span class="line">    ClearAllData();    <span class="comment">//新增删除数据</span></span><br><span class="line"></span><br><span class="line">    mainMapControl.Map.AddLayer(pFeatureLayer);</span><br><span class="line">    mainMapControl.ActiveView.Refresh();</span><br><span class="line">    <span class="comment">//同步鹰眼，可有可无</span></span><br><span class="line">    SynchronizeEagleEye();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整幅图加载"><a href="#整幅图加载" class="headerlink" title="整幅图加载"></a>整幅图加载</h3><p><strong>实例程序实现思路：</strong></p><ul><li>将 CAD 作为整幅图加载时，在得到相应的工作空间之后对 CAD 文件中的要素进行遍历，并判断是否为注记图层，如果是注记则需要使用 CadAnnotationLayer 对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">AddWholeCAD_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    IWorkspaceFactory pWorkspaceFactory;</span><br><span class="line">    IFeatureWorkspace pFeatureWorkspace;</span><br><span class="line">    IFeatureLayer pFeatureLayer;</span><br><span class="line">    IFeatureDataset pFeatureDataset;</span><br><span class="line"></span><br><span class="line">    <span class="type">OpenFileDialog</span> <span class="variable">pOpenFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenFileDialog</span>();</span><br><span class="line">    pOpenFileDialog.Filter = <span class="string">&quot;CAD(*.dwg)|*.dwg&quot;</span>;</span><br><span class="line">    pOpenFileDialog.Title = <span class="string">&quot;打开CAD数据文件&quot;</span>;</span><br><span class="line">    pOpenFileDialog.ShowDialog();</span><br><span class="line"></span><br><span class="line">    <span class="type">string</span> <span class="variable">pFullPath</span> <span class="operator">=</span> pOpenFileDialog.FileName;</span><br><span class="line">    <span class="keyword">if</span> (pFullPath == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名和文件路径</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pIndex</span> <span class="operator">=</span> pFullPath.LastIndexOf(<span class="string">&quot;\\&quot;</span>);</span><br><span class="line">    <span class="type">string</span> <span class="variable">pFilePath</span> <span class="operator">=</span> pFullPath.Substring(<span class="number">0</span>, pIndex);</span><br><span class="line">    <span class="type">string</span> <span class="variable">pFileName</span> <span class="operator">=</span> pFullPath.Substring(pIndex + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//打开CAD数据集</span></span><br><span class="line">    pWorkspaceFactory = <span class="keyword">new</span> <span class="title class_">CadWorkspaceFactoryClass</span>(); <span class="comment">//using ESRI.ArcGIS.DataSourcesFile;</span></span><br><span class="line">    pFeatureWorkspace = (IFeatureWorkspace)pWorkspaceFactory.OpenFromFile(pFilePath, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//打开一个要素集</span></span><br><span class="line">    pFeatureDataset = pFeatureWorkspace.OpenFeatureDataset(pFileName);</span><br><span class="line">    <span class="comment">//IFeatureClassContainer可以管理IFeatureDataset中的每个要素类</span></span><br><span class="line">    <span class="type">IFeatureClassContainer</span> <span class="variable">pFeatClassContainer</span> <span class="operator">=</span> (IFeatureClassContainer)pFeatureDataset;</span><br><span class="line"></span><br><span class="line">    ClearAllData();    <span class="comment">//新增删除数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对CAD文件中的要素进行遍历处理</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pFeatClassContainer.ClassCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">IFeatureClass</span> <span class="variable">pFeatClass</span> <span class="operator">=</span> pFeatClassContainer.get_Class(i);</span><br><span class="line">        <span class="comment">//如果是注记，则添加注记层</span></span><br><span class="line">        <span class="keyword">if</span> (pFeatClass.FeatureType == esriFeatureType.esriFTCoverageAnnotation)</span><br><span class="line">        &#123;</span><br><span class="line">            pFeatureLayer = <span class="keyword">new</span> <span class="title class_">CadAnnotationLayerClass</span>();</span><br><span class="line">            pFeatureLayer.Name = pFeatClass.AliasName;</span><br><span class="line">            pFeatureLayer.FeatureClass = pFeatClass;</span><br><span class="line">            mainMapControl.Map.AddLayer(pFeatureLayer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//如果是点、线、面则添加要素层</span></span><br><span class="line">        &#123;</span><br><span class="line">            pFeatureLayer = <span class="keyword">new</span> <span class="title class_">FeatureLayerClass</span>();</span><br><span class="line">            pFeatureLayer.Name = pFeatClass.AliasName;</span><br><span class="line">            pFeatureLayer.FeatureClass = pFeatClass;</span><br><span class="line">            mainMapControl.Map.AddLayer(pFeatureLayer);</span><br><span class="line">        &#125;</span><br><span class="line">        mainMapControl.ActiveView.Refresh();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//同步鹰眼，可有可无</span></span><br><span class="line">    SynchronizeEagleEye();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CAD-文件作为栅格图层加载"><a href="#CAD-文件作为栅格图层加载" class="headerlink" title="CAD 文件作为栅格图层加载"></a>CAD 文件作为栅格图层加载</h2><p><strong>实例程序实现思路：</strong></p><ul><li>(1) 用 IWorkspaceFactory 接口的 OpenFromFile 方法获得 CAD 文件的工作区； </li><li>(2) 用 ICadDrawingWorkspace 接口的 OpenCadDrawingDataset 方法获得 CAD 文件的数据集，并将其赋值给 CadLayerClass 类的实例对象 pCadLayer 的 CadDrawingDataset 属性；</li><li>(3) 使用 IMap 接口的 AddLayer 方法将 pCadLayer 添加至当前地图。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">AddRasterByCAD_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    IWorkspaceFactory pCadWorkspaceFactory;</span><br><span class="line">    IWorkspace pWorkspace;</span><br><span class="line">    ICadDrawingWorkspace pCadDrawingWorkspace;</span><br><span class="line">    ICadDrawingDataset pCadDrawingDataset;</span><br><span class="line">    ICadLayer pCadLayer;</span><br><span class="line"></span><br><span class="line">    <span class="type">OpenFileDialog</span> <span class="variable">pOpenFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenFileDialog</span>();</span><br><span class="line">    pOpenFileDialog.Filter = <span class="string">&quot;CAD(*.dwg)|*.dwg&quot;</span>;</span><br><span class="line">    pOpenFileDialog.Title = <span class="string">&quot;打开CAD数据文件&quot;</span>;</span><br><span class="line">    pOpenFileDialog.ShowDialog();</span><br><span class="line"></span><br><span class="line">    <span class="type">string</span> <span class="variable">pFullPath</span> <span class="operator">=</span> pOpenFileDialog.FileName;</span><br><span class="line">    <span class="keyword">if</span> (pFullPath == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名和文件路径</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pIndex</span> <span class="operator">=</span> pFullPath.LastIndexOf(<span class="string">&quot;\\&quot;</span>);</span><br><span class="line">    <span class="type">string</span> <span class="variable">pFilePath</span> <span class="operator">=</span> pFullPath.Substring(<span class="number">0</span>, pIndex);</span><br><span class="line">    <span class="type">string</span> <span class="variable">pFileName</span> <span class="operator">=</span> pFullPath.Substring(pIndex + <span class="number">1</span>);</span><br><span class="line">    pCadWorkspaceFactory = <span class="keyword">new</span> <span class="title class_">CadWorkspaceFactoryClass</span>();</span><br><span class="line"></span><br><span class="line">    pWorkspace = pCadWorkspaceFactory.OpenFromFile(pFilePath, <span class="number">0</span>);</span><br><span class="line">    pCadDrawingWorkspace = (ICadDrawingWorkspace)pWorkspace;</span><br><span class="line">    <span class="comment">//获得CAD文件的数据集</span></span><br><span class="line">    pCadDrawingDataset = pCadDrawingWorkspace.OpenCadDrawingDataset(pFileName);</span><br><span class="line">    pCadLayer = <span class="keyword">new</span> <span class="title class_">CadLayerClass</span>();</span><br><span class="line">    pCadLayer.CadDrawingDataset = pCadDrawingDataset;</span><br><span class="line">    pCadLayer.Name = pFileName;<span class="comment">//书中代码没有这一句，打开的结果是TOC面板里面没有文件的名字，故而自己添上了这一句</span></span><br><span class="line"></span><br><span class="line">    mainMapControl.Map.AddLayer(pCadLayer);</span><br><span class="line">    mainMapControl.ActiveView.Refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="加载个人地理数据库"><a href="#加载个人地理数据库" class="headerlink" title="加载个人地理数据库"></a>加载个人地理数据库</h1><p>个人地理数据库（Personal Geodatabase）使用 Micorosoft Access 文件（*.mdb）进行空间数据的存储与管理，它将不同的数据同一纳入 Access 文件中，便于数据的管理与迁移，容量限制为2GB。个人地理数据库支持单用户编辑，不支持版本管理。<br><strong>实例程序实现思路：</strong></p><ul><li>(1) 创建 AccessWorkspaceFactory 类的实例； </li><li>(2) 用 IWorkspaceFactory 接口的 OpenFromFile 方法打开 *.mdb 数据集的工作空间，对工作空间里面的数据进行加载。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">AddPersonGDB_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    IWorkspaceFactory pAccessWorkspaceFactory;</span><br><span class="line"></span><br><span class="line">    <span class="type">OpenFileDialog</span> <span class="variable">pOpenFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenFileDialog</span>();</span><br><span class="line">    pOpenFileDialog.Filter = <span class="string">&quot;Personal Geodatabase(*.mdb)|*.mdb&quot;</span>;</span><br><span class="line">    pOpenFileDialog.Title = <span class="string">&quot;打开PersonGeodatabase文件&quot;</span>;</span><br><span class="line">    pOpenFileDialog.ShowDialog();</span><br><span class="line"></span><br><span class="line">    <span class="type">string</span> <span class="variable">pFullPath</span> <span class="operator">=</span> pOpenFileDialog.FileName;</span><br><span class="line">    <span class="keyword">if</span> (pFullPath == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pAccessWorkspaceFactory = <span class="keyword">new</span> <span class="title class_">AccessWorkspaceFactory</span>(); <span class="comment">//using ESRI.ArcGIS.DataSourcesGDB;</span></span><br><span class="line">    <span class="comment">//获取工作空间</span></span><br><span class="line">    <span class="type">IWorkspace</span> <span class="variable">pWorkspace</span> <span class="operator">=</span> pAccessWorkspaceFactory.OpenFromFile(pFullPath, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    ClearAllData();    <span class="comment">//新增删除数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载工作空间里的数据</span></span><br><span class="line">    AddAllDataset(pWorkspace, mainMapControl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里对加载工作空间中数据的方法进行了封装，自定义了 AddAllDataset 函数，以便对其他空间数据库（文件地理数据库、ArcSDE 空间数据库）加载时可直接调用。</li><li>以上代码主要介绍矢量和栅格数据的加载（其实不止这两种数据格式，加载其他类型的数据也是采用相同的方法，只是采用不同的工作空间而已）。</li><li>自定义函数 AddAllDataset 核心代码如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 加载工作空间里面的要素和栅格数据</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pWorkspace&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">AddAllDataset</span><span class="params">(IWorkspace pWorkspace, AxMapControl mapControl)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">IEnumDataset</span> <span class="variable">pEnumDataset</span> <span class="operator">=</span> pWorkspace.get_Datasets(ESRI.ArcGIS.Geodatabase.esriDatasetType.esriDTAny);</span><br><span class="line">    pEnumDataset.Reset();</span><br><span class="line">    <span class="comment">//将Enum数据集中的数据一个个读到DataSet中</span></span><br><span class="line">    <span class="type">IDataset</span> <span class="variable">pDataset</span> <span class="operator">=</span> pEnumDataset.Next();</span><br><span class="line">    <span class="comment">//判断数据集是否有数据</span></span><br><span class="line">    <span class="keyword">while</span> (pDataset != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pDataset is IFeatureDataset)  <span class="comment">//要素数据集</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">IFeatureWorkspace</span> <span class="variable">pFeatureWorkspace</span> <span class="operator">=</span> (IFeatureWorkspace)pWorkspace;</span><br><span class="line">            <span class="type">IFeatureDataset</span> <span class="variable">pFeatureDataset</span> <span class="operator">=</span> pFeatureWorkspace.OpenFeatureDataset(pDataset.Name);</span><br><span class="line">            <span class="type">IEnumDataset</span> <span class="variable">pEnumDataset1</span> <span class="operator">=</span> pFeatureDataset.Subsets;</span><br><span class="line">            pEnumDataset1.Reset();</span><br><span class="line">            <span class="type">IGroupLayer</span> <span class="variable">pGroupLayer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroupLayerClass</span>();</span><br><span class="line">            pGroupLayer.Name = pFeatureDataset.Name;</span><br><span class="line">            <span class="type">IDataset</span> <span class="variable">pDataset1</span> <span class="operator">=</span> pEnumDataset1.Next();</span><br><span class="line">            <span class="keyword">while</span> (pDataset1 != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (pDataset1 is IFeatureClass)  <span class="comment">//要素类</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">IFeatureLayer</span> <span class="variable">pFeatureLayer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FeatureLayerClass</span>();</span><br><span class="line">                    pFeatureLayer.FeatureClass = pFeatureWorkspace.OpenFeatureClass(pDataset1.Name);</span><br><span class="line">                    <span class="keyword">if</span> (pFeatureLayer.FeatureClass != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        pFeatureLayer.Name = pFeatureLayer.FeatureClass.AliasName;</span><br><span class="line">                        pGroupLayer.Add(pFeatureLayer);</span><br><span class="line">                        mapControl.Map.AddLayer(pFeatureLayer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                pDataset1 = pEnumDataset1.Next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pDataset is IFeatureClass) <span class="comment">//要素类</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">IFeatureWorkspace</span> <span class="variable">pFeatureWorkspace</span> <span class="operator">=</span> (IFeatureWorkspace)pWorkspace;</span><br><span class="line">            <span class="type">IFeatureLayer</span> <span class="variable">pFeatureLayer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FeatureLayerClass</span>();</span><br><span class="line">            pFeatureLayer.FeatureClass = pFeatureWorkspace.OpenFeatureClass(pDataset.Name);</span><br><span class="line"></span><br><span class="line">            pFeatureLayer.Name = pFeatureLayer.FeatureClass.AliasName;</span><br><span class="line">            mapControl.Map.AddLayer(pFeatureLayer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pDataset is IRasterDataset) <span class="comment">//栅格数据集</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">IRasterWorkspaceEx</span> <span class="variable">pRasterWorkspace</span> <span class="operator">=</span> (IRasterWorkspaceEx)pWorkspace;</span><br><span class="line">            <span class="type">IRasterDataset</span> <span class="variable">pRasterDataset</span> <span class="operator">=</span> pRasterWorkspace.OpenRasterDataset(pDataset.Name);</span><br><span class="line">            <span class="comment">//影像金字塔判断与创建</span></span><br><span class="line">            IRasterPyramid3 pRasPyrmid;</span><br><span class="line">            pRasPyrmid = pRasterDataset as IRasterPyramid3;</span><br><span class="line">            <span class="keyword">if</span> (pRasPyrmid != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(pRasPyrmid.Present))</span><br><span class="line">                &#123;</span><br><span class="line">                    pRasPyrmid.Create(); <span class="comment">//创建金字塔</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">IRasterLayer</span> <span class="variable">pRasterLayer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RasterLayerClass</span>();</span><br><span class="line">            pRasterLayer.CreateFromDataset(pRasterDataset);</span><br><span class="line">            <span class="type">ILayer</span> <span class="variable">pLayer</span> <span class="operator">=</span> pRasterLayer as ILayer;</span><br><span class="line">            mapControl.AddLayer(pLayer, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pDataset = pEnumDataset.Next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapControl.ActiveView.Refresh();</span><br><span class="line">    <span class="comment">//同步鹰眼</span></span><br><span class="line">    SynchronizeEagleEye();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="加载文件地理数据库数据"><a href="#加载文件地理数据库数据" class="headerlink" title="加载文件地理数据库数据"></a>加载文件地理数据库数据</h1><p>文件地理数据库（File Geodatabase）是以文件夹形式存储各种类型的 GIS 数据集，可以存储、查询和管理空间数据和非空间数据，支持的地理数据库的大小最大为 1 TB。文件地理数据库支持单用户编辑，不支持版本管理。<br><strong>实例程序实现思路：</strong></p><ul><li>(1) 由于文件地理数据库是以文件夹的形式存在的，因此可以使用 FolderBrowserDialog 选择文件夹进行加载。首先创建 FileGDBWorkspaceFactoryClass 类的实例； </li><li>(2) 用 IWorkspaceFactory 接口的 OpenFromFile 方法打开文件地理数据库的工作空间，对工作空间里面的数据进行加载。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#region 加载文件地理数据库数据</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">AddFileDatabase_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    IWorkspaceFactory pFileGDBWorkspaceFactory;</span><br><span class="line"></span><br><span class="line">    <span class="type">FolderBrowserDialog</span> <span class="variable">dlg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FolderBrowserDialog</span>();</span><br><span class="line">    <span class="keyword">if</span> (dlg.ShowDialog() != DialogResult.OK) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">string</span> <span class="variable">pFullPath</span> <span class="operator">=</span> dlg.SelectedPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pFullPath == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pFileGDBWorkspaceFactory = <span class="keyword">new</span> <span class="title class_">FileGDBWorkspaceFactoryClass</span>(); <span class="comment">//using ESRI.ArcGIS.DataSourcesGDB;</span></span><br><span class="line"></span><br><span class="line">    ClearAllData();    <span class="comment">//新增删除数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取工作空间</span></span><br><span class="line">    <span class="type">IWorkspace</span> <span class="variable">pWorkspace</span> <span class="operator">=</span> pFileGDBWorkspaceFactory.OpenFromFile(pFullPath, <span class="number">0</span>);</span><br><span class="line">    AddAllDataset(pWorkspace, mainMapControl);</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure><h1 id="加载-ArcSDE-空间数据库数据"><a href="#加载-ArcSDE-空间数据库数据" class="headerlink" title="加载 ArcSDE 空间数据库数据"></a>加载 ArcSDE 空间数据库数据</h1><p>ArcSDE（Spatial Database Engine，空间搜索引擎）是在现有的关系型数据库上进行的空间扩展，它使空间数据能保存在关系数据库中（如 Oracle、SQLServer等）。ArcSDE 空间数据库的一个重要特点是支持多用户并发操作，并且可以通过版本来表现空间数据编辑的状态。</p><blockquote><p>ArcSDE 的组成：</p><ol><li><strong>ArcSDE 服务器管理进程</strong>负责维护 ArcSDE 和监听来自客户端的连接请求。ArcSDE 启动就是启动 ArcSDE 服务器管理进程，利用管理员账户管理 ArcSDE 与 RDBMS 的连接，处理客户端的连接请求。</li><li><strong>专用服务器进程</strong>由 ArcSDE 服务器管理进程穿件，用于每一个特定的客户端应用程序与数据库的连接。</li><li><strong>ArcSDE 客户端</strong>通过 ArcSDE 服务器管理进程和专用服务器进程建立和 RDBMS 的连接，实现对数据库的操作。</li></ol></blockquote><blockquote><p>ArcSDE 提供了应用服务器连接和直接连接两种连接方式。当服务器性能较好时可采用应用服务器连接，否则采用直接连接。为了减轻服务器的压力，建议采用直接连接的方式进行连接。</p><p>两种连接方式的异同：直接连接就是通过 ArcSDE 访问数据表，并在本地完成对数据的各种操作（如空间分析、编辑等）；而应用服务器连接就是通过 ArcSDE 访问数据表后，在服务器端完成对数据的各种操作，再把操作结果返回客户端。</p></blockquote><p><strong>实例程序实现思路：</strong></p><ul><li>(1) 创建 SDEWorksapceFactoryClass 类的实例； </li><li>(2) 通过 SDE 连接的连接属性打开 SDE 数据库的工作空间，对工作空间里面的数据进行加载。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"># 这里以基于 Oracle 11g 的 ArcSDE <span class="number">10.0</span> 连接为例对两种连接方式进行说明。</span><br><span class="line">#region 加载 ArcSDE 数据库</span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 服务器连接</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">AddSDEByService_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    IWorkspace pWorkspace;</span><br><span class="line">    pWorkspace = arcSDEWorkspaceOpen(<span class="string">&quot;192.168.70.110&quot;</span>, <span class="string">&quot;esri_sde&quot;</span>, <span class="string">&quot;sde&quot;</span>, <span class="string">&quot;sde&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;SDE.DEFAULT&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果工作空间不为空则进行加载</span></span><br><span class="line">    <span class="keyword">if</span> (pWorkspace != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        AddAllDataset(pWorkspace, mainMapControl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 直连</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">AddSDEByDirect_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    IWorkspace pWorkspace;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果工作空间不为空则进行加载</span></span><br><span class="line">    <span class="keyword">if</span> (pWorkspace != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        AddAllDataset(pWorkspace, mainMapControl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 通过SDE连接打开SDE数据库</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;server&quot;&gt;服务器IP&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;instance&quot;&gt;数据库实例，应用服务器连接为：5151或esri_sde，直连为sde:oracle11g:orcl(orcl为服务名)&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;user&quot;&gt;SDE用户名&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;password&quot;&gt;用户密码&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;database&quot;&gt;数据库&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;version&quot;&gt;SDE版本，缺省为&quot;SDE.DEFAULT&quot;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="keyword">private</span> IWorkspace <span class="title function_">arcSDEWorkspaceOpen</span><span class="params">(string server, string instance, string user, string password, string database, string version)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">IWorkspace</span> <span class="variable">pWorkSpace</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//创建和实例化数据集</span></span><br><span class="line">    <span class="type">IPropertySet</span> <span class="variable">pPropertySet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertySetClass</span>();</span><br><span class="line">    pPropertySet.SetProperty(<span class="string">&quot;SERVER&quot;</span>, server);</span><br><span class="line">    pPropertySet.SetProperty(<span class="string">&quot;INSTANCE&quot;</span>, instance);</span><br><span class="line">    pPropertySet.SetProperty(<span class="string">&quot;USER&quot;</span>, user);</span><br><span class="line">    pPropertySet.SetProperty(<span class="string">&quot;PASSWORD&quot;</span>, password);</span><br><span class="line">    pPropertySet.SetProperty(<span class="string">&quot;DATABASE&quot;</span>, database);</span><br><span class="line">    pPropertySet.SetProperty(<span class="string">&quot;VERSION&quot;</span>, version);</span><br><span class="line">    <span class="type">IWorkspaceFactory2</span> <span class="variable">pWorkspaceFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SdeWorkspaceFactoryClass</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        pWorkSpace = pWorkspaceFactory.Open(pPropertySet, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pWorkSpace;</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure><h1 id="加载文本文件数据"><a href="#加载文本文件数据" class="headerlink" title="加载文本文件数据"></a>加载文本文件数据</h1><p>野外测量的数据通常为含有 X、Y 坐标的 Excel 文件或者文本文件。<br><strong>实例程序实现思路：</strong></p><ul><li>(1) 根据 Excel 或者 *.txt 文件等获取点的坐标信息； </li><li>(2) 根据点的坐标创建 Shapefile 图层；</li><li>(3) 加载该 Shapefile 图层。</li></ul><h2 id="坐标信息的提取"><a href="#坐标信息的提取" class="headerlink" title="坐标信息的提取"></a>坐标信息的提取</h2><ul><li>(1) 创建一个点结构，进行点信息的存储。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct CPoint</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> string Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> X;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> Y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>(2) 创建并实例化一个 CPoint 类型的数组，将所有的点信息进行存储。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">List&lt;string&gt; pColumns = <span class="keyword">new</span> <span class="title class_">List</span>&lt;string&gt;();</span><br><span class="line"><span class="keyword">private</span> List&lt;CPoint&gt; <span class="title function_">GetPoints</span><span class="params">(string surveyDataFullName)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;CPoint&gt; pList = <span class="keyword">new</span> <span class="title class_">List</span>&lt;CPoint&gt;();</span><br><span class="line">        <span class="type">char</span>[] charArray = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123; <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span> &#125;;   <span class="comment">//常用的分隔符为逗号、空格、制表符</span></span><br><span class="line">        <span class="comment">//文本信息读取</span></span><br><span class="line">        <span class="type">FileStream</span> <span class="variable">fs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileStream</span>(surveyDataFullName, FileMode.Open);</span><br><span class="line">        <span class="type">StreamReader</span> <span class="variable">sr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamReader</span>(fs, Encoding.Default);</span><br><span class="line">        <span class="type">string</span> <span class="variable">strLine</span> <span class="operator">=</span> sr.ReadLine();</span><br><span class="line">        <span class="keyword">if</span> (strLine != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            string[] strArray = strLine.Split(charArray);</span><br><span class="line">            <span class="keyword">if</span> (strArray.Length &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strArray.Length; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    pColumns.Add(strArray[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((strLine= sr.ReadLine())!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//点信息的读取</span></span><br><span class="line">                strArray = strLine.Split(charArray);</span><br><span class="line">                <span class="type">CPoint</span> <span class="variable">pCPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CPoint</span>();</span><br><span class="line">                pCPoint.Name = strArray[<span class="number">0</span>].Trim();</span><br><span class="line">                pCPoint.X = Convert.ToDouble(strArray[<span class="number">1</span>]);</span><br><span class="line">                pCPoint.Y = Convert.ToDouble(strArray[<span class="number">2</span>]);</span><br><span class="line">            </span><br><span class="line">                pList.Add(pCPoint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sr.Close();</span><br><span class="line">        <span class="keyword">return</span> pList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(ex.Message);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根据点坐标创建-Shapefile-图层"><a href="#根据点坐标创建-Shapefile-图层" class="headerlink" title="根据点坐标创建 Shapefile 图层"></a>根据点坐标创建 Shapefile 图层</h2><ul><li>(1) 创建表的工作空间，通过 IFields、IFieldsEdit、IField 等接口创建属性字段，添加到要素集中。</li><li>(2) 根据获得的点坐标信息为属性字段赋值，进而得到图层的要素集。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IFeatureLayer <span class="title function_">CreateShpFromPoints</span><span class="params">(List&lt;CPoint&gt; cPointList, string filePath)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> filePath.LastIndexOf(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">    <span class="type">string</span> <span class="variable">folder</span> <span class="operator">=</span> filePath.Substring(<span class="number">0</span>, index);<span class="comment">//路径切分得到文件夹名</span></span><br><span class="line">    <span class="type">string</span> <span class="variable">shapeName</span> <span class="operator">=</span> filePath.Substring(index + <span class="number">1</span>);  <span class="comment">//路径切分得到文件名</span></span><br><span class="line">    <span class="type">IWorkspaceFactory</span> <span class="variable">pWSF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShapefileWorkspaceFactoryClass</span>();</span><br><span class="line">    <span class="type">IFeatureWorkspace</span> <span class="variable">pFWS</span> <span class="operator">=</span> (IFeatureWorkspace)pWSF.OpenFromFile(folder, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">IFields</span> <span class="variable">pFields</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FieldsClass</span>();</span><br><span class="line">    IFieldsEdit pFieldsEdit;</span><br><span class="line">    pFieldsEdit = (IFieldsEdit)pFields;</span><br><span class="line"></span><br><span class="line">    <span class="type">IField</span> <span class="variable">pField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FieldClass</span>();</span><br><span class="line">    <span class="type">IFieldEdit</span> <span class="variable">pFieldEdit</span> <span class="operator">=</span> (IFieldEdit)pField;</span><br><span class="line">    pFieldEdit.Name_2 = <span class="string">&quot;Shape&quot;</span>;</span><br><span class="line">    pFieldEdit.Type_2 = esriFieldType.esriFieldTypeGeometry;</span><br><span class="line">    <span class="type">IGeometryDef</span> <span class="variable">pGeometryDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GeometryDefClass</span>();</span><br><span class="line">    <span class="type">IGeometryDefEdit</span> <span class="variable">pGDefEdit</span> <span class="operator">=</span> (IGeometryDefEdit)pGeometryDef;</span><br><span class="line">    pGDefEdit.GeometryType_2 = esriGeometryType.esriGeometryPoint;</span><br><span class="line">    <span class="comment">//定义坐标系</span></span><br><span class="line">    <span class="type">ISpatialReferenceFactory</span> <span class="variable">pSRF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpatialReferenceEnvironmentClass</span>();</span><br><span class="line">    <span class="type">ISpatialReference</span> <span class="variable">pSpatialReference</span> <span class="operator">=</span> pSRF.CreateGeographicCoordinateSystem((<span class="type">int</span>)esriSRGeoCSType.esriSRGeoCS_Beijing1954);</span><br><span class="line">    pGDefEdit.SpatialReference_2 = pSpatialReference;</span><br><span class="line"></span><br><span class="line">    pFieldEdit.GeometryDef_2 = pGeometryDef;</span><br><span class="line">    pFieldsEdit.AddField(pField);</span><br><span class="line">    </span><br><span class="line">    IFeatureClass pFeatureClass;</span><br><span class="line">    pFeatureClass = pFWS.CreateFeatureClass(shapeName, pFields, <span class="literal">null</span>, <span class="literal">null</span>, esriFeatureType.esriFTSimple, <span class="string">&quot;Shape&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">IPoint</span> <span class="variable">pPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PointClass</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; cPointList.Count; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        pPoint.X = cPointList[j].X;</span><br><span class="line">        pPoint.Y = cPointList[j].Y;</span><br><span class="line"></span><br><span class="line">        <span class="type">IFeature</span> <span class="variable">pFeature</span> <span class="operator">=</span> pFeatureClass.CreateFeature();</span><br><span class="line">        pFeature.Shape = pPoint;</span><br><span class="line">        pFeature.Store();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">IFeatureLayer</span> <span class="variable">pFeatureLayer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FeatureLayerClass</span>();</span><br><span class="line">    pFeatureLayer.Name = shapeName;</span><br><span class="line">    pFeatureLayer.FeatureClass = pFeatureClass;</span><br><span class="line">    <span class="keyword">return</span> pFeatureLayer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shapefile-图层的加载"><a href="#Shapefile-图层的加载" class="headerlink" title="Shapefile 图层的加载"></a>Shapefile 图层的加载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">btnCreate_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ValidateTxtbox())</span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;CPoint&gt; pCPointList = GetPoints(txtSource.Text);</span><br><span class="line">        <span class="keyword">if</span> (pCPointList == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;所选文件为空，请重新选择！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">IFeatureLayer</span> <span class="variable">pFeatureLayer</span> <span class="operator">=</span> CreateShpFromPoints(pCPointList, txtSave.Text);</span><br><span class="line">            buddyMap.Map.AddLayer(pFeatureLayer);</span><br><span class="line">            <span class="built_in">this</span>.Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><p>根据上述 ArcGIS Engine 加载几种常用的数据源的方法，可以看出 ArcGIS Engine 加载空间数据一般具有以下五个步骤：</p><blockquote><ol><li>创建数据对应的工作空间工厂（WorkspaceFactory）；</li><li>使用 WorkspaceFactory 创建要加载数据的工作空间（Workspace）;</li><li>使用 Workspace 打开并得到图层的数据集 DataSet ;</li><li>将 DataSet 赋值给新建图层的数据源；</li><li>添加图层到 MapControl。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArcGIS </tag>
            
            <tag> AE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2014年赴中科院安塞水土保持综合试验站三下乡视频</title>
      <link href="/video-for-ansai-practical-activity.html"/>
      <url>/video-for-ansai-practical-activity.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span id="inline-purple">搬运旧时视频。</span></p><img src="http://image.renkaigis.com/living/video-for-ansai-practical-activity.jpg" title="我们的暑期三下乡"><span id="more"></span><br><div align="center"><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=n0135pwyojp&auto=0" allowFullScreen="true" quality="high" width="560" height="315" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></div>配音：王亚利同学<br>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> living </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间都去哪了</title>
      <link href="/i-love-dad-and-mom.html"/>
      <url>/i-love-dad-and-mom.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span id="inline-blue">搬运旧时文章。</span></p><p id="div-border-left-red">以前太感性，太矫情。<br>现在的我，更偏向于理性。<br>但于父母，爱大于一切。<br> ——2017.08</p><span id="more"></span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;时间真的过得好快啊，眨眼，寒假就过完了，眨眼，我已是奔三的年纪。时间都去了哪儿，将我身边的人慢慢变老。<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看着爸妈对我呵护备至，想起他们对我的一点一滴，再看到妈妈眼角的皱纹，我总是对自己说，我一定要对他们好，我一定不要再淘气了。因为我爱他们！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;妈妈总是要我隔三差五就给她打电话，因为她想我，她想我过得好不好，有没有生病，有没有什么不顺，只想和我说说话，就足够了。这便是爱，我们谁都不愿意说出口，但却能从只言片语中深切感受得到。我想，再也没有一个人像妈妈这样对我好的了，这世界上有妈妈在时刻想念着我，想念着他的儿子。我爱我的妈妈，但我不说出来，我能做到的就是不惹她生气，不给她添麻烦。去年暑假妈妈让我把一周岁的照片给她的手机做屏保，还给我讲很多我小时候的事，或许只有妈妈才能记得我小时候的每一个瞬间吧，即使我自己已经渐渐遗忘了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总是听到妈妈从百里之外的家中电话告诉我，我不想你回家，我不要你回家。因为你回一次家，我的心就会痛一次。她总是不忍分别的那一刻，她告诉我，她在看到我坐上去往西安的高客后，心就一阵一阵的痛，一直看到车驶出视野，才一路哭着回了家。晚上到我的房间，一摸被子没有人，再摸还是没有人，整间屋子空荡荡的，就又开始流泪。我听到她讲，总是不以为然的，我不懂这样的爱，但有一天我应该会懂。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我总是在别人面前提起我的妈妈怎么怎么样，却从来没有提到过爸爸。都说了，父爱是伟大的，严厉的，但我却总是不觉得，因为我和爸爸接触很少，我只是非常非常听他的话，我和妈妈犟好久的事只要他开口，我绝对执行。我继承了爸爸的性格，都是言语特别少的人，我们没有认真谈过心，也没有通过电话，只是坐在一起看看电视，爬爬山。但爸爸对我的好，我看在眼里。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我爱我的爸爸妈妈！</p><img src="http://image.renkaigis.com/living/i-love-dad-and-mom1.jpg" title="送我上大学喽！"><img src="http://image.renkaigis.com/living/i-love-dad-and-mom2.jpg" title="周岁留影"><blockquote class="blockquote-center">记忆中的小脚丫，肉嘟嘟的小嘴巴，一生把爱交给他，只为那一声爸妈。”</blockquote>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Emotion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝天净土（Video）</title>
      <link href="/video-for-lantianjingtu.html"/>
      <url>/video-for-lantianjingtu.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span id="inline-purple">搬运旧时视频。</span></p><p id="div-border-left-blue">2014年一手策划的 <span id="inline-blue">蓝天净土</span> 视频，当时制作视频的水平很 low，用的软件是会声会影，当然现在的水平还不及那时吧！<br>现在再回顾，感触颇深。对这个大家庭还是有很深的感情的，虽然后面我主动退出了，虽然现在她可能已经被“领导们”取缔了……<br>——2017.08</p><span id="more"></span><br><div align="center"><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=x0123o7jgcs&auto=0" allowFullScreen="true" quality="high" width="560" height="315" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></div><br>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> living </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【书评】穆斯林的葬礼</title>
      <link href="/view-of-muslim-funeral.html"/>
      <url>/view-of-muslim-funeral.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span id="inline-blue">搬运旧时文章。</span><br>年轻时的我，还是个文艺小青年。 ——2017.08</p><p id="div-border-left-yellow">速葬、薄葬，是穆斯林的美德，伊斯兰教的葬礼是世界上各种族、各宗教中最简朴的葬礼，没有精美的棺木，没有华贵的寿衣，没有花里胡哨的纸车、纸轿、纸人、纸马，没有旗、锣、伞、扇的仪仗，没有吹吹打打的乐队，也没有漫天抛撒的纸钱……一心向主的穆斯林，不需要任何身外之物来粉饰自己。</p><span id="more"></span><br><p id="div-border-right-green">“一个穆斯林家族，六十年间的兴衰，三代人命运的沉浮，两个发生在不同时代、有着不同内容却又交错扭结的爱情悲剧。”两根故事线，一大家子人的悲欢离合，就这样交织重叠地，从作者笔下娓娓流出。<br><br>“一道门，隔着两个世界。”——一个是玉的世界，一个是月的世界。</p><p><br><img src="http://image.renkaigis.com/living/muslim-funeral.jpg" title="穆斯林的葬礼"></p><p><br>这是一本非常值得一读的书，精彩与感动交织……曲终掩卷，荡气回肠，久久地沉浸在书中故事情节当中，为书中人物的喜而乐，为他们的忧而愁。</p><h1 id="【人物】"><a href="#【人物】" class="headerlink" title="【人物】"></a>【人物】</h1><p><br><strong>梁亦清</strong>：“玉器梁”的传人，人性善良，安分守己，虔诚的信奉着真主，一生酷爱琢玉，玉相伴其一生，生于玉，也死于玉，如此固执又如此爱玉的一个人最终还是一口鲜血喷在了未完成的“宝船”上。一代琢玉高手，玉殒人亡，千古遗恨啊。</p><p><strong>梁君壁</strong>：年轻时的君壁是多么善良，多么单纯，多么害羞的女孩儿，还记得她很娇羞地喊着“奇哥哥”的样子，然后遭遇了父亲的变故后，子奇忍辱负重三年学艺归来，两人潦草地结为连理。当然也一直是贤妻良母，但性情变了，变暴躁了，尤其是日军侵华时与妹妹和子奇因是否逃往英国还大吵了一番，后又因为逃亡归来的子奇和冰玉有了一个女儿，而彻底将冰玉赶出家门。作为姨妈的她，对新月冷言冷语，不曾给过一分关怀，同时，毁了新月，亦毁了天星的爱情，当然也逼着子奇一步一步走向毁灭。</p><p><strong>梁冰玉</strong>：冰玉和女儿新月一样，都是有文化、有修养的知识分子，敢爱敢恨，最终在英国和姐夫子奇产生了所谓的爱情，觉得家中容不得她便弃身而去。待到三十多年后，人老珠黄的她归来时，却已物是人非，她所牵挂的所有人都死了，姐姐死了，奇哥哥死了，她最最心爱却又不曾给过母爱的女儿新月也死去了……</p><p><strong>韩子奇</strong>：易卜拉欣初到梁家，便被璀璨的珠玉所吸引，立志献身于迷人的玉器。拜梁亦清为师，改名韩子奇，两人亲如父子。然后师父死在了玉上，自己偷学技艺三年，与君壁结婚，因战乱跑到英国与冰玉产生了真正的爱情，产有一女名为新月。非常心疼小女新月，却因为自己做了对不起君壁的事而心存悔恨，低声下气的，想爱可怜的新月却是那么的难啊！最后的最后，自己守了一辈子的美玉被红卫兵们搬走了，毫无音信。临死前给心爱的冰玉写了一封信（被天星烧了），他要在死之前，对未了的情、未熄的火、未还的债、未赎的罪得以清算，要求得到那个不能忘怀的人的宽恕。精彩、神奇却又悲惨的一生就这样在疾病中结束了……</p><p><strong>韩天星</strong>：知道新月的身世，待新月极好了。可怜自己的爱情被妈妈从中拆散，为了家庭却只能忍气吞声。他看不惯妈妈对新月的态度，却也无可奈何。</p><p><strong>陈淑彦</strong>：多么好的一位姑娘，新月的好朋友，天星的好妻子。对韩家劳心劳力，深爱着木讷的天星。</p><p><strong>楚雁潮</strong>：如此如此深深地爱着新月，为了新月，他愿意做任何事情。在新月生病住院的时候，不舍昼夜地守候在她的身边，给她带来活下去的希望，激励她勇敢地活下去。可是却未能见到新月最后一面，新月就离他而去了。二十多年后的他，在新月生日这天，依旧在新月的坟前，为她拉着那曲《梁山伯与祝英台》，想念着那个他心心念念想着的人儿……</p><p><strong>姑妈</strong>：她在文中一直扮演着和事佬，就像韩家的奴仆一样为这个家操劳着、奉献着自己的一生。她早年遭遇悲惨，丈夫和儿子都被日军抓走，所幸自己得以被韩家收留，并将天星视为自己的儿子一样看待，对新月也如同亲生女儿一样疼爱有加。她也是一位心脏病人啊，可是韩家哪个人真正关心和注意过她呢，最后可怜的她在新月追问自己的生母的哭声中死于急性心肌梗塞。她从来没有心疼过自己，血肉耗尽了，心操碎了，终于倒下去了，再也没有起来。</p><p><strong>韩新月</strong>：新月，我有太多的词来形容你。你感动了我，你便是整篇文章的精魂，我宁愿相信《穆斯林的葬礼》其实便说的是你的葬礼。给我最多感动的新月，愿真主祥助你！（有太多话想说，却不知道从何说起，此处略去一千字）</p><h1 id="【书评】"><a href="#【书评】" class="headerlink" title="【书评】"></a>【书评】</h1><p><br>《穆斯林的葬礼》，书中对穆斯林的生活细节详细的加以描述，不仅仅以极重的笔墨描写穆斯林的葬礼，也详细的描述了穆斯林的婚礼。我固执的以为这场葬礼说的是新月的葬礼，这个可怜的姑娘的葬礼。</p><p>但这场葬礼却并非那么简单，书的最后韩子奇说出了一个天大的秘密 <strong>“我……不是回回！”</strong> 这也许才是真正的穆斯林的葬礼，一直虔诚信奉真主的梁家（韩家）后代身上竟然流着回、汉两族的血液啊！这可谓是对这个穆斯林家族及其沉重的打击。</p><p>看过这本书，就好像陪主人公走过了那段岁月，心灵仿佛受到了一次的洗礼。</p><p>什么是善？什么是恶？什么是丑？什么是美？什么是爱？什么是恨？</p><p>当这些与我们的心灵碰撞的时候，我们能说得清吗?</p><h1 id="【精彩段落】"><a href="#【精彩段落】" class="headerlink" title="【精彩段落】"></a>【精彩段落】</h1><br>> 楚雁潮痴痴地凝望着新月…… > 他看见新月走进燕园，穿着白色的衬衫，蓝色的长裤，手里提着沉重的皮箱和网袋…… > 他看见在未名湖畔迷路的新月，正惊喜地朝他跑来…… > 他看见在红枫掩映的湖心小岛上，新月朝他蓦然回首……> 他看见了那锁住新月的病床，听见了那刻骨铭心的话语：“老师，我们之间是……爱情吗？” > “告诉你，新月！几乎可以这样说，自从见到你的第一天，我就在悄悄地爱着你！” > “啊，那是命运，让您等着我，让我遇到您！” > “我们付出了爱，也得到了爱，爱得深沉，爱得强烈，爱得长久……” > “正因为爱得太深，才惟恐它不能长久，总有一天我会把您丢下……” > “任何时候我都不会丢下你，两个生命合在一起该有多大的力量？我扶着你、背着你、拖着你，也要向前走，走出‘阿拉斯加’，我们就有美好的明天！” > “‘人生得一知己足矣’，我已经可以死而无憾！” > “楚老师，不要为我悲伤，您对我说过：自知是一种幸运，现在我终于自知了，也算是一个幸运的人了。感谢您过去所给予我的全部关怀，但愿我今后不再打扰您了！” > 他似乎也看见了新月在最后的时刻嘴唇艰难地嚅动，听见了她痛苦的呼唤：“楚……” > “新月！我在这儿呢，在你身边！”他痴痴地回答，凝望着新月的遗体。 > 新月再也没有任何回应。她静静地躺在这最后的归宿，低垂的眼睑仿佛还在苦思，紧闭的嘴唇似乎蕴含着万语千言。谁也不知道她的灵魂在想什么，要说什么。她的脸朝向西> 方，她的主宰、她的祖先召唤着她，告别尘世的一切，到该去的地方去……]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游革命圣地延安</title>
      <link href="/travel-to-yanan.html"/>
      <url>/travel-to-yanan.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span id="inline-purple">游记篇——朝花夕拾。</span></p><img src="http://image.renkaigis.com/living/travel-to-yanan1.jpg" title="游客照"><span id="more"></span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“清明时节雨纷纷，路上行人欲断魂”，仿佛是为了迎合这句古诗，在清明这天，三秦大地上落下了一场小雨，它洗去污浊，褪去铅华，平息了城市的喧哗。<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但这场春雨并不能浇灭人们出游的热情。清明，万物都开始焕发生机，此正是外出踏青的好时节。而我，则邀好友一同去往红色革命圣地延安。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;延安，这个从小到大“耳熟”得不能再熟的地方，我终于见到了它的庐山真面目。延安依群山傍延河，宝塔山、清凉山、凤凰山三山鼎峙，黄河支流从这里流过。无论站在这个城市的哪个地方，都可以看见那座著名的“宝塔山”，以及山上随处可见的一个个圆拱形的窑洞。这里的每个角落都透露着一股宁静、幽雅、古朴而又不失厚重的气息。走在灯红酒绿的繁华市区，虽然天空中仍有小雨在淅淅沥沥地飘落，但我依旧能从中感受到这座城市的勃勃生机，它真不愧是中国革命圣地。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;清明假期，我游历了杨家岭革命旧址、枣园革命旧址、延安革命纪念馆、凤凰山革命旧址等地，我进入了曾经召开过第七次党代会的中央大礼堂，我参观了毛泽东、周恩来、朱德、杨尚昆、任弼时等重要革命人曾经居住过的窑洞，我目睹了神奇的非物质文化遗产——剪纸艺术。身处圣地延安，任红色春风肆意吹拂，身临其境的我仿佛依稀可见革命人艰苦奋斗的岁月，心中不由升起浓浓的敬意。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这一片净土，曾孕育了光照千秋的延安精神。我也终于在这片红色热土上悟得了延安精神，其实就是艰苦奋斗的精神。待到坐上返程的列车，心中只有不舍，舍不得离开这里，而更多的是舍不得和朋友分开。这一别，不知下次到延安，会是以什么原因，以什么目的，又是以什么心情，更重要的是要找寻什么样的人儿？</p><div align="right">2013年4月7日记<br>任凯</div><p><br><img src="http://or2dtuwv6.bkt.clouddn.com/living/travel-to-yanan2.jpg" title="富有陕北风情的老人"></p><img src="http://or2dtuwv6.bkt.clouddn.com/living/travel-to-yanan4.jpg" title="伟大的中国"><img src="http://or2dtuwv6.bkt.clouddn.com/living/travel-to-yanan3.jpg" title="内幕内幕！居然给自己登到院报上去了！">]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Travel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乐在西农的日子</title>
      <link href="/happy-in-nwsuaf.html"/>
      <url>/happy-in-nwsuaf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span id="inline-blue">搬运旧时文章。</span></p><img src="http://image.renkaigis.com/living/happy-in-nwsuaf3.jpg" title="雪后西农"><span id="more"></span><div align="center"><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=k0109vhy2oq&auto=0" allowFullScreen="true" quality="high" width="560" height="315" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></div><p><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;站在2012的尾巴上，我仿佛已看到2013的轨迹。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;九月份，我体会了大学的生活。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;纪律严明的军训，坑爹的各种面试，轻松愉快的团组织活动，冷死人的工程训练，集体补高数作业的星期天晚上……</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有看着别人整天满课而偷笑，为各种强迫去做的事而抱怨，为时间总是不能合理安排而头痛……</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最最重要的事是，我在漫长的三个月里和我的伙伴们用汗水和辛劳学会了舞狮，感谢我们的队长高金龙，陪我们走过每一个夜晚，感谢他悉心地指导我们的每一个动作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在，2012年即将结束，我们舞狮队联合腰鼓秧歌共给动医学院、理学院、林学院的元旦晚会上演出了三场。至此，2012年的所有演出已经告一段落。虽有缺陷和失误，但台上的掌声和尖叫告诉我们，我们的演出很成功，期待下一年的更多演出，我们会越做越好。</p><img src="http://image.renkaigis.com/living/happy-in-nwsuaf0.jpg" title="西农舞狮队集结"><div align="center"><img src="http://image.renkaigis.com/living/happy-in-nwsuaf2.jpg" title="很壮哦~不是胖！" width="320" height="534"></div><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;西农，虽坐落在杨凌这个小城镇里，但她自身就相当于一个城市一样，她包容了一切，在这里，只有你想不到的，没有她办不到的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里，我很快乐。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里，我拥有可以陪伴去自习的人，我拥有五个奇葩的舍友，我还有蓝天净土的广阔天地……</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里，有很多的高中同学们，有很多帮助我的学长学姐们，有很多很多的人……</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里，汇聚了来自全国各地的同学。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里，有各种不同的习俗文化。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;西农，她神奇的在五台山上，在南校就可以看到高大的八号楼。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;西农，她拥有亚洲第一的葡萄酒学院。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;西农，我们生活的地方。我们另外一个家。</p><p><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;期待我明天在校元旦晚会开场舞上的表演。虽然只是拿着“糖葫芦”打酱油，但我感到很荣幸。 </p><div align="center"><img src="http://image.renkaigis.com/living/happy-in-nwsuaf4.jpg" title="校元旦晚会合影（有孙大大哦）"></div><div align="center"><font color="#FF0000" size="5">2013年，迎新年，祝福西农！</font></div><br>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> living </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成长</title>
      <link href="/grow-up-18th.html"/>
      <url>/grow-up-18th.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span id="inline-blue">搬运旧时文章。</span><br><strong>谨以此文纪念我的十八岁</strong></p><span id="more"></span><hr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;匆匆，太匆匆。<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;时光流逝，岁月无痕。一眨眼，一晃神，才发现十八个年头已经过去了。从呱呱坠地咿呀学语到逐渐趋于成熟，我经历了很多很多。渐渐地，看惯了花开花败；渐渐地，看惯了阴晴圆缺；渐渐地，看惯了悲欢离合……总之，我已经在这人世间走过一遭，却来得干净，亦活得干净，没有在已逝的岁月里留下一丝痕迹。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个人都喜欢恋旧，都会将现在和过去比较，然后在记忆中搜寻已渐渐丢失的记忆碎片浅浅的怀念。我也不例外，时常陷在回忆的漩涡中无法自拔，时至今日，亦未完全成熟，毕竟还未入世，还未真正领略到社会的残酷、人心的险恶……但我喜欢做单纯的自己，很单纯地喜欢一个人，很单纯地迷恋一首歌，很单纯地行走于暗夜中……</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;禁不住想起自己成长的每个细节，虽已渐渐模糊，却也常常想起感伤满怀。隐隐记得，小学时期的自己是很淘气的男孩儿，像每个男生的童年一样活泼好动，总是三五成群的下河去捉鱼，或相约去打电玩，优哉游哉的生活，乐得自由，乐得童真！然而随着渐渐的长大，我的性格也变得内敛，沉默，不善于别人沟通，更不愿去与任何人交谈，尤其面对女生更是显得不知所措。升入高中，初期时我还和一群大男生疯玩，预计着和他们一起“混迹天涯”。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;许嵩说：“我满意于自己依旧那么的不会做人。对喜欢的人笑脸相待。对厌烦的人敷衍了事。”我想，我是和他一样，爱憎分明，不会娇柔做作，更不会虚伪的伪装自己。全倩曾经说我和邓很相像，原因是我们两个人对每个人都很好，甚至是那些极其让人厌恶的人…我只能说，这很对，但不完全对，我也有讨厌的人。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天是我的十八岁生日，度过今日，便已不再年轻，人生还有多少个十八年容得我去荒废？今日如我所愿，没有太多人知道，悄悄地过18岁，妈妈为我买了两个蛋糕，高兴的我合不拢嘴，还有那些记得我生日的朋友们，谢谢啊！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如今最大的愿望就是在即将到来的高考中我能取得让自己满意的成绩，我绝不会让我的十二年学习生涯悲剧结尾。Believe  me！我我定会创造奇迹，让自己的人生绽放光彩。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是有富裕的家底，还是有帅气的外表，还是有非凡的才华？呜呼！我什么都没有。但我有的是信心决心耐心，加油！ </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，祝我生日快乐！</p>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> living </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『我不恨你们』——感巴以战争</title>
      <link href="/novel-about-israeli-palestinian-war.html"/>
      <url>/novel-about-israeli-palestinian-war.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span id="inline-blue">搬运旧时文章。</span></p><p>高中时期随便写的一个小说。 ——2017.08</p><p id="div-border-top-purple">**背景资料**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;巴以（巴勒斯坦和以色列）冲突(The Israeli Palestinian Conflict)是中东地区冲突的热点之一，冲突的背后隐藏着深刻的历史根源，既有宗教的、文化的、民族的因素，更重要的是大国干预等外部因素，各种因素互相影响、激化，使得巴以冲突的复杂性非同一般。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2008年的平安夜，当哈马斯组织发射的50多枚火箭弹划破夜空，落在以色列南部后，几乎没有人会否认以色列将使用武力，但恐怕没人想到竟会是这样的规模：以色列对加沙地区发动大规模空袭和地面攻击造成数千人的伤亡。而以军也在战争中损失巨大。战争就在你攻我守的循环中持续到了2009年，原本就处于“冷对峙”状态的巴以局势，发展成全面的“热冲突”。这场战争，给巴以双方造成了难以估量的损失，尤其是两国人民所遭受的痛苦，一时是难以消除的。</p><span id="more"></span><blockquote class="blockquote-center">“这不过是政府间的矛盾罢了，何苦连累人民呢？”<br><br>“这儿没有水，没有电，没有面包，我们只有靠呼吸空气活着。”<br><br>——题 记</blockquote><p>普尔和他的同伴被派遣出来搜索加沙附近村庄，呼啸而过的炮火随时可能威胁到他们的性命。但他们是军人，上战场是他们的职责。</p><p>普尔不过是以色列的一名普通士兵。他此时正端着重型机枪和同伴在丛林中行走，时不时有炮弹在这附近炸开，依旧无法阻挠他们行进的脚步。</p><p>因为战争的原因，普尔已经有好几个夜晚没有睡觉了，她想念妻子和孩子，他没有尽到做丈夫和爸爸的责任。他讨厌战争，他想要一个和睦的家。</p><p>可他现在却在战场上。</p><p>丛林中的鸟儿在唱歌，树叶沙沙的在风中摇摆，炮火一如既往的在加沙地区轰隆作响。炸飞了鸟儿，扰乱了林中的宁静。</p><p>穿行在丛林中，感受到树叶刮在脸上辣辣的疼，他为自己的行为愧疚。为了所谓的国家的荣誉，出卖了人格。以色列对加沙的数天轰炸，已造成近千人死亡，可是以色列政府依旧打着和平主义的旗号面对其他国家的劝战。</p><p>走出了这大片的丛林，是一座小村庄。普尔笑了笑，他终于可以歇息一下了，他已经很累了。</p><p>他们走到一户已被炸成废墟的房内，随地躺下。他们有的在聊天，有的在翻看随身携带的杂志，有的紧张的望着外面，而普尔则眯上眼睛，开始休息。</p><p>第二天清早，和煦的阳光挥洒下来，照亮了四周。他们又要继续进行搜索工作了。</p><p>普尔架着抢，跟着同伴进入一处比较完好的住所。他发现墙角有两个人影闪动。走近一瞧，是一位老妇人和一个孩子。</p><p>普尔看着那个孩子渴望的眼神，想到了自己的两个仍在襁褓中的女儿，他们还都没有断奶。在他离开她们时，她们也刚学会叫他一声爸爸。</p><p>作为父亲的他，趁着同伴不注意，将他们藏在角落里，装作什么也没有发生的样子，就走开了。他们一家一户的搜索着可能存活的加沙人，而空中盘旋着的飞机仍在不停地空袭加沙城。</p><p>普尔仰起头，看天。浓烟包裹了四周，明媚蔚蓝的天空不复存在。忽然，他看到一架战斗机投下一枚火箭弹，而坠落的地方正是他们现在站立的地方。普尔急忙对同伴们呼喊：“快趴下。”</p><p>“轰隆”的响声已经压住了他的话语，火箭弹在他们中央炸开了。空中飞舞着人的断肢残臂，地上熊熊大火燃着了他们的衣服，猎猎作响。普尔只感到脑袋快要涨裂了，胸中沉闷得像压了几石重石。</p><p>迷迷糊糊间看到有一个人影向他走来，飘飘忽忽………</p><p><br><br></p><hr><br><br><p>头依旧痛得厉害，普尔缓缓睁开眼睛，轻微的挪动身体，可左胳膊完全没了知觉，使不上劲。</p><p>普尔发现自己现在正在一间破败的房间内，旁边站着一个小女孩。女孩蓝色的眼珠滴溜溜转着，脸上是茫然和无知，还夹杂着孩子共有的天真。</p><p>普尔微笑的看着她，眼中是说不尽的慈爱。右手颤抖的抚在女孩的脸上，温柔的抚摸着，就像丈夫抚摸妻子的脸一般。不同的是，这完全是父爱。</p><p>这使普尔再一次想到了自己的女儿，那两个只有四岁的女儿。她们也是这样的可爱，普尔经常会带她们去屋后的花园中去捉蝴蝶，她们一左一右在普尔身边，奶声奶气地喊着不太正确的发音，“爸爸……爸爸………”</p><p>那声音似乎响在耳边。</p><p>女孩看到身边的普尔醒了，连忙对着已经没了玻璃的窗子，喜悦地喊，“奶奶，这位叔叔醒了。”</p><p>从外面蹒跚地走进一位老妇人，他手中捧着一碗冒着热气的水，走到普尔身边，递过手中的碗，平静地说，“你好，先生，我是贝恩·劳德拉，谢谢你今天使我和孙女躲过了他们的搜索。你身上的伤不是很严重，但你最好不要乱动，你的胳膊大片被烧伤……和你一起来的战友都死了……唉，惨不忍睹！”</p><p>普尔试着抬起左手，可左手就是不受他的控制。普尔无奈地摇了摇头，转而笑着说：“没关系的，上帝保佑，我还活着。是你救了我吧？真不知道该怎么感谢你，劳德拉女士。”说着，他一口气喝掉了碗中的热水，温热的感觉滋养了他残损的心。</p><p>普尔忽然想起了自己的职责，面带愧疚的低声说，“真对不起，劳德拉女士。我也不想这样，我很讨厌战争。这不过是政府间的矛盾罢了，何苦连累人民呢？”</p><p>老妇人转过身，喃喃地说，“这儿没有水，没有电，没有面包，我们只有靠呼吸空气活着。你刚才喝的那杯水，也是我跑到几里外取来的。”</p><p>普尔连忙拽过身后的背包，取出两块面包递给老人和孩子。只见她们狼吞虎咽的很快就吃完了。女孩吃完后，可怜兮兮的望着普尔。普尔耸肩，示意已经没有了。</p><p>老妇人嗫懦地说，“谢谢你的面包，小伙子。我不恨你们，这只能怪领导人，是他们发起了战争，你和我们一样也是受害者。”</p><p>普尔忍痛站起身来，搀扶住老人，“劳德拉女士，感谢您能饶恕我的罪过。不过，我要走了。”</p><p>说着，脚一跛一跛的走向外面，老妇人和女孩一直望着他。</p><p>普尔走了一段，转过头深深的向这里鞠躬。然后眼睛落在了那个女孩身上，她正在喜滋滋地把玩着手中的玩具。</p><p>普尔继续向前走。身边的炮火声不间断。</p><p>突然，他的心中一震，他明显地听到有一声熟悉的炮声在身后响开了。普尔的眼睛湿润了，脑中女孩的可爱模样和老妇人的慈祥关爱一一浮现出来。</p><p>他转过身，身后的废墟在冒着浓烟，空气中散发着浓重的血腥味。普尔的眼泪似决堤的洪水，不停的流。他重重地跪在地上，手中的拳头发出叭叭的骨节磨动的轻响。</p><p>“我不恨你们……”老妇人的话语，响在耳边。普尔悔恨的用完好的右手捶着地面。</p><p>这位战场上无比坚强的军人又一次痛哭起来。</p>]]></content>
      
      
      <categories>
          
          <category> Mine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Novel </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
